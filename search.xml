<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Chat项目总结</title>
      <link href="/2024/03/26/%E8%81%8A%E5%A4%A9%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2024/03/26/%E8%81%8A%E5%A4%A9%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>刮开看看：<psw>此篇文章用于总结在聊天项目中学习到的点</psw></p><h2 id="游标翻页"><a href="#游标翻页" class="headerlink" title="游标翻页"></a>游标翻页</h2><p>游标翻页<strong>应对复杂变换的列表</strong></p><h3 id="深翻页问题"><a href="#深翻页问题" class="headerlink" title="深翻页问题"></a>深翻页问题</h3><p>我们在一般的后端开发场景中，比如管理系统，常常都会有分页条。她可以指定一页的<strong>条数</strong>以及快捷的调整<strong>页码</strong>。</p><p>现在我们假如前端想查看第11页的内容，传的值为 pageNo&#x3D;11，pageSize&#x3D;10</p><p>那么对于数据库的查询语句就是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> limit <span class="number">100</span>,<span class="number">10</span></span><br></pre></td></tr></table></figure><p>其中<code>100</code>代表需要跳过的条数，<code>10</code>代表跳过指定条数后，往后需要再取的条数。</p><p>对应就是这样的一个效果，需要在数据库的位置先读出100条，然后<strong>丢弃</strong>。丢弃完100条后，再继续取10条<strong>选用</strong>。</p><p>那么假如我们需要查询到100000条后的10条数据,  那么前面的是不是都被没用的丢弃了?</p><blockquote><p>我们经常需要定时任务全量去跑一张表的数据，普通翻页去跑的话，到后面数据量大的时候，就会越跑越慢，这就是深翻页带来的问题。</p></blockquote><h3 id="游标翻页解决深翻页问题"><a href="#游标翻页解决深翻页问题" class="headerlink" title="游标翻页解决深翻页问题"></a>游标翻页解决深翻页问题</h3><p>游标翻页可以完美的解决深翻页问题，依赖的就是我们的游标，即<code>cursor</code>。针对mysql的游标翻页，我们需要通过<code>cursor</code>快速定位到指定记录，意味着游标必须添加索引。</p><p>下面这个示例就是游标翻页的例子:  我们需要查询101-110的数据,  我们通过索引直接定位到100条的位置,  然后再取十条则是我们想要的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">100</span> <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">0</span>,<span class="number">10</span></span><br></pre></td></tr></table></figure><p>只要id这个字段有索引，就能直接定位到101这个字段，然后去10条记录。以后无论翻页到多大，通过索引直接定位到读取的位置，效率基本是一样的。这个<code>id&gt;100</code>就是我们的游标，这就是<strong>游标翻页</strong>。</p><p>前端之前传的<code>pageNo</code>字段改成了<code>cursor</code>字段。<code>cursor</code>是上一次查询结果的位置，作为下一次查询的游标，由后端返回:</p><p>那么我们则需要定义示例下面的游标类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModelProperty(&quot;页大小&quot;)</span></span><br><span class="line"><span class="meta">@Max(50)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty(&quot;游标(初始为null,后续请求附带上一次翻页的游标)&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String cursor;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;游标翻页返回&quot;)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CursorPageBaseResp</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;游标（下次翻页带上这参数）&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String cursor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;是否最后一页&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">isLast</span> <span class="operator">=</span> Boolean.FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;数据列表&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; CursorPageBaseResp&lt;T&gt; <span class="title function_">init</span><span class="params">(CursorPageBaseResp cursorPage, List&lt;T&gt; list)</span> &#123;</span><br><span class="line">        CursorPageBaseResp&lt;T&gt; cursorPageBaseResp = <span class="keyword">new</span> <span class="title class_">CursorPageBaseResp</span>&lt;T&gt;();</span><br><span class="line">        cursorPageBaseResp.setIsLast(cursorPage.getIsLast());</span><br><span class="line">        cursorPageBaseResp.setList(list);</span><br><span class="line">        cursorPageBaseResp.setCursor(cursorPage.getCursor());</span><br><span class="line">        <span class="keyword">return</span> cursorPageBaseResp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CollectionUtil.isEmpty(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; CursorPageBaseResp&lt;T&gt; <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        CursorPageBaseResp&lt;T&gt; cursorPageBaseResp = <span class="keyword">new</span> <span class="title class_">CursorPageBaseResp</span>&lt;T&gt;();</span><br><span class="line">        cursorPageBaseResp.setIsLast(<span class="literal">true</span>);</span><br><span class="line">        cursorPageBaseResp.setList(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;T&gt;());</span><br><span class="line">        <span class="keyword">return</span> cursorPageBaseResp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工具类封装"><a href="#工具类封装" class="headerlink" title="工具类封装"></a>工具类封装</h3><p>CursorUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CursorUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; CursorPageBaseResp&lt;Pair&lt;T, Double&gt;&gt; <span class="title function_">getCursorPageByRedis</span><span class="params">(CursorPageBaseReq cursorPageBaseReq, String redisKey, Function&lt;String, T&gt; typeConvert)</span> &#123;</span><br><span class="line">        Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; typedTuples;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(cursorPageBaseReq.getCursor())) &#123;<span class="comment">//第一次</span></span><br><span class="line">            typedTuples = RedisUtils.zReverseRangeWithScores(redisKey, cursorPageBaseReq.getPageSize());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            typedTuples = RedisUtils.zReverseRangeByScoreWithScores(redisKey, Double.parseDouble(cursorPageBaseReq.getCursor()), cursorPageBaseReq.getPageSize());</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Pair&lt;T, Double&gt;&gt; result = typedTuples</span><br><span class="line">                .stream()</span><br><span class="line">                .map(t -&gt; Pair.of(typeConvert.apply(t.getValue()), t.getScore()))</span><br><span class="line">                .sorted((o1, o2) -&gt; o2.getValue().compareTo(o1.getValue()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="type">String</span> <span class="variable">cursor</span> <span class="operator">=</span> Optional.ofNullable(CollectionUtil.getLast(result))</span><br><span class="line">                .map(Pair::getValue)</span><br><span class="line">                .map(String::valueOf)</span><br><span class="line">                .orElse(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">isLast</span> <span class="operator">=</span> result.size() != cursorPageBaseReq.getPageSize();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CursorPageBaseResp</span>&lt;&gt;(cursor, isLast, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; CursorPageBaseResp&lt;T&gt; <span class="title function_">getCursorPageByMysql</span><span class="params">(IService&lt;T&gt; mapper, CursorPageBaseReq request, Consumer&lt;LambdaQueryWrapper&lt;T&gt;&gt; initWrapper, SFunction&lt;T, ?&gt; cursorColumn)</span> &#123;</span><br><span class="line">        <span class="comment">//游标字段类型</span></span><br><span class="line">        Class&lt;?&gt; cursorType = LambdaUtils.getReturnType(cursorColumn);</span><br><span class="line">        LambdaQueryWrapper&lt;T&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//额外条件</span></span><br><span class="line">        initWrapper.accept(wrapper);</span><br><span class="line">        <span class="comment">//游标条件</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(request.getCursor())) &#123;</span><br><span class="line">            wrapper.lt(cursorColumn, parseCursor(request.getCursor(), cursorType));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//游标方向</span></span><br><span class="line">        wrapper.orderByDesc(cursorColumn);</span><br><span class="line"></span><br><span class="line">        Page&lt;T&gt; page = mapper.page(request.plusPage(), wrapper);</span><br><span class="line">        <span class="comment">//取出游标</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cursor</span> <span class="operator">=</span> Optional.ofNullable(CollectionUtil.getLast(page.getRecords()))</span><br><span class="line">                .map(cursorColumn)</span><br><span class="line">                .map(CursorUtils::toCursor)</span><br><span class="line">                .orElse(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//判断是否最后一页</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">isLast</span> <span class="operator">=</span> page.getRecords().size() != request.getPageSize();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CursorPageBaseResp</span>&lt;&gt;(cursor, isLast, page.getRecords());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">toCursor</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Date) &#123;</span><br><span class="line">            <span class="keyword">return</span> String.valueOf(((Date) o).getTime());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> o.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title function_">parseCursor</span><span class="params">(String cursor, Class&lt;?&gt; cursorClass)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Date.class.isAssignableFrom(cursorClass)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(Long.parseLong(cursor));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> cursor;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LambdaUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字段映射</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Map&lt;String, ColumnCache&gt;&gt; COLUMN_CACHE_MAP = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SerializedLambda 反序列化缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, WeakReference&lt;com.baomidou.mybatisplus.core.toolkit.support.SerializedLambda&gt;&gt; FUNC_CACHE = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Pattern</span> <span class="variable">RETURN_TYPE_PATTERN</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\(.*\\)L(.*);&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Pattern</span> <span class="variable">PARAMETER_TYPE_PATTERN</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\((.*)\\).*&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> WeakConcurrentMap&lt;String, SerializedLambda&gt; cache = <span class="keyword">new</span> <span class="title class_">WeakConcurrentMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Lambda表达式返回类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; getReturnType(Serializable serializable) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">expr</span> <span class="operator">=</span> _resolve(serializable).getInstantiatedMethodType();</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> RETURN_TYPE_PATTERN.matcher(expr);</span><br><span class="line">        <span class="keyword">if</span> (!matcher.find() || matcher.groupCount() != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;获取Lambda信息失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> matcher.group(<span class="number">1</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Class.forName(className);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;无法加载类&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Class&lt;?&gt; getReturnType(SFunction&lt;T, ?&gt; func) &#123;</span><br><span class="line">        com.baomidou.mybatisplus.core.toolkit.support.<span class="type">SerializedLambda</span> <span class="variable">lambda</span> <span class="operator">=</span> com.baomidou.mybatisplus.core.toolkit.LambdaUtils.resolve(func);</span><br><span class="line">        Class&lt;?&gt; aClass = lambda.getInstantiatedType();</span><br><span class="line">        <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> PropertyNamer.methodToProperty(lambda.getImplMethodName());</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> aClass.getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> field.getType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Lambda表达式的参数类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Class&lt;?&gt;&gt; getParameterTypes(Serializable serializable) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">expr</span> <span class="operator">=</span> _resolve(serializable).getInstantiatedMethodType();</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> PARAMETER_TYPE_PATTERN.matcher(expr);</span><br><span class="line">        <span class="keyword">if</span> (!matcher.find() || matcher.groupCount() != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;获取Lambda信息失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        expr = matcher.group(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(expr.split(<span class="string">&quot;;&quot;</span>))</span><br><span class="line">                .filter(StrUtil::isNotBlank)</span><br><span class="line">                .map(s -&gt; s.replace(<span class="string">&quot;L&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>))</span><br><span class="line">                .map(s -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> Class.forName(s);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;无法加载类&quot;</span>, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析lambda表达式,加了缓存。</span></span><br><span class="line"><span class="comment">     * 该缓存可能会在任意不定的时间被清除。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 通过反射调用实现序列化接口函数对象的writeReplace方法，从而拿到&#123;<span class="doctag">@link</span> SerializedLambda&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 该对象中包含了lambda表达式的所有信息。</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> func 需要解析的 lambda 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回解析后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SerializedLambda <span class="title function_">_resolve</span><span class="params">(Serializable func)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cache.computeIfAbsent(func.getClass().getName(), (key)</span><br><span class="line">                -&gt; ReflectUtil.invoke(func, <span class="string">&quot;writeReplace&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请求上下文RequestHolder"><a href="#请求上下文RequestHolder" class="headerlink" title="请求上下文RequestHolder"></a>请求上下文RequestHolder</h2><p>对于登录的用户，我们会将uid设置为请求属性，在CollectorInterceptor中统一收集。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectorInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span>, WebMvcConfigurer &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="built_in">this</span>)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">RequestInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestInfo</span>();</span><br><span class="line">        info.setUid(Optional.ofNullable(request.getAttribute(TokenInterceptor.ATTRIBUTE_UID)).map(Object::toString).map(Long::parseLong).orElse(<span class="literal">null</span>));</span><br><span class="line">        info.setIp(ServletUtil.getClientIP(request));</span><br><span class="line">        RequestHolder.set(info);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        RequestHolder.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> 游标翻页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式锁封装</title>
      <link href="/2024/03/13/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%B0%81%E8%A3%85/"/>
      <url>/2024/03/13/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h1><h2 id="声明式分布式锁"><a href="#声明式分布式锁" class="headerlink" title="声明式分布式锁"></a>声明式分布式锁</h2><p>对于样例代码，很容易看出来，这是一个声明式的分布式锁实现，复用性很差，下次还需要用到分布式锁还需要像这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserBackpackDao userBackpackDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acquireItem</span><span class="params">(Long uid, Long itemId, IdempotentEnum idempotentEnum, String businessId)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">idempotent</span> <span class="operator">=</span> getIdempotent(itemId, idempotentEnum, businessId); <span class="comment">// 根据幂等号 构造分布式锁</span></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;acquireItem&quot;</span> + idempotent);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> lock.tryLock();</span><br><span class="line">    AssertUtil.isTrue(b, <span class="string">&quot;请求太频繁了&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">UserBackpack</span> <span class="variable">backpack</span> <span class="operator">=</span> userBackpackDao.getIdempotent(idempotent);<span class="comment">// 判断幂等是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(backpack)) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 不需要给任何异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 发放物品</span></span><br><span class="line">        <span class="type">UserBackpack</span> <span class="variable">build</span> <span class="operator">=</span> UserBackpack.builder()</span><br><span class="line">            .uid(uid)</span><br><span class="line">            .itemId(itemId)</span><br><span class="line">            .status(YesOrNoEnum.NO.getStatus())</span><br><span class="line">            .idempotent(idempotent)</span><br><span class="line">            .build();</span><br><span class="line">        userBackpackDao.save(build);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// e</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造幂等号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getIdempotent</span><span class="params">(Long itemId, IdempotentEnum idempotentEnum, String businessId)</span> &#123;</span><br><span class="line">    <span class="comment">// 幂等号=itemId+source+businessId</span></span><br><span class="line">    <span class="keyword">return</span> String.format(<span class="string">&quot;%d_%d_%s&quot;</span>, itemId, idempotentEnum.getType(), businessId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编程式实现分布式锁"><a href="#编程式实现分布式锁" class="headerlink" title="编程式实现分布式锁"></a>编程式实现分布式锁</h2><p>对于上面的声明式分布式锁，我们可以想到封装成一个工具类,   通过lambada表达式对任务进行处理,  对于异常、<code>try catch finally</code>封装起来</p><p>先看简化后的代码样例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acquireItem</span><span class="params">(Long uid, Long itemId, IdempotentEnum idempotentEnum, String businessId)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">idempotent</span> <span class="operator">=</span> getIdempotent(itemId, idempotentEnum, businessId); <span class="comment">// 根据幂等号 构造分布式锁</span></span><br><span class="line">    lockService.executeWithLock(<span class="string">&quot;acquireItem&quot;</span> + idempotent, () -&gt; &#123;</span><br><span class="line">        <span class="type">UserBackpack</span> <span class="variable">backpack</span> <span class="operator">=</span> userBackpackDao.getIdempotent(idempotent);<span class="comment">// 判断幂等是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(backpack)) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 不需要给任何异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 发放物品</span></span><br><span class="line">        <span class="type">UserBackpack</span> <span class="variable">build</span> <span class="operator">=</span> UserBackpack.builder()</span><br><span class="line">            .uid(uid)</span><br><span class="line">            .itemId(itemId)</span><br><span class="line">            .status(YesOrNoEnum.NO.getStatus())</span><br><span class="line">            .idempotent(idempotent)</span><br><span class="line">            .build();</span><br><span class="line">        userBackpackDao.save(build);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然少了很多繁琐的<code>try catch finally</code>逻辑,  通过一个类似于线程池的execute执行入口实现简化代码,  我们可以想到supply  function这类回调函数实现我们的代码逻辑</p><p>于是我们就定义了一个<code>LockService</code>用于专门处理分布式锁任务的处理业务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.calyee.chat.common.common.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> com.calyee.chat.common.common.exception.CommonErrorEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RLock;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span>: LockService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Calyee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 分布式锁Service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span> <span class="comment">// 外部不关心异常</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">executeWithLock</span><span class="params">(String key, <span class="type">int</span> waitTime, TimeUnit timeUnit, Supplier&lt;T&gt; supplier)</span> &#123; <span class="comment">// Supplier：只有出参，没有入参</span></span><br><span class="line">        <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(key);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> lock.tryLock(waitTime, timeUnit);</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123; <span class="comment">// 失败</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(CommonErrorEnum.lOCK_LIMIT);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> supplier.get();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重载函数 实现不需要等待的任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">executeWithLock</span><span class="params">(String key, Supplier&lt;T&gt; supplier)</span> &#123; <span class="comment">// Supplier：只有入参，没有出参</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.executeWithLock(key, -<span class="number">1</span>, TimeUnit.MINUTES, supplier);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 引入Runnable简化 返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">executeWithLock</span><span class="params">(String key, Runnable runnable)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.executeWithLock(key, -<span class="number">1</span>, TimeUnit.MINUTES, () -&gt; &#123;</span><br><span class="line">            runnable.run();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Supplier</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Gets a result</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 啊 result</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        T <span class="title function_">get</span><span class="params">()</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于下面的两个函数,   解释如下:</p><ol><li>第一个则为<strong>不需要等待</strong>的分布式锁,   这个情况在执行的情况下,   需要return返回值</li><li>第二个则为既<strong>不需要等待</strong>,   也不用返回值</li></ol><p>其中BusinessException为自定义业务异常处理</p><h2 id="注解实现分布式锁"><a href="#注解实现分布式锁" class="headerlink" title="注解实现分布式锁"></a>注解实现分布式锁</h2><p>首先需要解析SpEl表达式 (此时场景为需要使用SpEl表达式拼接字符串)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span>: SpElUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Calyee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 获取EL表达式的工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpElUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">DefaultParameterNameDiscoverer</span> <span class="variable">parameterNameDiscoverer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultParameterNameDiscoverer</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">parseSpEl</span><span class="params">(Method method, Object[] args, String spEl)</span> &#123;</span><br><span class="line">        String[] params = Optional.ofNullable(parameterNameDiscoverer.getParameterNames(method)).orElse(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;&#125;);<span class="comment">//解析参数名</span></span><br><span class="line">        <span class="type">EvaluationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEvaluationContext</span>();<span class="comment">//el解析需要的上下文对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">            context.setVariable(params[i], args[i]);<span class="comment">//所有参数都作为原材料扔进去</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">expression</span> <span class="operator">=</span> parser.parseExpression(spEl);</span><br><span class="line">        <span class="keyword">return</span> expression.getValue(context, String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMethodKey</span><span class="params">(Method method)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> method.getDeclaringClass() + <span class="string">&quot;#&quot;</span> + method.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后进行定义注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RedissonLock &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * key的前缀，默认取方法全限定名，可以自己指定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">prefixKey</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持SpringEL表达式的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">key</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待锁的排队时间，默认不需要等待 快速失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">waitTime</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间单位，默认毫秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TimeUnit <span class="title function_">unit</span><span class="params">()</span> <span class="keyword">default</span> TimeUnit.MILLISECONDS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义切面</p><p>对于有锁并且存在事务的情况,  我们需要确保锁的执行顺序在事务外,  不然锁会失效</p><p>加锁 -&gt;  开启事务 -&gt; 提交事务 -&gt; 解锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(0)</span> <span class="comment">// 确保比事务的注解先执行，分布式锁在事务外，如果锁在事务内，那么锁是失效的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonLockAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LockService lockService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(redissonLock)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint, RedissonLock redissonLock)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ((MethodSignature) joinPoint.getSignature()).getMethod();</span><br><span class="line">        <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> StringUtils.isBlank(redissonLock.prefixKey())</span><br><span class="line">                ? SpElUtils.getMethodKey(method) : redissonLock.prefixKey();</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> SpElUtils.parseSpEl(method, joinPoint.getArgs(), redissonLock.key());</span><br><span class="line">        <span class="keyword">return</span> lockService.executeWithLock(prefix + key, redissonLock.waitTime(), redissonLock.unit(), () -&gt; joinPoint.proceed());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解式使用"><a href="#注解式使用" class="headerlink" title="注解式使用"></a>注解式使用</h2><p>此时如果使用了前面定义的注解式,  那么则可以写成这个样子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acquireItem</span><span class="params">(Long uid, Long itemId, IdempotentEnum idempotentEnum, String businessId)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">idempotent</span> <span class="operator">=</span> getIdempotent(itemId, idempotentEnum, businessId); <span class="comment">// 根据幂等号 构造分布式锁</span></span><br><span class="line">    doAcquireItem(uid, itemId, idempotent);  <span class="comment">// 同类调用处</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RedissonLock(key = &quot;#idempotent&quot;, waitTime = 5, unit = TimeUnit.MINUTES)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAcquireItem</span><span class="params">(Long uid, Long itemId, String idempotent)</span> &#123;</span><br><span class="line">    <span class="type">UserBackpack</span> <span class="variable">backpack</span> <span class="operator">=</span> userBackpackDao.getIdempotent(idempotent);<span class="comment">// 判断幂等是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (Objects.nonNull(backpack)) &#123;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 不需要给任何异常</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 发放物品</span></span><br><span class="line">    <span class="type">UserBackpack</span> <span class="variable">build</span> <span class="operator">=</span> UserBackpack.builder()</span><br><span class="line">        .uid(uid)</span><br><span class="line">        .itemId(itemId)</span><br><span class="line">        .status(YesOrNoEnum.NO.getStatus())</span><br><span class="line">        .idempotent(idempotent)</span><br><span class="line">        .build();</span><br><span class="line">    userBackpackDao.save(build);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同类调用问题"><a href="#同类调用问题" class="headerlink" title="同类调用问题"></a>同类调用问题</h3><p>也就是如果在同一个类直接调用事务方法，就会导致事务不生效</p><p>我们称之为<strong>同类调用</strong>,  同类调用的话,  我们加事务<code>@Transactional</code>和切面都是不生效的(<a href="https://cn.bing.com/search?q=%E5%90%8C%E7%B1%BB%E8%B0%83%E7%94%A8">跳转</a>)</p><p>解决方案</p><ul><li>自己注入自己</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserBackServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserBackpackService</span> &#123;</span><br><span class="line">+    <span class="meta">@Autowired</span></span><br><span class="line">+    <span class="meta">@Lazy</span>   <span class="comment">// 解决自己注入自己的循环依赖</span></span><br><span class="line">+    <span class="keyword">private</span> UserBackServiceImpl userBackService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acquireItem</span><span class="params">(Long uid, Long itemId, IdempotentEnum idempotentEnum, String businessId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">idempotent</span> <span class="operator">=</span> getIdempotent(itemId, idempotentEnum, businessId); <span class="comment">// 根据幂等号 构造分布式锁</span></span><br><span class="line">+        userBackService.doAcquireItem(uid, itemId, idempotent);  <span class="comment">// 同类调用处</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Other</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用AOP上下文</li></ul><p>通过调用<code>AopContext.currentProxy()</code>, AOP的上下文获取当前代理,  然后强转为当前类在进行调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acquireItem</span><span class="params">(Long uid, Long itemId, IdempotentEnum idempotentEnum, String businessId)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">idempotent</span> <span class="operator">=</span> getIdempotent(itemId, idempotentEnum, businessId); <span class="comment">// 根据幂等号 构造分布式锁</span></span><br><span class="line">+    ((UserBackServiceImpl)AopContext.currentProxy()).doAcquireItem(uid, itemId, idempotent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统一管理的线程池</title>
      <link href="/2024/03/04/%E7%BB%9F%E4%B8%80%E7%AE%A1%E7%90%86%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2024/03/04/%E7%BB%9F%E4%B8%80%E7%AE%A1%E7%90%86%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<p>项目遇到需要异步执行的逻辑，那么就到线程池了</p><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>需求：1.  <strong>异步</strong>刷新我们的token(续期)</p><ol start="2"><li>为了减少系统的开销</li></ol><blockquote><p> 频繁的创建、销毁线程和线程池，会给系统带来额外的开销。未经池化及统一管理的线程，则会导致<strong>系统内线程数上限不可控</strong>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">renewalTokenIfNecessary</span><span class="params">(String token)</span> &#123;</span><br><span class="line">    <span class="comment">// 需要异步刷新</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">uid</span> <span class="operator">=</span> getValidUid(token);</span><br><span class="line">    <span class="type">String</span> <span class="variable">userTokenKey</span> <span class="operator">=</span> getUserTokenKey(uid);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">expireDays</span> <span class="operator">=</span> RedisUtils.getExpire(userTokenKey, TimeUnit.DAYS);</span><br><span class="line">    <span class="keyword">if</span> (expireDays == -<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (expireDays &lt; TOKEN_RENEW_DAYS) &#123;<span class="comment">// 小于一天则直接续期</span></span><br><span class="line">        RedisUtils.expire(getUserTokenKey(uid), TOKEN_EXPIRE_DAYS, TimeUnit.DAYS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程实现方案"><a href="#线程实现方案" class="headerlink" title="线程实现方案"></a>线程实现方案</h1><h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><p>可以使用线程池做考虑,   那么实现代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor threadPoolExecutor;<span class="comment">// 定义一个默认线程池</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">renewalTokenIfNecessary</span><span class="params">(String token)</span> &#123;</span><br><span class="line">    threadPoolExecutor.execute(()-&gt;&#123; <span class="comment">// 利用线程池执行逻辑</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">uid</span> <span class="operator">=</span> getValidUid(token);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userTokenKey</span> <span class="operator">=</span> getUserTokenKey(uid);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">expireDays</span> <span class="operator">=</span> RedisUtils.getExpire(userTokenKey, TimeUnit.DAYS);</span><br><span class="line">        <span class="keyword">if</span> (expireDays == -<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (expireDays &lt; TOKEN_RENEW_DAYS) &#123;</span><br><span class="line">            RedisUtils.expire(getUserTokenKey(uid), TOKEN_EXPIRE_DAYS, TimeUnit.DAYS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Async"><a href="#Async" class="headerlink" title="@Async"></a>@Async</h2><p>使用这个就比较简单了,   直接加注解即可</p><p>但是,  如果加了Async注解则会被spring的<strong>代理</strong>进行<u>包装一层</u>,  然后被spring提交到线程池执行</p><p>那么我们需要指定Async的线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Async</span> <span class="comment">// Spring异步注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">renewalTokenIfNecessary</span><span class="params">(String token)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">uid</span> <span class="operator">=</span> getValidUid(token);</span><br><span class="line">    <span class="type">String</span> <span class="variable">userTokenKey</span> <span class="operator">=</span> getUserTokenKey(uid);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">expireDays</span> <span class="operator">=</span> RedisUtils.getExpire(userTokenKey, TimeUnit.DAYS);</span><br><span class="line">    <span class="keyword">if</span> (expireDays == -<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (expireDays &lt; TOKEN_RENEW_DAYS) &#123;</span><br><span class="line">        RedisUtils.expire(getUserTokenKey(uid), TOKEN_EXPIRE_DAYS, TimeUnit.DAYS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程池配置"><a href="#线程池配置" class="headerlink" title="线程池配置"></a>线程池配置</h1><p>当前配置进针对当前项目</p><p>如果我们在项目中使用到了@Async注解,  那么它使用的线程池就是我们实现的<code>AsyncConfigurer</code>的方法<code>getAsyncExecutor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolConfig</span> <span class="keyword">implements</span> <span class="title class_">AsyncConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 项目共用线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CALYEECHAT_EXECUTOR</span> <span class="operator">=</span> <span class="string">&quot;calyeechatExecutor&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * websocket通信线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WS_EXECUTOR</span> <span class="operator">=</span> <span class="string">&quot;websocketExecutor&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">getAsyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> calyeechatExecutor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(CALYEECHAT_EXECUTOR)</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">calyeechatExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line"><span class="comment">//        executor.setWaitForTasksToCompleteOnShutdown(true);</span></span><br><span class="line">        executor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">200</span>);</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;calyeechat-executor-&quot;</span>); <span class="comment">// 线程前缀</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());<span class="comment">//满了调用线程执行，认为重要任务</span></span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果其他的地方也需要拿到此线程池</span></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    @Qualifier(ThreadPoolConfig.CALYEECHAT_EXECUTOR)</span></span><br><span class="line"><span class="comment">//    private ThreadPoolTaskExecutor threadPoolTaskExecutor;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重要的是</p><ul><li><p>配置中的拒绝策略<code>setRejectedExecutionHandler</code>,  我们在当前配置设置的策略是<code>CallerRunsPolicy</code>:  如果真的来不及执行任务了,  那么谁投递的则它自己干</p></li><li><p>设置线程前缀名,  便于排错寻找</p></li></ul><hr><p>既然引入了线程池,  那么就会有问题需要解决</p><h2 id="如何优雅停机"><a href="#如何优雅停机" class="headerlink" title="如何优雅停机"></a>如何优雅停机</h2><h3 id="Spring管理的线程池"><a href="#Spring管理的线程池" class="headerlink" title="Spring管理的线程池"></a>Spring管理的线程池</h3><p>当项目关闭的时候，需要通过jvm的shutdownHook回调线程池，等队列里任务执行完再停机。保证任务不丢失。</p><p>shutdownHook会回调spring容器，所以我们实现spring的<code>DisposableBean</code>的<code>destroy</code>方法也可以达到一样的效果，在里面调用<code>executor.shutdown()</code>并等待线程池执行完毕。</p><p>由于我们用的就是spring管理的线程池(不是JUC的线程池),  连优雅停机的事，都可以直接交给spring自己来管理了，非常方便。</p><p>追随源码可以发现  (ThreadPoolTaskExecutor -&gt; ExecutorConfigurationSupport )</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否等待任务执行完成再关闭</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">waitForTasksToCompleteOnShutdown</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// 默认为false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    shutdown();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Perform a shutdown on the underlying ExecutorService.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> java.util.concurrent.ExecutorService#shutdown()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> java.util.concurrent.ExecutorService#shutdownNow()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Shutting down ExecutorService&quot;</span> + (<span class="built_in">this</span>.beanName != <span class="literal">null</span> ? <span class="string">&quot; &#x27;&quot;</span> + <span class="built_in">this</span>.beanName + <span class="string">&quot;&#x27;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.executor != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.waitForTasksToCompleteOnShutdown) &#123;</span><br><span class="line">            <span class="built_in">this</span>.executor.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Runnable remainingTask : <span class="built_in">this</span>.executor.shutdownNow()) &#123;</span><br><span class="line">                cancelRemainingTask(remainingTask);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        awaitTerminationIfNecessary(<span class="built_in">this</span>.executor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果设置了waitForTasksToCompleteOnShutdown为true,  那么则会执行<code>this.executor.shutdown();</code>,  此方法为线程池的shutdown,  首先他会<strong>发生状态扭转</strong>,  然后</p><ul><li><p>其一:  新的任务不能再提交了</p></li><li><p>其二:  进入阻塞等待,  等项目任务以及队列执行完毕再退出</p></li></ul><p>如果没有配置,  则允许任务没有执行完成就退出,  它会先把没有执行的任务给返回出去…</p><blockquote><p> 优雅停机的关键:  设置waitForTasksToCompleteOnShutdown为true</p></blockquote><h3 id="JUC线程池"><a href="#JUC线程池" class="headerlink" title="JUC线程池"></a>JUC线程池</h3><p>例如我们有如下线程池:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">            <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(<span class="number">500</span>), <span class="keyword">new</span> <span class="title class_">NamedThreadFactory</span>(<span class="string">&quot;refresh-ipDetail&quot;</span>, <span class="literal">false</span>));</span><br></pre></td></tr></table></figure><p>我们需要在该类上实现<code>DisposableBean</code></p><p>即如下示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IpService</span>, DisposableBean &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">            <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(<span class="number">500</span>), <span class="keyword">new</span> <span class="title class_">NamedThreadFactory</span>(<span class="string">&quot;refresh-ipDetail&quot;</span>, <span class="literal">false</span>));</span><br></pre></td></tr></table></figure><p>那么需要重写方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    executor.shutdown();</span><br><span class="line">    <span class="keyword">if</span> (!executor.awaitTermination(<span class="number">30</span>, TimeUnit.SECONDS)) &#123;<span class="comment">//最多等30秒，处理不完就拉倒</span></span><br><span class="line">        <span class="keyword">if</span> (log.isErrorEnabled()) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Timed out while waiting for executor [&#123;&#125;] to terminate&quot;</span>, executor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即可实现停机</p><h1 id="线程池日志配置"><a href="#线程池日志配置" class="headerlink" title="线程池日志配置"></a>线程池日志配置</h1><p>在测试中，我们可以很容易的发现，在出现异常的时候，抛出并不是以日志输出的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="meta">@Test</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">threadTest</span><span class="params">()</span> &#123;</span><br><span class="line">    threadPoolTaskExecutor.execute(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;log error&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的抛出异常信息<code>123</code>是以控制台输出的<code>System.err.print()</code>的形式,  而不是我们在spring里面常见的日志输出格式</p><h2 id="捕获线程异常"><a href="#捕获线程异常" class="headerlink" title="捕获线程异常"></a>捕获线程异常</h2><p>此处并非指线程池中的异常捕获,  而指的是Thread的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">threadTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">            thread.setUncaughtExceptionHandler(<span class="keyword">new</span> <span class="title class_">MyUncaughtExceptionHandler</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述的异常我们通过阅读Thread的源码可知,   有一个属性为<code>UncaughtExceptionHandler</code>,  我们通过自定义UncaughtExceptionHandler来实现自定义的异常处理,  样例如下: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUncaughtExceptionHandler</span> <span class="keyword">implements</span> <span class="title class_">Thread</span>.UncaughtExceptionHandler &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;Exception in thread&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程池的异常捕获"><a href="#线程池的异常捕获" class="headerlink" title="线程池的异常捕获"></a>线程池的异常捕获</h2><p>由于一般都是用线程池进行操作,  那么需要设置的是线程池的异常捕获</p><p>要实现线程池的异常捕获,   首先我们可以了解一下<strong>装饰器模式</strong>,  装饰器模式常用的有两种实现</p><ol><li>组合:  组合就是将原有的属性声明为我们的属性,   然后使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadFactory</span> <span class="keyword">implements</span> <span class="title class_">ThreadFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 装饰器模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">MyUncaughtExceptionHandler</span> <span class="variable">myUncaughtExceptionHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyUncaughtExceptionHandler</span>();</span><br><span class="line"></span><br><span class="line">+    <span class="keyword">private</span> ThreadFactory original; <span class="comment">// 组合</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">+        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> original.newThread(r); <span class="comment">// 执行spring线程自己的创建逻辑</span></span><br><span class="line">        <span class="comment">// 额外装饰我们需要的创建逻辑</span></span><br><span class="line">        thread.setUncaughtExceptionHandler(myUncaughtExceptionHandler);</span><br><span class="line">        <span class="keyword">return</span> thread;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>继承:  继承就是继承父类原有的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadFactory</span> <span class="keyword">implements</span> <span class="title class_">ThreadFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 装饰器模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">MyUncaughtExceptionHandler</span> <span class="variable">myUncaughtExceptionHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyUncaughtExceptionHandler</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">+        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="built_in">super</span>.newThread(r); <span class="comment">// 执行spring线程自己的创建逻辑</span></span><br><span class="line">        <span class="comment">// 额外装饰我们需要的创建逻辑</span></span><br><span class="line">        thread.setUncaughtExceptionHandler(myUncaughtExceptionHandler);</span><br><span class="line">        <span class="keyword">return</span> thread;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>+处为俩者对比处</p><p>但是在此项目中我们采用的是组合,  既 代码1。</p><blockquote><p>为什么需要采用装饰器模式去修饰我们的代码呢?</p><p>​: 1. 因为源码是不可以修改的   2. 假如需要替换原有的源码,  太多了,  不便于操作</p><p>  故 我们采用装饰器模式,  在原有的基础上,  对原来的代码进行装饰一层,  然后添加自己的复杂逻辑,  添加了可拓展性</p></blockquote><p>自定义工厂设置完毕了,  我们需要把工厂添加进去了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(CALYEECHAT_EXECUTOR)</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">calyeechatExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">    executor.setWaitForTasksToCompleteOnShutdown(<span class="literal">true</span>);</span><br><span class="line">    executor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">    executor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">    executor.setQueueCapacity(<span class="number">200</span>);</span><br><span class="line">    executor.setThreadNamePrefix(<span class="string">&quot;calyeechat-executor-&quot;</span>); <span class="comment">// 线程前缀</span></span><br><span class="line">    executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());<span class="comment">//满了调用线程执行，认为重要任务</span></span><br><span class="line">+    executor.setThreadFactory(<span class="keyword">new</span> <span class="title class_">MyThreadFactory</span>(executor));<span class="comment">// 设置线程工厂</span></span><br><span class="line">    executor.initialize();</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置完成,  运行并查看我们的控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2024</span>-<span class="number">03</span>-<span class="number">05</span> <span class="number">20</span>:<span class="number">12</span>:<span class="number">18.803</span> ERROR <span class="number">19372</span> --- [chat-executor-<span class="number">1</span>] com.calyee.chat.common.DaoTest           : log error</span><br><span class="line"><span class="number">2024</span>-<span class="number">03</span>-<span class="number">05</span> <span class="number">20</span>:<span class="number">12</span>:<span class="number">18.806</span> ERROR <span class="number">19372</span> --- [chat-executor-<span class="number">1</span>] c.c.c.c.c.t.MyUncaughtExceptionHandler   : Exception in thread</span><br><span class="line"></span><br><span class="line">java.lang.RuntimeException: <span class="number">123</span></span><br><span class="line">at com.calyee.chat.common.DaoTest.lambda$threadTest$<span class="number">0</span>(DaoTest.java:<span class="number">86</span>) ~[test-classes/:na]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1149</span>) ~[na:<span class="number">1.8</span><span class="number">.0_202</span>]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">624</span>) ~[na:<span class="number">1.8</span><span class="number">.0_202</span>]</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>) ~[na:<span class="number">1.8</span><span class="number">.0_202</span>]</span><br></pre></td></tr></table></figure><p>那么达到预期效果</p><h4 id="装饰器模式总结"><a href="#装饰器模式总结" class="headerlink" title="装饰器模式总结"></a>装饰器模式总结</h4><p>装饰器模式适合 我们无法修改内部的结构,  但是正好开发者开放了接口提供给我们拓展包装,  然后进行一点点改动</p><h1 id="篇章总结"><a href="#篇章总结" class="headerlink" title="篇章总结"></a>篇章总结</h1><ol><li><p>你是如何做线程池统一管理的（引出你对线程池参数的理解）</p></li><li><p>你是如果做优雅停机的（可自己写，也可使用spring自带线程池，项目都用到了）</p></li></ol><p>如果使用的是spring的线程池,  那么是阅读过源码的,  它设置一个属性则可以为我们优雅停机</p><ol start="3"><li>你是如何做异常捕获日志打印，更好的监控线程运行的？</li></ol><p>没有捕获的异常最后会变成控制台的error,  我们需要配置自定义的工厂,  然后设置日志输出或者其他的</p><ol start="4"><li>你又是如何查看spring线程池源码，用装饰器更优雅去添加异常捕获功能的（引出你对源码，设计模式的理解）</li></ol><p>通过Thread发现有一个setThreadFactory设置线程工厂,  在工厂中创建线程的时候(createThread)他会设置一些属性(代码如下),  那么我们也可以实现工厂然后设置我们自己的属性  ,装饰器模式适合无法修改内部的结构,  但是正好开发者开放了接口提供给我们拓展包装,  然后进行一点点改动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Thread <span class="title function_">createThread</span><span class="params">(Runnable runnable)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(getThreadGroup(), runnable, nextThreadName());</span><br><span class="line">    thread.setPriority(getThreadPriority());</span><br><span class="line">    thread.setDaemon(isDaemon());</span><br><span class="line">    <span class="keyword">return</span> thread;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码出处指导  #setThreadFactory  #继承类CustomizableThreadFactory  #创建线程newThread</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty心跳原理</title>
      <link href="/2024/02/03/Netty%E5%BF%83%E8%B7%B3%E5%8E%9F%E7%90%86/"/>
      <url>/2024/02/03/Netty%E5%BF%83%E8%B7%B3%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="前提提要代码"><a href="#前提提要代码" class="headerlink" title="前提提要代码"></a>前提提要代码</h1><p>此部分详细代码见<a href="/2024/01/30/Netty实现websocket/">Netty实现WebSocket原理</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 服务器启动引导对象</span></span><br><span class="line">    <span class="type">ServerBootstrap</span> <span class="variable">serverBootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">    serverBootstrap.group(bossGroup, workerGroup)</span><br><span class="line">        .channel(NioServerSocketChannel.class)</span><br><span class="line">        .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)</span><br><span class="line">        .option(ChannelOption.SO_KEEPALIVE, <span class="literal">true</span>)</span><br><span class="line">        .handler(<span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.INFO)) <span class="comment">// 为 bossGroup 添加 日志处理器</span></span><br><span class="line">        .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="type">ChannelPipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> socketChannel.pipeline();</span><br><span class="line">                <span class="comment">//30秒客户端没有向服务器发送心跳则关闭连接</span></span><br><span class="line">                pipeline.addLast(<span class="keyword">new</span> <span class="title class_">IdleStateHandler</span>(<span class="number">30</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">                <span class="comment">// 因为使用http协议，所以需要使用http的编码器，解码器</span></span><br><span class="line">                pipeline.addLast(<span class="keyword">new</span> <span class="title class_">HttpServerCodec</span>());</span><br><span class="line">                <span class="comment">// 以块方式写，添加 chunkedWriter 处理器</span></span><br><span class="line">                pipeline.addLast(<span class="keyword">new</span> <span class="title class_">ChunkedWriteHandler</span>());</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                         * 说明：</span></span><br><span class="line"><span class="comment">                         *  1. http数据在传输过程中是分段的，HttpObjectAggregator可以把多个段聚合起来；</span></span><br><span class="line"><span class="comment">                         *  2. 这就是为什么当浏览器发送大量数据时，就会发出多次 http请求的原因</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                pipeline.addLast(<span class="keyword">new</span> <span class="title class_">HttpObjectAggregator</span>(<span class="number">8192</span>));</span><br><span class="line">                <span class="comment">//保存用户ip</span></span><br><span class="line">                <span class="comment">//                        pipeline.addLast(new HttpHeadersHandler());</span></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                         * 说明：</span></span><br><span class="line"><span class="comment">                         *  1. 对于 WebSocket，它的数据是以帧frame 的形式传递的；</span></span><br><span class="line"><span class="comment">                         *  2. 可以看到 WebSocketFrame 下面有6个子类</span></span><br><span class="line"><span class="comment">                         *  3. 浏览器发送请求时： ws://localhost:7000/hello 表示请求的uri</span></span><br><span class="line"><span class="comment">                         *  4. WebSocketServerProtocolHandler 核心功能是把 http协议升级为 ws 协议，保持长连接；</span></span><br><span class="line"><span class="comment">                         *      是通过一个状态码 101 来切换的</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                pipeline.addLast(<span class="keyword">new</span> <span class="title class_">WebSocketServerProtocolHandler</span>(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">                <span class="comment">// 自定义handler ，处理业务逻辑</span></span><br><span class="line">                pipeline.addLast(<span class="keyword">new</span> <span class="title class_">NettyWebSocketServerHandler</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="comment">// 启动服务器，监听端口，阻塞直到启动成功</span></span><br><span class="line">    serverBootstrap.bind(WEB_SOCKET_PORT).sync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="心跳包"><a href="#心跳包" class="headerlink" title="心跳包"></a>心跳包</h1><p>如果用户突然关闭网页，是不会有断开通知给服务端的。那么服务端永远感知不到用户下线。因此需要客户端维持一个心跳，当指定时间没有心跳，服务端主动断开，进行用户下线操作。</p><p>直接接入netty的现有组件<code>new IdleStateHandler(30, 0, 0)</code>可以实现30秒链接没有读请求，就主动关闭链接。我们的web前端需要保持每10s发送一个心跳包。</p><p>在此部分的代码第34行,  WebSocket自带有一个心跳检测组件  如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//30秒客户端没有向服务器发送心跳则关闭连接</span></span><br><span class="line">pipeline.addLast(<span class="keyword">new</span> <span class="title class_">IdleStateHandler</span>(<span class="number">30</span>, <span class="number">0</span>, <span class="number">0</span>)); <span class="comment">// 读空闲时间 写空闲时间 全局时间</span></span><br></pre></td></tr></table></figure><ol><li>第一个参数: 读空闲时间</li></ol><p>前端主动请求,  给客户端主动发送一条消息,  如果在30秒内有新消息则为正常状态,  没用则关闭连接</p><ol start="2"><li>第二个参数: 写空闲时间</li></ol><p>后端有没有主动给前端写消息,  一般适用于客户端,  客户端加了心跳,  则客户端会自己主动写心跳</p><h2 id="测试心跳"><a href="#测试心跳" class="headerlink" title="测试心跳"></a>测试心跳</h2><p>此项与前面提到的文章代码一致(在 #自定义握手事件)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 如果事件是一个WebSocket握手的事件</span></span><br><span class="line">    <span class="keyword">if</span> (evt <span class="keyword">instanceof</span> WebSocketServerProtocolHandler.HandshakeComplete) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;[握手完成]&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (evt <span class="keyword">instanceof</span> IdleStateEvent) &#123;</span><br><span class="line">        <span class="comment">// 心跳</span></span><br><span class="line">        <span class="type">IdleStateEvent</span> <span class="variable">event</span> <span class="operator">=</span> (IdleStateEvent) evt;</span><br><span class="line">        <span class="keyword">if</span> (event.state() == IdleState.READER_IDLE) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;[读空闲]&quot;</span>);</span><br><span class="line">            <span class="comment">//todo 用户下线</span></span><br><span class="line">            ctx.channel().close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在设置了前面的第一个参数后,  启动服务,  连接WebSocket然后等待30秒则会输出日志: [读空闲]</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>其实就是,  在设定的30秒内没有新消息,  就会发送一个事件,  在追踪<strong>IdleStateHandler</strong>源码可以发现,  它有一些读消息的地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.readerIdleTimeNanos &gt; <span class="number">0L</span> || <span class="built_in">this</span>.allIdleTimeNanos &gt; <span class="number">0L</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.reading = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">this</span>.firstReaderIdleEvent = <span class="built_in">this</span>.firstAllIdleEvent = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx.fireChannelRead(msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 读完成</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">this</span>.readerIdleTimeNanos &gt; <span class="number">0L</span> || <span class="built_in">this</span>.allIdleTimeNanos &gt; <span class="number">0L</span>) &amp;&amp; <span class="built_in">this</span>.reading) &#123;</span><br><span class="line">        <span class="comment">// 记录最后一次读的时间</span></span><br><span class="line">        <span class="built_in">this</span>.lastReadTime = <span class="built_in">this</span>.ticksInNanos(); <span class="comment">// 此项通过定时任务实现</span></span><br><span class="line">        <span class="built_in">this</span>.reading = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx.fireChannelReadComplete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是读Channel,  记录最后一次读的时间与之当前时间进行对比,  最后一次读的时间的更新通过<u>定时任务</u>完成,  通过追踪lastReadTime属性</p><p>可以发现源码中存在如下的定时任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ReaderIdleTimeoutTask</span> <span class="keyword">extends</span> <span class="title class_">AbstractIdleTask</span> &#123;</span><br><span class="line"></span><br><span class="line">    ReaderIdleTimeoutTask(ChannelHandlerContext ctx) &#123;</span><br><span class="line">        <span class="built_in">super</span>(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ChannelHandlerContext ctx)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">nextDelay</span> <span class="operator">=</span> readerIdleTimeNanos;</span><br><span class="line">        <span class="keyword">if</span> (!reading) &#123;</span><br><span class="line">            <span class="comment">// 时间处理</span></span><br><span class="line">            nextDelay -= ticksInNanos() - lastReadTime;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nextDelay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Reader is idle - set a new timeout and notify the callback.</span></span><br><span class="line">            <span class="comment">// 不论什么情况都会执行下一次周期的定时任务,通过线程池执行定时任务,具体定时多久读者自行查阅</span></span><br><span class="line">            readerIdleTimeout = schedule(ctx, <span class="built_in">this</span>, readerIdleTimeNanos, TimeUnit.NANOSECONDS);</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">first</span> <span class="operator">=</span> firstReaderIdleEvent;</span><br><span class="line">            firstReaderIdleEvent = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 事件通知, 构建一个读空闲时间</span></span><br><span class="line">                <span class="type">IdleStateEvent</span> <span class="variable">event</span> <span class="operator">=</span> newIdleStateEvent(IdleState.READER_IDLE, first);</span><br><span class="line">                channelIdle(ctx, event);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                ctx.fireExceptionCaught(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Read occurred before the timeout - set a new timeout with shorter delay.</span></span><br><span class="line">            readerIdleTimeout = schedule(ctx, <span class="built_in">this</span>, nextDelay, TimeUnit.NANOSECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在每一次有新消息进来的时候,  我们会更新最后一次事件时间(此项详情在schedule定时任务),  最后组成心跳机制</p><p>心跳处理器只是发出事件,  具体处理交给我们自己,  例如笔者样例代码中存在一处为&#x2F;&#x2F; todo 用户下线,  所以还能对用户下线进行业务逻辑处理,  那么这样(只是通过发出事件)的好处可以解耦</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>为什么我们使用netty,  因为它以及封装了很多实用的组件了,  以至于没有使用原生的服务</p>]]></content>
      
      
      <categories>
          
          <category> WebSocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty实现WebSocket原理</title>
      <link href="/2024/01/30/Netty%E5%AE%9E%E7%8E%B0websocket/"/>
      <url>/2024/01/30/Netty%E5%AE%9E%E7%8E%B0websocket/</url>
      
        <content type="html"><![CDATA[<div class="note pink anzhiyufont anzhiyu-icon-instagram simple"><p>哪怕明天进步一点点，也比原地踏步或退步要好</p></div><h1 id="前置提要"><a href="#前置提要" class="headerlink" title="前置提要"></a>前置提要</h1><p>Netty WebSocket Server代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyWebSocketServer</span> &#123;</span><br><span class="line">    <span class="comment">// 开启netty服务端口8090</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">WEB_SOCKET_PORT</span> <span class="operator">=</span> <span class="number">8090</span>;</span><br><span class="line">    <span class="comment">// 创建线程池执行器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">EventLoopGroup</span> <span class="variable">bossGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">EventLoopGroup</span> <span class="variable">workerGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(NettyRuntime.availableProcessors());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动 ws server</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        Future&lt;?&gt; future = bossGroup.shutdownGracefully();</span><br><span class="line">        Future&lt;?&gt; future1 = workerGroup.shutdownGracefully();</span><br><span class="line">        future.syncUninterruptibly();</span><br><span class="line">        future1.syncUninterruptibly();</span><br><span class="line">        log.info(<span class="string">&quot;关闭 ws server 成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 服务器启动引导对象</span></span><br><span class="line">        <span class="type">ServerBootstrap</span> <span class="variable">serverBootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">        serverBootstrap.group(bossGroup, workerGroup)</span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)</span><br><span class="line">                .option(ChannelOption.SO_KEEPALIVE, <span class="literal">true</span>)</span><br><span class="line">                .handler(<span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.INFO)) <span class="comment">// 为 bossGroup 添加 日志处理器</span></span><br><span class="line">                .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="type">ChannelPipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> socketChannel.pipeline();</span><br><span class="line">                        <span class="comment">//30秒客户端没有向服务器发送心跳则关闭连接</span></span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">IdleStateHandler</span>(<span class="number">30</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">                        <span class="comment">// 因为使用http协议，所以需要使用http的编码器，解码器</span></span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">HttpServerCodec</span>());</span><br><span class="line">                        <span class="comment">// 以块方式写，添加 chunkedWriter 处理器</span></span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">ChunkedWriteHandler</span>());</span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                         * 说明：</span></span><br><span class="line"><span class="comment">                         *  1. http数据在传输过程中是分段的，HttpObjectAggregator可以把多个段聚合起来；</span></span><br><span class="line"><span class="comment">                         *  2. 这就是为什么当浏览器发送大量数据时，就会发出多次 http请求的原因</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">HttpObjectAggregator</span>(<span class="number">8192</span>));</span><br><span class="line">                        <span class="comment">//保存用户ip</span></span><br><span class="line"><span class="comment">//                        pipeline.addLast(new HttpHeadersHandler());</span></span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                         * 说明：</span></span><br><span class="line"><span class="comment">                         *  1. 对于 WebSocket，它的数据是以帧frame 的形式传递的；</span></span><br><span class="line"><span class="comment">                         *  2. 可以看到 WebSocketFrame 下面有6个子类</span></span><br><span class="line"><span class="comment">                         *  3. 浏览器发送请求时： ws://localhost:7000/hello 表示请求的uri</span></span><br><span class="line"><span class="comment">                         *  4. WebSocketServerProtocolHandler 核心功能是把 http协议升级为 ws 协议，保持长连接；</span></span><br><span class="line"><span class="comment">                         *      是通过一个状态码 101 来切换的</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">WebSocketServerProtocolHandler</span>(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">                        <span class="comment">// 自定义handler ，处理业务逻辑</span></span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">NettyWebSocketServerHandler</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="comment">// 启动服务器，监听端口，阻塞直到启动成功</span></span><br><span class="line">        serverBootstrap.bind(WEB_SOCKET_PORT).sync();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="优雅销毁服务"><a href="#优雅销毁服务" class="headerlink" title="优雅销毁服务"></a>优雅销毁服务</h2><p>在代码第25行的destroy方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    Future&lt;?&gt; future = bossGroup.shutdownGracefully();</span><br><span class="line">    Future&lt;?&gt; future1 = workerGroup.shutdownGracefully();</span><br><span class="line">    future.syncUninterruptibly();</span><br><span class="line">    future1.syncUninterruptibly();</span><br><span class="line">    log.info(<span class="string">&quot;关闭 ws server 成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是把连接先进行关闭,  然后再<u>进行等待</u>片刻。</p><h2 id="服务结构"><a href="#服务结构" class="headerlink" title="服务结构"></a>服务结构</h2><p>重写run方法实现中，在前提代码中第44行</p><p><code>ChannelPipeline pipeline = socketChannel.pipeline();</code></p><p>管道，每一个Netty服务都有一个对应的ChannelPipeline管道，此部分一般用于实现添加对应的<u>处理器</u>。例如HttpServer、WebSocket等处理器</p><p>此处我们以WebSocket处理器为例（67行），其代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipeline.addLast(<span class="keyword">new</span> <span class="title class_">WebSocketServerProtocolHandler</span>(<span class="string">&quot;/&quot;</span>));</span><br></pre></td></tr></table></figure><p>追踪处理器（追踪进去可以找到后面的方法：handlerAdded），在其源码中不难发现有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> &#123;</span><br><span class="line">    <span class="type">ChannelPipeline</span> <span class="variable">cp</span> <span class="operator">=</span> ctx.pipeline();</span><br><span class="line">    <span class="keyword">if</span> (cp.get(WebSocketServerProtocolHandshakeHandler.class) == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Add the WebSocketHandshakeHandler before this one.</span></span><br><span class="line">        <span class="comment">// 处理握手：WebSocketServerProtocolHandshakeHandler</span></span><br><span class="line">        cp.addBefore(ctx.name(), WebSocketServerProtocolHandshakeHandler.class.getName(),</span><br><span class="line">                     <span class="keyword">new</span> <span class="title class_">WebSocketServerProtocolHandshakeHandler</span>(serverConfig));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (serverConfig.decoderConfig().withUTF8Validator() &amp;&amp; cp.get(Utf8FrameValidator.class) == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Add the UFT8 checking before this one.</span></span><br><span class="line">        cp.addBefore(ctx.name(), Utf8FrameValidator.class.getName(),</span><br><span class="line">                     <span class="keyword">new</span> <span class="title class_">Utf8FrameValidator</span>(serverConfig.decoderConfig().closeOnProtocolViolation()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过追踪 握手处理器类WebSocketServerProtocolHandshakeHandler：</p><p>可以发现有一个方法为： <strong>channelRead</strong>，具体如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(<span class="keyword">final</span> ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">HttpObject</span> <span class="variable">httpObject</span> <span class="operator">=</span> (HttpObject) msg;</span><br><span class="line">    <span class="comment">// 如果是Http请求</span></span><br><span class="line">    <span class="keyword">if</span> (httpObject <span class="keyword">instanceof</span> HttpRequest) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">HttpRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpRequest) httpObject;</span><br><span class="line">        isWebSocketPath = isWebSocketPath(req);</span><br><span class="line">        <span class="keyword">if</span> (!isWebSocketPath) &#123;</span><br><span class="line">            ctx.fireChannelRead(msg);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!GET.equals(req.method())) &#123;</span><br><span class="line">                sendHttpResponse(ctx, req, <span class="keyword">new</span> <span class="title class_">DefaultFullHttpResponse</span>(HTTP_1_1, FORBIDDEN, ctx.alloc().buffer(<span class="number">0</span>)));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 组装握手响应</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">WebSocketServerHandshakerFactory</span> <span class="variable">wsFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebSocketServerHandshakerFactory</span>(</span><br><span class="line">                getWebSocketLocation(ctx.pipeline(), req, serverConfig.websocketPath()),</span><br><span class="line">                serverConfig.subprotocols(), serverConfig.decoderConfig());</span><br><span class="line">            <span class="comment">// 创建一个握手的响应类</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">WebSocketServerHandshaker</span> <span class="variable">handshaker</span> <span class="operator">=</span> wsFactory.newHandshaker(req);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ChannelPromise</span> <span class="variable">localHandshakePromise</span> <span class="operator">=</span> handshakePromise;</span><br><span class="line">            <span class="keyword">if</span> (handshaker == <span class="literal">null</span>) &#123;</span><br><span class="line">                WebSocketServerHandshakerFactory.sendUnsupportedVersionResponse(ctx.channel());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Ensure we set the handshaker and replace this handler before we</span></span><br><span class="line">                <span class="comment">// trigger the actual handshake. Otherwise we may receive websocket bytes in this handler</span></span><br><span class="line">                <span class="comment">// before we had a chance to replace it.</span></span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="comment">// See https://github.com/netty/netty/issues/9471.</span></span><br><span class="line">                WebSocketServerProtocolHandler.setHandshaker(ctx.channel(), handshaker);</span><br><span class="line">                <span class="comment">// 😀从请求管道中移除自己，我们WebSocket连接只需要在第一次连接的时候使用然后进行升级，随后移除</span></span><br><span class="line">                ctx.pipeline().remove(<span class="built_in">this</span>);</span><br><span class="line">                <span class="comment">// 握手的响应类会通过handshaker进行请求的响应</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">ChannelFuture</span> <span class="variable">handshakeFuture</span> <span class="operator">=</span> handshaker.handshake(ctx.channel(), req);</span><br><span class="line">                handshakeFuture.addListener(<span class="keyword">new</span> <span class="title class_">ChannelFutureListener</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationComplete</span><span class="params">(ChannelFuture future)</span> &#123;</span><br><span class="line">                        <span class="comment">// 事件监听：对失败与成功情况进行处理</span></span><br><span class="line">                        <span class="keyword">if</span> (!future.isSuccess()) &#123;</span><br><span class="line">                            localHandshakePromise.tryFailure(future.cause());</span><br><span class="line">                            ctx.fireExceptionCaught(future.cause());</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            localHandshakePromise.trySuccess();</span><br><span class="line">                            <span class="comment">// Kept for compatibility</span></span><br><span class="line">                            ctx.fireUserEventTriggered(</span><br><span class="line">                                WebSocketServerProtocolHandler.ServerHandshakeStateEvent.HANDSHAKE_COMPLETE);</span><br><span class="line">                            ctx.fireUserEventTriggered(</span><br><span class="line">                                <span class="comment">// 成功则发送一个下面的握手事件体</span></span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">WebSocketServerProtocolHandler</span>.HandshakeComplete(</span><br><span class="line">                                    req.uri(), req.headers(), handshaker.selectedSubprotocol()));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                applyHandshakeTimeout();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ReferenceCountUtil.release(req);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isWebSocketPath) &#123;</span><br><span class="line">        ctx.fireChannelRead(msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ReferenceCountUtil.release(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述的代码样例中有注释解释代码，下面进行说明</p><ul><li>第五行：<code>if (httpObject instanceof HttpRequest)</code></li></ul><p>判定请求是否为Http请求</p><ul><li>第十八行：组装握手响应</li><li>第二十二行：创建一个握手的响应类</li></ul><p>为后面的响应进行处理</p><ul><li>◈第三十四行：移除自己</li></ul><p>从请求管道中移除自己，我们WebSocket连接只需要在第一次连接的时候使用然后进行升级，随后移除。因为只在第一次使用（升级）的时候使用到了，后续不需要哟到</p><ul><li>第三十六行：</li></ul><p>握手的响应类会通过handshaker进行请求的响应</p><ul><li>第五十一行：发送请求</li></ul><p>如果事件成功则发送一个握手事件体</p><h2 id="重写自定义握手事件"><a href="#重写自定义握手事件" class="headerlink" title="重写自定义握手事件"></a>重写自定义握手事件</h2><p>基于前面最后分析的发送握手事件体，则有如下实现（通过重写userEventTriggered方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyWebSocketServerHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;TextWebSocketFrame&gt; &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果需要在握手的时候进行认证，则可以将认证逻辑填写至此处</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> evt 事件类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 如果事件是一个WebSocket握手的事件</span></span><br><span class="line">        <span class="keyword">if</span> (evt <span class="keyword">instanceof</span> WebSocketServerProtocolHandler.HandshakeComplete) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;握手完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (evt <span class="keyword">instanceof</span> IdleStateEvent) &#123;</span><br><span class="line">            <span class="type">IdleStateEvent</span> <span class="variable">event</span> <span class="operator">=</span> (IdleStateEvent) evt;</span><br><span class="line">            <span class="keyword">if</span> (event.state() == IdleState.READER_IDLE) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;读空闲&quot;</span>);</span><br><span class="line">                <span class="comment">//todo 用户下线</span></span><br><span class="line">                ctx.channel().close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, TextWebSocketFrame msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> msg.text();</span><br><span class="line">        System.out.println(<span class="string">&quot;text = &quot;</span> + text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Netty具体实现WebSocket是通过<u>Http升级一次</u>，依靠的是我们前面分析的处理器（<strong>WebSocketServerProtocolHandshakeHandler</strong>）帮我们进行连接的升级</p>]]></content>
      
      
      <categories>
          
          <category> WebSocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud</title>
      <link href="/2024/01/20/SpringCloud/"/>
      <url>/2024/01/20/SpringCloud/</url>
      
        <content type="html"><![CDATA[<div class="tip cogs"><p>微服务篇章</p></div><h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><h2 id="入门理论"><a href="#入门理论" class="headerlink" title="入门理论"></a>入门理论</h2><h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><p>CAP即：</p><ul><li>Consistency（一致性）   对某个指定的客户端来说，读操作保证能够返回最新的写操作结果</li><li>Availability（可用性）  非故障的节点在合理的时间内返回合理的响应(不出现错误或超时)</li><li>Partition tolerance（分区容忍性）  某一块出现故障不影响其另外的运行</li></ul><p>经常用微服务的小伙伴应该知道,  CAP就是说一个分布式系统不可能同时满足C、A、P这三个特性</p><p>对于分布式架构项目来说,  一般P是肯定满足的,  那么仅仅剩下C和A了</p><ul><li>CP:  满足一致性和分区容忍性，牺牲可用性。当网络分区发生时，系统只保留一个分区继续提供服务，其他分区不可用，直到网络恢复正常。  应用: ZooKeeper, HBase, MongoDB, Redis（集群模式）等。这些系统通常用于需要强一致性的场景，如协调、锁服务、元数据管理等</li><li>AP:  满足可用性和分区容忍性，牺牲一致性。当网络分区发生时，系统保持所有分区都可用，但可能返回过期的数据，直到数据同步完成。   应用: Eureka, Cassandra, CouchDB, DynamoDB, Riak, Redis（哨兵模式）等。这些系统通常用于需要高可用性和可扩展性的场景，如缓存、消息队列、文档存储等</li></ul><p>Nacos支持AP+CP,  Nacos可以根据配置或者服务节点的状态来识别为AP模式或CP模式，默认是AP模式。如果注册Nacos的client节点注册时ephemeral&#x3D;true，那么Nacos集群对这个client节点的效果就是AP，采用distro协议实现；而注册Nacos的client节点注册时ephemeral&#x3D;false，那么Nacos集群对这个client节点的效果就是CP，采用raft协议实现。</p><h2 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h2><p>原本我们只有一个单体项目(黑马商城),  现在由于各业务模块的拆分,  以至于原本直接跨模块注入的方法不能调用</p><p>在拆分的时候，我们发现一个问题：就是购物车业务中需要查询商品信息，但商品信息查询的逻辑全部迁移到了<code>item-service</code>服务，导致我们无法查询。</p><p>最终结果就是查询到的购物车数据不完整，因此要想解决这个问题，我们就必须改造其中的代码，把原本本地方法调用，改造成跨微服务的远程调用（RPC，即<strong>R</strong>emote <strong>P</strong>roduce <strong>C</strong>all）</p><p>因此，现在查询购物车列表的流程变成了这样:</p><img src="/2024/01/20/SpringCloud/RPC_1.png" class title="远程调用_1"><p>此时需要变动的代码是这一步:(下面带-的)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleCartItems</span><span class="params">(List&lt;CartVO&gt; vos)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.获取商品id</span></span><br><span class="line">    Set&lt;Long&gt; itemIds = vos.stream().map(CartVO::getItemId).collect(Collectors.toSet());</span><br><span class="line">    <span class="comment">// 2.查询商品</span></span><br><span class="line">-    List&lt;ItemDTO&gt; items = itemService.queryItemByIds(itemIds);</span><br><span class="line">    <span class="keyword">if</span> (CollUtils.isEmpty(items)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.转为 id 到 item的map</span></span><br><span class="line">    Map&lt;Long, ItemDTO&gt; itemMap = items.stream().collect(Collectors.toMap(ItemDTO::getId, Function.identity()));</span><br><span class="line">    <span class="comment">// 4.写入vo</span></span><br><span class="line">    <span class="keyword">for</span> (CartVO v : vos) &#123;</span><br><span class="line">        <span class="type">ItemDTO</span> <span class="variable">item</span> <span class="operator">=</span> itemMap.get(v.getItemId());</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        v.setNewPrice(item.getPrice());</span><br><span class="line">        v.setStatus(item.getStatus());</span><br><span class="line">        v.setStock(item.getStock());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在没有使用微服务之前并没有使用过跨服务调用,  在拆分遇到的第一个问题就是:  需要在一个服务调用另外一个服务的接口</p><p>如何进行<strong>跨微服务</strong>的远程调用呢? </p><h3 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h3><p>Spring给我们提供了一个RestTemplate的API，可以方便的实现Http请求的发送。</p><p>使用步骤如下:</p><ol><li>注入RestTemplate到Spring容器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>发起远程调用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; ResponseEntity&lt;T&gt; <span class="title function_">exchange</span><span class="params">(</span></span><br><span class="line"><span class="params">String url,   // 请求路径</span></span><br><span class="line"><span class="params">    HttpMethod method,         // 请求方式    (HttpMethod.GET)</span></span><br><span class="line">    <span class="meta">@Nullable</span> HttpEntity&lt;?&gt; requestEntity,<span class="comment">// 请求实体,可以为空</span></span><br><span class="line">    Class&lt;T&gt; responseType,     <span class="comment">// 返回值类型  (Json反序列化Class字节码对象)</span></span><br><span class="line">    Map&lt;String,?&gt; uriVariables <span class="comment">// 请求参数    (Map.of(&quot;id&quot;,1))</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="构造器注入新体验"><a href="#构造器注入新体验" class="headerlink" title="构造器注入新体验"></a>构造器注入新体验</h4><p>某类中注入RestTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RestTemplate restTemplate;  <span class="comment">// final</span></span><br></pre></td></tr></table></figure><p>然后使用lombok中的注解<code>@RequiredArgsConstructor</code>必需的函数构造器</p><h4 id="远程调用改造原代码"><a href="#远程调用改造原代码" class="headerlink" title="远程调用改造原代码"></a>远程调用改造原代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleCartItems</span><span class="params">(List&lt;CartVO&gt; vos)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.获取商品id</span></span><br><span class="line">    Set&lt;Long&gt; itemIds = vos.stream().map(CartVO::getItemId).collect(Collectors.toSet());</span><br><span class="line">    <span class="comment">// 2.查询商品</span></span><br><span class="line">    -   <span class="comment">// List&lt;ItemDTO&gt; items = itemService.queryItemByIds(itemIds);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ---------------远程调用-------------------- //</span></span><br><span class="line">        <span class="comment">// 利用RestTemplate发起http请求,得到http的响应</span></span><br><span class="line">    ResponseEntity&lt;List&lt;ItemDTO&gt;&gt; response = restTemplate.exchange(</span><br><span class="line">        <span class="string">&quot;http://localhost:8081/items?ids=&#123;ids&#125;&quot;</span>, <span class="comment">// &#123;ids&#125;:占位符</span></span><br><span class="line">        HttpMethod.GET,</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ParameterizedTypeReference</span>&lt;List&lt;ItemDTO&gt;&gt;() &#123;</span><br><span class="line">        &#125;,<span class="comment">// 利用泛型, 反射拿到</span></span><br><span class="line">        Map.of(<span class="string">&quot;ids&quot;</span>, CollUtil.join(itemIds, <span class="string">&quot;,&quot;</span>)) <span class="comment">// JDk11中的Map.of,  Hutool中的CollUtil拼接</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 解析响应</span></span><br><span class="line">    <span class="keyword">if</span>(!response.getStatusCode().is2xxSuccessful())&#123; <span class="comment">// 不是2xx类型</span></span><br><span class="line">        <span class="comment">// 查询失败</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;ItemDTO&gt; body = response.getBody();</span><br><span class="line">    <span class="comment">// ---------------------------------------- //</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (CollUtils.isEmpty(items)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.转为 id 到 item的map</span></span><br><span class="line">    Map&lt;Long, ItemDTO&gt; itemMap = items.stream().collect(Collectors.toMap(ItemDTO::getId, Function.identity()));</span><br><span class="line">    <span class="comment">// 4.写入vo</span></span><br><span class="line">    <span class="keyword">for</span> (CartVO v : vos) &#123;</span><br><span class="line">        <span class="type">ItemDTO</span> <span class="variable">item</span> <span class="operator">=</span> itemMap.get(v.getItemId());</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        v.setNewPrice(item.getPrice());</span><br><span class="line">        v.setStatus(item.getStatus());</span><br><span class="line">        v.setStock(item.getStock());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个过程中，<code>item-service</code>提供了查询接口，<code>cart-service</code>利用Http请求调用该接口。因此<code>item-service</code>可以称为服务的<u>提供者</u>，而<code>cart-service</code>则称为服务的<u>消费者</u>或服务调用者</p><h4 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h4><p>如何拆分？</p><ul><li>首先要做到高内聚、低耦合</li><li>从拆分方式来说，有横向拆分和纵向拆分两种。纵向就是按照业务功能模块，横向则是拆分通用性业务，提高复用性</li></ul><p>服务拆分之后，不可避免的会出现跨微服务的业务，此时微服务之间就需要进行远程调用。微服务之间的远程调用被称为RPC，即远程过程调用。RPC的实现方式有很多，比如：</p><ul><li>基于Http协议</li><li>基于Dubbo协议</li></ul><p>案例中使用的是Http方式，这种方式不关心服务提供者的具体技术实现，只要对外暴露Http接口即可，更符合微服务的需要。</p><p>Java发送http请求可以使用Spring提供的RestTemplate，使用的基本步骤如下：</p><ul><li>注册RestTemplate到Spring容器</li><li>调用RestTemplate的API发送请求，常见方法有：<ul><li>getForObject：发送Get请求并返回指定类型对象</li><li>PostForObject：发送Post请求并返回指定类型对象</li><li>put：发送PUT请求</li><li>delete：发送Delete请求</li><li>exchange：发送任意类型请求，返回ResponseEntity</li></ul></li></ul><p>对于刚刚案例的远程调用方式,  固定IP和端口,  访问固定的服务,  那么现在出现问题有:  1)假如固定访问的服务器宕机了怎么办  2)假如使用多服务,那么该怎么去指定访问服务呢  3)如果并发太高，<code>item-service</code>临时多部署了N台实例，<code>cart-service</code>如何知道新实例的地址</p><h2 id="Nacos服务注册和发现"><a href="#Nacos服务注册和发现" class="headerlink" title="Nacos服务注册和发现"></a>Nacos服务注册和发现</h2><h3 id="注册中心原理"><a href="#注册中心原理" class="headerlink" title="注册中心原理"></a>注册中心原理</h3><p>在微服务远程调用的过程中，包括两个角色：</p><ul><li>服务提供者：提供接口供其它微服务访问，比如<code>item-service</code></li><li>服务消费者：调用其它微服务提供的接口，比如<code>cart-service</code></li></ul><p>在大型微服务项目中，服务提供者的数量会非常多，为了管理这些服务就引入了<strong>注册中心</strong>的概念。</p><p>注册流程如下：</p><ul><li>服务启动时就会注册自己的服务信息（服务名、IP、端口）到注册中心</li><li>调用者可以从注册中心订阅想要的服务，获取服务对应的实例列表（1个服务可能多实例部署）</li><li>调用者自己对实例列表负载均衡，挑选一个实例</li><li>调用者向该实例发起远程调用</li></ul><p>当服务提供者的实例宕机或者启动新实例时，调用者如何得知呢？</p><ul><li>服务提供者会定期向注册中心发送请求，报告自己的健康状态（心跳请求）</li><li>当注册中心长时间收不到提供者的心跳时，会认为该实例宕机，将其从服务的实例列表中剔除</li><li>当服务有新实例启动时，会发送注册服务请求，其信息会被记录在注册中心的服务实例列表</li><li>当注册中心服务列表变更时，会主动通知微服务，更新本地服务列表</li></ul><h3 id="Nacos注册中心配置"><a href="#Nacos注册中心配置" class="headerlink" title="Nacos注册中心配置"></a>Nacos注册中心配置</h3><p>Nacos官网  <a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">Nacos</a></p><p>开门见山</p><h4 id="在Windows本地"><a href="#在Windows本地" class="headerlink" title="在Windows本地"></a>在Windows本地</h4><ol><li><p>存储Nacos数据,  首先我们需要在MySQL中创建表nacos,  SQL脚本在<code>conf</code>目录下找到初始化脚本<code>nacos-mysql.sql</code>, 然后导入即可</p></li><li><p>修改<code>nacos</code>的<code>application.properties</code>配置文件,  设置数据库连接为MySQL</p></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#*************** Config Module Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If use MySQL as datasource:</span></span><br><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="comment"># spring.sql.init.platform=mysql</span></span><br><span class="line"><span class="comment">### Count of DB:</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### Connect URL of DB:</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"># 下面还有一个秘钥可以修改,用于鉴权</span></span><br></pre></td></tr></table></figure><ol start="3"><li>单机启动指令: <code>startup.cmd -m standalone  </code>, 或者在<code>startup.cmd</code>文件中<code>set MODE=&quot;standalone&quot;</code></li></ol><h4 id="在Docker部署"><a href="#在Docker部署" class="headerlink" title="在Docker部署"></a>在Docker部署</h4><ol><li>存储Nacos数据,  首先我们需要在MySQL中创建表nacos,  SQL脚本在<code>conf</code>目录下找到初始化脚本<code>nacos-mysql.sql</code>, 然后导入即可</li><li>创建挂载<code>conf</code>和<code>logs</code>目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /idata/nacos/logs/                      <span class="comment">#新建logs目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /idata/nacos/conf/<span class="comment">#新建conf目录</span></span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8848:8848 --name nacos -d nacos/nacos-server</span><br></pre></td></tr></table></figure><ol start="4"><li>启动容器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run -d</span><br><span class="line">--name nacos </span><br><span class="line">-p 8848:8848  </span><br><span class="line">-p 9848:9848 </span><br><span class="line">-p 9849:9849</span><br><span class="line">--privileged=<span class="literal">true</span></span><br><span class="line">-e JVM_XMS=256m</span><br><span class="line">-e JVM_XMX=256m</span><br><span class="line">-e MODE=standalone</span><br><span class="line">-v /idata/nacos/logs/:/home/nacos/logs</span><br><span class="line">-v /idata/nacos/conf/:/home/nacos/conf/</span><br><span class="line">--restart=always</span><br><span class="line">nacos/nacos-server</span><br></pre></td></tr></table></figure><p>-e JVM_XMS&#x3D;256m ： 为jvm启动时分配的内存</p><p>-e JVM_XMX&#x3D;256m ： 为jvm运行过程中分配的最大内存</p><p><strong>注意事项</strong></p><p>需要在防火墙开放相关端口，如果你是云服务器，开放安全组，下面提供相关语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 开放端口8848 9848 9849</span></span><br><span class="line">firewall-cmd --zone=public --add-port=8848/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=9848/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=9849/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment">## 重启防火墙</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看所有开启的端口</span></span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><ol start="5"><li>跟在Windows配置一样,  进入Nacos配置</li></ol><h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><p>接下来，我们把服务注册到Nacos，步骤如下：</p><ul><li>引入依赖</li><li>配置Nacos地址</li><li>重启</li></ul><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>在需要服务注册的<code>pom.xml</code>中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos 服务注册发现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置Nacos"><a href="#配置Nacos" class="headerlink" title="配置Nacos"></a>配置Nacos</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">item-service</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span> <span class="comment"># nacos地址</span></span><br></pre></td></tr></table></figure><h4 id="启动服务实例"><a href="#启动服务实例" class="headerlink" title="启动服务实例"></a>启动服务实例</h4><p>在IDEA可以启动多个实例,  复制一份启动配置然后在VM Options中配置其他端口即可(在同一台机器上)</p><p>然后启动,  登录nacos就可以看到服务上线</p><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><p>服务的消费者要去nacos订阅服务，这个过程就是服务发现，步骤如下：</p><ul><li>引入依赖</li><li>配置Nacos地址</li><li>发现并调用服务</li></ul><p>服务发现除了要引入nacos依赖以外，由于还需要负载均衡，因此要引入SpringCloud提供的LoadBalancer依赖。</p><p>我们在模块中导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos 服务注册发现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以发现，这里Nacos的依赖于服务注册时一致，这个依赖中同时包含了服务注册和发现的功能。因为任何一个微服务都可以调用别人，也可以被别人调用，即可以是调用者，也可以是提供者。</p><p>因此，等一会儿<code>cart-service</code>模块启动，同样会注册到Nacos</p><h4 id="配置Nacos地址"><a href="#配置Nacos地址" class="headerlink" title="配置Nacos地址"></a>配置Nacos地址</h4><p>在<code>cart-service</code>的<code>application.yml</code>中添加nacos地址配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span> <span class="comment"># nacos地址</span></span><br></pre></td></tr></table></figure><h4 id="发现并调用服务-负载均衡"><a href="#发现并调用服务-负载均衡" class="headerlink" title="发现并调用服务(负载均衡)"></a>发现并调用服务(负载均衡)</h4><p>对于发现注册的服务需要在启动类上加注解<code>@EnableDiscoveryClient</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiscoveryApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DiscoveryApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，服务调用者<code>cart-service</code>就可以去订阅<code>item-service</code>服务了。不过item-service有多个实例，而真正发起调用时只需要知道一个实例的地址。</p><p>因此，服务调用者必须利用负载均衡的算法，从多个实例中挑选一个去访问。常见的负载均衡算法有：</p><ul><li>随机</li><li>轮询</li><li>IP的hash</li><li>最近最少访问</li><li>…</li></ul><p>这里我们可以选择最简单的随机负载均衡。</p><p>另外，服务发现需要用到一个工具，DiscoveryClient，SpringCloud已经帮我们自动装配，我们可以直接注入使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient; <span class="comment">// 构造器注入</span></span><br></pre></td></tr></table></figure><p>那么对于之前固定服务者的的IP操作进行修改,  通过DiscoveryClient发现服务实例列表，然后通过负载均衡算法，选择一个实例去调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> DiscoveryClient discoveryClient;  <span class="comment">// 构造器注入</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleCartItems</span><span class="params">(List&lt;CartVO&gt; vos)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取商品id</span></span><br><span class="line">        Set&lt;Long&gt; itemIds = vos.stream().map(CartVO::getItemId).collect(Collectors.toSet());</span><br><span class="line">    <span class="comment">// -------------------------划时代的改变------------------------- // </span></span><br><span class="line">        <span class="comment">// 2.查询商品</span></span><br><span class="line">        <span class="comment">// 2.1 根据服务名称获取服务的实例列表</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;cart-service&quot;</span>); <span class="comment">// 服务名称</span></span><br><span class="line">        <span class="keyword">if</span> (CollUtils.isEmpty(instances)) &#123;</span><br><span class="line">            <span class="comment">// 查询失败,直接结束</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.2 负载均衡,从实例中挑选一个实例 (随机挑选)</span></span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">serviceInstance</span> <span class="operator">=</span> instances.get(RandomUtil.randomInt(instances.size()));</span><br><span class="line">        <span class="comment">// 2.3 利用RestTemplate发起http请求,得到http响应</span></span><br><span class="line">        ResponseEntity&lt;List&lt;ItemDTO&gt;&gt; response = restTemplate.exchange(</span><br><span class="line">                serviceInstance.getUri() + <span class="string">&quot;/items?ids=&#123;ids&#125;&quot;</span>, <span class="comment">// 拼接占位符</span></span><br><span class="line">   <span class="comment">// -------------------------代码修改范围end----------------------- // </span></span><br><span class="line">                HttpMethod.GET,</span><br><span class="line">                <span class="literal">null</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ParameterizedTypeReference</span>&lt;List&lt;ItemDTO&gt;&gt;() &#123;</span><br><span class="line">                &#125;,<span class="comment">// 利用泛型, 反射拿到</span></span><br><span class="line">                Map.of(<span class="string">&quot;ids&quot;</span>, CollUtil.join(itemIds, <span class="string">&quot;,&quot;</span>)) <span class="comment">// JDk11中的Map.of,  Hutool中的CollUtil拼接</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span> (!response.getStatusCode().is2xxSuccessful()) &#123; <span class="comment">// 不是2xx类型</span></span><br><span class="line">            <span class="comment">// 查询失败</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;ItemDTO&gt; items = response.getBody();</span><br><span class="line"><span class="comment">// 略</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>此时在swagger进行测试,  当前测试建立在我们一个模块开启多个服务的情况下,  通过发多次请求,  后台控制台均有日志输出信息,  说明负载均衡起作用了</p><p>假如现在有服务挂了(总共服务: 1.<code>ItemApplication</code>   2.<code>ItemApplication2</code>),  2服务挂了,  再次测试发现SpringCloud自动感知到了,  此时请求全部打在服务1上</p><p>对于上述负载均衡方案为手写的随机负载均衡，除了该方案还有基于原生的<code>RestTemplate</code>方案，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RestTemplcate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过原生的RestTemplcate在Spring容器中注册Bean，并且在Bean上面加注解<code>@LoadBalanced</code>来实现负载均衡,  对于当前方案我们需要提供依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--LoadBalanced--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> DiscoveryClient discoveryClient;  <span class="comment">// 构造器注入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 根据服务名称获取服务的实例列表</span></span><br><span class="line">List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;cart-service&quot;</span>); <span class="comment">// 服务名称</span></span><br><span class="line"><span class="comment">// 2 负载均衡,从实例中挑选一个实例 (随机挑选)</span></span><br><span class="line"><span class="type">ServiceInstance</span> <span class="variable">serviceInstance</span> <span class="operator">=</span> instances.get(RandomUtil.randomInt(instances.size()));</span><br><span class="line"><span class="comment">// 3 获取实例端口和IP</span></span><br><span class="line"><span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> serviceInstance.getUri();</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="OpenFeign远程调用"><a href="#OpenFeign远程调用" class="headerlink" title="OpenFeign远程调用"></a>OpenFeign远程调用</h2><p>在上面的例子，我们利用Nacos实现了服务的治理，利用RestTemplate实现了服务的远程调用。但是远程调用的代码太复杂了(如下code)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.1 根据服务名称获取服务的实例列表</span></span><br><span class="line">List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;item-service&quot;</span>); <span class="comment">// 服务名称</span></span><br><span class="line"><span class="keyword">if</span> (CollUtils.isEmpty(instances)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.2 负载均衡,从实例中挑选一个实例 (随机挑选)</span></span><br><span class="line"><span class="type">ServiceInstance</span> <span class="variable">serviceInstance</span> <span class="operator">=</span> instances.get(RandomUtil.randomInt(instances.size()));</span><br><span class="line"><span class="comment">// 2.3 利用RestTemplate发起http请求,得到http响应</span></span><br><span class="line">ResponseEntity&lt;List&lt;ItemDTO&gt;&gt; response = restTemplate.exchange(</span><br><span class="line">    serviceInstance.getUri() + <span class="string">&quot;/items?ids=&#123;ids&#125;&quot;</span>, <span class="comment">// 拼接占位符</span></span><br><span class="line">    HttpMethod.GET,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ParameterizedTypeReference</span>&lt;List&lt;ItemDTO&gt;&gt;() &#123;</span><br><span class="line">    &#125;,<span class="comment">// 利用泛型, 反射拿到</span></span><br><span class="line">    Map.of(<span class="string">&quot;ids&quot;</span>, CollUtil.join(itemIds, <span class="string">&quot;,&quot;</span>)) <span class="comment">// JDk11中的Map.of,  Hutool中的CollUtil拼接</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>有什么方法可以让<strong>远程调用像本地方法调用一样简单</strong>呢?    你说呢,  看这一小节的标题</p><p>下面例子还是以 cart-service中的查询购物车为例</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><p>在<code>cart-service</code>服务的pom.xml中引入<code>OpenFeign</code>的依赖和<code>loadBalancer</code>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--openFeign--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--负载均衡器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启用OpenFeign"><a href="#启用OpenFeign" class="headerlink" title="启用OpenFeign"></a>启用OpenFeign</h4><p>在<code>cart-service</code>的<code>CartApplication</code>启动类上添加注解，启动OpenFeign功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>  <span class="comment">// 开启OpenFeign</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartApplication</span> &#123;</span><br><span class="line">    <span class="comment">// ... 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写OpenFeign客户端"><a href="#编写OpenFeign客户端" class="headerlink" title="编写OpenFeign客户端"></a>编写OpenFeign客户端</h4><p>在<code>cart-service</code>中，定义一个新的接口，编写Feign客户端：</p><p>其中代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;item-service&quot;)</span>  <span class="comment">// 服务名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ItemClient</span> &#123;      <span class="comment">// 结果:  在指定的服务+指定的请求地址+请求参数  =&gt;  模拟的http请求</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  其实就是跟SpringMVC写请求差不多的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/items&quot;)</span></span><br><span class="line">    List&lt;ItemDTO&gt; <span class="title function_">queryItemByIds</span><span class="params">(<span class="meta">@RequestParam(&quot;ids&quot;)</span> Collection&lt;Long&gt; ids)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只需要声明接口，无需实现方法。接口中的几个关键信息：</p><ul><li><code>@FeignClient(&quot;item-service&quot;)</code> ：声明服务名称</li><li><code>@GetMapping</code> ：声明请求方式</li><li><code>@GetMapping(&quot;/items&quot;)</code> ：声明请求路径</li><li><code>@RequestParam(&quot;ids&quot;) Collection&lt;Long&gt; ids</code> ：声明请求参数</li><li><code>List&lt;ItemDTO&gt;</code> ：返回值类型</li></ul><p>有了上述信息，OpenFeign就可以利用动态代理帮我们实现这个方法，并且向<code>http://item-service/items</code>发送一个<code>GET</code>请求，携带ids为请求参数，并自动将返回值处理为<code>List&lt;ItemDTO&gt;</code>。</p><p>我们只需要直接调用这个方法，即可实现远程调用了</p><h4 id="使用FeignClient"><a href="#使用FeignClient" class="headerlink" title="使用FeignClient"></a>使用FeignClient</h4><p>基于上面编写的客户端接口</p><p>我们在<code>cart-service</code>的<code>com.hmall.cart.service.impl.CartServiceImpl</code>中改造代码，直接调用<code>ItemClient</code>的方法(即老例子)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    private final RestTemplate restTemplate;</span></span><br><span class="line"><span class="comment">//    private final DiscoveryClient discoveryClient;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ItemClient itemClient;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleCartItems</span><span class="params">(List&lt;CartVO&gt; vos)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.获取商品id</span></span><br><span class="line">    Set&lt;Long&gt; itemIds = vos.stream().map(CartVO::getItemId).collect(Collectors.toSet());</span><br><span class="line">    <span class="comment">// -----------现在--------- // </span></span><br><span class="line">    List&lt;ItemDTO&gt; items = itemClient.queryItemByIds(itemIds);</span><br><span class="line"> <span class="comment">// ----------------------- //</span></span><br><span class="line">    <span class="keyword">if</span> (CollUtils.isEmpty(items)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.转为 id 到 item的map</span></span><br><span class="line">    Map&lt;Long, ItemDTO&gt; itemMap = items.stream().collect(Collectors.toMap(ItemDTO::getId, Function.identity()));</span><br><span class="line">    <span class="comment">// 4.写入vo</span></span><br><span class="line">    <span class="keyword">for</span> (CartVO v : vos) &#123;</span><br><span class="line">        <span class="type">ItemDTO</span> <span class="variable">item</span> <span class="operator">=</span> itemMap.get(v.getItemId());</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        v.setNewPrice(item.getPrice());</span><br><span class="line">        v.setStatus(item.getStatus());</span><br><span class="line">        v.setStock(item.getStock());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>feign替我们完成了服务拉取、负载均衡、发送http请求的所有工作，是不是看起来<wavy>优雅多了</wavy>。</p><p>而且，这里我们不再需要RestTemplate了，还省去了RestTemplate的注册。</p><h4 id="OpenFeign小总结"><a href="#OpenFeign小总结" class="headerlink" title="OpenFeign小总结"></a>OpenFeign小总结</h4><img src="/2024/01/20/SpringCloud/OpenFeign_1.png" class title="购物流程,注册与调用"><h5 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h5><p>服务消费者的启动类上开启OpenFeign客户端<code>@EnableFeignClients()</code>,  括号里面可选<strong>指定扫描注册路径</strong>和<strong>默认行为指定</strong>(当前两处横线 案例可参考当前#OpenFeign章节的#最佳实践 和#日志配置),</p><h5 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h5><p>服务提供者抽取服务消费者需要调用的方法,  注册至<code>Client</code>, 我们可以定义一个模块为<code>api</code>模块专门用于提取接口暴露,  集中注册便于客户端扫描,  其中在Client接口类通过<code>@FeignClient(&quot;xxx-service&quot;)</code>指定服务名(当前服务名为服务提供者的应用名)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每一个springboot微服务都需要取一个名字</span></span><br><span class="line"><span class="attr">spring.application.name</span> = <span class="string">xxx-service </span></span><br></pre></td></tr></table></figure><p>每一个服务可以是服务提供者也可以是服务消费者</p><h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><p>Feign底层发起http请求，依赖于其它的框架。其底层支持的http客户端实现包括：</p><ul><li>HttpURLConnection：默认实现，不支持连接池</li><li>Apache HttpClient ：支持连接池</li><li>OKHttp：支持连接池</li></ul><p>因此我们通常会使用带有连接池的客户端来代替默认的HttpURLConnection。比如，我们使用OK Http</p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>在<code>cart-service</code>的<code>pom.xml</code>中引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--OK http 的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="开启连接池"><a href="#开启连接池" class="headerlink" title="开启连接池"></a>开启连接池</h4><p>在<code>cart-service</code>的<code>application.yml</code>配置文件中开启Feign的连接池功能：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">okhttp:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启OKHttp功能</span></span><br></pre></td></tr></table></figure><p>然后就开启完成了,  测试是否开启可以通过Debug模式查看</p><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p>关于重复的编码结果,  我们可以通过<wavy>抽取公共模块</wavy>,  建立一个新的模块给其他模块提供公共服务,  例如common模块中可以放入经常使用的entity实体,</p><p>对于api模块抽取,  需要调用api模块中的接口的模块则<u>添加</u>对于该模块的依赖</p><h4 id="例-抽取Feign客户端"><a href="#例-抽取Feign客户端" class="headerlink" title="例:抽取Feign客户端"></a>例:抽取Feign客户端</h4><ol><li>创建一个模块, 专门用来放api的,  导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--openFeign--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--负载均衡器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为此模块是客户端,  所以 是要导入OpenFeign和负载均衡为基础的</p><ol start="2"><li>在该模块中把之前的<code>Client</code>移动过来,  因为该接口需要用到<code>ItemDto</code>,  故dto也要移动过来</li><li>在需要引用(调用)该模块的pom文件中,  <wavy>导入依赖</wavy>,  如果此时运行是不行的,  当前模块没有被扫描到,  没有被Spring管理,  因为此时在另外一个模块了,  不在扫描的路径下了</li><li>添加扫描</li></ol><p>在需要调用的模块的启动类上添加声明即可，两种方式：</p><ul><li>方式1：声明扫描包：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.calyee.api.client&quot;)</span> <span class="comment">// 类全路径(抽取的模块)</span></span><br></pre></td></tr></table></figure><ul><li>方式2：声明要用的FeignClient</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(clients = &#123;ItemClient.class&#125;)</span>           <span class="comment">// 客户端接口</span></span><br></pre></td></tr></table></figure><h3 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h3><p>OpenFeign只会在FeignClient所在包的日志级别为<strong>DEBUG</strong>时，才会输出日志。而且其日志级别有4级：</p><ul><li><strong>NONE</strong>：不记录任何日志信息，这是默认值。</li><li><strong>BASIC</strong>：仅记录请求的方法，URL以及响应状态码和执行时间</li><li><strong>HEADERS</strong>：在BASIC的基础上，额外记录了请求和响应的头信息</li><li><strong>FULL</strong>：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li></ul><p>Feign默认的日志级别就是NONE，所以默认我们看不到请求日志。</p><h4 id="定义日志级别"><a href="#定义日志级别" class="headerlink" title="定义日志级别"></a>定义日志级别</h4><p>在刚刚抽取的client模块下新建一个配置类，定义Feign的日志级别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultFeignConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">feignLogLevel</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>接下来，要让日志级别生效，还需要配置这个类。有两种方式：</p><ul><li><strong>局部</strong>生效：在某个<code>FeignClient</code>中配置，只对当前<code>FeignClient</code>生效</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;item-service&quot;, configuration = DefaultFeignConfig.class)</span></span><br></pre></td></tr></table></figure><ul><li><strong>全局</strong>生效：在<code>@EnableFeignClients</code>中配置，针对所有<code>FeignClient</code>生效。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfig.class)</span></span><br></pre></td></tr></table></figure><blockquote><p>一般情况不需要配置日志,  仅仅在有需要的时候在开启即可</p></blockquote><h2 id="Gateway网关路由"><a href="#Gateway网关路由" class="headerlink" title="Gateway网关路由"></a>Gateway网关路由</h2><p>网关就是<strong>网</strong>络的<strong>关</strong>口。数据在网络间传输，从一个网络传输到另一网络时就需要经过网关来做数据的<strong>路由和转发以及数据安全的校验</strong>,  其实就是委托</p><p>eg: 有人在小区楼下找你,  但是在楼下保安会拦住, 然后只能询问保安,  然后让保安去找你  </p><p>现在，微服务网关就起到同样的作用。前端请求不能直接访问微服务，而是要<strong>请求网关</strong>：</p><ul><li>网关可以做安全控制，也就是登录身份校验，校验通过才放行</li><li>通过认证后，网关再根据请求判断应该访问哪个微服务，将请求转发过去</li></ul><img src="/2024/01/20/SpringCloud/gateway_1.png" class><p>网关在注册中心找服务,  负载均衡</p><h3 id="SpringCloud-Gateway"><a href="#SpringCloud-Gateway" class="headerlink" title="SpringCloud Gateway"></a>SpringCloud Gateway</h3><p>创建网关模块 gateway</p><h4 id="导入依赖-1"><a href="#导入依赖-1" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--网关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nacos discovery--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--负载均衡--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编写启动类"><a href="#编写启动类" class="headerlink" title="编写启动类"></a>编写启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h4><p>在gateway模块中的配置文件中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span>   <span class="comment"># Nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">item</span> <span class="comment"># 路由规则id，自定义，唯一</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://item-service</span> <span class="comment"># 路由的目标服务，lb代表负载均衡，会从注册中心拉取服务列表</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言，判断当前请求是否符合当前规则，符合则路由到目标服务</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/items/**,/search/**</span> <span class="comment"># 这里是以请求路径作为判断规则</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cart</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cart-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/carts/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://user-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/users/**,/addresses/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">trade</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://trade-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/orders/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">pay</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://pay-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/pay-orders/**</span></span><br></pre></td></tr></table></figure><p>详情配置: [Spring Cloud Gateway](<a href="https://docs.spring.io/spring-cloud-gateway/docs/3.1.8/reference/html/">Spring Cloud Gateway</a>)</p><p>然后所有在网关注册的服务的访问,  <wavy>直接访问网关配置的端口</wavy>即可</p><h4 id="路由过滤"><a href="#路由过滤" class="headerlink" title="路由过滤"></a>路由过滤</h4><p>对于刚刚案例中的路由配置( 截取一部分 )</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">item</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://item-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/items/**,/search/**</span></span><br></pre></td></tr></table></figure><p>追踪router可以发现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.cloud.gateway&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayProperties</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PREFIX</span> <span class="operator">=</span> <span class="string">&quot;spring.cloud.gateway&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> LogFactory.getLog(<span class="built_in">this</span>.getClass());</span><br><span class="line">    <span class="comment">// 当前为路由配置项(为一个List集合)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@NotNull</span> <span class="meta">@Valid</span> List&lt;RouteDefinition&gt; routes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以发现routes是一个集合,  那么可以定义多个路由项</p><p>其中路由的属性如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RouteDefinition</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@NotEmpty</span> <span class="meta">@Valid</span> List&lt;PredicateDefinition&gt; predicates = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@Valid</span> List&lt;FilterDefinition&gt; filters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@NotNull</span> URI uri;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; metadata = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">order</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>四个属性含义如下：</p><ul><li><code>id</code>：路由的唯一标示</li><li><code>predicates</code>：路由断言，其实就是匹配条件</li><li><code>filters</code>：路由过滤条件，后面讲</li><li><code>uri</code>：路由目标地址，<code>lb://</code>代表负载均衡，从注册中心获取目标微服务的实例列表，并且负载均衡选择一个访问。</li></ul><p>在当前属性中,  显然最关心的是路由断言(<code>predicates</code>),  其中包括很多语法如下</p><table><thead><tr><th align="left"><strong>名称</strong></th><th align="left"><strong>说明</strong></th><th align="left"><strong>示例</strong></th></tr></thead><tbody><tr><td align="left">After</td><td align="left">是某个时间点后的请求</td><td align="left">- After&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver]</td></tr><tr><td align="left">Before</td><td align="left">是某个时间点之前的请求</td><td align="left">- Before&#x3D;2031-04-13T15:14:47.433+08:00[Asia&#x2F;Shanghai]</td></tr><tr><td align="left">Between</td><td align="left">是某两个时间点之前的请求</td><td align="left">- Between&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver], 2037-01-21T17:42:47.789-07:00[America&#x2F;Denver]</td></tr><tr><td align="left">Cookie</td><td align="left">请求必须包含某些cookie</td><td align="left">- Cookie&#x3D;chocolate, ch.p</td></tr><tr><td align="left">Header</td><td align="left">请求必须包含某些header</td><td align="left">- Header&#x3D;X-Request-Id, \d+</td></tr><tr><td align="left">Host</td><td align="left">请求必须是访问某个host（域名）</td><td align="left">- Host&#x3D;<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td align="left">Method</td><td align="left">请求方式必须是指定方式</td><td align="left">- Method&#x3D;GET,POST</td></tr><tr><td align="left">Path</td><td align="left">请求路径必须符合指定规则</td><td align="left">- Path&#x3D;&#x2F;red&#x2F;{segment},&#x2F;blue&#x2F;**</td></tr><tr><td align="left">Query</td><td align="left">请求参数必须包含指定参数</td><td align="left">- Query&#x3D;name, Jack或者- Query&#x3D;name</td></tr><tr><td align="left">RemoteAddr</td><td align="left">请求者的ip必须是指定范围</td><td align="left">- RemoteAddr&#x3D;192.168.1.1&#x2F;24</td></tr><tr><td align="left">weight</td><td align="left">权重处理</td><td align="left"></td></tr></tbody></table><h2 id="网关登录校验"><a href="#网关登录校验" class="headerlink" title="网关登录校验"></a>网关登录校验</h2><p>对于单体架构,  我们只需要完成一次用户登录、进行身份校验就可以在所有业务中得到用户信息（ThreadLocal）。在微服务下，每一个服务都是一个单独部署，数据不像单体架构那样共享。</p><p>在上一部分我们知道，所有的微服务请求只要在网关中注册然后，请求只需要打在网关上面就可以定向到具体的服务，那么大胆猜想：岂不是可以在网关中做校验，然后把校验数据放请求头里面是不是就完成了身份互通，那么</p><ul><li>只需要在网关和用户服务保存秘钥</li><li>只需要在网关开发登录校验功能</li></ul><p>由网关下发传递用户信息签发服务，不过，这里存在几个问题：</p><ul><li>网关路由是配置的，请求转发是Gateway内部代码，我们如何在转发之前做登录校验？</li><li>网关校验JWT之后，如何将用户信息传递给微服务？</li><li>微服务之间也会相互调用，这种调用不经过网关，又该如何传递用户信息？</li></ul><h3 id="网关过滤器"><a href="#网关过滤器" class="headerlink" title="网关过滤器"></a>网关过滤器</h3><p>登录校验必须在请求转发到微服务之前做，否则就失去了意义。而网关的请求转发是<code>Gateway</code>内部代码实现的，要想在请求转发之前做登录校验，就必须了解<code>Gateway</code>内部工作的基本原理。</p><img src="/2024/01/20/SpringCloud/gateway_2.png" class title="网关过滤工作原理"><p>如图所示，我们只需要将自定义过滤器的执行顺序定义到<code>NettyRoutingFilter</code>之前即可。</p><p>网关过滤器链中的过滤器有两种：</p><ul><li><code>GatewayFilter</code>：路由过滤器，作用范围比较灵活，可以是任意指定的路由<code>Route</code>. </li><li><code>GlobalFilter</code>：全局过滤器，作用范围是所有路由，不可配置。</li></ul><blockquote><p><strong>注意</strong>：过滤器链之外还有一种过滤器，HttpHeadersFilter，用来处理传递到下游微服务的请求头。例如org.springframework.cloud.gateway.filter.headers.XForwardedHeadersFilter可以传递代理请求原本的host头到下游微服务。</p></blockquote><p>其实<code>GatewayFilter</code>和<code>GlobalFilter</code>这两种过滤器的方法签名完全一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理请求并将其传递给下一个过滤器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exchange 当前请求的上下文，其中包含request、response等各种数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> chain 过滤器链，基于它向下传递请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 根据返回值标记当前请求是否被完成或拦截，chain.filter(exchange)就放行了。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span>;</span><br></pre></td></tr></table></figure><p>Gateway中内置了很多的网关过滤器， 详情可以参考官方文档<a href="https://docs.spring.io/spring-cloud-gateway/docs/3.1.7/reference/html/#gatewayfilter-factories">Spring Cloud Gateway</a></p><p>单服务应用:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cart-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cart-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/carts/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">          <span class="comment"># 逗号之前是请求头的key，逗号之后是value</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestHeader=key,</span> <span class="string">value</span></span><br></pre></td></tr></table></figure><p>例如我此时给<code>cart-service</code>路由服务添加了<strong>请求过滤器</strong>，访问cart服务则在请求头里面会新增<code>Key</code>:key  <code>Value</code>:value</p><p>多服务应用:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># default-filters下的过滤器可以作用于所有路由</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=key,</span> <span class="string">value</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cart-service</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://cart-service</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Path=/carts/**</span></span><br></pre></td></tr></table></figure><h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><h4 id="自定义GatewayFilter"><a href="#自定义GatewayFilter" class="headerlink" title="自定义GatewayFilter"></a>自定义GatewayFilter</h4><p>前置: 如果有<strong>传参数</strong>,定义执行顺序,范围等则用此项</p><p>自定义<code>GatewayFilter</code>不是直接实现<code>GatewayFilter</code>，而是实现<code>AbstractGatewayFilterFactory</code>。最简单的方式是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintAnyGatewayFilterFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractGatewayFilterFactory</span>&lt;Object&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> GatewayFilter <span class="title function_">apply</span><span class="params">(Object config)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GatewayFilter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">                <span class="comment">// 获取请求</span></span><br><span class="line">                <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">                <span class="comment">// 编写过滤器逻辑</span></span><br><span class="line">                log.info(<span class="string">&quot;过滤器执行了&quot;</span>);</span><br><span class="line">                <span class="comment">// 放行</span></span><br><span class="line">                <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当前自定义类名的后缀必须为: <code>GatewayFilterFactory</code></p></blockquote><p>众所周知SpringBoot约定大于配置，当我们这样命名的时候，在yaml中配置可以是这样的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">      <span class="comment"># 此处直接以自定义的GatewayFilterFactory类名称前缀类声明过滤器</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">PrintAny</span>   <span class="comment"># 写前缀即可</span></span><br></pre></td></tr></table></figure><p>另外，这种过滤器还可以支持动态配置参数，不过实现起来比较复杂，示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintAnyGatewayFilterFactory</span> <span class="comment">// 父类泛型是内部类的Config类型</span></span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">AbstractGatewayFilterFactory</span>&lt;PrintAnyGatewayFilterFactory.Config&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> GatewayFilter <span class="title function_">apply</span><span class="params">(Config config)</span> &#123;</span><br><span class="line">        <span class="comment">// OrderedGatewayFilter是GatewayFilter的子类(可以实现排序)，包含两个参数：</span></span><br><span class="line">        <span class="comment">// - GatewayFilter：过滤器</span></span><br><span class="line">        <span class="comment">// - int order值：值越小，过滤器执行优先级越高</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderedGatewayFilter</span>(<span class="keyword">new</span> <span class="title class_">GatewayFilter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">                <span class="comment">// 获取config值</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> config.getA();</span><br><span class="line">                <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> config.getB();</span><br><span class="line">                <span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> config.getC();</span><br><span class="line">                <span class="comment">// 编写过滤器逻辑</span></span><br><span class="line">                log.info(<span class="string">&quot;PrintAnyGatewayFilterFactory执行了, a = &#123;&#125;,b = &#123;&#125;,c = &#123;&#125;&quot;</span>, a, b, c);</span><br><span class="line">                <span class="comment">// 放行</span></span><br><span class="line">                <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义配置属性，成员变量名称很重要，下面会用到</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String a;</span><br><span class="line">        <span class="keyword">private</span> String b;</span><br><span class="line">        <span class="keyword">private</span> String c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将变量名称依次返回，顺序很重要，将来读取参数时需要按顺序获取</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">shortcutFieldOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> List.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回当前配置类的类型，也就是内部的Config</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;Config&gt; <span class="title function_">getConfigClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Config.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在yaml文件中使用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">PrintAny=1,2,3</span> <span class="comment"># 注意，这里多个参数以&quot;,&quot;隔开，将来会按照shortcutFieldOrder()方法返回的参数顺序依次复制</span></span><br></pre></td></tr></table></figure><p>上面这种配置方式参数必须严格按照shortcutFieldOrder()方法的返回参数名顺序来赋值。</p><p>还有一种用法，无需按照这个顺序，就是手动指定参数名：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PrintAny</span></span><br><span class="line">     <span class="attr">args:</span> <span class="comment"># 手动指定参数名，无需按照参数顺序</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">a:</span> <span class="number">1</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">b:</span> <span class="number">2</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">c:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="自定义GlobalFilter"><a href="#自定义GlobalFilter" class="headerlink" title="自定义GlobalFilter"></a>自定义GlobalFilter</h4><p>简单的过滤器</p><p>自定义GlobalFilter则简单很多，直接实现GlobalFilter即可，而且也无法设置动态参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintAnyGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 编写过滤器逻辑</span></span><br><span class="line">        log.info(<span class="string">&quot;未登录，无法访问&quot;</span>);</span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        <span class="comment">// return chain.filter(exchange);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拦截</span></span><br><span class="line">        <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line">        response.setRawStatusCode(<span class="number">401</span>);</span><br><span class="line">        <span class="keyword">return</span> response.setComplete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 过滤器执行顺序，值越小，优先级越高</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Actuator监控"><a href="#Actuator监控" class="headerlink" title="Actuator监控"></a>Actuator监控</h2><p>官网文档:<a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/#actuator-api">Spring Cloud Gateway</a></p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置打开的端点"><a href="#配置打开的端点" class="headerlink" title="配置打开的端点"></a>配置打开的端点</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span>           <span class="comment"># 通过 actuator暴露此服务的管理端口</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span>              <span class="comment"># 通过web来暴露管理API,</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span>  <span class="comment"># * 代表将所有的端口暴露  一定要加&quot;&quot;,因为 *是特殊字符，加&quot;&quot;防止转义</span></span><br></pre></td></tr></table></figure><p>以下所有端点都挂在&#x2F;actuator&#x2F;gateway&#x2F; 下面</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li>可以访问 你的服务+&#x2F;actuator&#x2F;gateway&#x2F;routefilters,  进行查看所有的过滤器工厂</li><li>&#x2F;actuator&#x2F;gateway&#x2F;routes:   展示所有的路由列表</li></ol><h2 id="自定义谓词工厂Predicates"><a href="#自定义谓词工厂Predicates" class="headerlink" title="自定义谓词工厂Predicates"></a>自定义谓词工厂Predicates</h2><p>众所周知 SpringCloud Gateway有很多内置的谓词工厂,   一般用的最多的是通过<u>路径</u>谓词工厂判断。</p><h3 id="分析PathRoutePredicateFactory谓词工厂"><a href="#分析PathRoutePredicateFactory谓词工厂" class="headerlink" title="分析PathRoutePredicateFactory谓词工厂"></a>分析PathRoutePredicateFactory谓词工厂</h3><p>要实现自定义谓词工厂，我们先分析<code>PathRoutePredicateFactory</code>谓词工厂.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.继承AbstractRoutePredicateFactory&lt;泛型自己的内部配置类.Config&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PathRoutePredicateFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractRoutePredicateFactory</span>&lt;PathRoutePredicateFactory.Config&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MATCH_TRAILING_SLASH</span> <span class="operator">=</span> <span class="string">&quot;matchTrailingSlash&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">PathPatternParser</span> <span class="variable">pathPatternParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PathPatternParser</span>();</span><br><span class="line"><span class="comment">// **4.把配置传回去</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">PathRoutePredicateFactory</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(Config.class);</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">// **2.重写</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="title function_">apply</span><span class="params">(Config config)</span> &#123;</span><br><span class="line"> <span class="comment">// 略</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GatewayPredicate</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(ServerWebExchange exchange)</span> &#123;</span><br><span class="line"><span class="comment">// 略</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.内部配置类, 后面利用反射的机制读取配置信息</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; patterns = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">matchTrailingSlash</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getPatterns</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> patterns;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Config <span class="title function_">setPatterns</span><span class="params">(List&lt;String&gt; patterns)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.patterns = patterns;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>仅保留主框架结构</p></blockquote><p>对于工厂模式:  该谓词工厂模式通过继承了一个抽象工厂,  实现重写apply方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RoutePredicateFactory为AbstractRoutePredicateFactory继承的接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoutePredicateFactory</span>&lt;C&gt; <span class="keyword">extends</span> <span class="title class_">ShortcutConfigurable</span>, Configurable&lt;C&gt; &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pattern key.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">String</span> <span class="variable">PATTERN_KEY</span> <span class="operator">=</span> <span class="string">&quot;pattern&quot;</span>;</span><br><span class="line"><span class="comment">// 工厂方法 核心方法</span></span><br><span class="line"><span class="keyword">default</span> Predicate&lt;ServerWebExchange&gt; <span class="title function_">apply</span><span class="params">(Consumer&lt;C&gt; consumer)</span> &#123;</span><br><span class="line"><span class="type">C</span> <span class="variable">config</span> <span class="operator">=</span> newConfig(); <span class="comment">// 配置文件</span></span><br><span class="line">consumer.accept(config); </span><br><span class="line">beforeApply(config);    <span class="comment">// 生成</span></span><br><span class="line"><span class="keyword">return</span> apply(config);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以最核心的就是 <strong>内部配置类</strong>和<strong>apply</strong>方法</p><p>其中内部配置类中 patterns是一个List集合,  模式可以有<u>多个</u> .</p><p>读取到配置类,  生成谓词语句,   然后遍历解析判断</p><h4 id="小结论"><a href="#小结论" class="headerlink" title="小结论"></a>小结论</h4><p>那么到这儿可以得出一个结论,  因为是一个一个的遍历解析判断,  那么就一定存在执行的<u>先后顺序</u>问题,   所以<wavy>,通用配置写在后面</wavy>,   特定配置写在前面</p><h3 id="自定义谓词工厂"><a href="#自定义谓词工厂" class="headerlink" title="自定义谓词工厂"></a>自定义谓词工厂</h3><p>例如我需要自定义一个在时间区间的(需要传入两个参数)</p><ol><li>在网关模块</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> TimeBetweenRoutePredicateFactory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 自定义时间谓词工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Calyee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeBetweenRoutePredicateFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractRoutePredicateFactory</span>&lt;TimeBetweenRoutePredicateFactory.Config&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器传入内部类的字节码文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TimeBetweenRoutePredicateFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Config.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="title function_">apply</span><span class="params">(Config config)</span> &#123;</span><br><span class="line">        <span class="comment">// 从内部配置类中获取配置属性</span></span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">startTime</span> <span class="operator">=</span> config.getStartTime();</span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">endTime</span> <span class="operator">=</span> config.getEndTime();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;ServerWebExchange&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(ServerWebExchange serverWebExchange)</span> &#123;</span><br><span class="line">                <span class="comment">// 当前时间</span></span><br><span class="line">                <span class="type">LocalTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">                <span class="keyword">return</span> now.isAfter(startTime) &amp;&amp; now.isBefore(endTime);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">START_TIME</span> <span class="operator">=</span> <span class="string">&quot;startTime&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">END_TIME</span> <span class="operator">=</span> <span class="string">&quot;endTime&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于接收yml中的两个参数 </span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">shortcutFieldOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(START_TIME, END_TIME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部配置类两个参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> LocalTime startTime;</span><br><span class="line">        <span class="keyword">private</span> LocalTime endTime;</span><br><span class="line">        <span class="comment">// Getter Setter</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>配置好在启动的时候会出现</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2023-12-20 21:28:41.488  INFO 6268 --- [           main] o.s.c.g.r.RouteDefinitionRouteLocator    : Loaded RoutePredicateFactory [TimeBetween]</span><br></pre></td></tr></table></figure><p>那么就证明已经被托管了</p><ol start="3"><li>Yaml</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">food-service</span> <span class="comment"># 路由规则id，自定义，唯一</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://food-service</span> <span class="comment"># 路由的目标服务，lb代表负载均衡，会从注册中心拉取服务列表</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言，判断当前请求是否符合当前规则，符合则路由到目标服务</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/resfood/**</span> <span class="comment"># 这里是以请求路径作为判断规则</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">TimeBetween=上午06:00,下午09:00</span></span><br></pre></td></tr></table></figure><p>然后就可以获取这两个参数了,  匹配到则会进行到我们自定义的谓词判断</p><h2 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h2><p>到此完成了在微服务相关的问题:</p><ul><li>远程调用</li><li>服务注册发现</li><li>请求路由网关、负载均衡</li><li>登录信息拦截传递（上章节未完成）</li></ul><p>到这儿可以发现，配置文件全是写死的，非常不灵活</p><ul><li>如果修改必须重新启动微服务</li><li>对于很多重复的配置显然可以抽取出来</li></ul><p>这些问题都可以通过统一的<strong>配置管理器服务</strong>解决。而Nacos不仅仅具备注册中心功能，也具备配置管理的功能：</p><p><img src="https://calyee-image.pages.dev/file/2e4c389170ce5a0f05ea6.png"></p><p>微服务共享的配置可以统一交给Nacos保存和管理，在Nacos控制台修改配置后，Nacos会将配置变更推送给相关的微服务，并且无需重启即可生效，实现配置热更新。</p><p>网关的路由同样是配置，因此同样可以基于这个功能实现动态路由功能，无需重启网关即可修改路由配置。</p><hr><p>到了此处，我们应该了解配置中心的架构图了</p><p><img src="https://calyee-image.pages.dev/file/e2cef8a8cd3b397fe23a7.png"></p><p>不难看出来，该处使用的设计模式为<u>观察者模式</u>，通过监听配置的变化，通知客户端修改配置，对于Nacos的持久化信息处理采用移入MySQL的方案</p><h3 id="抽取配置部署在Nacos（入门）"><a href="#抽取配置部署在Nacos（入门）" class="headerlink" title="抽取配置部署在Nacos（入门）"></a>抽取配置部署在Nacos（入门）</h3><p>对于抽取配置我们必须知道： 配置文件也是有执行顺序的</p><h4 id="入门案例：了解结构"><a href="#入门案例：了解结构" class="headerlink" title="入门案例：了解结构"></a>入门案例：了解结构</h4><div class="note primary flat"><p>需求点：在微服务<u>启动时</u>就要访问nacos配置中心</p></div><p>对于需要满足此需求，我们需要了解在nacos中如何管理配置文件。</p><p>启动nacos，为你的项目起一个命名空间（可选），在配置列表选择一个命名空间，在命名空间中添加配置文件，此时可以看到一个名为<strong>Data Id</strong>的字段，对于该字段笔者建议取例如该：<code>cloud-user-dev.yml</code>,  对于该配置命名的解释:  <code>$&#123;prefix&#125;-$&#123;spring.profiles.active&#125;.$&#123;file-extension&#125;</code></p><p>易知:  <code>prefix</code>为前缀名,  <code>spring.profiles.active</code>为配置生效的环境,  <code>file-extension</code>为文件后缀</p><p>到这可能会产生一个疑问：为什么需要这样取？ 因为这样取名一目了然且SpringBoot中的nacos配置文件就是读取这样的结构（如下图）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># 服务地址</span></span><br><span class="line">        <span class="comment"># namespace -&gt; group   =&gt;  $&#123;prefix&#125;-$&#123;spring.profiles.active&#125;.$&#123;file-extension&#125;</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">res</span>       <span class="comment"># 命名空间</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span> <span class="comment"># 分组</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span>     <span class="comment"># nacos登录配置</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">cloud-user</span>   <span class="comment"># 服务名</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span>  <span class="comment"># 后缀名</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span>             <span class="comment"># 生效的配置名</span></span><br></pre></td></tr></table></figure><p>在读取后就会自动拼接。</p><p>在这里的时候会想：到底是什么文件才能让他在启动时就可以访问，在之前我们知道配置文件有俩种方案（忽略不同后缀配置）</p><ul><li>通过<code>application.yml</code>的配置文件配置</li><li>在启动时通过命令行例如<code>-Dserver.port=8080</code>: 此项必须建立在启动类传入了args的情况</li></ul><p>阅读到这  他们俩的加载顺序凭经验就可以知道:  命令行 &gt; application.yml</p><h5 id="解析bootstrap-yml"><a href="#解析bootstrap-yml" class="headerlink" title="解析bootstrap.yml"></a>解析bootstrap.yml</h5><p>application.yml与bootstrap.yml的区别:  </p><ul><li>加载顺序</li></ul><p>bootstrap.yml先加载，application.yml后加载。bootstrap.yml用于应用程序上下文的引导阶段，由<u>父Spring ApplicationContext</u>加载。</p><ul><li>配置区别</li></ul><p>bootstrap.yml用来程序引导时执行，应用于更加早期配置信息读取，可以理解成系统级别的一些参数配置，这些参数一般是不会变动的。一旦bootStrap.yml被加载，则内容不会被覆盖。application.yml可以用来定义应用级别的，应用程序特有配置信息，可以用来配置后续各个模块中需使用的公共参数等。</p><ul><li>属性覆盖问题</li></ul><p>启动上下文时，Spring Cloud会创建一个Bootstrap Context，作为Spring应用的Application Context的父上下文。初始化的时候，Bootstrap Context负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的Environment。Bootstrap属性有高优先级，默认情况下，它们不会被本地配置覆盖。也就是说如果加载的application.yml的内容标签与bootstrap的标签一致，application也不会覆盖bootstrap，而application.yml里面的内容可以动态替换。</p><ul><li>如何使用</li></ul><p>在springcloud2020以后禁用了bootstrap.yml,如要重新打开，则需导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="如何简单的使用"><a href="#如何简单的使用" class="headerlink" title="如何简单的使用"></a>如何简单的使用</h4><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启对bootstrap.yml支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启nacos配置中心支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--监控(如果要动态更新必须导入该监控依赖)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>利用bootstrap.yml做启动配置(图例再现)</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848#</span> <span class="string">服务地址</span></span><br><span class="line">        <span class="comment"># namespace -&gt; group   =&gt;  $&#123;prefix&#125;-$&#123;spring.profiles.active&#125;.$&#123;file-extension&#125;</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">res</span>       <span class="comment"># 命名空间</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span> <span class="comment"># 分组</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span>     <span class="comment"># nacos登录配置</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">cloud-user</span>   <span class="comment"># 服务名</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span>  <span class="comment"># 后缀名</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span>             <span class="comment"># 生效的配置名</span></span><br></pre></td></tr></table></figure><p>在上述的配置配置完成之后,  可以在nacos尝试发布(示例配置)</p><p><img src="https://calyee-image.pages.dev/file/e7d6cf82c4362d29fbfa6.png"></p><p>此时配置完成(笼统的配置),  在项目中的配置(application.yml)就可以试着注释掉了,  还是和原来的启动结果一样</p><p>探索点:  此时我们可以试着把端口修改一下然后重启看看会发生什么奇效</p><h3 id="动态刷新"><a href="#动态刷新" class="headerlink" title="动态刷新"></a>动态刷新</h3><p>到这的时候,  我们在上一章节的需求似乎就完成了,  虽然抽取了启动的时候的配置文件,  这样似乎比之前确实好很多了,  可以动态修改端口这些</p><p>我们还需要动态刷新其他的属性其他的值呢?</p><p>我们可以使用注解<code>@RefreshScope</code>去获取到动态刷新的值   样例如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">// 加在类上可以自动感知属性的变化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">// 读取配置文件属性值my.pattern.dateFormatString</span></span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;my.pattern.dateFormatString&#125;&quot;)</span> </span><br><span class="line">    <span class="keyword">private</span> String dateFormatString;</span><br><span class="line">     </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getTimeInfo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">DateFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(dateFormatString);</span><br><span class="line">        <span class="type">String</span> <span class="variable">formatTime</span> <span class="operator">=</span> df.format(date);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(formatTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只需要在nacos的当前配置文件中修改<code>my.pattern.dateFormatString</code>的值就可以动态修改时间的格式了(yyyy-MM-dd HH:mm:ss  -&gt; yyyy年MM月dd日 HH:mm:ss)</p><ul><li>加在类上可以自动感知属性的变化</li><li>加在方法上可以感知方法里面的值变化</li></ul><blockquote><p>当前描述的值为被绑定过的值</p></blockquote><p>那么底层肯定是结合了 SpringBoot中的<code>actuator</code>的支持,  并且开放了 refreshScope端点的支持,  那么才能动态感知,  其实就是nacos服务器向项目的端点(refreshScope)发了一个请求 (POST &#x2F;actuator&#x2F;refresh)</p><h3 id="配置文件版本控制"><a href="#配置文件版本控制" class="headerlink" title="配置文件版本控制"></a>配置文件版本控制</h3><p>在nacos的配置管理中有一个配置回滚项(名为:历史版本)</p><h3 id="配置共享"><a href="#配置共享" class="headerlink" title="配置共享"></a>配置共享</h3><p>我们可以把微服务共享的配置抽取到Nacos中统一管理，这样就不需要每个微服务都重复配置了。分为两步：</p><ul><li>在Nacos中添加共享配置</li><li>微服务拉取配置</li></ul><p>如何添加共享配置呢?  数据库当然可以使用同一个, Redis也可以 …</p><p>那么把他们的配置给抽取出来 例如: <code>mysql8-local.yml</code>和<code>redis-local.yml</code></p><p>在nacos配置中创建该示例</p><p>抽取前面笼统的配置(mysql和redis的配置等),  当然也可以抽取其他的例如日志</p><p>例如抽取在nacos的redis配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># session保存到redis</span></span><br><span class="line">  <span class="attr">session:</span></span><br><span class="line">    <span class="attr">store-type:</span> <span class="string">redis</span></span><br><span class="line">  <span class="comment">#Redis相关配置</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span>  <span class="comment"># docker 后修改</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment">#password:123456</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span> <span class="comment">#0是0号数据库，redis默认开启的16个数据库</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">5000</span> <span class="comment">#超时时间</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="comment">#Redis连接池配置</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span> <span class="comment">#最大连接数</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">1ms</span> <span class="comment">#连接池最大阻塞等待时间</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">4</span> <span class="comment">#连接池中最大空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span> <span class="comment">#连接池中最小空闲连接</span></span><br></pre></td></tr></table></figure><p>抽取完成之后我们需要在bootstrap.yml中增加项(前面带+,  如需缩减则+变空格)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="comment"># namespace -&gt; group   =&gt;  $&#123;prefix&#125;-$&#123;spring.profiles.active&#125;.$&#123;file-extension&#125;</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">res</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">food-service</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line"><span class="string">+</span>       <span class="attr">shared-configs:</span></span><br><span class="line"><span class="string">+</span>         <span class="bullet">-</span> &#123; <span class="attr">dataId:</span> <span class="string">&#x27;redis-local.yml&#x27;</span>,<span class="attr">refresh:</span> <span class="literal">true</span> &#125;  <span class="comment"># 详情配置可以追踪该项</span></span><br><span class="line"><span class="string">+</span>         <span class="bullet">-</span> &#123; <span class="attr">dataId:</span> <span class="string">&#x27;mysql8-local.yml&#x27;</span>,<span class="attr">refresh:</span> <span class="literal">true</span> &#125;</span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure><blockquote><p>上述俩项配置后,  需在前面的笼统配置中删除重复项</p></blockquote><p>大功告成 !</p><h4 id="小任务"><a href="#小任务" class="headerlink" title="小任务"></a>小任务</h4><div class="note primary flat"><p>需求点：结合nacos配置中心完成druid的数据库的切换</p></div><p>自己思考</p><details class="folding-tag" blue><summary> 样例代码 </summary>              <div class="content">              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将原来的springboot的自动IOC DruidDatasource方案改为 手工编程</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDataSourceConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.driver-class-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>  <span class="comment">//IOC</span></span><br><span class="line">    <span class="meta">@Primary</span>  <span class="comment">//优先使用这个代码IOC</span></span><br><span class="line">    <span class="meta">@RefreshScope</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">druid</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;使用的编程式的数据源创建.&quot;</span>);</span><br><span class="line">        DruidDataSource ds=<span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setUsername(username);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        ds.setDriverClassName(<span class="built_in">this</span>.driverClassName);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        <span class="keyword">return</span>  ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是此时会发现有坑, druid数据源在设置的时候有检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果被设置过则抛出异常</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.inited) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 不是第一次则可以设置值</span></span><br><span class="line">    <span class="built_in">this</span>.Xxx = Xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说按道理来说是不能修改的</p><p>实际上:  nacos在修改此项之后会创建一个新的DataSource导致这个不生效 (  )</p>              </div>            </details><h2 id="Sentinel服务哨兵"><a href="#Sentinel服务哨兵" class="headerlink" title="Sentinel服务哨兵"></a>Sentinel服务哨兵</h2><h3 id="章节前言"><a href="#章节前言" class="headerlink" title="章节前言"></a>章节前言</h3><p>在了解Sentinel之前可以了解:</p><ol><li>什么是服务雪崩?服务雪崩发生时的各阶段及直接原因?</li><li>应对服务雪崩的解决方案？(从硬件和软件方面分别考量)</li><li>什么是限流?</li><li>什么是服务熔断? 解决服务熔断的通过模型为断路器模式，它是什么原理?</li><li>什么是服务降级?</li><li>限流算法中的令牌桶算法与漏桶算法的原理及区别?</li><li>什么是职责链设计模式？请写一个简单的案例?</li><li>什么是热点数据?如何解决热点数据的访问问题?常见的策略有LRU,LFU, FIFO, 请掌握每种策略的原理及简单实现.</li></ol><h3 id="Jmiter简单使用"><a href="#Jmiter简单使用" class="headerlink" title="Jmiter简单使用"></a>Jmiter简单使用</h3><p>在使用Sentinel之前需要有一个*<u>压测工具</u>*(<a href="https://jmeter.apache.org/download_jmeter.cgi">JMeter - Download</a>)来支撑我们的测试,  通过测试评估系统响应、吞吐量等，根据评估结果优化系统。</p><p>运行:  下载账户在bin目录找到<code>jmeter.bat</code></p><ul><li>中文设置:  编辑将<code>set JMETER_LANGUAGE=-Duser.language=&quot;en&quot; -Duser.region=&quot;EN&quot;</code>设置为<code>set JMETER_LANGUAGE=-Duser.language=&quot;zh&quot; -Duser.region=&quot;CN&quot;</code></li><li>双击该脚本即可运行</li></ul><p>编写压测案例:  </p><ol><li><p>在测试计划中添加线程组,  在线程组里设置线程数和循环次数以及Ramp-Up持续时间</p></li><li><p>在线程组添加Http请求,  设置请求名称、协议、IP、端口、请求、路径</p><blockquote><p>对于此项可以添加随机数,  工具-&gt;函数助手对话框-&gt; Random范围(可选其他函数)  -&gt; 生成</p></blockquote></li><li><p>在一个线程组层级可以设置汇总报告以及结果树用于查看压测数据</p></li></ol><h3 id="Sentinel概念"><a href="#Sentinel概念" class="headerlink" title="Sentinel概念"></a>Sentinel概念</h3><h4 id="服务雪崩"><a href="#服务雪崩" class="headerlink" title="服务雪崩"></a>服务雪崩</h4><p>简单来说服务雪崩就是，一个服务失败，导致整条链路的服务都失败的情形</p><p>服务雪崩的三个阶段以及原因:</p><ul><li>阶段一:  服务不可用</li></ul><p>原因可能如下:  <strong>缓存击穿</strong>,  硬件故障,  用户大量请求,  程序Bug</p><ul><li>阶段二:  调用端重试加大流量</li></ul><p>原因可能如下:  用户重试,  代码逻辑重试</p><ul><li>阶段三:  服务调用者不可用</li></ul><p>原因可能如下: 同步等待造成的资源耗尽</p><p>对于以上的三个阶段可以产生有解决方案如下:</p><ul><li>应用型扩容:  加机器,  升级硬件</li><li>流控:  限流(信号量),  关闭重试,  超时处理</li><li>缓存:  缓存预加载</li><li><strong>服务降级</strong>: 服务接口拒绝服务 ,  页面拒绝服务,  延迟持久化,  随机拒绝服务</li><li><strong>服务熔断</strong></li></ul><p>如何进行限流,  服务熔断?</p><ul><li><p>限流:   提前对各个服务类型的请求设置理想高的QPS阈值,  若高于此阈值则直接对于请求直接返回</p></li><li><p>服务熔断:  当下游的服务因为某种原因突然变得不可用或响应过慢，上游服务为了保证自己整体服务的可用性，不再继续调用目标服务，直接返回，快速释放资源。如果目标服务情况好转则恢复调用,  一句话说就是先保自己的服务</p></li></ul><h4 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h4><p>对于断路器模式的状态图大致如下:</p><p><img src="https://user-images.githubusercontent.com/9434884/82635455-ca075f00-9c32-11ea-9e99-d67518923e0d.png" alt="熔断模式的状态图"></p><p>在最开始是处于Closed状态,  一旦请求达到设定阈值则转为Open状态,  此时会有一个重试时间(reset timeout:  其实是重试时间计算器),  如果到达了设定的重试时间则转为半开状态(Half-Open),指部分请求可以请求到后端,  一旦检测通过则到Closed状态(恢复服务)</p><p>关于熔断详情官方文档  <a href="https://sentinelguard.io/zh-cn/docs/golang/circuit-breaking.html">熔断降级</a></p><h4 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h4><p>对于服务降级有两种场景:</p><ol><li>当下游的服务因为某种原因响应过慢，下游服务主动停掉一些不太重要的业务，释放出服务器资源，增加响应速度</li><li>当下游的服务因为某种原因不可用，上游主动调用本地的一些降级逻辑，避免卡顿，迅速返回给用户</li></ol><p>当然服务熔断可视为降级方式的一种</p><p>在实际的项目中，也可采用以下的方式来完成降级工作</p><ol><li>梳理出核心业务流程和非核心业务流程。然后在非核心业务流程上加上开关，一旦发现系统扛不住，关掉开关，结束这些次要流程</li><li>一个微服务下肯定有很多功能，那自己区分出主要功能和次要功能。然后次要功能加上开关，需要降级的时候，把次要功能关闭</li><li>降低一致性要求，即将核心业务流程的同步改异步，将强一致性改最终一致性</li></ol><hr><p>sentinel是以流量为切入点，从流量控制熔断降级，系统负载保护等多维度保护服务的稳定性</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li>多种限流算法：包括令牌桶、漏桶等，可以根据业务场景选择合适的算法。</li><li>多种限流维度：包括QPS、并发线程数、异常比例等，可以根据不同的维度来进行限流。</li><li>多种应用场景：支持Dubbo、Spring Cloud、gRPC等多种RPC框架的服务发现和调用。</li><li>动态规则源：支持多种数据源，如Nacos、Zookeeper、Apollo等，可以动态推送和更新规则。</li><li>实时监控：提供实时的监控和统计功能，可以查看服务的运行状态和指标</li></ol><p>Sentinel的使用:  分为核心库(java Client)和控制台(Web Dasboard)</p><h4 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h4><p>采用职责链设计模式:  该设计模式是sentinel的核心骨架,  它将不同是slot按照顺序组成职责链,, 从而将不同的功能(例如: 限流、降级、系统保护)组合在一起</p><p>对于sentinel职责链实践可以跳转<a href="https://zhuanlan.zhihu.com/p/337996849">阿里Sentinel核心源码解析-责任链模式最佳实践 - 知乎 (zhihu.com)</a></p><h3 id="Sentinel使用与配置"><a href="#Sentinel使用与配置" class="headerlink" title="Sentinel使用与配置"></a>Sentinel使用与配置</h3><h4 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h4><p>安装Dashboard控制台，下载sentinel-dashboard.jar文件<a href="https://github.com/alibaba/Sentinel/releases">直达链接</a></p><p>下载好之后在文件目录编写处理脚本 例如:<code>start.bat</code>内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar ./sentinel-dashboard-1.8.0.jar --server.port=9999</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>其实就是一个运行jar包的脚本然后设置了端口,  这样设置了便于以后运行</p><p>启动jar包后打开网页<a href="http://localhost:9999/#/login">http://localhost:9999/#/login</a></p><p>通过了解配置文件可以得知账号密码均为: sentinel</p><p>详情参考官方文档<a href="https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0">控制台 · alibaba&#x2F;Sentinel Wiki (github.com)</a></p><h4 id="微服务整合"><a href="#微服务整合" class="headerlink" title="微服务整合"></a>微服务整合</h4><h5 id="依赖及分析"><a href="#依赖及分析" class="headerlink" title="依赖及分析"></a>依赖及分析</h5><p>在需要整合的服务中导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sentinel 客户端依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于本案例不再使用硬编码进行一一设置,  如需了解硬编码模式见<a href="https://sentinelguard.io/zh-cn/docs/quick-start.html">quick-start | Sentinel</a></p><p>在默认在加了starter依赖、配置完配置文件后，在controller中的接口都会监控，所有的 URL 就自动成为 Sentinel 中的埋点资源。</p><p>在官方文档中描述：一般推荐将 <code>@SentinelResource</code> 注解加到服务实现上，而在 Web 层直接使用 Spring Cloud Alibaba 自带的 Web 埋点适配。<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel">官方文档</a></p><p>对于Service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;sayHello&quot;)</span>  <span class="comment">// 流控处理逻辑,自定义sayHello限流策略</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于了解且使用过硬编码的配置,  可以知道需要导入如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Sentinel 核心依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Sentinel 控制台通信--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-transport-simple-http<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于此第二个依赖: </p><p><strong>simple-http</strong>：它是一个简版的http服务器,用于与dashboard通讯</p><p>它是一种提供HTTP端点的通信模块，用于接收来自Dashboard的控制指令。它是sentinel-transport模块的一个子模块，使用NIO实现了一个简单的HTTP服务器。它的作用是让Sentinel Client能够与Dashboard进行远程通信，实现规则管理和推送、数据上报和监控等功能。</p><p>再对<code>sentinel-starter</code>进行分析:  它还导入了<code>aspectj</code>切面,  众所周知我们需要对资源进行统计(<strong>QPS</strong>)当然是要在请求执行前啦,  那不就是切面<u><em>前置增强</em></u>吗</p><p>其中还包括一些其他依赖如负载均衡、熔断、远程调用等,  就不一一列出了</p><h5 id="Yaml配置"><a href="#Yaml配置" class="headerlink" title="Yaml配置"></a>Yaml配置</h5><p>使用了Nacos后,  我们的基础配置应该是放在了Nacos中了,  此时就不需要再放在项目的application.yml了,  我们在Nacos中对应的配置文件处添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span>  <span class="comment">#sentinel配置</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span>                  <span class="comment">#跟控制台交流的端口,随意指定一个未使用的端口即可(sentinel默认客户端与服务端的交互端口为8719),如需在一台机器上需要配置其他的端口</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:9999</span>   <span class="comment">#刚刚在启动dashboard配置的地址与端口</span></span><br><span class="line">      <span class="attr">eager:</span> <span class="literal">true</span>                   <span class="comment">#表示 Sentinel 会在应用启动时立即进行初始化。这意味着 Sentinel 会立即加载规则、统计信息等相关的数据，并开始监控和限流</span></span><br></pre></td></tr></table></figure><p>在进行到此处,  starter和配置文件、 Dashboard都准备好了,  我们可以结合Jmiter进行低QPS（太多了会卡死）的简单压测，查看Sentinel Dashboard的实时监控是否起作用</p><h5 id="Sentinel的监控数据是哪来的"><a href="#Sentinel的监控数据是哪来的" class="headerlink" title="Sentinel的监控数据是哪来的"></a>Sentinel的监控数据是哪来的</h5><p>Sentinel是基于SpringBoot开发的， SpringBoot提供了一套对外的actuator监控端点，很显然Sentinel就是对暴露端点的数据进行监控然后获得的数据</p><p>我们需要了解Sentinel监控的端口可以访问接口<a href="http://localhost:8719/api">http://localhost:8719/api</a> :8719为yml中配置的监听端口</p><p>其他配置详情见官方文档(访问上面描述的api接口可以拿取一些url进行二次开发)</p><h3 id="Sentinel服务流控"><a href="#Sentinel服务流控" class="headerlink" title="Sentinel服务流控"></a>Sentinel服务流控</h3><h4 id="服务流控模式"><a href="#服务流控模式" class="headerlink" title="服务流控模式"></a>服务流控模式</h4><h5 id="一-直接失败"><a href="#一-直接失败" class="headerlink" title="一:  直接失败"></a>一:  直接失败</h5><p>限制QPS或者进程数：</p><p>​QPS：限制单位时间的请求接口次数限制</p><p><img src="https://calyee-image.pages.dev/file/2427cc0b86a43409940b0.png"></p><p>​效果图如下 (Sentinel实时监控)</p><p><img src="https://calyee-image.pages.dev/file/939b643170060549e3d3a.png"></p><p>我们可以清晰的看到<code>/resfood/findAll</code>接口的QPS被限制在了100,  其他的都被拒绝了</p><p>​<strong>限制进程数</strong>:单位时间内，请求并发数限制,这里处理的并发请求是指tomcat中开启多少个线程来处理请求。</p><blockquote><p> 在Tomcat中<u>默认</u>线程池数为10, 如需修改我们可以在配置文件中修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">9000</span>                # 此服务的端口(注意各微服务的端口要区分)</span><br><span class="line">  tomcat:# 配置tomcat相关参数</span><br><span class="line">    accept-count: <span class="number">100</span>  # 等待队列长度，默认<span class="number">100</span>。</span><br><span class="line">    max-threads: <span class="number">20</span>     # 最大工作线程数，默认<span class="number">200</span>。</span><br><span class="line">    min-spare-threads: <span class="number">5</span>    # 最小工作空闲线程数，默认<span class="number">10</span>。</span><br><span class="line">    max-connections: <span class="number">100</span>    # 最大连接数，默认为<span class="number">10000</span></span><br></pre></td></tr></table></figure></blockquote><p>并发线程数控制界面如下</p><p><img src="https://calyee-image.pages.dev/file/e1591dd91d82c52b8dd1c.png"></p><h5 id="二-关联失败"><a href="#二-关联失败" class="headerlink" title="二: 关联失败"></a>二: 关联失败</h5><p>当关联的资源达到阈值时，就限流自己</p><p>需求场景: 在 resfood服务中， 在&#x2F;resfood&#x2F;findById&#x2F;{fid}访问量暴涨的情况下，我们确定保护它的服务 而快速失败 &#x2F;resfood&#x2F;findAll,  即在根据id查找商品的访问量暴涨下我们需要保护它而它关联的查找全部服务则需要失败</p><p>应用场景:  订单服务关联第三方支付接口，当支付接口访问过多的时候导致快瘫痪时，那么就限制我们的下单服务（限流）</p><h5 id="三-链路流控"><a href="#三-链路流控" class="headerlink" title="三:  链路流控"></a>三:  链路流控</h5><p>只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就可以限流）[api级别的针对来源]</p><p>对于需要使用链路流控,  需要配置  <code>web-context-unify: false</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">web-context-unify:</span> <span class="literal">false</span>       <span class="comment"># 关闭context整合, 测试流控需关闭此项</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8720</span>                   <span class="comment"># 跟控制台交流的窗口, 随意指定一个未使用的端口即可</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:9999</span>    <span class="comment"># Dashboard地址和端口</span></span><br><span class="line">      <span class="attr">eager:</span> <span class="literal">true</span>                    <span class="comment"># 表示Sentinel会在应用启动时立刻进行初始化,这意味着Sentinel会立刻加载规则,统计信息</span></span><br></pre></td></tr></table></figure><p>为了达到链路的效果,  模拟服务结构如下</p><p>ServiceA ,ServiceB各自都依赖于getInfo</p><p>当前示例,在Sentinel控制台会显示依赖树形状结构</p><p>两个节点都依赖于父节点</p><p>简略示例代码</p><ul><li>getInfo()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InfoService</span>&#123;</span><br><span class="line">    <span class="meta">@SentinelResource(&quot;getInfo&quot;)</span> <span class="comment">// 定义为Sentinel管理的资源,定位坐标getInfo</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123;<span class="keyword">return</span> <span class="string">&quot;getInfo exec&quot;</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ServiceA&#x2F;B</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/resorder&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResorderController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> InfoService infoService; <span class="comment">// 注入</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/serviceA&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">serviceA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(infoService.getInfo()); <span class="comment">// out:getInfo exec</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/serviceB&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">serviceB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(infoService.getInfo()); <span class="comment">// out:getInfo exec</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个服务对getInfo产生依赖,  如需<u>限流一个服务</u>,  则需对资源getInfo进行<strong>链路限流</strong>,  在入口资源选项则填入需要限流的服务 例如需要对ServiceA限流以保证ServiceB的平稳运行则在入口资源填入 <code>/resorder/serviceA</code>: 当前为限制<code>ResorderController</code>中接口为<code>serviceA</code>的请求，流控效果根据需要自行选择。</p><p>根据上面的案例则可以  实现优先某服务、接口的操作</p><h4 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h4><ul><li>快速失败：直接失败</li><li>Warm Up: 预热,  即请求 QPS 从 threshold &#x2F; 3 开始，经预热时长逐渐升至设定的 QPS 阈值threshold</li></ul><p>效果示例如下: (模拟环境如下: Sentinel Dashboard控制:  接口在Sentinel流控下设置QPS<strong>阈值25</strong>,流控模式为<strong>直接流控</strong>, 流控效果为<strong>Warm Up</strong>,  预热时长 <strong>3s ** ,压测模拟端: 线程数</strong>400个**, Ramp-Up: <strong>5秒</strong>, 循环一次)</p><table><thead><tr><th align="center">时间</th><th align="center">通过QPS</th><th align="center">拒绝QPS</th><th align="center">响应时间(ms)</th></tr></thead><tbody><tr><td align="center">20:48:07</td><td align="center">25.0</td><td align="center">51.0</td><td align="center">3.0</td></tr><tr><td align="center">20:48:06</td><td align="center">25.0</td><td align="center">51.0</td><td align="center">3.0</td></tr><tr><td align="center">20:48:05</td><td align="center">18.0</td><td align="center">59.0</td><td align="center">3.0</td></tr><tr><td align="center">20:48:04</td><td align="center">12.0</td><td align="center">65.0</td><td align="center">3.0</td></tr><tr><td align="center">20:48:03</td><td align="center">9.0</td><td align="center">67.0</td><td align="center">3.0</td></tr><tr><td align="center">20:48:02</td><td align="center">8&#x2F;0</td><td align="center">2.0</td><td align="center">3.0</td></tr></tbody></table><p>可以看出来,  处于预热模式下,  随着时间的推移,  QPS逐渐达到阈值然后一直保持最大值,  直到所有请求全部处理完成</p><p>应用:  秒杀系统在开启的瞬间，会有很多流量上来，很有可能把系统打死，预热方式就是把为了保护系统，可慢慢的把流量放进来，慢慢的把阀值增长到设置的阀值</p><ul><li>排队等待</li></ul><p><img src="https://github.com/alibaba/Sentinel/wiki/image/uniform-speed-queue.png" alt="排队等待"></p><p>匀速排队，让请求以均匀的速度通过，阀值类型必须设成QPS，否则无效。对应的是<strong>漏桶算法</strong></p><p>关于排队等待详情见官方文档 <a href="https://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6-%E5%8C%80%E9%80%9F%E6%8E%92%E9%98%9F%E6%A8%A1%E5%BC%8F">流量控制 匀速排队模式</a></p><h3 id="Sentinel熔断降级"><a href="#Sentinel熔断降级" class="headerlink" title="Sentinel熔断降级"></a>Sentinel熔断降级</h3><p>官方介绍： 对不稳定的<strong>弱依赖服务调用</strong>进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩。熔断降级是一个保护自身的手段。<a href="https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7">熔断降级 · alibaba&#x2F;Sentinel Wiki</a></p><h4 id="三种策略"><a href="#三种策略" class="headerlink" title="三种策略"></a>三种策略</h4><h5 id="慢调用比例-SLOW-REQUEST-RATIO"><a href="#慢调用比例-SLOW-REQUEST-RATIO" class="headerlink" title="慢调用比例 (SLOW_REQUEST_RATIO)"></a>慢调用比例 (SLOW_REQUEST_RATIO)</h5><p>选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</p><p><strong>慢调用模拟</strong></p><p><strong>jmiter</strong>: 线程:<strong>100</strong>,  Ramp-Up:<strong>5</strong>,  循环:<strong>1</strong></p><p><strong>熔断规则</strong>: 资源名; <strong>对当前接口进行绑定</strong>,    熔断策略: <strong>慢调用比例</strong>,    最大RT:  <strong>200(毫秒)</strong> [当前设置项为评估接口慢的标准,我们设置了睡眠1000ms肯定是大于该标准的,故会被评估成慢 ],   比例阈值: <strong>0.3 (30%)</strong>,  熔断时长:  <strong>2(秒)</strong>  [断开时长,不处理的时长],    最小请求数:  <strong>5</strong>[进行该操作需要的最小请求数],     统计时长:</p><p><strong>1000(毫秒)</strong>[统计1000毫秒内的慢调用接口]  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/pay&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">pay</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> InterruptedException&#123;</span><br><span class="line">    <span class="keyword">if</span>(Objects.isNull(id))&#123; <span class="comment">// 当前模拟未传id,默认为空</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>); <span class="comment">// 模拟调用第三方接口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果:  基于我们设定的测试环境下,  在第一批请求打过去之后必定会熔断,  熔断两秒后,   由于我们设定的是五秒持续发请求,  则两秒之后会<u>打一个请求过来</u>测试是否通路,  如果能则Closed通路</p><h5 id="异常比例-ERROR-RATIO"><a href="#异常比例-ERROR-RATIO" class="headerlink" title="异常比例 (ERROR_RATIO)"></a>异常比例 (ERROR_RATIO)</h5><p>当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。</p><p><strong>异常比例模拟</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/pay&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">pay</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> InterruptedException&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span>(random==<span class="number">1</span> || random==<span class="number">3</span>)&#123; <span class="comment">// 0-4:五个随机数中的两个 模拟概率为40%</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;出现异常了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="异常数-ERROR-COUNT"><a href="#异常数-ERROR-COUNT" class="headerlink" title="异常数 (ERROR_COUNT)"></a>异常数 (ERROR_COUNT)</h5><p>当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</p><blockquote><p>注意异常降级<strong>仅针对业务异常</strong>，对 Sentinel 限流降级本身的异常（<code>BlockException</code>）不生效。为了统计异常比例或异常数，需要通过 <code>Tracer.trace(ex)</code> 记录业务异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/pay&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">pay</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> InterruptedException&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span>(random==<span class="number">1</span> || random==<span class="number">3</span>)&#123; <span class="comment">// 0-4:五个随机数中的两个 模拟概率为40%</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;出现异常了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码中</strong>:  异常数<strong>40%</strong></p><p><strong>jmiter</strong>: 线程:<strong>100</strong>,  Ramp-Up:<strong>5</strong>,  循环:<strong>1</strong></p><p><strong>熔断规则</strong>: 资源名; <strong>对当前接口进行绑定</strong>,    熔断策略: <strong>异常数</strong>,    异常数:  <strong>6</strong>,  熔断时长:  <strong>2(秒)</strong>  [断开时长,不处理的时长],    最小请求数:  <strong>5</strong>[进行该操作需要的最小请求数]</p><p><img src="https://s2.loli.net/2023/12/03/K1fsRj5iqLQS8Dc.png"></p><p>对于当前模拟结过的监控图可以看出,  在右侧的15.20处[即15:20:32-15:20:37],  对于15:20:34处的一个QPS则为熔断后的点测是否可通，可通则Closed通路，对于15:20:36则为通路后的请求，然后又熔断。当前模拟图，在开始请求后异常数就达到了熔断标准。</p><h3 id="热点参数限流"><a href="#热点参数限流" class="headerlink" title="热点参数限流"></a>热点参数限流</h3><h4 id="案例与介绍"><a href="#案例与介绍" class="headerlink" title="案例与介绍"></a>案例与介绍</h4><p>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 Top K 数据，并对其访问进行限制。比如：</p><ul><li>商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制</li><li>用户 ID 为参数，针对一段时间内频繁访问的用户 ID 进行限制</li></ul><p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。</p><p><img src="https://github.com/alibaba/Sentinel/wiki/image/sentinel-hot-param-overview-1.png"></p><p>Sentinel 利用 LRU 策略统计最近最常访问的热点参数，结合令牌桶算法来进行参数级别的流控。热点参数限流支持集群模式。</p><p>官方文档  <a href="https://github.com/alibaba/Sentinel/wiki/%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81">热点参数限流 · alibaba&#x2F;Sentinel Wiki</a></p><p>使用方法:</p><p>在需要限流的资源上面增加注解<code>@Sentinel(Xxx)</code>,  然后在客户端进行可视化配置限流策略即可</p><p>例如我们需要对分页数据进行热点限流,  因为第一页分页往往访问量大  示例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/findByPage&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;hot-key-page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;PageBean&gt; <span class="title function_">findByPage</span><span class="params">(Integer pageNum, </span></span><br><span class="line"><span class="params">                                   Integer pageSize,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestParam(required = false)</span> String sortBy,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@RequestParam(required = false)</span> String sort)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> resfoodService.findByPage(pageNum, pageSize, sortBy, sort);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置好注解之后,  我们在Sentinel Dashboard导航栏选择<strong>热点规则</strong>,  点击<strong>新增热点规则</strong>,  <strong>资源名</strong>填入在服务中设置的Key,  <strong>参数索引</strong>顺序为方法形参顺序(从0开始),   <strong>单机阈值</strong>访问超过阈值则开启热点限流控制,  </p><p><strong>统计窗口时长</strong>在该时长内。</p><p>当前测试环境如下： </p><p>客户端:  参数索引:  <strong>0</strong> [第0个参数为分页参数],    单机阈值:  <strong>5</strong>  [在统计窗口时长内有5个请求则进行限流],  统计窗口时长:  <strong>1</strong>(秒),   对于参数索引可以进行额外配置:  当前我们配置参数类型为<strong>Int</strong>,  参数值为<strong>1</strong>(第一页),  限流阈值 <strong>10</strong>(设置了该项, 单机阈值则失效)</p><p>此时发送请求,  对于第一页的数据进行访问,   在一秒钟内开启100个线程访问一次,   最后仅可以访问<strong>10</strong>(限流阈值)个,  其他的都被限流</p><h4 id="热点规则名词了解"><a href="#热点规则名词了解" class="headerlink" title="热点规则名词了解"></a>热点规则名词了解</h4><h5 id="LRU-策略"><a href="#LRU-策略" class="headerlink" title="LRU 策略"></a>LRU 策略</h5><p>LRU策略是一种缓存淘汰策略，它的全称是Least Recently Used，即最近最少使用。LRU策略的基本思想是：如果一个数据在最近一段时间没有被访问到，那么在将来它被访问的可能性也很小，那么就可以将其淘汰。LRU算法的实现方式有很多种，比如可以使用链表、哈希表等数据结构</p><h5 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h5><p>令牌桶算法是一种流量控制算法，它的基本思想是：系统以恒定的速率往桶里放入令牌，而如果请求需要被处理，则需要先从桶里获取一个令牌，当桶里没有令牌可取时，则拒绝服务。令牌桶算法的实现方式有很多种，比如可以使用阻塞队列、定时器等方式</p><h3 id="黑白名单控制-授权"><a href="#黑白名单控制-授权" class="headerlink" title="黑白名单控制&#x2F;授权"></a>黑白名单控制&#x2F;授权</h3><p>官方文档  <a href="https://github.com/alibaba/Sentinel/wiki/%E9%BB%91%E7%99%BD%E5%90%8D%E5%8D%95%E6%8E%A7%E5%88%B6">黑白名单控制 · alibaba&#x2F;Sentinel Wiki (github.com)</a></p><p>需要根据调用来源来判断该次请求是否允许放行，这时候可以使用 Sentinel 的来源访问控制（黑白名单控制）的功能</p><p>原理: 来源访问控制根据资源的请求来源（origin）限制资源是否通过，若配置白名单则只有请求来源位于白名单内时才可通过；若配置黑名单则请求来源位于黑名单时不通过，其余的请求通过</p><p>其实就是拦截请求头或者其他资源</p><h4 id="Sentinel客户端授权"><a href="#Sentinel客户端授权" class="headerlink" title="Sentinel客户端授权"></a>Sentinel客户端授权</h4><p>打开Sentinel客户端,  在左侧导航栏选择授权规则,  对指定服务<strong>新增授权规则</strong>,  示例如下图</p><p><img src="https://calyee-image.pages.dev/file/02ad2bb1df06d3153a5b8.png"></p><p>图例中,  我们对资源名为<code>/user/getUserInfo</code>进行规则限制,  设置流控应用为<code>blackList</code>, 授权类型为黑名单.  那么意味着如果Origin中包含blackList则会被进行限制(因为此时是黑名单授权)</p><p>如何进行测试呢:  使用jmiter对该接口资源进行访问,  在相对应的资源右键 -&gt; 添加 -&gt; 前置处理器 -&gt;  HTTP信息头管理器 -&gt; 在Origin添加value为blackList,  进行并发测试可以清晰的看见所有带此头的请求均被拦截,  在取样结果(结果树)可以看到 : <code>Blocked by Sentinel (flow limiting)</code>: Sentinel流控阻止限制.</p><p>若调整选项为白名单则包含此头信息的才可以访问该资源</p><h4 id="编码授权示例"><a href="#编码授权示例" class="headerlink" title="编码授权示例"></a>编码授权示例</h4><p><strong>在服务提供方(FoodService)</strong></p><ul><li>添加依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sentinel依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置Sentinel服务器</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span>  <span class="comment">#sentinel配置</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:9999</span>  <span class="comment"># sentinel服务</span></span><br><span class="line">      <span class="attr">eager:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">web-context-unify:</span> <span class="literal">false</span> <span class="comment">#web-context-unify 是 Sentinel 的一个配置项，用于统一 Web 请求的上下文信息。在 Sentinel 中，Web 请求的上下文信息包括请求路径、请求方法、请求参数、请求头等</span></span><br></pre></td></tr></table></figure><ul><li>添加解析器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="comment">// RequestOriginParser: Sentinel用于解析Origin的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerRequestOriginParser</span> <span class="keyword">implements</span> <span class="title class_">RequestOriginParser</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">parseOrigin</span><span class="params">(HttpServletRequest httpServletRequest)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析请求头中的origin&quot;</span>);</span><br><span class="line">        String source= httpServletRequest.getHeader(<span class="string">&quot;source&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;请求来源为:&quot;</span>+source);</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在服务调用方(OrderService)</strong></p><ul><li>利用拦截器在openfeign发出请求时统一加入origin信息(此方案不可用,在发送时会添加,但在接收的时候就没有了)</li></ul><p>虽然标题说不可用,  不可用的条件是,  我们设置头的key为Origin与其原本的冲突了,  只需要改其他名字就可以了,  例如当前已经修改成source就可以,  在后来只需要拦截source即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求拦截器，统一加入 origin请求头信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerRequestInterceptor</span> <span class="keyword">implements</span> <span class="title class_">RequestInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(RequestTemplate requestTemplate)</span> &#123;</span><br><span class="line">        <span class="comment">// 在OpenFeign中添加头信息</span></span><br><span class="line">        requestTemplate.header( <span class="string">&quot;source&quot;</span>,<span class="string">&quot;blackList&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>笔者查阅资料得知还可以在使用SpringMVC注解内添加头域信息,  例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/findById&quot;,headers = &#123;&quot;Origin=blackList&quot;&#125;)</span> <span class="comment">// 不能用Origin,关键字会与原来的字段冲突</span></span><br><span class="line"><span class="keyword">public</span> Resfood <span class="title function_">findById</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> resfoodService.findById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="系统自适应限流"><a href="#系统自适应限流" class="headerlink" title="系统自适应限流"></a>系统自适应限流</h3><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81">系统自适应限流 · alibaba&#x2F;Sentinel Wiki</a></p><p>Sentinel 系统自适应过载保护从整体维度对应用入口流量进行控制，结合应用的 Load、CPU 使用率、总体平均 RT、入口 QPS 和并发线程数等几个维度的监控指标，通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><p>在Sentinel客户端选择系统规则</p><p><img src="https://s2.loli.net/2023/12/18/AlBVFJUShEP7mfN.png"></p><p>在此案例中我们选择入口QPS为10进行测试,  Jmiter测试环境: 60个线程 持续2秒 重复一次(即一秒30QPS)</p><p><img src="https://s2.loli.net/2023/12/18/mCaU7ZgQJ2HGRBi.png"></p><p>如图超过阈值,则最多只能通过10QPS,  超过该阈值的全部被拒绝</p><h3 id="业务异常的回调处理"><a href="#业务异常的回调处理" class="headerlink" title="业务异常的回调处理"></a>业务异常的回调处理</h3><p>如果监控的资源出现了业务异常(例如: controller执行调用业务层出现异常,不处理则会抛出500异常)</p><ul><li>需求: 如果流控规则起作用了，默认情况下，sentinel以  http响应码 4xx形式回送一条 信息,  而不是默认返回的500.</li></ul><blockquote><p> 本节下列所述均为在注解<code>@SentinelResource</code>处理,  例如 <code>@SentinelResource(value = &quot;a-service&quot;)</code></p></blockquote><h4 id="blockHandler-blockHandlerClass"><a href="#blockHandler-blockHandlerClass" class="headerlink" title="blockHandler&#x2F;blockHandlerClass"></a>blockHandler&#x2F;blockHandlerClass</h4><p>blockHandler 用于处理被 Sentinel 阻止的请求，例如当请求超过限流阈值时，Sentinel 会自动阻止该请求，并调用指定的 blockHandler 方法进行处理 ,  这样可以将流控这种异常信息转为业务要处理的消息格式. </p><p>通过阅读源码注解注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The &#123;<span class="doctag">@code</span> blockHandler&#125; is located in the same class with the original method by default.</span></span><br><span class="line"><span class="comment">     * However, if some methods share the same signature and intend to set the same block handler,</span></span><br><span class="line"><span class="comment">     * then users can set the class where the block handler exists. Note that the block handler method</span></span><br><span class="line"><span class="comment">     * must be static.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the class where the block handler exists, should not provide more than one classes</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可知:  自定义回调处理方法应该与加注解需要处理的资源在同一个类下,  blockHandler中指明的方法必须为静态的</p><h5 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h5><p>我们通过设置之后,  选择food-service服务,  findByPage接口为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此方法中的参数是由Sentinel在运行时以 DI的方式注入的</span></span><br><span class="line"><span class="comment">// BlockException: 包装流异常的所有信息    注意是流异常</span></span><br><span class="line"><span class="keyword">private</span> Result <span class="title function_">blockHandlerMethod</span><span class="params">(Integer pageNum, Integer pageSize, String sortBy, String sort,</span></span><br><span class="line"><span class="params">                            BlockException exception)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> String.format(<span class="string">&quot;调用分页查询时发生错误,Message:pageNum=%s,pageSize=%s,sortBy=%s,sort=%s,role=%s,e=%s&quot;</span>,</span><br><span class="line">                                pageNum, pageSize, sortBy, sort, exception.getRule(), exception.getMessage());</span><br><span class="line">    <span class="keyword">return</span> Result.build(<span class="string">&quot;&quot;</span>, <span class="number">201</span>, info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/findByPage&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;hot-key-page&quot;, </span></span><br><span class="line"><span class="meta">                  blockHandler = &quot;blockHandlerMethod&quot;)</span> <span class="comment">// * blockHandler</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">findByPage</span><span class="params">(Integer pageNum, Integer pageSize,</span></span><br><span class="line"><span class="params">                         <span class="meta">@RequestParam(required = false)</span> String sortBy,</span></span><br><span class="line"><span class="params">                         <span class="meta">@RequestParam(required = false)</span> String sort)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> resfoodService.findByPage(pageNum, pageSize, sortBy, sort);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前我们设置的是:  如果findByPage接口出现异常,  则会调用<code>blockHandlerMethod</code>方法(即在上面声明的),  声明的方法为:  如果发生了异常,  我们将构造一个返回<strong>结果集</strong> code&#x3D;200,  body&#x3D;””,  msg&#x3D;info</p><p>info: 则为我们构造的信息返回</p><h5 id="客户端设置流控"><a href="#客户端设置流控" class="headerlink" title="客户端设置流控"></a>客户端设置流控</h5><p>(Sentinel Dashboard)  我们在<code>簇点链路</code> 选择流控,  资源为hot-key-page(设置的<strong>资源名</strong>), QPS设置1 其他高级设置默认即可</p><h5 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h5><p>假如没有设置该项,  那么在Jmiter测试则会是一片红,  如果像这样设置了那么会得到如图所示的结果</p><p><img src="https://s2.loli.net/2023/12/18/bLxsUnhNvJzRpd2.png"></p><h4 id="fallback"><a href="#fallback" class="headerlink" title="fallback"></a>fallback</h4><p>fallback和上面案例的blockHandler大同小异</p><p>区别: </p><ul><li><p>blockHandler: 传的形参是BlockException流异常</p></li><li><p>fallback: 传入的是Throwable其他异常</p></li></ul><p>若需模拟:  提供思路,  可以模拟数据库掉线 (即在运行的时候关闭数据库,在进行访问)</p><h4 id="对于上述两个案例"><a href="#对于上述两个案例" class="headerlink" title="对于上述两个案例"></a>对于上述两个案例</h4><p>在使用上,  两个都大同小异.  实际上</p><ul><li>fallback：若本接口出现未知异常，则调用fallback指定的接口。</li><li>blockHandler：若本次访问被限流或服务降级，则调用blockHandler指定的接口。</li></ul><p>所以:  fallback一般用于处理业务异常,  blockHandler一般被用于处理被限流或服务降级后的处理</p><p>总结参考: </p><ol><li>blockHandler</li></ol><p>blockHandler仅处理限流异常；<br>使用blockHandler时，方法签名参数与原方法一致，且必须要在参数的最后位置补充BlockException参数；<br>若未补充BlockException参数则不生效；</p><ol start="2"><li>fallback</li></ol><p>fallback可以处理所有类型异常，包括限流异常和业务异常；<br>使用fallback时，方法签名参数可以与原方法完全一致，或者也接受在参数的最后位置补充Throwable参数；<br>通过对Throwable参数的类型区分是限流异常还是其他异常；<br>当同时生效blockHandler和fallback时，限流异常会优先被blockHandler处理而不再进入fallback逻辑；<br>可查看: <a href="https://blog.csdn.net/minghao0508/article/details/132148320">Sentinel的blockHandler与fallback-CSDN博客</a></p><h3 id="AOP完成业务异常统一处理"><a href="#AOP完成业务异常统一处理" class="headerlink" title="AOP完成业务异常统一处理"></a>AOP完成业务异常统一处理</h3><blockquote><p>其实本节也是跟上一节应该是父子目录关系,  因为过于重要,  所以提升一个档位,  故位于同级目录</p></blockquote><h4 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="@ControllerAdvice"></a>@ControllerAdvice</h4><p>利用注解采用AOP切面处理Controller中的异常, Advice增强</p><p>利用<code>@ExceptionHandler(RuntimeException.class)</code>捕获某异常,  然后包装回送(可以利用@ResponseBody回送JSON数据)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> CustomerExceptionHandler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 自定义业务异常统一处理切面类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span>  <span class="comment">// Controller控制器,ioc    Advice: aop中的增强</span></span><br><span class="line"><span class="meta">@Order(-100000)</span>    <span class="comment">// 有很多增强,值越小则越在外层,值越小则在最外面,全部要处理到</span></span><br><span class="line"><span class="comment">// AOP技术</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerExceptionHandler</span> &#123;</span><br><span class="line">    <span class="comment">// dao异常 -&gt; service异常, 对于事务回滚针对默认为RuntimeException -&gt; controller -&gt; 被我们自定义的切面拦截</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断错误是否是已定义的已知错误，不是则由未知错误代替，同时记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">exceptionGet</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">        <span class="comment">// 自定义添加</span></span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line">            <span class="type">Exception</span> <span class="variable">exception</span> <span class="operator">=</span> (Exception) e;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;unknown error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加上该切面增强之后,  出现的运行时异常都会被切面处理到然后以我们构造的结果集返回,  不会在出现500异常(针对此案例而言)</p><p>模拟:  在运行时关闭数据库,  通过Jmiter发送请求,  发现都是绿油油的201,  再也不是红红的500了</p><p>此时虽然是完成了业务处理,  这里的处理指返回结果处理,  但是还是不知道在哪里发生了异常,  很不友好,  对此我们引入切面日志记录异常发生处</p><h4 id="Aspect"><a href="#Aspect" class="headerlink" title="Aspect"></a>Aspect</h4><p>简单的样例,  可拓展: 写成本地日志文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerExceptionHandler customerExceptionHandler;<span class="comment">//全局异常处理类</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public * com.hang.controller.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">handleControllerMethod</span><span class="params">(ProceedingJoinPoint point)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 封装</span></span><br><span class="line">        Map&lt;String,Object&gt; records = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">beginTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行方法</span></span><br><span class="line">            request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();</span><br><span class="line">            result = point.proceed();</span><br><span class="line">            <span class="type">MethodSignature</span> <span class="variable">methodSignature</span> <span class="operator">=</span>(MethodSignature) point.getSignature();</span><br><span class="line">            String[] parameterNames = methodSignature.getParameterNames();</span><br><span class="line">            Object[] param =point.getArgs();</span><br><span class="line">            StringBuffer str=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            <span class="keyword">if</span>(parameterNames!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;parameterNames.length;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="literal">null</span> !=param[i])&#123;</span><br><span class="line">                        str.append(param[i].toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            records.put(<span class="string">&quot;request&quot;</span>,request.getRequestURL().toString());</span><br><span class="line">            records.put(<span class="string">&quot;method&quot;</span>,request.getMethod());</span><br><span class="line">            records.put(<span class="string">&quot;params&quot;</span>,str.toString());</span><br><span class="line">            records.put(<span class="string">&quot;time&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>().getTime());</span><br><span class="line">            records.put(<span class="string">&quot;result&quot;</span>,result.toString());</span><br><span class="line">            log.info(<span class="string">&quot;[接口监控服务]  : &quot;</span>+records);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;请求: &quot;</span>+request.getRequestURI()+<span class="string">&quot; 异常&quot;</span>,e);</span><br><span class="line">            <span class="keyword">return</span> customerExceptionHandler.handleOtherException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行时长(毫秒)</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> System.currentTimeMillis() - beginTime;</span><br><span class="line">        log.info(<span class="string">&quot;use time :&quot;</span>+time);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sentinel统一异常处理"><a href="#Sentinel统一异常处理" class="headerlink" title="Sentinel统一异常处理"></a>Sentinel统一异常处理</h3><p>要知道Sentinel的异常该怎么处理我们首先需要知道他的架构图,   </p><p>对于Sentinel架构图<a href="https://github.com/alibaba/Sentinel/wiki">How Sentinel works</a>  #How Sentinel works   关键字处</p><p><img src="https://user-images.githubusercontent.com/9434884/69955207-1e5d3c00-1538-11ea-9ab2-297efff32809.png"></p><p>通过架构图我们可以知道,  Sentinel的核心就是将不同的Slot(插槽)按照顺序连接到一起,   这个模式叫做<wavy>,责任链模式</wavy>,  从而将不同的功能(例如: 限流,  降级,  系统保护)  组合在一起</p><p>对于Sentinel的统一异常处理我们需要利用SpringMVC的全局异常处理机制集中处理异常</p><h4 id="依赖–增强适配器"><a href="#依赖–增强适配器" class="headerlink" title="依赖–增强适配器"></a>依赖–增强适配器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--将sentinel的BlockException 抛出 到外面统一由  MySentinelExceptionHandler(我们的异常处理)处理  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-spring-webmvc-adapter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单独对 ParamFlowException处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-parameter-flow-control<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置实现"><a href="#配置实现" class="headerlink" title="配置实现"></a>配置实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对Sentinel异常 BlockException及子类(各种流控异常)  统一转换处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySentinelExceptionHandler</span> <span class="keyword">implements</span> <span class="title class_">BlockExceptionHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 请求一过来Sentinel就需要对其拦截处理, 通过依赖sentinel-spring-webmvc-adapter转换成为了SpringMVC的异常进行处理</span></span><br><span class="line"><span class="comment">// Tomcat容器注入 Request,Response</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, BlockException ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> FlowException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;访问频繁，请稍候再试&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> DegradeException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;系统降级&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( ex <span class="keyword">instanceof</span> ParamFlowException)&#123;</span><br><span class="line">            msg=<span class="string">&quot;热点参数异常:&quot;</span>+   ex.getMessage()+<span class="string">&quot;,&quot;</span>+((ParamFlowException) ex).getResourceName()+<span class="string">&quot;,&quot;</span>+ex.getRule() ;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//ParamFlowException异常需要额外的依赖包</span></span><br><span class="line"><span class="comment">//         &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">//            &lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">//            &lt;artifactId&gt;sentinel-parameter-flow-control&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">//        &lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        else if (ex instanceof ParamFlowException) &#123;</span></span><br><span class="line"><span class="comment">//            msg = &quot;热点参数限流&quot;;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> SystemBlockException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;系统规则限流或降级&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> AuthorityException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;授权规则不通过&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            msg = <span class="string">&quot;未知限流降级&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出流</span></span><br><span class="line">        response.setStatus(<span class="number">200</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里可以用你自己的结果集</span></span><br><span class="line">        Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>,<span class="number">0</span>);</span><br><span class="line">        map. put(<span class="string">&quot;msg&quot;</span>, msg);</span><br><span class="line"><span class="comment">// 利用ObjectMapper对Map进行JSON转换</span></span><br><span class="line">        ObjectMapper om=<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        String json=om.writeValueAsString(   map );</span><br><span class="line">        <span class="comment">// 利用Response输出</span></span><br><span class="line">        PrintWriter writer=response.getWriter();</span><br><span class="line">        writer.write(   json  );</span><br><span class="line">        writer.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时设置好之后,  我们在Sentinel Dashboard对findByPage进行流控设置QPS:1 .</p><p>通过Jmiter进行测试(10QPS)</p><p><img src="https://s2.loli.net/2023/12/18/6sR8GcSJmQPFhix.png"></p><p>只有第一个访问成功,  其他的均为被流控,  证明这些异常全部到我们设置的MySentinelExceptionHandler了,  其他的异常可以去Dashboard设置即可触发(例如我们去<strong>系统规则</strong>设置<strong>入口QPS</strong>:1),  则也会触发相对应的<strong>系统异常</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LoadBalancer工作原理</title>
      <link href="/2024/01/19/SpringCloud%20LoadBalancer%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
      <url>/2024/01/19/SpringCloud%20LoadBalancer%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言:  当前章节不会像SpringBoot源码分析篇章一样大篇幅的列举大量源码,  仅仅列举部分源码</p></blockquote><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>首先需要导入LoadBalance依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--LoadBalanced--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="逐步追踪依赖"><a href="#逐步追踪依赖" class="headerlink" title="逐步追踪依赖"></a>逐步追踪依赖</h3><p>通过该starter追踪找到依赖jar包中只有一个pom文件,  在pom文件中找到LoadBalance的真正依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="找到LoadBalancerAutoConfiguration"><a href="#找到LoadBalancerAutoConfiguration" class="headerlink" title="找到LoadBalancerAutoConfiguration"></a>找到LoadBalancerAutoConfiguration</h3><p>继续在依赖里面找到<code>spring-cloud-loadbalancer</code>的jar包, 根据SPI原则找到<code>spring.factories</code>,  在该文件中找到自动配置<code>LoadBalancerAutoConfiguration</code> 追踪到了该类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@LoadBalancerClients</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(LoadBalancerClientsProperties.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureBefore(&#123; ReactorLoadBalancerClientAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">LoadBalancerBeanPostProcessorAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(value = &quot;spring.cloud.loadbalancer.enabled&quot;,havingValue = &quot;true&quot;, </span></span><br><span class="line"><span class="meta">                       matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoadBalancerAutoConfiguration</span> &#123;</span><br><span class="line"><span class="comment">// 略(详情见org.springframework.cloud.loadbalancer.config.LoadBalancerAutoConfiguration)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span> <span class="comment">// 当前注解为:假如没有该bean则创建,有则不执行</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> LoadBalancerClientFactory <span class="title function_">loadBalancerClientFactory</span><span class="params">(LoadBalancerClientsProperties properties)</span> &#123;</span><br><span class="line"><span class="type">LoadBalancerClientFactory</span> <span class="variable">clientFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoadBalancerClientFactory</span>(properties);</span><br><span class="line">clientFactory.setConfigurations(<span class="built_in">this</span>.configurations.getIfAvailable(Collections::emptyList));</span><br><span class="line"><span class="keyword">return</span> clientFactory;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析点:</p><ul><li>对于6-7行代码处的注解,  可以清晰的知道,  假如使用SpringCloud的负载均衡在没有配置开启的情况下,  默认为开启,  因为 <code>matchIfMissing = true</code></li><li>对于12行的方法为负载均衡客户端工厂方法,  用于构造负载均衡客户端的</li></ul><h3 id="切入点与自定义设想"><a href="#切入点与自定义设想" class="headerlink" title="切入点与自定义设想"></a>切入点与自定义设想</h3><div class="tip info"><p>切入点:  为什么在SpringCloud LoadBalance中默认为轮询 ?  我们能不能自定义一个算法进行负载均衡呢 ? </p></div><p>继续对于12行方法中的<code>LoadBalancerClientFactory</code>负载均衡客户端工厂进行追踪,  对于工厂而言,  最重要的就是实例化bean了,  在当前源码处,  可以容易找到一个名为<code>getInstance</code>的方法,  显然为从工厂获取实例bean的方法:  (如下)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ReactiveLoadBalancer&lt;ServiceInstance&gt; <span class="title function_">getInstance</span><span class="params">(String serviceId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getInstance(serviceId, ReactorServiceInstanceLoadBalancer.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过解读,  获取实例是通过</p><ol><li>一个服务的编号</li><li>一个实现接口的字节码类</li></ol><p>对于1当然不陌生,  显然当前要以2切入</p><p>追踪进去是一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A marker interface for &#123;<span class="doctag">@link</span> ReactorLoadBalancer&#125; that allows selecting</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ServiceInstance&#125; objects.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Olga Maciaszek-Sharma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ReactorServiceInstanceLoadBalancer</span> <span class="keyword">extends</span> <span class="title class_">ReactorLoadBalancer</span>&lt;ServiceInstance&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释:  一个标记为负载均衡的接口,  它被允许选择服务实例对象</p><h3 id="选择负载均衡实例"><a href="#选择负载均衡实例" class="headerlink" title="选择负载均衡实例"></a>选择负载均衡实例</h3><p>也就是说我们需要实现自己的负载均衡就是通过当前的接口实现的,  通过点击当前接口名,  可以发现有三个实现类</p><ol><li>RandomLoadBalancer</li><li>RoundRobinLoadBalancer</li><li>LoadBalancerClientFactory</li></ol><p>以2(RoundRobin: 轮询)为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoundRobinLoadBalancer</span> <span class="keyword">implements</span> <span class="title class_">ReactorServiceInstanceLoadBalancer</span> &#123;  <span class="comment">// 实现ReactorServiceInstanceLoadBalancer 接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(RoundRobinLoadBalancer.class);</span><br><span class="line"><span class="keyword">final</span> AtomicInteger position; <span class="comment">// 一个原子整数(用于线程同步)，表示循环轮询中的当前位置</span></span><br><span class="line"><span class="keyword">final</span> String serviceId; <span class="comment">// 表示需要选择实例的服务的ID</span></span><br><span class="line"></span><br><span class="line">ObjectProvider&lt;ServiceInstanceListSupplier&gt; serviceInstanceListSupplierProvider; <span class="comment">// 用于获取服务实例列表的提供者</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> serviceInstanceListSupplierProvider a provider of</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ServiceInstanceListSupplier&#125; that will be used to get available instances</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> serviceId id of the service for which to choose an instance</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="comment">// 构造函数，使用给定的 serviceInstanceListSupplierProvider、serviceId 和一个随机的种子位置初始化 RoundRobinLoadBalancer。</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RoundRobinLoadBalancer</span><span class="params">(ObjectProvider&lt;ServiceInstanceListSupplier&gt; serviceInstanceListSupplierProvider,</span></span><br><span class="line"><span class="params">String serviceId)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>(serviceInstanceListSupplierProvider, serviceId, <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">1000</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> serviceInstanceListSupplierProvider a provider of</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ServiceInstanceListSupplier&#125; that will be used to get available instances</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> serviceId id of the service for which to choose an instance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> seedPosition Round Robin element position marker</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="comment">// 另一个构造函数，允许指定循环轮询的种子位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RoundRobinLoadBalancer</span><span class="params">(ObjectProvider&lt;ServiceInstanceListSupplier&gt; serviceInstanceListSupplierProvider,</span></span><br><span class="line"><span class="params">String serviceId, <span class="type">int</span> seedPosition)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.serviceId = serviceId;</span><br><span class="line"><span class="built_in">this</span>.serviceInstanceListSupplierProvider = serviceInstanceListSupplierProvider;</span><br><span class="line"><span class="built_in">this</span>.position = <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(seedPosition);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 负责根据循环轮询算法选择一个服务实例</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;Response&lt;ServiceInstance&gt;&gt; <span class="title function_">choose</span><span class="params">(Request request)</span> &#123;</span><br><span class="line"><span class="type">ServiceInstanceListSupplier</span> <span class="variable">supplier</span> <span class="operator">=</span> serviceInstanceListSupplierProvider</span><br><span class="line">.getIfAvailable(NoopServiceInstanceListSupplier::<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">return</span> supplier.get(request).next()</span><br><span class="line">.map(serviceInstances -&gt; processInstanceResponse(supplier, serviceInstances));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个方法处理选择服务实例后收到的响应，并在有回调时通知</span></span><br><span class="line"><span class="keyword">private</span> Response&lt;ServiceInstance&gt; <span class="title function_">processInstanceResponse</span><span class="params">(ServiceInstanceListSupplier supplier,</span></span><br><span class="line"><span class="params">List&lt;ServiceInstance&gt; serviceInstances)</span> &#123;</span><br><span class="line">Response&lt;ServiceInstance&gt; serviceInstanceResponse = getInstanceResponse(serviceInstances);</span><br><span class="line"><span class="keyword">if</span> (supplier <span class="keyword">instanceof</span> SelectedInstanceCallback &amp;&amp; serviceInstanceResponse.hasServer()) &#123;</span><br><span class="line">((SelectedInstanceCallback) supplier).selectedServiceInstance(serviceInstanceResponse.getServer());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> serviceInstanceResponse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 负责根据循环轮询算法从提供的列表中生成包含所选服务实例的响应</span></span><br><span class="line"><span class="keyword">private</span> Response&lt;ServiceInstance&gt; <span class="title function_">getInstanceResponse</span><span class="params">(List&lt;ServiceInstance&gt; instances)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (instances.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">if</span> (log.isWarnEnabled()) &#123;</span><br><span class="line">log.warn(<span class="string">&quot;No servers available for service: &quot;</span> + serviceId);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EmptyResponse</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Ignore the sign bit, this allows pos to loop sequentially from 0 to</span></span><br><span class="line"><span class="comment">// Integer.MAX_VALUE</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="built_in">this</span>.position.incrementAndGet() &amp; Integer.MAX_VALUE;</span><br><span class="line"><span class="type">ServiceInstance</span> <span class="variable">instance</span> <span class="operator">=</span> instances.get(pos % instances.size());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultResponse</span>(instance);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面类的解释:</p><ul><li><p>position属性: 使用了 AtomicInteger 进行原子操作,  使多线程操作也能同步</p></li><li><p>构造函数: 两个的区别在于是否有<code>seedPosition</code> 循环轮询的起始位置,  除去该项,  构造器的作用在于初始化服务实例列表的提供者(即初始化服务器选择的种子)</p></li><li><p>choose:  根据算法选择合适的服务实例</p></li><li><p>processInstanceResponse: 处理选择服务实例后收到的响应，并在有回调时通知</p></li><li><p>getInstanceResponse: 负责轮询的算法</p><p>上面三个方法为层级调用 choose -&gt; processInstanceResponse -&gt; getInstanceResponse</p></li><li><p>对于62行的解释: <code>&amp; Integer.MAX_VALUE</code>这部分是一个位运算，它确保了如果 position 的值增加到超过 Integer.MAX_VALUE 时，不会产生负数。其一，在轮询算法中，如果计数器变成负数，那么取余操作可能会产生负的索引值，这是无效的； 其二，也可也保证在相同规则底下的公平性</p></li></ul><h2 id="自定义负载均衡"><a href="#自定义负载均衡" class="headerlink" title="自定义负载均衡"></a>自定义负载均衡</h2><h3 id="前置分析"><a href="#前置分析" class="headerlink" title="前置分析"></a>前置分析</h3><p>对于自定义负载均衡策略,  追踪上面的案例显然是不够的,  当然还有配置文件需要解读</p><p>通过注解<code>@LoadBalancerClient</code>追踪  (该注解为负载均衡客户端配置 —- service-id、Configuration)</p><p>然后找到configuration的注释有默认配置在: <code>LoadBalancerClientConfiguration</code>,  其中这个里面就标明默认为RoundRobinLoadBalancer  轮询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">public</span> ReactorLoadBalancer&lt;ServiceInstance&gt; <span class="title function_">reactorServiceInstanceLoadBalancer</span><span class="params">(Environment environment,</span></span><br><span class="line"><span class="params">                                                                               LoadBalancerClientFactory loadBalancerClientFactory)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RoundRobinLoadBalancer</span>(</span><br><span class="line">        loadBalancerClientFactory.getLazyProvider(name, ServiceInstanceListSupplier.class), name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么到此处,  配置文件 还有轮询方案都了解了,  需要自定义实现也就清楚了: </p><ol><li>编写一个<u>配置类</u>,  返回自定义的LoadBalance类 </li><li>自定义的LoadBalance类 需要实现接口 <u>ReactorServiceInstanceLoadBalancer</u></li><li>利用@LoadBalancerClient 指定配置类生效范围(指定的服务)</li></ol><h3 id="理论存在-实践开始"><a href="#理论存在-实践开始" class="headerlink" title="理论存在 实践开始"></a>理论存在 实践开始</h3><h4 id="自定义负载均衡算法"><a href="#自定义负载均衡算法" class="headerlink" title="自定义负载均衡算法-"></a>自定义负载均衡算法-</h4><p>首先参考RoundRobinLoadBalancer创建一个自己的LoadBalancer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLoadBalancer</span> <span class="keyword">implements</span> <span class="title class_">ReactorServiceInstanceLoadBalancer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(MyLoadBalancer.class);</span><br><span class="line">    <span class="keyword">final</span> String serviceId;  <span class="comment">// 服务id</span></span><br><span class="line">    ObjectProvider&lt;ServiceInstanceListSupplier&gt; serviceInstanceListSupplierProvider; <span class="comment">// 服务提供者</span></span><br><span class="line"><span class="comment">// 当前仅提供两个参数的构造器, 有需追加属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLoadBalancer</span><span class="params">(ObjectProvider&lt;ServiceInstanceListSupplier&gt; serviceInstanceListSupplierProvider,String serviceId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.serviceId = serviceId;</span><br><span class="line">        <span class="built_in">this</span>.serviceInstanceListSupplierProvider = serviceInstanceListSupplierProvider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Response&lt;ServiceInstance&gt;&gt; <span class="title function_">choose</span><span class="params">(Request request)</span> &#123;</span><br><span class="line">        <span class="type">ServiceInstanceListSupplier</span> <span class="variable">supplier</span> <span class="operator">=</span> serviceInstanceListSupplierProvider</span><br><span class="line">                .getIfAvailable(NoopServiceInstanceListSupplier::<span class="keyword">new</span>);</span><br><span class="line">        <span class="keyword">return</span> supplier.get(request).next()</span><br><span class="line">                .map(serviceInstances -&gt; processInstanceResponse(supplier, serviceInstances));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Response&lt;ServiceInstance&gt; <span class="title function_">processInstanceResponse</span><span class="params">(ServiceInstanceListSupplier supplier,</span></span><br><span class="line"><span class="params">                                                              List&lt;ServiceInstance&gt; serviceInstances)</span> &#123;</span><br><span class="line">        Response&lt;ServiceInstance&gt; serviceInstanceResponse = getInstanceResponse(serviceInstances);</span><br><span class="line">        <span class="keyword">if</span> (supplier <span class="keyword">instanceof</span> SelectedInstanceCallback &amp;&amp; serviceInstanceResponse.hasServer()) &#123;</span><br><span class="line">            ((SelectedInstanceCallback) supplier).selectedServiceInstance(serviceInstanceResponse.getServer());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> serviceInstanceResponse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Response&lt;ServiceInstance&gt; <span class="title function_">getInstanceResponse</span><span class="params">(List&lt;ServiceInstance&gt; instances)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instances.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isWarnEnabled()) &#123;</span><br><span class="line">                log.warn(<span class="string">&quot;No servers available for service: &quot;</span> + serviceId);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EmptyResponse</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 负载均衡算法处  (当前以仅访问一个服务为例)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">instance</span> <span class="operator">=</span> instances.get(pos);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultResponse</span>(instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前负载均衡示例仅设置了访问一个固定服务,  如需修改则修改此处的算法即可 (37行处)</p><p>配置完刚刚的负载均衡算法部分,  接下来需要读取自定义的负载均衡</p><h5 id="例自定义一个对于南北服务器的负载均衡"><a href="#例自定义一个对于南北服务器的负载均衡" class="headerlink" title="例自定义一个对于南北服务器的负载均衡"></a>例自定义一个对于南北服务器的负载均衡</h5><p>思路引导</p><p>使用hutool 工具获取本机IP地址       </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.localIps = NetUtil.localIpv4s();</span><br></pre></td></tr></table></figure><p>然后对于IP区域进行负载均衡,  在上述代码中的负载均衡算法处书写自己的具体逻辑即可</p><h4 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnDiscoveryEnabled</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLoadBalancerConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// @ConditionalOnMissingBean  // 此注解如果需要自定义必须得去掉</span></span><br><span class="line">    <span class="keyword">public</span> ReactorLoadBalancer&lt;ServiceInstance&gt; <span class="title function_">reactorServiceInstanceLoadBalancer</span><span class="params">(Environment environment,</span></span><br><span class="line"><span class="params">                                                                                   LoadBalancerClientFactory loadBalancerClientFactory)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyLoadBalancer</span>(</span><br><span class="line">                loadBalancerClientFactory.getLazyProvider(name, ServiceInstanceListSupplier.class), name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在最下面(即第9行处),  返回我们刚刚自定义的负载均衡实例</p><div class="timeline red"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>100%</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>90%</p></div></div><div class="timeline-item-content"><p>至此,  自定义的负载均衡已经完成90%了</p></div></div></div><h4 id="配置配置类生效范围"><a href="#配置配置类生效范围" class="headerlink" title="配置配置类生效范围"></a>配置配置类生效范围</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@LoadBalancerClients(value = &#123;</span></span><br><span class="line"><span class="meta">        @LoadBalancerClient(value = &quot;service-id1&quot;,configuration = MyLoadBalancerConfiguration.class),</span></span><br><span class="line"><span class="meta">        @LoadBalancerClient(value = &quot;service-id2&quot;,configuration = MyLoadBalancerConfiguration.class)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoadApplication</span> &#123;</span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>LoadBalancerClients</code>中可以配置多个<code>LoadBalancerClient</code>,  在<code>LoadBalancerClient</code>中指定服务使用指定的负载均衡策略</p><p>当前配置项一般用于启动类中</p><div class="tip success"><p>结束标识</p></div><hr><a class="btn-anzhiyu outline green larger" href="/" title="点击跳转到首页"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>点击跳转到首页</span></a>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> 负载均衡 </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigDecimal相关</title>
      <link href="/2024/01/17/BigDecimal/"/>
      <url>/2024/01/17/BigDecimal/</url>
      
        <content type="html"><![CDATA[<h1 id="留意"><a href="#留意" class="headerlink" title="留意"></a>留意</h1><h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><p>高精度之精度丢失</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用法一</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">0.01</span>);</span><br><span class="line"><span class="comment">// 用法二</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> BigDecimal.valueOf(<span class="number">0.01</span>);</span><br></pre></td></tr></table></figure><p>对应的结果如下:</p><p>a:   0.01000000000000000020816681711721685132943093776702880859375<br>b:   0.01</p><hr><p>那么:  在<code>new BigDecimal</code>的时候传入的已经是浮点类型( 近似值 )了,  而在使用<code>valueOf</code>的时候,  通过阅读源码可知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title function_">valueOf</span><span class="params">(<span class="type">double</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(val));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在valueOf的方法内部,  调用了Double.toString方法转换成为了字符串,  转换成为字符串就不存在进度丢失问题 (因为可以使用字符串模拟高精度实现计算:  梦回c语言高精度实现)</p><p>那么我们需要使用则:  (两个方向)</p><ol><li>创建对象时,  构造函数传字符串</li><li>使用BigDecimal.valueOf传值初始化对象</li></ol><h2 id="精度设置"><a href="#精度设置" class="headerlink" title="精度设置"></a>精度设置</h2><p>其实就是四舍五入的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.0&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;3.0&quot;</span>);</span><br></pre></td></tr></table></figure><p>例如我们需要运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.divide(b);</span><br></pre></td></tr></table></figure><p>然后就会抛出异常: <code>ArithmeticException</code></p><p>因为它(结果)是一个无限循环小数,  它不能转换成为我们预期的精确数字</p><p>所以需要指定精度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">c</span> <span class="operator">=</span> a.divide(b, <span class="number">4</span>,RoundingMode.HALF_UP);</span><br></pre></td></tr></table></figure><ul><li>4:  四位小数</li><li>RoundingMode.HALF_UP:   HALF_UP-&gt; 大于一半则向上取整</li></ul><p>故结果为:   0.3333</p><p>其中RoundingMode还有很多枚举,  自行查阅</p><h2 id="浮点比较"><a href="#浮点比较" class="headerlink" title="浮点比较"></a>浮点比较</h2><p>比较BigDecimal值的大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.01&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.010&quot;</span>);</span><br></pre></td></tr></table></figure><p>然后有两种比较方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.equals(b)</span><br><span class="line">a.compareTo(b)</span><br></pre></td></tr></table></figure><p>其中一看好像没什么区别,  查阅源码( equals )可知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(x <span class="keyword">instanceof</span> BigDecimal))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">xDec</span> <span class="operator">=</span> (BigDecimal) x;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="built_in">this</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (scale != xDec.scale) <span class="comment">// 如果精度不一样,直接false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">s</span> <span class="operator">=</span> <span class="built_in">this</span>.intCompact;</span><br><span class="line">    <span class="type">long</span> <span class="variable">xs</span> <span class="operator">=</span> xDec.intCompact;</span><br><span class="line">    <span class="keyword">if</span> (s != INFLATED) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xs == INFLATED)</span><br><span class="line">            xs = compactValFor(xDec.intVal);</span><br><span class="line">        <span class="keyword">return</span> xs == s;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (xs != INFLATED)</span><br><span class="line">        <span class="keyword">return</span> xs == compactValFor(<span class="built_in">this</span>.intVal);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.inflated().equals(xDec.inflated());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>compareTo则是实现比较值的大小,  返回的值为-1（小于），0（等于），1（大于）</p><p>我们可以知道,  如果在严格<u>要求精度</u>的情况下,  使用<strong>equals</strong></p><p>如果<u>仅考虑值的大小</u>则考虑使用 <strong>compareTo</strong></p><h2 id="输出格式化"><a href="#输出格式化" class="headerlink" title="输出格式化"></a>输出格式化</h2><p>此处仅给出几个示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NumberFormat</span> <span class="variable">currency</span> <span class="operator">=</span> NumberFormat.getCurrencyInstance(); <span class="comment">//建立货币格式化引用</span></span><br><span class="line"><span class="type">NumberFormat</span> <span class="variable">percent</span> <span class="operator">=</span> NumberFormat.getPercentInstance();  <span class="comment">//建立百分比格式化引用</span></span><br><span class="line">percent.setMaximumFractionDigits(<span class="number">4</span>); <span class="comment">//百分比小数点最多4位</span></span><br><span class="line"> </span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">loanAmount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;59988.24&quot;</span>); <span class="comment">//金额</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">interestRate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.007&quot;</span>); <span class="comment">//利率</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">interest</span> <span class="operator">=</span> loanAmount.multiply(interestRate); <span class="comment">//相乘</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;金额:\t&quot;</span> + currency.format(loanAmount));</span><br><span class="line">System.out.println(<span class="string">&quot;利率:\t&quot;</span> + percent.format(interestRate));</span><br><span class="line">System.out.println(<span class="string">&quot;利息:\t&quot;</span> + currency.format(interest));</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">金额: ￥59,988.24 </span><br><span class="line">利率: 0.7% </span><br><span class="line">利息: ￥419.92</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>侧边栏添加旋转小人</title>
      <link href="/2024/01/11/%E5%8D%9A%E5%AE%A2%E4%BE%A7%E8%BE%B9%E6%A0%8F%E6%97%8B%E8%BD%AC%E5%B0%8F%E4%BA%BA/"/>
      <url>/2024/01/11/%E5%8D%9A%E5%AE%A2%E4%BE%A7%E8%BE%B9%E6%A0%8F%E6%97%8B%E8%BD%AC%E5%B0%8F%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="旋转小人"><a href="#旋转小人" class="headerlink" title="旋转小人"></a>旋转小人</h1><div class="tip success"><p>实现代码参考 <a href="https://codepen.io/">codepen</a></p></div><details class="folding-tag" green><summary> codepen代码 </summary>              <div class="content">              <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;twopeople&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:200px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">&quot;illo&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span> <span class="attr">style</span>=<span class="string">&quot;max-width: 200px; max-height: 200px; touch-action: none; width: 640px; height: 640px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/js/twopeople1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/js/zdog.dist.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">&quot;rendered-js&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/js/twopeople.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.twopeople</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">canvas</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: move;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="引入到主题中"><a href="#引入到主题中" class="headerlink" title="引入到主题中"></a>引入到主题中</h1><p>在<code>themes/anzhiyu/layout/includes/widget</code>创建文件<code>card_anim.pug</code><br>代码参考如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.twopeople(style=&quot;margin: 0;align-items: center;justify-content: center;text-align: center;&quot;)</span><br><span class="line">    .container(style=&quot;height: 180px; margin: 0; align-items: center; justify-content: center; text-align: center;&quot;)</span><br><span class="line">      canvas.illo(width=&quot;600&quot; height=&quot;600&quot; style=&quot;display: block;margin: 0 auto;cursor: move;max-width: 200px; max-height: 200px; touch-action: none; width: 480px; height: 480px;&quot;)</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://npm.elemecdn.com/justlovesmile-static/js/twopeople1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://npm.elemecdn.com/justlovesmile-static/js/zdog.dist.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">&quot;rendered-js&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://npm.elemecdn.com/justlovesmile-static/js/twopeople.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在<code>themes/anzhiyu/layout/includes/widget/index.pug</code>中引入刚刚创建的页面(card_anim.pug)<br>然后hexo三件套就可以看到效果<br>以上部分参考: <a href="https://lazyingman.com/posts/5788839b.html">别亦难</a></p><h1 id="微调"><a href="#微调" class="headerlink" title="微调"></a>微调</h1><p>如果此时按照前面博主那样设置,右侧栏会被顶,所以需要微调，以下内容<kbd>Ctrl</kbd> + <kbd>C/V</kbd>就可以使用了<br>微调如下:</p><p><code>card_anim.pug</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.card-widget.card-revolve</span><br><span class="line">    .twopeople(style=&quot;margin: 0;align-items: center;justify-content: center;text-align: center; background: linear-gradient(to bottom, #D9A7C7, #FFFCDC);&quot;)</span><br><span class="line">        .container(style=&quot;height: 50px; margin: 0; align-items: center; justify-content: center; text-align: center;&quot;)</span><br><span class="line">            h2 不定期更新博客,欢迎互换</span><br><span class="line">                a(href=&quot;https://blog.calyee.top/link/&quot;) 友链.</span><br><span class="line">        canvas.illo(width=&quot;600&quot; height=&quot;600&quot; style=&quot;display: block;margin: 0 auto;cursor: move;max-width: 200px; max-height: 200px; touch-action: none; width: 480px; height: 480px;&quot;)</span><br><span class="line"></span><br><span class="line">| <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://npm.elemecdn.com/justlovesmile-static/js/twopeople1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">| <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://npm.elemecdn.com/justlovesmile-static/js/zdog.dist.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">| <span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">&quot;rendered-js&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://npm.elemecdn.com/justlovesmile-static/js/twopeople.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>index.pug</code>:指<code>themes/anzhiyu/layout/includes/widget/index.pug</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#aside-content.aside-content</span><br><span class="line">  //- post</span><br><span class="line">  if is_post()</span><br><span class="line">    - const tocStyle = page.toc_style_simple</span><br><span class="line">    - const tocStyleVal = tocStyle === true || tocStyle === false ? tocStyle : theme.toc.style_simple</span><br><span class="line">    if showToc &amp;&amp; tocStyleVal</span><br><span class="line">      .sticky_layout</span><br><span class="line">        include ./card_post_toc.pug</span><br><span class="line">    else</span><br><span class="line">      !=partial(&#x27;includes/widget/card_author&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line">+      !=partial(&#x27;includes/widget/card_anim&#x27;, &#123;&#125;, &#123;cache: true&#125;)  </span><br><span class="line">      !=partial(&#x27;includes/widget/card_announcement&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line">      !=partial(&#x27;includes/widget/card_weixin&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line">      !=partial(&#x27;includes/widget/card_top_self&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line">      .sticky_layout</span><br><span class="line">        if showToc</span><br><span class="line">          include ./card_post_toc.pug</span><br><span class="line">        !=partial(&#x27;includes/widget/card_recent_post&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line">        !=partial(&#x27;includes/widget/card_ad&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line">  else</span><br><span class="line">    //- page</span><br><span class="line">    !=partial(&#x27;includes/widget/card_author&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line">+    !=partial(&#x27;includes/widget/card_anim&#x27;, &#123;&#125;, &#123;cache: true&#125;) </span><br><span class="line">    !=partial(&#x27;includes/widget/card_announcement&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line">    !=partial(&#x27;includes/widget/card_weixin&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br></pre></td></tr></table></figure><p><code>aside.styl</code>: 指<code>themes\anzhiyu\source\css\_layout\aside.styl</code></p><p>找到样式 <code>#aside-content</code>处</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;aside.enable&#x27;</span>)</span><br><span class="line">  <span class="selector-id">#aside-content</span></span><br><span class="line">+    &gt;<span class="selector-class">.card-widget</span><span class="selector-class">.card-revolve</span></span><br><span class="line">+      <span class="attribute">text-align</span>: left;</span><br><span class="line">+      <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">+      <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">+      <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">0px</span>;</span><br><span class="line">+      <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">+      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">+      <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to bottom, <span class="number">#D9A7C7</span>, <span class="number">#FFFCDC</span>);</span><br><span class="line">+      <span class="selector-tag">a</span></span><br><span class="line">+        <span class="attribute">color</span>: <span class="number">#f18ed4</span>;<span class="attribute">text-decoration</span>: none;</span><br></pre></td></tr></table></figure><p>如果你觉得有用，可以留下个评论</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo魔改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/2023/12/27/RabbitMQ/"/>
      <url>/2023/12/27/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><p>RabbitMQ是基于Erlang(处理并发)语言开发的开源消息通信中间件，官网地址：</p><p><a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>基于Docker安装RabbitMQ,  使用命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询版本</span></span><br><span class="line">docker search rabbitmq</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># linux</span></span><br><span class="line">docker run \</span><br><span class="line">-d \</span><br><span class="line">--name=rabbitmq-server \</span><br><span class="line">-p 15672:15672 \</span><br><span class="line">-p 5672:5672 \</span><br><span class="line">-e RABBITMQ_DEFAULT_USER=admin \</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS=123456 \</span><br><span class="line">rabbitmq:3.11.28-management</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># win</span></span><br><span class="line">docker run --name=rabbitmq-server -p 15672:15672 -p 5672:5672 -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=123456 -d rabbitmq:3.11.28-management</span><br></pre></td></tr></table></figure><ul><li>15672：RabbitMQ提供的管理控制台的端口</li><li>5672：RabbitMQ的消息发送处理接口</li></ul><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>架构图</p><p><img src="https://s2.loli.net/2023/12/27/e6jFbKNGlPsV4cg.png" alt="202312271833685.png"></p><p>其中包含几个概念：</p><ul><li><code>publisher</code>：生产者，也就是发送消息的一方</li><li><code>consumer</code>：消费者，也就是消费消息的一方</li><li><code>queue</code>：队列，存储消息。生产者投递的消息会暂存在消息队列中，等待消费者处理</li><li><code>exchange</code>：交换机，负责消息路由。生产者发送的消息由交换机决定投递到哪个队列。</li><li><code>virtual host</code>：虚拟主机，起到数据隔离的作用。每个虚拟主机相互独立，有各自的exchange、queue</li></ul><h2 id="SpringAMQP"><a href="#SpringAMQP" class="headerlink" title="SpringAMQP"></a>SpringAMQP</h2><p>Spring的官方基于RabbitMQ提供了这样一套消息收发的模板工具,并且还基于SpringBoot对其实现了自动装配。</p><div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://spring.io/projects/spring-amqp">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style>          <i class="anzhiyufont anzhiyu-icon-link" style></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Spring AMQP</div>            <div class="tag-link-sitename">Spring AMQP</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>SpringAMQP提供了三个功能：</p><ul><li>自动声明队列、交换机及其绑定关系</li><li>基于注解的监听器模式，异步接收消息</li><li>封装了RabbitTemplate工具，用于发送消息</li></ul><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>创建测试案例项目结构</p><ul><li>rabbitmq-demo： 父工厂，管理依赖</li><li>publisher：消息推送者</li><li>consumer：消息消费者</li></ul><p>导入主要依赖  (项目为SpringBoot工程)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringAMQP:包含了RabbitMQ--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>入门案例</p>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 中间件 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目相关</title>
      <link href="/2023/12/19/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/12/19/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="ec93dc50ddb75147c42a93aad20c7beff743c46ce00cb2eb6bf822fc5189bfbe">f1e2971e5cb45bc6de875902725b7e5bf10030e767a0488fe18f5b28db1378561fc877b8414cf17627e4002d7dfb0e3a939d185821956b3320059a1a78c70f3f3935d3287f4e1cf321b489c3abef0433773343a774d2439a47519ca09ea6d1f240064545d95033d49a06ce0719bab11c99aa3394684123fc2a4f3c7820049905a82c26055392f7469dee8b3f22efbf1a7458870ce9ceef0aaaeafd1571c99c7e0654352148a17e677e300e8fff7e17cb945a356994694cf696d1268edb75ec0f4b012838f61e4e4ab3a8ae3659c03b266a1b2154a04e33b069a5a6367834a7bc9363c9fc4b819d1128a81ff7994c8ad76feef0be1d182ec9e84a54e4684233af77da268e1c1a6445f1868e92bf5477841a3d81f4a3942cb6b02508e5453be9f6a82ae04daddf3c71ff0760cfbb8c1a301552b81b19dd53f7c552ba7e587393c568ceee9e793148796324e4e012e569140e4dd133f460c6e69b7a1efbf67bd9fdc32dd20ba71b25bceafbd22f3ce1f61386629f13f1dc03d9a4cb0f703c7e5fef5bef36e04ee9f465d8346df6df69ea7af23294e70a0dae71f07f08be5ce63f7e72b82ab998fad80942da8e584cd6df1a1ab36a4eb61595d8a2cf5c9fc66e86e19385ed5cca907dbc777feed58280fa7551a4a4d8e7b71a3e64f2295d3ba653f6fac434eadf804d6922f05a4dc61e211b1c7b54397d6163b8f7f91511a2f9919f38afda0ca0b0e2c023665b2a0cefafb7ac556b242937a16df8b7ab59a6863550b7cb80397b5e6b435ec3dcb291cfdb98695bc47fc3f1477a251409efb92b3e4494b1c902ff88aa8bb0b9d05f00427944f4fb33c6f890b2924ab7420e8ebce363a687bcf62e7b8277d54123985e0a97936fdc7022b627a83ecbebe64a9a9964cec10f97496a1959547fcde7752c97827832b14b393a61049a0ca58c0cf6056f39aaac362ebf8a16037fc69bdf24efffc696cd8052eeef5e29724f4b12c1fe20ad8aafb73b0fb4bc140fb2033b4c4768e2229ac11a521cafc603ebfc98d59a8f1bea56c051958a7114f059db107436887fafcd69b152d9e8a342f1449e7b7759598db6d55164e3e63003d3b9955043697787bfb7ea161ffa681430fd34990334b37f43426f9d7b16ff9074e45673a4ec55714490c48e6ad7b3e89102c1701c066839f78c3aa3a6e7c50de3eb7b12bbd9db5b4aef907f325be5dfe2127299558cf95e97218c43d0e2edcb1ec62f168bddcda2e0aeea72db89b012dce323b229c31e71e72befe886935e59830f53510ab7e8daaee3db084b9ce66df572da4ee683e143406d6342783a7cf43b4737103e4e6493ecbcc3b670502ad37eaebd3a44835ba48283a2853fb5e0695b53f7b18f90dfa20276f4bc4590d79f85d243e1d35f9ffe4534a0b050b26d11f34ccbd250774de52a8f6c3e00d2adb126448836200b092d6141546b2e5b992a40d7e82cf9fe3db9a3f4fae0e80c83466859cb9ba7e4ffcf46686dbecb88fa7757402f425e872b984261386fc7dfb46f2130525f02249b6bf4f08dcbc3f1aceffbd1d55d8f86b6854b30dd9b0c42cf9be6a497d000a557444992707cf6ba4ff88b786ccc08dba4f9c9b6afb8240ebf727e127d89e87898957c686d9eaec157c3fbd3e4a5c4b85762186d1d2b087542de5fb5e4b2c95bcf733feabfc1aac5637f682c8d39aff7210e6e97eebf2d5057c996e728ad98a3a3d56953395af1668dbde6f159e4ab703b85c4a5079cc0739f93bea1e56014337f846376b853c16813c6231be5b6e8c3a1c7311dd8f36630c8d7aa7e8c229ad104e89846f55a72a69fb1343ce2cd953d0481ca4eb5560a4251ee28dc33c935bb9683eeabc21154ed449a7c3e758d04fcec2a3d46194c27869174e7d4cf1715332c45468ace1b2599994af7ebb719f8e827355f0f349ba779fb3d65c506f2ccdfb2888e296fe70c2283a97a77b18f1d730bb06cf8c7abd8fbc8e9e9e2feb206f537ec68a47819137100d23380c7eb1b32b2c0491eba89cca892328a74e4be751b929f63cefa3c5c763595fb445bb658da89a501b7d4363c85bf2e38398af7ad078011e18015f390a4b3ae0d6af7a6e12c1b92d5df500ab793c4be55c53426481c05c32d5410e6afa87b88e83ca071665cb52c4ce63ffc75aae7f5417181b89f514d133b5ecbee89ece7a84e5825946f38d929765022a6d34d2b9e33e360efea6e6d925c35704c7c2a5453a6db7d1893618c572a3da300b9d1a04632be9277a4e703fc1224a437ceb0d701a3b6bce4ea6a3adfa130d5dbadd295e88520fe25c0d3ed3c52b97c60758d514d6a8b116310019966780388cc42e9f2d6a4234c37f218ef7e592173e96e2a8b7efec24000a56e65987477c9f469f456abc7a48035f4bb17956a30b78c2859905f8497a06157eb9ec330ac3c92e0a7927fa4c6be7298a07c6f6564699f8c3d9b7223162fe2f0a477dea9d2b416e733c482e8e01cbeb33a125e671c10da2538ee2440206600fd200a7f52ea6b4a2e45dbdbcf396674e55d7ffa3fc57ff1daebe0cd30ce6b63c92be515f252991e16e8a195c2988f0bd68d073fecbd0ba59c9f787507e28e34792b751d9453d4d4fd0116f6a4884edf42611d9bd4d14c337160381c53867c3979f150dbc3979f02963a556b8396cac98f6455ed18ead147117f1957c3b48600800aefb8c7e9d009bfd444d8e59b48f0930b47f97f365f6c604e4901f0ed371316674dea4bfcf8481f37b3056a17f787eda9f946f3dcefd6ae33f92d9cbe1acd6b296633daada09db5f8ae20627ab3272984853f58ce677c59b478dbfa02051e34c0c6d011179b96c41a40e9fa6e87eda914221fb6f947e39ac85ee03cc76f4b765c8340d0c5d85f5ef39d0f426b7117f85d0bd49f40ddda30e3558594a547f5240282b4507ce92f94914c66e5a9f13374c3556b9cb8981d4faf0444766ba199420568d13f4ef483e6855e42e8764e2cb9f84b3714c854aa02141fe9c4693894fc17b757d3f320f99300833a4ee17997fe6943ca5438131b3a79e89467bee471f420ff32e8d3b0cbbd87b59ffa2ecb41d0e3a0b838cb9aea640f6eed7b0ec3f8e935735b87972e6024521747ef90c940b21a92e76e86501fdae5a6b98190c771423ab40fa7d47ec343affd0e8356a22645b103177ec3062bfdbb0242a8907e7cd8678f9d1408297b5907ec5529c68e0f5df99311f1c35ea471a478edb986f1384c49c7d4177b717ee36823dcdbfe808f00762436975fee00d492cde5470c5c879f8b29f11ad6879c50cce2c43c0cf833eaf02017f9ccb503dfad8337f3e31410dbcb5ba2d92abbbae4041ae5baeaac3484bc2e888a42dd6f273eb22719fa32a2c4fd3b4edf93fdebf03938a1f387fb969b8920767fa025513ff50f7d0f219756a6e24525905b9fef27ceb36ad483b34587e8e3a38ef92b3b4f9714d97065b049024c66c27a72ed9c83a7b9c7657ec028a83fa5555fcb1cad880acead88c73a950caea0d3aed6d519a7ee3e59046983253e94d71dabd0deb159d1f1bdf989a88ef5ce3aa5ce5ae0c975b5f459faf3b333b87d653f57773532bdc0333716bfd539aaaf81328e2d35bef89886f6a8b6cee6d8ee19e8c74da97e5ab636cbc7d6e95f7d70995436fc347540376ccc353e499dceab47bfaebf84695ba823f7fbb085eaf88e0399e0db9e4f06a013f10bdf935616624e3a972368bcdd4a461fd2ae32620df4dd1d2850ae287ab6ec6d57fb374c01ea925687b236aaa2c233257b026c7ac66dbcfa93a4c3fd238f4f9e37b74f51621d50dbcc1e526efc9fe7b07767f30c808a052b25180955b7face5385442a3c4b0cf4b3a64833f3a3d18a70336c12045f3afc631a954933e4e1476fe26dccebaabf0baacaffba4b1348e5c7d025d2931ea87ea39c2db6a079b15be914fbc92bb6bdf200dec7226b62583434f90113171b1b536daefaa0217d2abf47fcb55fbbe79b1ead52700c2471c46d55e793a27a4ec83427ea81005da422a1fffe562e22bcb3086d94b7344bb45c39c8f303bb83fdc356c1c6f0fadf6d34a76ff6310f53060fd6a1924b2123c7584a377ed7076645efa1c5e9b4df45ebe2f90a1f0be78dd80566ff87e41736aeb6fcba0d3539b3035667588ace8f4b9be731fb9a197468bd9f52a264f6ea6f5440af797f00c25789b92e52238d6b88e4bde6fd38de8856a185ea057b7bc588eb9781223bb3db04aa2956f5c9fa37a447c63e9884aaaa03a5f71c2888392f8efcb68f159e27549f8538a478e2f098cbe356440d8255a62227c27a2773cef432a959f747f5a670bfd09298c3ed1d9d79ad142583762e603d2acd3dff0ccfc78f7f278cb776dac611224db5980b52bde5e03c2222240372b1966a3a738dd6c6699a21251b25c613619953d3b45557a384638064a09c5e30da9d3805c4da111007ba8397b741a7d0e57b7c5a5f64c2a4a4fc683841712ab8469c45f6353e5769f2c1387764846673c6f5117c850faa6df81363a32b19daa918b55478a5dfa03f3f3b463f7a28a580cebd24196a7528a655f2c1221d3785d582d78965de91c2cb31dcf5605f2b59fd087fab02750bed9f6fce514656a86f8163a381873154d513d64d71af4158eb3d9028a2a39028dcd025799ad134220de09bdc15130279d5011cffaf96c0f7bf74beb8ee961fc3c56b712786a2b2ec8f0f24dcf62ab92ad4aa872ebb951d339a0493597e0d5365cded5ff6f91346afec399bccbcfd1a4f1336e793520e57e6bcc7575838766f0eeb32e5b10d0c9a0089f819a7ee28d9c3b9d861cb9f521dc8b00ec2ff7d7168e3e07dc1795f2d2b7b46c7d9ded12d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这篇文章是需要密码的。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2023/12/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="23个设计模式分类"><a href="#23个设计模式分类" class="headerlink" title="23个设计模式分类"></a>23个设计模式分类</h2><p>总体来说设计模式分为三大类：</p><ul><li>创建型模式，共五种：</li></ul><p>工厂方法模式、抽象工厂模式、单例模式、建造者(构造器)模式、原型模式。</p><ul><li>结构型模式，共七种：</li></ul><p>适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p><ul><li>行为型模式，共十一种：</li></ul><p>策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><p>责任链模式在框架的引用极为广泛,  例如SpringSecurity的过滤器链,  Sentinel的插槽(限流, 降级, 系统保护等)，他们实现就像一条链子一样 一级一级的往下走。</p><p>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p><h2 id="建造者-构造器-模式"><a href="#建造者-构造器-模式" class="headerlink" title="建造者(构造器)模式"></a>建造者(构造器)模式</h2><p>建造者模式：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示，建造者模式是一种对象创建型模式。：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示，建造者模式是一种对象创建型模式。</p><p>最常见的是Lombok的<code>@Builder</code>注解,  让我们使用流式创建对象。</p><p>: 每一个属性对应的方法都<wavy>,返回Builder本身</wavy></p><ol><li><p>通过一个public static class Builder的内部类，持有要构建对象的所有属性</p></li><li><p>设置属性的方法都返回Builder当前实例this，这样可以流式设置属性，用起来更加方便</p></li><li><p>提供一个static的Builder方法，方便用户获取Builder对象</p></li><li><p>用户通过builder对象自定义设置属性</p></li><li><p>提供build方法，创建最终对象</p></li></ol><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>适用:  <u>根据条件</u> 判断生成什么对象</p><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>案例:  我们有一个生产课程对象的工厂(CourseFactory),  根据传入条件生产对象(JavaCourse,GoCourse…)</p><p>需求:  我们传入什么则生成什么对象</p><p>实现:  可以通过给工厂的create(自定义的创建生产的方法), 传入对象名、类名、字节码对象,  然后生产相对应的实例对象</p><p>此时的工厂模式有一个最大的特点就是工厂具体,  产品抽象,   工厂生产是根据条件生产,  只能生产一个类的课程</p><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class="content">              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生产的工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CourseFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ICourse <span class="title function_">create</span><span class="params">(Class&lt;?&gt; clazz)</span>&#123; <span class="comment">// ICourse: 课程的抽象</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span> != clazz)&#123;</span><br><span class="line">                <span class="keyword">return</span> clazz.newInstance();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">CourseFactory</span> <span class="variable">cf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CourseFactory</span>();</span><br><span class="line">    <span class="type">ICourse</span> <span class="variable">course</span> <span class="operator">=</span> cf.create(JavaCourse.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="工厂方法模式-1"><a href="#工厂方法模式-1" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>产品抽象,  工厂也抽象。</p><p>Java课程对应一个Java工厂,  Python课程对应一个Python工厂.    在某一个特定的工厂可以根据特定的条件生产特定的产品.   解耦合</p><p>例如:  List的实现,  可以发现不同的具体实例实现有不同的遍历方法(指: 迭代器).  因为不同的实现,  它们底层的数据结构实现不同, 在LinkedList底层则是链表,  ArrayList则是顺序表.</p><p>追踪ArrayList的源码中实现的迭代方法Iterator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个就是工厂生产产品的方法, 生产了一个用于ArrayList的Itr迭代实例</span></span><br><span class="line"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Itr</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继续追踪Itr(), 可以发现next方法</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">    checkForComodification();</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">    Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">    cursor = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很容易知道,  其实就是一个顺序表的遍历</p><p>同理LinkedList遍历也是一样,  通过实现Iterator,  容易知道肯定是链表的遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">    checkForComodification();</span><br><span class="line">    <span class="keyword">if</span> (!hasNext())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line"></span><br><span class="line">    lastReturned = next;</span><br><span class="line">    next = next.next;</span><br><span class="line">    nextIndex++;</span><br><span class="line">    <span class="keyword">return</span> lastReturned.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以有:  List的各种实现类,  不同的数据结构实现所实现的迭代器(工厂方法–&gt; 用于生产产品–&gt; 迭代器产品).</p><p>在SpringCloud Gateway中,  我们可以看到关键组件有</p><ul><li>谓词工厂</li></ul><p>用于定义路由规则。谓词工厂接收一个输入（通常是一个HTTP请求），并根据定义的规则返回一个布尔值，指示该请求是否与路由匹配。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">food-service</span> <span class="comment"># 路由规则id，自定义，唯一</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://food-service</span> <span class="comment"># 路由的目标服务，lb代表负载均衡，会从注册中心拉取服务列表</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言，判断当前请求是否符合当前规则，符合则路由到目标服务</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/resfood/**</span> <span class="comment"># 这里是以请求路径作为判断规则</span></span><br></pre></td></tr></table></figure><p>predicates:  路由断言</p><p>现在使用该模式我们可以通过<wavy>,根据条件创建一个对象</wavy>,  在以往之前,  只能通过new一个具体对象</p><blockquote><p>其他的案例还有: 1. Feign  2. JDK中的StringBuilder</p></blockquote><ul><li>过滤器工厂</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于SpringBoot实现简单微信扫码登录</title>
      <link href="/2023/12/17/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95/"/>
      <url>/2023/12/17/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>对于微信扫码登录,首先我们需要有一个公众号平台账号(可以是测试账户,也可以是已经注册绑定营业的账户).</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>直达链接(当前样例仅在测试号环境下处理):</p><ul><li><p><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&t=sandbox/index">微信公众平台管理</a></p></li><li><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html">网页授权文档</a></p></li></ul><p>还需要准备一个内网穿透的工具(任选其一即可)</p><ul><li><p><a href="https://ngrok.com/download">ngrok</a></p></li><li><p><a href="https://hsk.oray.com/">花生壳</a></p></li></ul><p>在此仅列出俩个,  需要获取更多信息 <a href="https://www.bing.com/search?pglt=675&q=%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7">链接</a></p><h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><p>一句话来说就是，让外网能访问你的内网；把自己的内网（主机）当成服务器，让外网能访问</p><p>所以我们需要通过工具配置(当然你也可以不用工具,我在此使用工具的方式实现)</p><h4 id="Ngrok"><a href="#Ngrok" class="headerlink" title="Ngrok"></a>Ngrok</h4><p>首先在Ngrok注册账号,  点击上面链接下载Ngrok</p><p>打开ngrok在弹出控制台输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok http 80</span><br></pre></td></tr></table></figure><p>例如我需要映射本地的80端口,  输入完成控制台会有一个回调显示,  复制映射地址即可</p><h4 id="花生壳"><a href="#花生壳" class="headerlink" title="花生壳"></a>花生壳</h4><p>花生壳配置如图</p><p><img src="https://calyee-image.pages.dev/file/9c4e56f236da97ae0ab93.png"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- hutool工具包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生成二维码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.zxing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- wx --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 微信授权登录--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.binarywang/weixin-java-mp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.binarywang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>weixin-java-mp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wechat:</span></span><br><span class="line">  <span class="attr">mpAppId:</span> <span class="string">wxfc5465********</span>  <span class="comment"># your appid</span></span><br><span class="line">  <span class="attr">mpAppSecret:</span> <span class="number">49e5997</span><span class="string">*****</span>  <span class="comment"># your appSecret</span></span><br></pre></td></tr></table></figure><h4 id="测试号管理配置"><a href="#测试号管理配置" class="headerlink" title="测试号管理配置"></a>测试号管理配置</h4><p>我们需要配置的是 <strong>接口配置信息</strong></p><p>URL和Token</p><p>URL: 验证的方法</p><p>接下来直接列出代码</p><p><code>controller</code>: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeixinCheckController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信公众号签名认证接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/wxCheck&quot;,</span></span><br><span class="line"><span class="meta">            method = &#123;RequestMethod.POST, RequestMethod.GET&#125;,</span></span><br><span class="line"><span class="meta">            produces = &quot;text/html; charset=utf-8&quot;)</span> <span class="comment">// 必须为这个返回结果格式</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">WxToken</span><span class="params">(<span class="meta">@RequestParam(name = &quot;signature&quot;, required = false)</span> String signature,</span></span><br><span class="line"><span class="params">                          <span class="meta">@RequestParam(name = &quot;timestamp&quot;, required = false)</span> String timestamp,</span></span><br><span class="line"><span class="params">                          <span class="meta">@RequestParam(name = &quot;nonce&quot;, required = false)</span> String nonce,</span></span><br><span class="line"><span class="params">                          <span class="meta">@RequestParam(name = &quot;echostr&quot;, required = false)</span> String echostr</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;微信Token认证===&gt;signature=&#123;&#125;,timestamp=&#123;&#125;,echostr=&#123;&#125;&quot;</span>, signature, timestamp, echostr);</span><br><span class="line">        <span class="comment">// 通过检验signature对请求进行校验，若校验成功则原样返回echostr，表示接入成功，否则接入失败</span></span><br><span class="line">        <span class="keyword">if</span> (signature != <span class="literal">null</span> &amp;&amp; WeixinCheckoutUtil.checkSignature(signature, timestamp, nonce)) &#123;</span><br><span class="line">            <span class="keyword">return</span> echostr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>WeixinCheckoutUtil</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> WeixinCheckoutUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Calyee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeixinCheckoutUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 与接口配置信息中的Token要一致</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="string">&quot;calyee&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> signature</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timestamp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nonce</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkSignature</span><span class="params">(String signature, String timestamp, String nonce)</span> &#123;</span><br><span class="line">        String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;token, timestamp, nonce&#125;;</span><br><span class="line">        <span class="comment">// 将token、timestamp、nonce三个参数进行字典序排序</span></span><br><span class="line">        <span class="comment">// Arrays.sort(arr);</span></span><br><span class="line">        sort(arr);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            content.append(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tmpStr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            md = MessageDigest.getInstance(<span class="string">&quot;SHA-1&quot;</span>);</span><br><span class="line">            <span class="comment">// 将三个参数字符串拼接成一个字符串进行sha1加密</span></span><br><span class="line">            <span class="type">byte</span>[] digest = md.digest(content.toString().getBytes());</span><br><span class="line">            tmpStr = byteToStr(digest);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        content = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 将sha1加密后的字符串可与signature对比，标识该请求来源于微信</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tmpStr != <span class="literal">null</span> ? tmpStr.equals(signature.toUpperCase()) : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字节数组转换为十六进制字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> byteArray</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">byteToStr</span><span class="params">(<span class="type">byte</span>[] byteArray)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">strDigest</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; byteArray.length; i++) &#123;</span><br><span class="line">            strDigest += byteToHexStr(byteArray[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strDigest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字节转换为十六进制字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mByte</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">byteToHexStr</span><span class="params">(<span class="type">byte</span> mByte)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] Digit = &#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">char</span>[] tempArr = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">2</span>];</span><br><span class="line">        tempArr[<span class="number">0</span>] = Digit[(mByte &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">0X0F</span>];</span><br><span class="line">        tempArr[<span class="number">1</span>] = Digit[mByte &amp; <span class="number">0X0F</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(tempArr);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(String a[])</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[j].compareTo(a[i]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> a[i];</span><br><span class="line">                    a[i] = a[j];</span><br><span class="line">                    a[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来使用<u>内外穿透</u>的地址访问此接口吧, 注意是在公众号配置信息处</p><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><p>微信开发者文档将授权流程分为了4步: (<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html">微信网页开发</a>)</p><ol><li>引导用户进入授权页面同意授权，获取code</li><li>通过code换取网页授权access_token（与基础支持中的access_token不同）</li><li>如果需要，开发者可以刷新网页授权access_token，避免过期</li><li>通过网页授权access_token和openid获取用户基本信息（支持UnionID机制）</li></ol><h4 id="第一步-用户同意授权获取code"><a href="#第一步-用户同意授权获取code" class="headerlink" title="第一步: 用户同意授权获取code"></a>第一步: 用户同意授权获取code</h4><p>在确保微信公众账号拥有授权作用域（scope参数）的权限的前提下（已认证服务号，默认拥有scope参数中的snsapi_base和snsapi_userinfo 权限），引导关注者打开如下页面：</p><p><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&redirect_uri=REDIRECT_URI&response_type=code&scope=SCOPE&state=STATE#wechat_redirect">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</a></p><p>若提示“该链接无法访问”，请检查参数是否填写错误，是否拥有scope参数对应的授权作用域权限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> WeixinLoginController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 微信登录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Calyee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2023/12/17 017 18:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeixinLoginController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">baseUrl</span> <span class="operator">=</span> <span class="string">&quot;https://2886**********/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;wechat.mpAppId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">appid</span> <span class="operator">=</span> <span class="string">&quot;wxfc546**********&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成二维码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/wxLogin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// redirect_uri是回调的地址注意要转成UrLEncode格式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">redirectUrl</span> <span class="operator">=</span> URLEncoder.encode(baseUrl + <span class="string">&quot;wxCallBack&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 构造二维码链接地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://open.weixin.qq.com/connect/oauth2/authorize?&quot;</span> +</span><br><span class="line">                <span class="string">&quot;appid=&quot;</span> + appid +</span><br><span class="line">                <span class="string">&quot;&amp;redirect_uri=&quot;</span> + redirectUrl +</span><br><span class="line">                <span class="string">&quot;&amp;response_type=code&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&amp;scope=snsapi_userinfo&quot;</span> +      <span class="comment">// 授权作用域</span></span><br><span class="line">                <span class="string">&quot;&amp;state=STATE#wechat_redirect&quot;</span>; <span class="comment">// #wechat_redirect必须传</span></span><br><span class="line">        <span class="comment">// &lt;link&gt; https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html</span></span><br><span class="line">        <span class="comment">// https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</span></span><br><span class="line">        <span class="comment">// 生成二维码的，扫描后跳转上面的地址</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">        <span class="comment">// 生成二维码</span></span><br><span class="line">        QrCodeUtil.generate(url, <span class="number">300</span>, <span class="number">300</span>, <span class="string">&quot;jpg&quot;</span>, response.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>授权后，页面将跳转至 redirect_uri&#x2F;?code&#x3D;CODE&amp;state&#x3D;STATE</p><h4 id="第二步：通过code换取网页授权access-token"><a href="#第二步：通过code换取网页授权access-token" class="headerlink" title="第二步：通过code换取网页授权access_token"></a>第二步：通过code换取网页授权access_token</h4><p>首先请注意，这里通过code换取的是一个特殊的网页授权access_token,与基础支持中的access_token（该access_token用于调用其他接口）不同。公众号可通过下述接口来获取网页授权access_token。如果网页授权的作用域为snsapi_base，则本步骤中获取到网页授权access_token的同时，也获取到了openid，snsapi_base式的网页授权流程即到此为止。</p><p>尤其注意：由于公众号的secret和获取到的access_token安全级别都非常高，必须只保存在服务器，不允许传给客户端。后续刷新access_token、通过access_token获取用户信息等步骤，也必须从服务器发起。</p><p>在当前controller添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> WxMpService wxMpService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用户点同意回调</span></span><br><span class="line"><span class="comment">* 通过code换取网页的授权access_token</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> code     页面拿到的code</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/wxCallBack&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getWxCallBack</span><span class="params">(String code,</span></span><br><span class="line"><span class="params">                            String state,</span></span><br><span class="line"><span class="params">                            HttpSession session,</span></span><br><span class="line"><span class="params">                            HttpServletRequest request,</span></span><br><span class="line"><span class="params">                            HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    log.info(<span class="string">&quot;code=&#123;&#125;&quot;</span>, code);</span><br><span class="line">    WxMpOAuth2AccessToken wxMpOAuth2AccessToken;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        wxMpOAuth2AccessToken = wxMpService.oauth2getAccessToken(code);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (WxErrorException e) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;【微信网页授权发生错误】&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(e.getError().getErrorMsg());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// wxMpOAuth2AccessToken: 可以获取用户授权的信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">openId</span> <span class="operator">=</span> wxMpOAuth2AccessToken.getOpenId();</span><br><span class="line">    log.info(<span class="string">&quot;【微信网页授权】openId=&#123;&#125;,accessToken=&#123;&#125;&quot;</span>, openId, wxMpOAuth2AccessToken.getAccessToken());</span><br><span class="line">    <span class="comment">// 缓存一下</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;openid&quot;</span>, openId);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:&quot;</span> + state + <span class="string">&quot;?openid=&quot;</span> + openId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第三步：刷新access-token（如果需要）"><a href="#第三步：刷新access-token（如果需要）" class="headerlink" title="第三步：刷新access_token（如果需要）"></a>第三步：刷新access_token（如果需要）</h4><blockquote><p>见文档,  此步骤文档描述道通过refresh_token请求以下链接获取access_token</p></blockquote><blockquote><p><a href="https://api.weixin.qq.com/sns/oauth2/refresh_token?appid=APPID&grant_type=refresh_token&refresh_token=REFRESH_TOKEN">https://api.weixin.qq.com/sns/oauth2/refresh_token?appid=APPID&amp;grant_type=refresh_token&amp;refresh_token=REFRESH_TOKEN</a></p></blockquote><h4 id="第四步：拉取用户信息-需scope为-snsapi-userinfo"><a href="#第四步：拉取用户信息-需scope为-snsapi-userinfo" class="headerlink" title="第四步：拉取用户信息(需scope为 snsapi_userinfo)"></a>第四步：拉取用户信息(需scope为 snsapi_userinfo)</h4><blockquote><p> 见文档,  如果网页授权作用域为snsapi_userinfo，则此时开发者可以通过access_token和openid拉取用户信息了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 微信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信扫码 </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity</title>
      <link href="/2023/12/03/SpringSecurity/"/>
      <url>/2023/12/03/SpringSecurity/</url>
      
        <content type="html"><![CDATA[<div class="tip info"><p>待更新</p></div><h1 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h1><h2 id="入门环境"><a href="#入门环境" class="headerlink" title="入门环境"></a>入门环境</h2><p>基于父依赖SpringBoot 2.7.3</p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringBoot Web--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SpringSecurity--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>登录校验流程图</p><p><img src="https://github.com/anchorlove/SpringSecurityStudy/raw/main/img/image-20211215094003288.png"></p><h3 id="通过新的Debug方式了解Security内部逻辑"><a href="#通过新的Debug方式了解Security内部逻辑" class="headerlink" title="通过新的Debug方式了解Security内部逻辑"></a>通过新的Debug方式了解Security内部逻辑</h3><p>SpringSecurity的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器</p><p>此时我们需要探究SpringSecurity的过滤器链,  可以通过查看Spring容器中的容器就可以知道</p><p>我们获取SpringApplication的返回值 如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(SecurityApplication.class, args);</span><br></pre></td></tr></table></figure><p>在此行的下方随便输出一行语句,  打上断点,  进入debug模式</p><p><img src="https://s2.loli.net/2023/12/03/h2yz8cnRHpOSfF6.png"></p><p>对刚刚的返回值run进行捕获(图示里面并未添加返回值),  按下回车即可获取结果集(容器),  在此时我们需要获取的bean为DefaultSecurityFilterChain</p><p><img src="https://s2.loli.net/2023/12/03/YqVBs9ZHrwonml7.png"></p><p>如图可以看到有16个过滤器</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 鉴权 </tag>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java部分</title>
      <link href="/2023/11/25/Java/"/>
      <url>/2023/11/25/Java/</url>
      
        <content type="html"><![CDATA[<h2 id="JDK动态代理-案例"><a href="#JDK动态代理-案例" class="headerlink" title="JDK动态代理 案例"></a>JDK动态代理 案例</h2><p>**需求: ** 简单的实现增强(AOP)</p><p><strong>JDK动态代理只能代理实现了接口的类，不支持对类的直接代理</strong></p><p>在此提供一个接口和一个实现类,  需要对接口实现类中的方法进行增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IHello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bye</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Implement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloImpl</span> <span class="keyword">implements</span> <span class="title class_">IHello</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bye</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bye&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增强部分:</p><p>首先需要自定义类实现<code>InvocationHandler</code>接口,  其次重写<code>invoke</code>方法,  通过invoke方法进行代理: 案例如下: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target; <span class="comment">// 目标类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target; <span class="comment">// $Proxy01: hello()  Bye()</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 生成代理对象方法</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">createProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// JDK中提供了 Proxy类, 有一个方法专门用于根据接口生成代理类对象的方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> Proxy.newProxyInstance(ProxyHandler.class.getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),</span><br><span class="line">                <span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">return</span> proxy;  <span class="comment">// $Proxy01  Hello()  Bye()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy 代理对象 $Proxy01</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 调用的方法   hello()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 方法的参数值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 解释  @Pointcut(&quot;execution(* com.hang..add*(..))&quot;)</span></span><br><span class="line">        <span class="keyword">if</span>(method.getName().equalsIgnoreCase(<span class="string">&quot;hello&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">// 增强</span></span><br><span class="line">            showTime();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 利用反射机制调用目标类的目标方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">reflectObj</span> <span class="operator">=</span> method.invoke(target, args); <span class="comment">//  HelloImpl.Hello()   目标类的方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> reflectObj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 增强的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showTime</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间为: &quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对于24-26行:  对于方法名为 hello进行增强,  此处以前置增强为例,  在方法执行(invoke)前,  执行自定义方法(showTime)显示时间</li></ul><p>测试方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 在本地生成代理对象字节码文件</span></span><br><span class="line">        System.getProperties().put(<span class="string">&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="type">IHello</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloImpl</span>();  <span class="comment">// 目标类</span></span><br><span class="line">        <span class="type">ProxyHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyHandler</span>(target);</span><br><span class="line">        <span class="comment">// 生成代理类</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> handler.createProxy();</span><br><span class="line">        System.out.println(proxy); <span class="comment">// Proxy0对象</span></span><br><span class="line"></span><br><span class="line">        <span class="type">IHello</span> <span class="variable">obj</span> <span class="operator">=</span> (IHello) proxy;</span><br><span class="line">        obj.hello();  <span class="comment">// $ Proxy0.Hello()</span></span><br><span class="line">        obj.bye();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com.hang.HelloImpl@61bbe9ba</span><br><span class="line">当前时间为: Sat Nov 25 10:31:56 SGT 2023</span><br><span class="line">Hello</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><p>可以很明显的看到,  在hello方法执行前,  输出了自定义增强方法showTime</p><p>此时需要观察生成代理字节码类可以在测试中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.getProperties().put(<span class="string">&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br></pre></td></tr></table></figure><p>添加该行后,  在当前Module的同目录下会生成文件夹为<code>com.sum.proxy</code> ,文件夹内会生成字节码$Proxy0  … $Proxy20 …  数字部分可变</p><p>以当前案例生成的字节码为例:  ($Proxy0.class)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">extends</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">IHello</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="built_in">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">bye</span><span class="params">()</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m4, (Object[])<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m3, (Object[])<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 省略equals,toString,hashCode三方法同上(为默认生成)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>));</span><br><span class="line">            m4 = Class.forName(<span class="string">&quot;com.hang.IHello&quot;</span>).getMethod(<span class="string">&quot;bye&quot;</span>);</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;com.hang.IHello&quot;</span>).getMethod(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodError</span>(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoClassDefFoundError</span>(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>通过该字节码文件可以很明显的发现一共生成了 5个 Method  (两个为刚刚定义的方法, 三个(1.equals 2.toString 3.hashCode)为默认生成的)</p></li><li><p>在代码尾部的static部分,  生成了方法上述的5个方法</p></li></ul><p>以当前字节码文件中的 <code>hello()</code>为例  (因为我们对该方法增强了):</p><p>该方法主要逻辑为执行<code>super.h.invoke(this, m3, (Object[])null);</code></p><ul><li><p>该方法很明确就是调用父类的 InvocationHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the invocation handler for this proxy instance.</span></span><br><span class="line"><span class="keyword">protected</span> InvocationHandler h;</span><br></pre></td></tr></table></figure><p>然后调用invoke,  这个invoke不就是我们案例中重写了的invoke吗?</p></li></ul><p>总结:  通过代理接口实现接口方法,  当调用时执行代理类中的同名方法然后回调到我们自定义的invoke,  在该方法内可以实现增强(前置,后置,环绕)</p><h2 id="JDK谓词"><a href="#JDK谓词" class="headerlink" title="JDK谓词"></a>JDK谓词</h2><p>直接上案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; ns= Arrays.asList(<span class="string">&quot;calyee blog&quot;</span>,<span class="string">&quot;cal&quot;</span>,<span class="string">&quot;ccaaalyyyyeeee&quot;</span>);</span><br><span class="line">ArrayList&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(ns);</span><br><span class="line">Predicate&lt;String&gt; predicate = s -&gt; s.length() &gt; <span class="number">3</span>;  <span class="comment">// 谓词</span></span><br><span class="line">names.removeIf(predicate);</span><br></pre></td></tr></table></figure><p>追踪Predicate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Predicate</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(T t)</span>;</span><br><span class="line">    <span class="comment">// 仅列出一个 (其他的还有比如或运算)</span></span><br><span class="line">    <span class="keyword">default</span> Predicate&lt;T&gt; <span class="title function_">and</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; other)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前案例为:  筛选长度大于3的对象</p><p>其中<code>removeIf</code>方法为传入一个谓词对象,  通过谓词条件构造筛选条件,  然后重复遍历(类似于构造if-else判断)</p><p>所以:  谓词工厂就是一个判断</p><h2 id="自定义实现Xxx"><a href="#自定义实现Xxx" class="headerlink" title="自定义实现Xxx"></a>自定义实现Xxx</h2><div class="tip info"><p>预定</p></div>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 底层 </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标签 Tag Plugins</title>
      <link href="/2023/11/04/TagPlugins/"/>
      <url>/2023/11/04/TagPlugins/</url>
      
        <content type="html"><![CDATA[<h2 id="段落文本-p"><a href="#段落文本-p" class="headerlink" title="段落文本 p"></a>段落文本 p</h2><div class="tabs" id="p"><ul class="nav-tabs"><button type="button" class="tab " data-href="p-1">标签语法</button><button type="button" class="tab " data-href="p-2">配置参数</button><button type="button" class="tab  active" data-href="p-3">样式预览</button><button type="button" class="tab " data-href="p-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="p-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="p-2"><ol><li>字体: logo, code</li><li>颜色: <span class="p red">red</span>,<span class="p yellow">yellow</span>,<span class="p green">green</span>,<span class="p cyan">cyan</span>,<span class="p blue">blue</span>,<span class="p gray">gray</span></li><li>大小: small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐方向: left, center, right</li></ol></div><div class="tab-item-content active" id="p-3"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class="p red">红色</p>、<p class="p yellow">黄色</p>、<p class="p green">绿色</p>、<p class="p cyan">青色</p>、<p class="p blue">蓝色</p>、<p class="p gray">灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<p class="p center logo large">Volantis</p><p class="p center small">A Wonderful Theme for Hexo</p></li></ul></div><div class="tab-item-content" id="p-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">  在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">  文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">  &#123;% p center logo large, Volantis %&#125;</span><br><span class="line">  &#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="行内文本-span"><a href="#行内文本-span" class="headerlink" title="行内文本 span"></a>行内文本 span</h2><div class="tabs" id="span"><ul class="nav-tabs"><button type="button" class="tab " data-href="span-1">标签语法</button><button type="button" class="tab " data-href="span-2">配置参数</button><button type="button" class="tab  active" data-href="span-3">样式预览</button><button type="button" class="tab " data-href="span-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="span-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="span-2"><ol><li>字体: logo, code</li><li>颜色: <span class="p red">red</span>,<span class="p yellow">yellow</span>,<span class="p green">green</span>,<span class="p cyan">cyan</span>,<span class="p blue">blue</span>,<span class="p gray">gray</span></li><li>大小: small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐方向: left, center, right</li></ol></div><div class="tab-item-content active" id="span-3"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class="p red">红色</span>、<span class="p yellow">黄色</span>、<span class="p green">绿色</span>、<span class="p cyan">青色</span>、<span class="p blue">蓝色</span>、<span class="p gray">灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class="p center logo large">Volantis</span><br><span class="p center small">A Wonderful Theme for Hexo</span></li></ul></div><div class="tab-item-content" id="span-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">  在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">  文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">  &#123;% span center logo large, Volantis %&#125;</span><br><span class="line">  &#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h2><div class="tabs" id="text"><ul class="nav-tabs"><button type="button" class="tab " data-href="text-1">标签语法</button><button type="button" class="tab  active" data-href="text-2">样式预览</button><button type="button" class="tab " data-href="text-3">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="text-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content active" id="text-2"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol></div><div class="tab-item-content" id="text-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="分栏-tab"><a href="#分栏-tab" class="headerlink" title="分栏 tab"></a>分栏 tab</h2><div class="note blue anzhiyufont anzhiyu-icon-bullhorn simple"><p>分栏支持内置阿里图标，如果开启了 <code>fontawesome</code>可以使用 fontawesome 的图标，否则只能使用默内置阿里图标</p></div><div class="tabs" id="folding"><ul class="nav-tabs"><button type="button" class="tab " data-href="folding-1">标签语法</button><button type="button" class="tab " data-href="folding-2">配置参数</button><button type="button" class="tab  active" data-href="folding-3">样式预览</button><button type="button" class="tab " data-href="folding-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="folding-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line"></span><br><span class="line">Any content (support inline tags too).</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="folding-2"><ol><li>Unique name :<ul><li>选项卡块标签的唯一名称，不带逗号。</li><li>将在#id 中用作每个标签及其索引号的前缀。</li><li>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</li><li>仅当前帖子&#x2F;页面的 URL 必须是唯一的！</li></ul></li><li>[index]:<ul><li>活动选项卡的索引号。</li><li>如果未指定，将选择第一个标签（1）。</li><li>如果 index 为-1，则不会选择任何选项卡。</li><li>可选参数。</li></ul></li><li>[Tab caption]:<ul><li>当前选项卡的标题。</li><li>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</li><li>如果未指定标题，但指定了图标，则标题将为空。</li><li>可选参数。</li></ul></li><li>[@icon]: - FontAwesome 图标名称（全名，看起来像“ fas fa-font”） - 可以指定带空格或不带空格； - 例如’Tab caption @icon’ 和 ‘Tab caption@icon’. - 可选参数。</li></ol></div><div class="tab-item-content active" id="folding-3"><div class="note primary flat"><p>Demo 1 - 预设选择第一个【默认】</p></div><div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">test1 1</button><button type="button" class="tab " data-href="test1-2">test1 2</button><button type="button" class="tab " data-href="test1-3">test1 3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="note primary flat"><p>Demo 2 - 预设选择 tabs</p></div><div class="tabs" id="test2"><ul class="nav-tabs"><button type="button" class="tab " data-href="test2-1">test2 1</button><button type="button" class="tab " data-href="test2-2">test2 2</button><button type="button" class="tab  active" data-href="test2-3">test2 3</button></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="note primary flat"><p>Demo 3 - 没有预设值</p></div><div class="tabs" id="test3"><ul class="nav-tabs no-default"><button type="button" class="tab " data-href="test3-1">test3 1</button><button type="button" class="tab " data-href="test3-2">test3 2</button><button type="button" class="tab " data-href="test3-3">test3 3</button></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="note primary flat"><p>Demo 4 - 自定义 Tab 名 + 只有 icon + icon 和 Tab 名</p></div><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">第一个Tab</button><button type="button" class="tab " data-href="test4-2"><i class="anzhiyufont anzhiyu-icon-oranges" style="text-align: center;"></i></button><button type="button" class="tab " data-href="test4-3"><i class="anzhiyufont anzhiyu-icon-oranges"></i>炸弹</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab 名字为第一个 Tab</strong></p></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有 Tab 名字</strong></p></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><div class="tab-item-content" id="folding-4"><div class="note primary flat"><p>Demo 1 - 预设选择第一个【默认】</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="note primary flat"><p>Demo 2 - 预设选择 tabs</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="note primary flat"><p>Demo 3 - 没有预设值</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="note primary flat"><p>Demo 4 - 自定义 Tab 名 + 只有 icon + icon 和 Tab 名</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**tab 名字为第一个 Tab**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**只有图标 没有 Tab 名字**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="按钮-btns"><a href="#按钮-btns" class="headerlink" title="按钮 btns"></a>按钮 btns</h2><div class="tabs" id="btns"><ul class="nav-tabs"><button type="button" class="tab " data-href="btns-1">标签语法</button><button type="button" class="tab " data-href="btns-2">参数配置</button><button type="button" class="tab  active" data-href="btns-3">样式预览</button><button type="button" class="tab " data-href="btns-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="btns-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="btns-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;标题&lt;/b&gt; </code>和<code> &lt;p&gt;描述文字&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">wide</td><td align="left">宽一点的按钮</td></tr><tr><td align="left">fill</td><td align="left">填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td align="left">center</td><td align="left">居中，按钮之间是固定间距</td></tr><tr><td align="left">around</td><td align="left">居中分散</td></tr><tr><td align="left">grid2</td><td align="left">等宽最多 2 列，屏幕变窄会适当减少列数</td></tr><tr><td align="left">grid3</td><td align="left">等宽最多 3 列，屏幕变窄会适当减少列数</td></tr><tr><td align="left">grid4</td><td align="left">等宽最多 4 列，屏幕变窄会适当减少列数</td></tr><tr><td align="left">grid5</td><td align="left">等宽最多 5 列，屏幕变窄会适当减少列数</td></tr></tbody></table></div><div class="tab-item-content active" id="btns-3"><ol><li>如果需要显示类似「团队成员」之类的一组含有头像的链接：</li></ol><div class="btns circle grid5">            <a class="button no-text-decoration" href="https://xaoxuu.com" title="xaoxuu"><img src="https://bu.dusays.com/2023/06/01/64787e6a5816d.png">xaoxuu</a><a class="button no-text-decoration" href="https://xaoxuu.com" title="xaoxuu"><img src="https://bu.dusays.com/2023/06/01/64787e6a5816d.png">xaoxuu</a><a class="button no-text-decoration" href="https://xaoxuu.com" title="xaoxuu"><img src="https://bu.dusays.com/2023/06/01/64787e6a5816d.png">xaoxuu</a><a class="button no-text-decoration" href="https://xaoxuu.com" title="xaoxuu"><img src="https://bu.dusays.com/2023/06/01/64787e6a5816d.png">xaoxuu</a><a class="button no-text-decoration" href="https://xaoxuu.com" title="xaoxuu"><img src="https://bu.dusays.com/2023/06/01/64787e6a5816d.png">xaoxuu</a>          </div><ol start="2"><li>或者含有图标的按钮：</li></ol><div class="btns rounded grid5">            <a class="button no-text-decoration" href="/" title="下载源码"><i class="anzhiyufont anzhiyu-icon-bolt"></i>下载源码</a><a class="button no-text-decoration" href="/" title="查看文档"><i class="anzhiyufont anzhiyu-icon-book"></i>查看文档</a>          </div><ol start="3"><li>圆形图标 + 标题 + 描述 + 图片 + 网格 5 列 + 居中</li></ol><div class="btns circle center grid5">            <a href="https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1" class="no-text-decoration"><i class="anzhiyufont anzhiyu-icon-heartbeat"></i><b>心率管家</b><p class="p red">专业版</p><img src="https://cdn1.tianli0.top/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png"></a><a href="https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1" class="no-text-decoration"><i class="anzhiyufont anzhiyu-icon-heartbeat"></i><b>心率管家</b><p class="p green">免费版</p><img src="https://cdn1.tianli0.top/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png"></a>          </div></div><div class="tab-item-content" id="btns-4"><ol><li>如果需要显示类似「团队成员」之类的一组含有头像的链接：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://bu.dusays.com/2023/06/01/64787e6a5816d.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://bu.dusays.com/2023/06/01/64787e6a5816d.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://bu.dusays.com/2023/06/01/64787e6a5816d.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://bu.dusays.com/2023/06/01/64787e6a5816d.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://bu.dusays.com/2023/06/01/64787e6a5816d.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>或者含有图标的按钮：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, anzhiyufont anzhiyu-icon-bolt %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, anzhiyufont anzhiyu-icon-book %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>圆形图标 + 标题 + 描述 + 图片 + 网格 5 列 + 居中</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span> <span class="attr">class</span>=<span class="string">&quot;no-text-decoration&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;anzhiyufont anzhiyu-icon-heartbeat&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">&#123;% p red, 专业版 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://bu.dusays.com/2023/06/01/64787e2a1347c.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span> <span class="attr">class</span>=<span class="string">&quot;no-text-decoration&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;anzhiyufont anzhiyu-icon-heartbeat&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">&#123;% p green, 免费版 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://bu.dusays.com/2023/06/01/64787e515e261.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="按钮-btn"><a href="#按钮-btn" class="headerlink" title="按钮 btn"></a>按钮 btn</h2><div class="tabs" id="btn"><ul class="nav-tabs"><button type="button" class="tab " data-href="btn-1">标签语法</button><button type="button" class="tab " data-href="btn-2">参数配置</button><button type="button" class="tab  active" data-href="btn-3">样式预览</button><button type="button" class="tab " data-href="btn-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="btn-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br><span class="line"></span><br><span class="line">[url] : 链接</span><br><span class="line">[text] : 按钮文字</span><br><span class="line">[icon] : [可选] 图标</span><br><span class="line">[color] : [可选] 按钮背景顔色(默认 style 时）</span><br><span class="line">按钮字体和边框顔色(outline 时)</span><br><span class="line">default/blue/pink/red/purple/orange/green</span><br><span class="line">[style] : [可选] 按钮样式 默认实心</span><br><span class="line">outline/留空</span><br><span class="line">[layout] : [可选] 按钮佈局 默认为 line</span><br><span class="line">block/留空</span><br><span class="line">[position] : [可选] 按钮位置 前提是设置了 layout 为 block 默认为左边</span><br><span class="line">center/right/留空</span><br><span class="line">[size] : [可选] 按钮大小</span><br><span class="line">larger/留空</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="btn-2"><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">url</td><td align="left">链接</td></tr><tr><td align="left">text</td><td align="left">按钮文字</td></tr><tr><td align="left">icon</td><td align="left">[可选] 图标，如果开启了 <code>fontawesome</code>可以使用 fontawesome 的图标，否则只能使用默内置图标</td></tr><tr><td align="left">color</td><td align="left">[可选] 按钮背景顔色(默认 style 时）按钮字体和边框顔色(outline 时)default&#x2F;blue&#x2F;pink&#x2F;red&#x2F;purple&#x2F;orange&#x2F;green</td></tr><tr><td align="left">style</td><td align="left">[可选] 按钮样式 默认实心数，outline&#x2F;留空</td></tr><tr><td align="left">layout</td><td align="left">[可选] 按钮佈局 默认为 line block&#x2F;留空</td></tr><tr><td align="left">position</td><td align="left">[可选] 按钮位置 前提是设置了 layout 为 block 默认为左边 center&#x2F;right&#x2F;留空数</td></tr><tr><td align="left">size</td><td align="left">[可选] 按钮大小 larger&#x2F;留空</td></tr></tbody></table></div><div class="tab-item-content active" id="btn-3"><ol><li>一组按钮</li></ol><p>This is my website, click the button <a class="btn-anzhiyu " href="https://anheyu.com/" title="AnZhiYu"><span>AnZhiYu</span></a><br>This is my website, click the button <a class="btn-anzhiyu " href="https://anheyu.com/" title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><br>This is my website, click the button <a class="btn-anzhiyu outline" href="https://anheyu.com/" title="AnZhiYu"><span>AnZhiYu</span></a><br>This is my website, click the button <a class="btn-anzhiyu outline" href="https://anheyu.com/" title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><br>This is my website, click the button <a class="btn-anzhiyu larger" href="https://anheyu.com/" title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a></p><ol start="2"><li>调整位置&#x2F;大小</li></ol><p><a class="btn-anzhiyu block" href="https://anheyu.com/" title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><br><a class="btn-anzhiyu block center larger" href="https://anheyu.com/" title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><br><a class="btn-anzhiyu block right outline larger" href="https://anheyu.com/" title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a></p><ol start="3"><li>more than one button in center</li></ol><span><a class="btn-anzhiyu larger" href="https://anheyu.com/" title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu blue larger" href="https://anheyu.com/" title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu pink larger" href="https://anheyu.com/" title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu red larger" href="https://anheyu.com/" title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu purple larger" href="https://anheyu.com/" title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu orange larger" href="https://anheyu.com/" title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu green larger" href="https://anheyu.com/" title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a></span><ol start="4"><li>居中按钮</li></ol><div class="btn-center"><a class="btn-anzhiyu outline larger" href="https://anheyu.com/" title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu outline blue larger" href="https://anheyu.com/" title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu outline pink larger" href="https://anheyu.com/" title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu outline red larger" href="https://anheyu.com/" title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu outline purple larger" href="https://anheyu.com/" title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu outline orange larger" href="https://anheyu.com/" title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu outline green larger" href="https://anheyu.com/" title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a></div></div><div class="tab-item-content" id="btn-4"><ol><li>一组按钮</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is my website, click the button &#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,larger %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>调整位置&#x2F;大小</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,block %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,block center larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,block right outline larger %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>more than one button in center</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,green larger %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="4"><li>居中按钮</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-center&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,outline larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,outline blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,outline pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,outline red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,outline purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,outline orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,outline green larger %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="网站卡片-sites"><a href="#网站卡片-sites" class="headerlink" title="网站卡片 sites"></a>网站卡片 sites</h2><div class="tabs" id="site"><ul class="nav-tabs"><button type="button" class="tab " data-href="site-1">标签语法</button><button type="button" class="tab  active" data-href="site-2">样式预览</button><button type="button" class="tab " data-href="site-3">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="site-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content active" id="site-2"><div class="site-card-group"><a class="site-card" href="https://xaoxuu.com" data-title="简约风格"><div class="wrapper cover"><img class="cover fadeIn" src="https://bu.dusays.com/2023/06/01/6478965ce6557.webp"></div><div class="info"><img class="flink-avatar" src="https://cdn1.tianli0.top/gh/xaoxuu/cdn-assets/avatar/avatar.png"><span class="site-title">xaoxuu</span></div></a><a class="site-card" href="https://colsrch.top" data-title="这是一段关于这个网站的描述文字"><div class="wrapper cover"><img class="cover fadeIn" src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"></div><div class="info"><img class="flink-avatar" src="https://cdn1.tianli0.top/gh/Colsrch/images/Colsrch/avatar.jpg"><span class="site-title">Colsrch</span></div></a><a class="site-card" href="https://linhk1606.github.io" data-title="这是一段关于这个网站的描述文字"><div class="wrapper cover"><img class="cover fadeIn" src="https://bu.dusays.com/2023/06/01/6478963584621.png"></div><div class="info"><img class="flink-avatar" src="https://bu.dusays.com/2023/06/01/6478968743368.png"><span class="site-title">Linhk1606</span></div></a></div></div><div class="tab-item-content" id="site-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://bu.dusays.com/2023/06/01/6478965ce6557.webp, avatar=https://cdn1.tianli0.top/gh/xaoxuu/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn1.tianli0.top/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://bu.dusays.com/2023/06/01/6478963584621.png, avatar=https://bu.dusays.com/2023/06/01/6478968743368.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="单张图片-image"><a href="#单张图片-image" class="headerlink" title="单张图片 image"></a>单张图片 image</h2><div class="tabs" id="image"><ul class="nav-tabs"><button type="button" class="tab " data-href="image-1">标签语法</button><button type="button" class="tab " data-href="image-2">参数配置</button><button type="button" class="tab  active" data-href="image-3">样式预览</button><button type="button" class="tab " data-href="image-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="image-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="image-2"><ol><li>图片宽度高度：width&#x3D;300px, height&#x3D;32px</li><li>图片描述：alt&#x3D;图片描述（butterfly 需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg&#x3D;#f2f2f2</li></ol></div><div class="tab-item-content active" id="image-3"><ol start="4"><li>添加描述：</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://bu.dusays.com/2023/06/01/6478937d7de6f.webp" alt="每天下课回宿舍的路，没有什么故事。"></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div><ol start="2"><li>指定宽度：</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://bu.dusays.com/2023/06/01/6478937d7de6f.webp" style="width:400px;"></div></div><ol start="3"><li>指定宽度并添加描述：</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://bu.dusays.com/2023/06/01/6478937d7de6f.webp" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div><ol start="4"><li>设置占位背景色：</li></ol><div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://bu.dusays.com/2023/06/01/6478937d7de6f.webp" alt="优化不同宽度浏览的观感" style="width:400px;"></div><span class="image-caption">优化不同宽度浏览的观感</span></div></div><div class="tab-item-content" id="image-4"><ol><li>添加描述：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://bu.dusays.com/2023/06/01/6478937d7de6f.webp, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>指定宽度：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://bu.dusays.com/2023/06/01/6478937d7de6f.webp, width=400px %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>指定宽度并添加描述：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://bu.dusays.com/2023/06/01/6478937d7de6f.webp, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>设置占位背景色：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://bu.dusays.com/2023/06/01/6478937d7de6f.webp, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="inlineImg-行内图片"><a href="#inlineImg-行内图片" class="headerlink" title="inlineImg 行内图片"></a>inlineImg 行内图片</h2><div class="tabs" id="inlineimg"><ul class="nav-tabs"><button type="button" class="tab " data-href="inlineimg-1">标签语法</button><button type="button" class="tab " data-href="inlineimg-2">参数配置</button><button type="button" class="tab  active" data-href="inlineimg-3">样式预览</button><button type="button" class="tab " data-href="inlineimg-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="inlineimg-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineImg [src] [height] %&#125;</span><br><span class="line"></span><br><span class="line">[src] : 图片链接</span><br><span class="line">[height] ： 图片高度限制【可选】</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="inlineimg-2"><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">src</td><td align="left">图片链接</td></tr><tr><td align="left">height</td><td align="left">图片高度限制【可选】</td></tr></tbody></table></div><div class="tab-item-content active" id="inlineimg-3"><p>你看我长得漂亮不</p><p><img src="https://bu.dusays.com/2023/06/01/64787ded2ca1c.webp"></p><p>我觉得很漂亮 <img class="inline-img" src="https://bu.dusays.com/2023/06/01/64787da5251b3.png" style="height:150px"></p></div><div class="tab-item-content" id="inlineimg-4"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">你看我长得漂亮不</span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2021/03/19/2P6ivUGsdaEXSFI.png)</span><br><span class="line"></span><br><span class="line">我觉得很漂亮 &#123;% inlineImg https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png 150px %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="行内图片-inlineimage"><a href="#行内图片-inlineimage" class="headerlink" title="行内图片 inlineimage"></a>行内图片 inlineimage</h2><div class="tabs" id="inlineimage"><ul class="nav-tabs"><button type="button" class="tab " data-href="inlineimage-1">标签语法</button><button type="button" class="tab " data-href="inlineimage-2">参数配置</button><button type="button" class="tab  active" data-href="inlineimage-3">样式预览</button><button type="button" class="tab " data-href="inlineimage-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="inlineimage-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="inlineimage-2"><ol><li>高度：height&#x3D;20px</li></ol></div><div class="tab-item-content active" id="inlineimage-3"><p>这是 <img no-lazy class="inline" src="https://bu.dusays.com/2023/06/01/647895232e5d5.webp" style="height:1.5em"> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://bu.dusays.com/2022/05/19/6285328a83ca7.gif" style="height:40px;"> 一段话。</p></div><div class="tab-item-content" id="inlineimage-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://bu.dusays.com/2023/06/01/647895232e5d5.webp %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://bu.dusays.com/2022/05/19/6285328a83ca7.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="label-标签"><a href="#label-标签" class="headerlink" title="label 标签"></a>label 标签</h2><div class="tabs" id="label"><ul class="nav-tabs"><button type="button" class="tab " data-href="label-1">标签语法</button><button type="button" class="tab " data-href="label-2">参数配置</button><button type="button" class="tab  active" data-href="label-3">样式预览</button><button type="button" class="tab " data-href="label-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="label-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="label-2"><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">text</td><td align="left">文字</td></tr><tr><td align="left">color</td><td align="left">【可选】背景颜色，默认为 default，default&#x2F;blue&#x2F;pink&#x2F;red&#x2F;purple&#x2F;orange&#x2F;green</td></tr></tbody></table></div><div class="tab-item-content active" id="label-3"><p>臣亮言：<mark class="hl-label default">先帝</mark> 创业未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此诚<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈于内；<mark class="hl-label purple">忠志之士</mark> ，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p></div><div class="tab-item-content" id="label-4"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">臣亮言：&#123;% label 先帝 %&#125;创业未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此诚&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈于内；&#123;% label 忠志之士 purple %&#125;，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line">宫中、府中，俱为一体；陟罚臧否，不宜异同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="timeline"><a href="#timeline" class="headerlink" title="timeline"></a>timeline</h2><div class="tabs" id="timeline"><ul class="nav-tabs"><button type="button" class="tab " data-href="timeline-1">标签语法</button><button type="button" class="tab " data-href="timeline-2">参数配置</button><button type="button" class="tab  active" data-href="timeline-3">样式预览</button><button type="button" class="tab " data-href="timeline-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="timeline-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline title,color %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line"></span><br><span class="line">xxxxx</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line"></span><br><span class="line">xxxxx</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="timeline-2"><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">title</td><td align="left">标题&#x2F;时间线</td></tr><tr><td align="left">color</td><td align="left">timeline 颜色，default(留空) &#x2F; blue &#x2F; pink &#x2F; red &#x2F; purple &#x2F; orange &#x2F; green</td></tr></tbody></table></div><div class="tab-item-content active" id="timeline-3"><ol><li><p>默认颜色</p><div class="timeline undefined"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2022</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-02</p></div></div><div class="timeline-item-content"><p>这是测试页面</p></div></div></div></li><li><p>blue</p><div class="timeline blue"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2022</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-02</p></div></div><div class="timeline-item-content"><p>这是测试页面</p></div></div></div></li><li><p>pink</p><div class="timeline pink"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2022</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-02</p></div></div><div class="timeline-item-content"><p>这是测试页面</p></div></div></div></li><li><p>red</p><div class="timeline red"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2022</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-02</p></div></div><div class="timeline-item-content"><p>这是测试页面</p></div></div></div></li><li><p>purple</p><div class="timeline purple"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2022</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-02</p></div></div><div class="timeline-item-content"><p>这是测试页面</p></div></div></div></li><li><p>orange</p><div class="timeline orange"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2022</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-02</p></div></div><div class="timeline-item-content"><p>这是测试页面</p></div></div></div></li><li><p>green</p><div class="timeline green"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2022</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-02</p></div></div><div class="timeline-item-content"><p>这是测试页面</p></div></div></div></li></ol></div><div class="tab-item-content" id="timeline-4"><ol><li>默认颜色</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022 %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line"></span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>blue</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,blue %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line"></span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>pink</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,pink %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line"></span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>red</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,red %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line"></span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>purple</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,purple %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line"></span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>orange</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,orange %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line"></span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>green</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,green %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line"></span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="flink-友链标签"><a href="#flink-友链标签" class="headerlink" title="flink 友链标签"></a>flink 友链标签</h2><div class="note blue anzhiyufont anzhiyu-icon-bullhorn simple"><p>可在任何界面插入类似<code>友情链接</code>列表效果，内容格式与友情链接界面一样，支持 <code>yml 格式</code>,注意<code>yml数据</code>具有格式要求，请注意格式对齐，防止被编辑器格式化导致格式错误从而报错。</p></div><div class="tabs" id="btn"><ul class="nav-tabs"><button type="button" class="tab " data-href="btn-1">标签语法</button><button type="button" class="tab " data-href="btn-2">参数配置</button><button type="button" class="tab  active" data-href="btn-3">样式预览</button><button type="button" class="tab " data-href="btn-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="btn-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% flink %&#125;</span><br><span class="line">xxxxxx</span><br><span class="line">&#123;% endflink %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="btn-2"><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">class_name</td><td align="left">h2 标题</td></tr><tr><td align="left">flink_style</td><td align="left">【可选】友链样式，默认为 flexcard，flexcard&#x2F;anzhiyu</td></tr><tr><td align="left">link_list</td><td align="left">【可选】友链样式，默认为 flexcard，flexcard&#x2F;anzhiyu</td></tr></tbody></table></div><div class="tab-item-content active" id="btn-3"><div class="flink"><div class="flink-name">推荐博客</div> <div class="flink-list"><div class="flexcard-flink-list">              <a href="https://anheyu.com/" title="安知鱼" target="_blank" class="flink-list-card cf-friends-link">                <div class="wrapper cover">                    <img class="no-lightbox cover fadeIn" src="https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anheyu.com.jpg" onerror="this.onerror=null;this.src="/img/friend_404.gif"" alt="安知鱼">                </div>                <div class="info">                  <img class="no-lightbox cf-friends-avatar flink-avatar" src="https://img02.anheyu.com/adminuploads/1/2022/09/15/63232b7d91d22.jpg" onerror="this.onerror=null;this.src="/img/friend_404.gif"" alt="安知鱼">                  <span class="flink-sitename cf-friends-name">安知鱼</span>                </div>              </a></div></div><div class="flink-name">网站</div><div class="flink-desc">值得推荐的网站</div> <div class="flink-list"><div class="anzhiyu-flink-list">            <div class="flink-list-item">              <a href="https://www.youtube.com/" title="Youtube" class="cf-friends-link" target="_blank">                <div class="flink-item-icon">                  <img class="no-lightbox cf-friends-avatar" src="https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png" onerror="this.onerror=null;this.src="/img/friend_404.gif"" alt="Youtube">                </div>                <div class="flink-item-info">                  <div class="flink-item-name">Youtube</div>                  <div class="flink-item-desc" title="视频网站">视频网站</div>                </div>              </a>            </div>            <div class="flink-list-item">              <a href="https://www.weibo.com/" title="Weibo" class="cf-friends-link" target="_blank">                <div class="flink-item-icon">                  <img class="no-lightbox cf-friends-avatar" src="https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png" onerror="this.onerror=null;this.src="/img/friend_404.gif"" alt="Weibo">                </div>                <div class="flink-item-info">                  <div class="flink-item-name">Weibo</div>                  <div class="flink-item-desc" title="中国最大社交分享平台">中国最大社交分享平台</div>                </div>              </a>            </div>            <div class="flink-list-item">              <a href="https://twitter.com/" title="Twitter" class="cf-friends-link" target="_blank">                <div class="flink-item-icon">                  <img class="no-lightbox cf-friends-avatar" src="https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png" onerror="this.onerror=null;this.src="/img/friend_404.gif"" alt="Twitter">                </div>                <div class="flink-item-info">                  <div class="flink-item-name">Twitter</div>                  <div class="flink-item-desc" title="社交分享平台">社交分享平台</div>                </div>              </a>            </div></div></div></div></div><div class="tab-item-content" id="btn-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;% flink %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> class<span class="emphasis">_name: 推荐博客</span></span><br><span class="line"><span class="emphasis">  flink_</span>style: flexcard</span><br><span class="line">  link<span class="emphasis">_list:</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">  - name: 安知鱼</span></span><br><span class="line"><span class="emphasis">    link: https://anheyu.com/</span></span><br><span class="line"><span class="emphasis">    avatar: https://img02.anheyu.com/adminuploads/1/2022/09/15/63232b7d91d22.jpg</span></span><br><span class="line"><span class="emphasis">    descr: 生活明朗，万物可爱</span></span><br><span class="line"><span class="emphasis">    siteshot: https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anheyu.com.jpg</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">- class_</span>name: 网站</span><br><span class="line">  class<span class="emphasis">_desc: 值得推荐的网站</span></span><br><span class="line"><span class="emphasis">  flink_</span>style: anzhiyu</span><br><span class="line">  link<span class="emphasis">_list: - name: Youtube</span></span><br><span class="line"><span class="emphasis">  link: https://www.youtube.com/</span></span><br><span class="line"><span class="emphasis">  avatar: https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line"><span class="emphasis">  descr: 视频网站 - name: Weibo</span></span><br><span class="line"><span class="emphasis">  link: https://www.weibo.com/</span></span><br><span class="line"><span class="emphasis">  avatar: https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line"><span class="emphasis">  descr: 中国最大社交分享平台 - name: Twitter</span></span><br><span class="line"><span class="emphasis">  link: https://twitter.com/</span></span><br><span class="line"><span class="emphasis">  avatar: https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line"><span class="emphasis">  descr: 社交分享平台</span></span><br><span class="line"><span class="emphasis">  &#123;% endflink %&#125;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="mermaid-图"><a href="#mermaid-图" class="headerlink" title="mermaid 图"></a>mermaid 图</h2><div class="note blue anzhiyufont anzhiyu-icon-bullhorn simple"><p>使用<code>mermaid标签</code>可以绘制 Flowchart（流程图）、Sequence diagram（时序图 ）、Class Diagram（类别图）、State Diagram（状态图）、Gantt（甘特图）和 Pie Chart（圆形图），具体可以查看<a href="https://mermaid.js.org/#/">mermaid 文档</a></p></div><p>修改 <code>主题配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mermaid</span></span><br><span class="line"><span class="comment"># see https://github.com/mermaid-js/mermaid</span></span><br><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># built-in themes: default/forest/dark/neutral</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">dark</span></span><br></pre></td></tr></table></figure><div class="tabs" id="mermaid"><ul class="nav-tabs"><button type="button" class="tab " data-href="mermaid-1">标签语法</button><button type="button" class="tab  active" data-href="mermaid-2">样式预览</button><button type="button" class="tab " data-href="mermaid-3">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="mermaid-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content active" id="mermaid-2"><p><img src="https://bu.dusays.com/2023/06/01/647889d3a16f8.png" alt="mermaid"></p></div><div class="tab-item-content" id="mermaid-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">pie</span><br><span class="line">    title Key elements in Product X</span><br><span class="line">    &quot;Calcium&quot; : 42.96</span><br><span class="line">    &quot;Potassium&quot; : 50.05</span><br><span class="line">    &quot;Magnesium&quot; : 10.01</span><br><span class="line">    &quot;Iron&quot; :  5</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="复选列表-checkbox"><a href="#复选列表-checkbox" class="headerlink" title="复选列表 checkbox"></a>复选列表 checkbox</h2><div class="tabs" id="checkbox"><ul class="nav-tabs"><button type="button" class="tab " data-href="checkbox-1">标签语法</button><button type="button" class="tab " data-href="checkbox-2">配置参数</button><button type="button" class="tab  active" data-href="checkbox-3">样式预览</button><button type="button" class="tab " data-href="checkbox-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="checkbox-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="checkbox-2"><ol><li>样式: plus, minus, times</li><li>颜色: <span class="p red">red</span>,<span class="p yellow">yellow</span>,<span class="p green">green</span>,<span class="p cyan">cyan</span>,<span class="p blue">blue</span>,<span class="p gray">gray</span></li><li>选中状态: checked</li></ol></div><div class="tab-item-content active" id="checkbox-3"><div class="checkbox"><input type="checkbox">            <p>纯文本测试</p>            </div>   <div class="checkbox checked"><input type="checkbox" checked="checked">            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div>   <div class="checkbox red"><input type="checkbox">            <p>支持自定义颜色</p>            </div>   <div class="checkbox green checked"><input type="checkbox" checked="checked">            <p>绿色 + 默认选中</p>            </div>   <div class="checkbox yellow checked"><input type="checkbox" checked="checked">            <p>黄色 + 默认选中</p>            </div>   <div class="checkbox cyan checked"><input type="checkbox" checked="checked">            <p>青色 + 默认选中</p>            </div>   <div class="checkbox blue checked"><input type="checkbox" checked="checked">            <p>蓝色 + 默认选中</p>            </div>   <div class="checkbox plus green checked"><input type="checkbox" checked="checked">            <p>增加</p>            </div>   <div class="checkbox minus yellow checked"><input type="checkbox" checked="checked">            <p>减少</p>            </div>   <div class="checkbox times red checked"><input type="checkbox" checked="checked">            <p>叉</p>            </div></div><div class="tab-item-content" id="checkbox-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="dogeplayer-多吉云播放器"><a href="#dogeplayer-多吉云播放器" class="headerlink" title="dogeplayer 多吉云播放器"></a>dogeplayer 多吉云播放器</h2><div class="note blue anzhiyufont anzhiyu-icon-bullhorn simple"><p>快捷引入<a href="https://console.dogecloud.com/vod/overview">多吉云视频</a></p></div><div class="tabs" id="label"><ul class="nav-tabs"><button type="button" class="tab " data-href="label-1">标签语法</button><button type="button" class="tab " data-href="label-2">参数配置</button><button type="button" class="tab  active" data-href="label-3">样式预览</button><button type="button" class="tab " data-href="label-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="label-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dogeplayer 4945 ebb742fd1f0b5a7b %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="label-2"><p>获取<code>userId</code>与<code>vcode</code></p><p><img src="https://bu.dusays.com/2023/06/01/64788b5bad729.webp"></p><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">userId</td><td align="left">多吉云 userId</td></tr><tr><td align="left">vcode</td><td align="left">视频 vcode</td></tr></tbody></table></div><div class="tab-item-content active" id="label-3"><p><img src="https://bu.dusays.com/2023/06/01/64788c12883b8.webp"></p></div><div class="tab-item-content" id="label-4"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dogeplayer 4945 ebb742fd1f0b5a7b %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="折叠框-folding"><a href="#折叠框-folding" class="headerlink" title="折叠框 folding"></a>折叠框 folding</h2><div class="note blue anzhiyufont anzhiyu-icon-bullhorn disabled"><p>折叠框 folding</p></div><div class="tabs" id="folding"><ul class="nav-tabs"><button type="button" class="tab " data-href="folding-1">标签语法</button><button type="button" class="tab " data-href="folding-2">配置参数</button><button type="button" class="tab  active" data-href="folding-3">样式预览</button><button type="button" class="tab " data-href="folding-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="folding-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://bu.dusays.com/2023/06/01/64788d71c832d.webp</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="folding-2"><ol><li>颜色：blue, cyan, green, yellow, red</li><li>状态：状态填写 open 代表默认打开。</li></ol></div><div class="tab-item-content active" id="folding-3"><details class="folding-tag"><summary> 查看图片测试 </summary>              <div class="content">              <p><img src="https://bu.dusays.com/2023/06/01/64788d71c832d.webp"></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class="content">              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class="content">              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](<span class="link">https://bu.dusays.com/2023/06/01/64788d71c832d.webp</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class="content">              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class="content">              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class="content">              <details class="folding-tag"><summary> 查看嵌套测试3 </summary>              <div class="content">              <p>hahaha <span><img src="https://bu.dusays.com/2023/06/01/64788cd5a356b.png" style="height:24px"></span></p>              </div>            </details>              </div>            </details>              </div>            </details></div><div class="tab-item-content" id="folding-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://bu.dusays.com/2023/06/01/64788d71c832d.webp</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://bu.dusays.com/2023/06/01/64788cd5a356b.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="Gallery-相册图库"><a href="#Gallery-相册图库" class="headerlink" title="Gallery 相册图库"></a>Gallery 相册图库</h2><p>一个图库集合。</p><div class="tabs" id="gallery"><ul class="nav-tabs"><button type="button" class="tab " data-href="gallery-1">标签语法</button><button type="button" class="tab " data-href="gallery-2">参数配置</button><button type="button" class="tab  active" data-href="gallery-3">样式预览</button><button type="button" class="tab " data-href="gallery-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="gallery-1"><ol><li><p>gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>gallery 相册</p></li></ol><div class="tabs" id="gallery相册"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="gallery相册-1">本地</button><button type="button" class="tab " data-href="gallery相册-2">远程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="gallery相册-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% gallery true,220,10 %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% gallery true,,10 %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>lazyload</td><td>【可选】点击按钮加载更多图片，填写 true&#x2F;false。默认为 <code>false</code>。</td></tr><tr><td>rowHeight</td><td>【可选】图片显示的高度，如果需要一行显示更多的图片，可设置更小的数字。默认为 <code>220</code>。</td></tr><tr><td>limit</td><td>【可选】每次加载多少张照片。默认为 <code>10</code>。</td></tr></tbody></table></div><div class="tab-item-content" id="gallery相册-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery url,[link],[lazyload],[rowHeight],[limit] %&#125;</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>url</td><td>【必须】 识别词</td></tr><tr><td>link</td><td>【必须】远程的 json 链接</td></tr><tr><td>lazyload</td><td>【可选】点击按钮加载更多图片，填写 true&#x2F;false。默认为 <code>false</code>。</td></tr><tr><td>rowHeight</td><td>【可选】图片显示的高度，如果需要一行显示更多的图片，可设置更小的数字。默认为 <code>220</code>。</td></tr><tr><td>limit</td><td>【可选】每次加载多少张照片。默认为 <code>10</code>。</td></tr></tbody></table><blockquote><p>远程链接 Json 的例子</p></blockquote><p>有三个参数，<code>url</code>是必须存在的，<code>alt</code> 和 <code>title</code> 可有，也可没有。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn1.tianli0.top/gh/jerryc127/CDN/img/IMG_0556.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IMG_0556.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;这是title&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn1.tianli0.top/gh/jerryc127/CDN/img/IMG_0472.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IMG_0472.jpg&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn1.tianli0.top/gh/jerryc127/CDN/img/IMG_0453.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn1.tianli0.top/gh/jerryc127/CDN/img/IMG_0931.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery url,https://xxxx.com/sss.json %&#125;</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% gallery url,https://xxxx.com/sss.json,true,220,10 %&#125;</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% gallery url,https://xxxx.com/sss.json,true,,10 %&#125;</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><div class="tab-item-content" id="gallery-2"><ul><li><p>gallerygroup 相册图库</p><table><thead><tr><th align="left">参数名</th><th align="left">释义</th></tr></thead><tbody><tr><td align="left">name</td><td align="left">图库名字</td></tr><tr><td align="left">description</td><td align="left">图库描述</td></tr><tr><td align="left">link</td><td align="left">链接到对应相册的地址</td></tr><tr><td align="left">img-url</td><td align="left">图库封面</td></tr></tbody></table></li></ul><div class="note info flat"><p>思维拓展一下，相册图库的实质其实就是个快捷方式，可以自定义添加描述、封面、链接。那么我们未必要把它当做一个相册，完全可以作为一个链接卡片，链接到视频、QQ、友链都是不错的选择。</p></div><ul><li>gallery 相册<br>区别于旧版的 Gallery 相册,新的 Gallery 相册会自动根据图片长度进行排版，书写也更加方便，与 markdown 格式一样。可根据需要插入到相应的 md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</li></ul><div class="tabs" id="gallery相册参数"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="gallery相册参数-1">本地</button><button type="button" class="tab " data-href="gallery相册参数-2">远程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="gallery相册参数-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% gallery true,220,10 %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% gallery true,,10 %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>lazyload</td><td>【可选】点击按钮加载更多图片，填写 true&#x2F;false。默认为 <code>false</code>。</td></tr><tr><td>rowHeight</td><td>【可选】图片显示的高度，如果需要一行显示更多的图片，可设置更小的数字。默认为 <code>220</code>。</td></tr><tr><td>limit</td><td>【可选】每次加载多少张照片。默认为 <code>10</code>。</td></tr></tbody></table></div><div class="tab-item-content" id="gallery相册参数-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery url,[link],[lazyload],[rowHeight],[limit] %&#125;</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>url</td><td>【必须】 识别词</td></tr><tr><td>link</td><td>【必须】远程的 json 链接</td></tr><tr><td>lazyload</td><td>【可选】点击按钮加载更多图片，填写 true&#x2F;false。默认为 <code>false</code>。</td></tr><tr><td>rowHeight</td><td>【可选】图片显示的高度，如果需要一行显示更多的图片，可设置更小的数字。默认为 <code>220</code>。</td></tr><tr><td>limit</td><td>【可选】每次加载多少张照片。默认为 <code>10</code>。</td></tr></tbody></table><blockquote><p>远程链接 Json 的例子</p></blockquote><p>有三个参数，<code>url</code>是必须存在的，<code>alt</code> 和 <code>title</code> 可有，也可没有。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn1.tianli0.top/gh/jerryc127/CDN/img/IMG_0556.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IMG_0556.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;这是title&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn1.tianli0.top/gh/jerryc127/CDN/img/IMG_0472.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IMG_0472.jpg&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn1.tianli0.top/gh/jerryc127/CDN/img/IMG_0453.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn1.tianli0.top/gh/jerryc127/CDN/img/IMG_0931.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery url,https://xxxx.com/sss.json %&#125;</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% gallery url,https://xxxx.com/sss.json,true,220,10 %&#125;</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% gallery url,https://xxxx.com/sss.json,true,,10 %&#125;</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><div class="tab-item-content active" id="gallery-3"><ul><li>gallerygroup 相册图库</li></ul><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="https://bu.dusays.com/2023/06/01/64788f24d05bd.webp" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href="/wordScenery/"></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="https://bu.dusays.com/2023/06/01/64788f456fc3d.webp" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href="/thousand/"></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="https://bu.dusays.com/2023/06/01/64788f83e5fa1.webp" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href="/wallpaper/"></a>  </figcaption>  </figure>  </div><ul><li>gallery 相册</li></ul><div class="gallery">  <div class="fj-gallery page_img_lazyload lazyload btn_album_detail_lazyload data" data-rowheight="220" data-limit="2">    <span class="gallery-data">[{"url":"https://bu.dusays.com/2023/06/01/647896b15759c.jpg","alt":""},{"url":"https://bu.dusays.com/2023/06/01/647896cabde59.jpg","alt":""},{"url":"https://bu.dusays.com/2023/06/01/647896eb0f3ea.jpg","alt":""},{"url":"https://bu.dusays.com/2023/06/01/647896ed810b3.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg","alt":""}]</span>  </div><button class="gallery-load-more" style="opacity:0">  <span>加载更多</span>  <i class="anzhiyufont anzhiyu-icon-arrow-down"></i>  </button></div></div><div class="tab-item-content" id="gallery-4"><div class="note info flat"><p>对于很多同学提问的<code>gallerygroup</code>和<code>gallery</code>相册页的链接问题。这里说下我个人的使用习惯。<br>一般使用相册图库的话，可以在导航栏加一个 gallery 的 page(<strong>使用指令<code>hexo new page gallery</code>添加</strong>)，里面放相册图库作为封面。然后在<code>[Blogroot]/source/gallery/</code>下面建立相应的文件夹，例如若按照这里的示例，若欲使用<code>/gallery/MC/</code>路径访问 MC 相册，则需要新建<code>[Blogroot]/source/gallery/MC/index.md</code>，并在里面填入<code>gallery</code>相册内容。</p><p>注意 ⚠️：本站相册集为单独优化，可参考<a href="https://anheyu.com/posts/220c.html">配置相册页面</a>。</p></div><ol><li><p>gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line"> &#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/wordScenery/&#x27; https://bu.dusays.com/2023/06/01/64788f24d05bd.webp %&#125;</span><br><span class="line"> &#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/thousand/&#x27; https://bu.dusays.com/2023/06/01/64788f456fc3d.webp %&#125;</span><br><span class="line"> &#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/wallpaper/&#x27; https://bu.dusays.com/2023/06/01/64788f83e5fa1.webp %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery true,,2 %&#125;</span><br><span class="line">![](<span class="link">https://bu.dusays.com/2023/06/01/647896b15759c.jpg</span>)</span><br><span class="line">![](<span class="link">https://bu.dusays.com/2023/06/01/647896cabde59.jpg</span>)</span><br><span class="line">![](<span class="link">https://bu.dusays.com/2023/06/01/647896eb0f3ea.jpg</span>)</span><br><span class="line">![](<span class="link">https://bu.dusays.com/2023/06/01/647890012b1ec.webp</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></li></ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="tag-hide"><a href="#tag-hide" class="headerlink" title="tag-hide"></a>tag-hide</h2><div class="note blue anzhiyufont anzhiyu-icon-bullhorn flat"><p>如果你想把一些文字、内容隐藏起来，并提供按钮让用户点击显示。可以使用这个标签外挂。<br>请注意，tag-hide 内的标签外挂 content 内都不建议有 h1 - h6 等标题。因为 Toc 会把隐藏内容标题也显示出来，而且当滚动屏幕时，如果隐藏内容没有显示出来，会导致 Toc 的滚动出现异常。</p></div><div class="tabs" id="tag-hide"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="tag-hide-1">inline</button><button type="button" class="tab " data-href="tag-hide-2">Block</button><button type="button" class="tab " data-href="tag-hide-3">Toggle</button></ul><div class="tab-contents"><div class="tab-item-content active" id="tag-hide-1"><p><code>inline</code> 在文本里面添加按钮隐藏内容，只限文字</p><p>( content 不能包含英文逗号，可用<code>&amp;sbquo;</code>)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideInline content,display,bg,color %&#125;</span><br></pre></td></tr></table></figure><ul><li><p>content: 文本内容</p></li><li><p>display: 按钮显示的文字(可选)</p></li><li><p>bg: 按钮的背景颜色(可选)</p></li><li><p>color: 按钮文字的颜色(可选)</p></li></ul><blockquote><p>Demo</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">哪个英文字母最酷？ &#123;% hideInline 因为西装裤(C装酷),查看答案,#FF7242,#fff %&#125;</span><br><span class="line"></span><br><span class="line">门里站着一个人? &#123;% hideInline 闪 %&#125;</span><br></pre></td></tr></table></figure><p>哪个英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案<br>  </button><span class="hide-content">因为西装裤(C装酷)</span></span></p><p>门里站着一个人? <span class="hide-inline"><button type="button" class="hide-button" style>Click<br>  </button><span class="hide-content">闪</span></span></p></div><div class="tab-item-content" id="tag-hide-2"><p><code>block</code>独立的 block 隐藏内容，可以隐藏很多内容，包括图片，代码块等等</p><p>( display 不能包含英文逗号，可用<code>&amp;sbquo;</code>)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><ul><li><p>content: 文本内容</p></li><li><p>display: 按钮显示的文字(可选)</p></li><li><p>bg: 按钮的背景颜色(可选)</p></li><li><p>color: 按钮文字的颜色(可选)</p></li></ul><blockquote><p>Demo</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看答案</span><br><span class="line">&#123;% hideBlock 查看答案 %&#125;</span><br><span class="line">傻子，怎么可能有答案</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><p>查看答案</p><div class="hide-block"><button type="button" class="hide-button" style>查看答案    </button><div class="hide-content"><p>傻子，怎么可能有答案</p></div></div></div><div class="tab-item-content" id="tag-hide-3"><p>如果你需要展示的内容太多，可以把它隐藏在收缩框里，需要时再把它展开。</p><p>( display 不能包含英文逗号，可用<code>&amp;sbquo;</code>)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Demo</p></blockquote><details class="toggle"><summary class="toggle-button" style>AnZhiYu主题安装方法</summary><div class="toggle-content"><p>在你的博客根目录里</p><p>git clone -b master <a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git">https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git</a> themes&#x2F;anzhiyu</p><p>如果想要安装比较新的 dev 分支，可以</p><p>git clone -b dev <a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git">https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git</a> themes&#x2F;anzhiyu</p></div></details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="链接卡片-link"><a href="#链接卡片-link" class="headerlink" title="链接卡片 link"></a>链接卡片 link</h2><div class="tabs" id="link"><ul class="nav-tabs"><button type="button" class="tab " data-href="link-1">标签语法</button><button type="button" class="tab  active" data-href="link-2">样式预览</button><button type="button" class="tab " data-href="link-3">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="link-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 站点描述, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content active" id="link-2"><div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://github.com/owen0o0/getFavicon">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style>          <i class="anzhiyufont anzhiyu-icon-link" style></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">获取网站的Favicon图标并显示在你的网页上</div>            <div class="tag-link-sitename">owen0o0</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div></div><div class="tab-item-content" id="link-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 获取网站的Favicon图标并显示在你的网页上,owen0o0,https://github.com/owen0o0/getFavicon %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="单选列表-radio"><a href="#单选列表-radio" class="headerlink" title="单选列表 radio"></a>单选列表 radio</h2><div class="tabs" id="radio"><ul class="nav-tabs"><button type="button" class="tab " data-href="radio-1">标签语法</button><button type="button" class="tab " data-href="radio-2">配置参数</button><button type="button" class="tab  active" data-href="radio-3">样式预览</button><button type="button" class="tab " data-href="radio-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="radio-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="radio-2"><ol><li>颜色: <span class="p red">red</span>,<span class="p yellow">yellow</span>,<span class="p green">green</span>,<span class="p cyan">cyan</span>,<span class="p blue">blue</span>,<span class="p gray">gray</span></li><li>选中状态: checked</li></ol></div><div class="tab-item-content active" id="radio-3"><div class="checkbox"><input type="radio">            <p>纯文本测试</p>            </div>   <div class="checkbox checked"><input type="radio" checked="checked">            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div>   <div class="checkbox red"><input type="radio">            <p>支持自定义颜色</p>            </div>   <div class="checkbox green"><input type="radio">            <p>绿色</p>            </div>   <div class="checkbox yellow"><input type="radio">            <p>黄色</p>            </div>   <div class="checkbox cyan"><input type="radio">            <p>青色</p>            </div>   <div class="checkbox blue"><input type="radio">            <p>蓝色</p>            </div></div><div class="tab-item-content" id="radio-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="上标标签-tip"><a href="#上标标签-tip" class="headerlink" title="上标标签 tip"></a>上标标签 tip</h2><div class="tip cogs"><p>主要样式参考自<a href="https://www.antmoe.com/posts/3b43914f/">小康的 butterfly 渐变背景标签</a></p></div><div class="tabs" id="tip"><ul class="nav-tabs"><button type="button" class="tab " data-href="tip-1">标签语法</button><button type="button" class="tab " data-href="tip-2">配置参数</button><button type="button" class="tab  active" data-href="tip-3">样式预览</button><button type="button" class="tab " data-href="tip-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="tip-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="tip-2"><ol><li>样式: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li>自定义图标: 支持 fontawesome。</li></ol></div><div class="tab-item-content active" id="tip-3"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义 font awesome 图标</p></div></div><div class="tab-item-content" id="tip-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义 font awesome 图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="Note-Bootstrap-Callout"><a href="#Note-Bootstrap-Callout" class="headerlink" title="Note (Bootstrap Callout)"></a>Note (Bootstrap Callout)</h2><div class="tabs" id="note"><ul class="nav-tabs"><button type="button" class="tab " data-href="note-1">通用配置</button><button type="button" class="tab " data-href="note-2">语法格式</button><button type="button" class="tab " data-href="note-3">配置参数</button><button type="button" class="tab  active" data-href="note-4">样式预览</button><button type="button" class="tab " data-href="note-5">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="note-1"><p>修改主题配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><code>Note</code>标签外挂有两种用法。<code>icons</code>和<code>light_bg_offset</code>只对方法一生效。</p><p><code>fontawesome</code>图标需开启主题配置文件中<code>icons.fontawesome</code></p></div><div class="tab-item-content" id="note-2"><p><code>方法一</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p><code>方法二</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="note-3"><p><code>方法一</code></p><table><thead><tr><th align="left">参数</th><th align="left">用法</th></tr></thead><tbody><tr><td align="left">class</td><td align="left">【可选】标识，不同的标识有不同的配色<br>（ default &#x2F; primary &#x2F; success &#x2F; info &#x2F; warning &#x2F; danger ）</td></tr><tr><td align="left">no-icon</td><td align="left">【可选】不显示 icon</td></tr><tr><td align="left">style</td><td align="left">【可选】可以覆盖配置中的 style<br>（simple&#x2F;modern&#x2F;flat&#x2F;disabled）</td></tr></tbody></table><p><code>方法二</code></p><table><thead><tr><th align="left">参数</th><th align="left">用法</th></tr></thead><tbody><tr><td align="left">class</td><td align="left">【可选】标识，不同的标识有不同的配色<br>（ default &#x2F; blue &#x2F; pink &#x2F; red &#x2F; purple &#x2F; orange &#x2F; green ）</td></tr><tr><td align="left">no-icon</td><td align="left">【可选】可配置自定义 icon (支持 fontawesome 图标和主题内置的阿里图标,<code>fontawesome</code>图标需开启主题配置文件中<code>icons.fontawesome</code>, 也可以配置 no-icon )</td></tr><tr><td align="left">style</td><td align="left">【可选】可以覆盖配置中的 style<br>（simple&#x2F;modern&#x2F;flat&#x2F;disabled）</td></tr></tbody></table></div><div class="tab-item-content active" id="note-4"><p><code>方法一</code></p><ol><li><code>simple</code>样式</li></ol><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div><ol start="2"><li><code>modern</code>样式</li></ol><div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><ol start="3"><li><code>flat</code>样式</li></ol><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><ol start="4"><li><code>disabled</code>样式</li></ol><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><ol start="5"><li><code>no-icon</code>样式</li></ol><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div><p><code>方法二</code></p><p>图标支持 <code>fontawesome</code> 和 <code>主题内置的阿里图标</code>，使用方法为加上对应的类名，<code>fontawesome</code>图标需开启主题配置文件中<code>icons.fontawesome</code>，默认未开启 fontawesome</p><ol><li>simple 样式</li></ol><p><code>主题内置阿里图标</code></p><div class="note anzhiyufont anzhiyu-icon-rocket simple"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue anzhiyufont anzhiyu-icon-bullhorn simple"><p>2022 年快到了….</p></div><div class="note pink anzhiyufont anzhiyu-icon-instagram simple"><p>小心开车 安全至上</p></div><div class="note red anzhiyufont anzhiyu-icon-fan simple"><p>这是三片呢？还是四片？</p></div><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple anzhiyufont anzhiyu-icon-sanmingzhi simple"><p>剪刀石头布</p></div><div class="note green anzhiyufont anzhiyu-icon-ic_train simple"><p>前端最讨厌的浏览器</p></div><p><code>fontawesome 图标</code>，开启主题配置文件中的<code>icons.fontawesome</code>为<code>true</code>后可见</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2022 年快到了….</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-fan simple"><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏器</p></div><ol start="2"><li>modern 样式</li></ol><p><code>主题内置阿里图标</code></p><div class="note anzhiyufont anzhiyu-icon-rocket modern"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue anzhiyufont anzhiyu-icon-bullhorn modern"><p>2022 年快到了….</p></div><div class="note pink anzhiyufont anzhiyu-icon-instagram modern"><p>小心开车 安全至上</p></div><div class="note red anzhiyufont anzhiyu-icon-fan modern"><p>这是三片呢？还是四片？</p></div><div class="note orange anzhiyufont anzhiyu-icon-dengpao modern"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple anzhiyufont anzhiyu-icon-sanmingzhi modern"><p>剪刀石头布</p></div><div class="note green anzhiyufont anzhiyu-icon-ic_train modern"><p>前端最讨厌的浏览器</p></div><p><code>fontawesome 图标</code>，开启主题配置文件中的<code>icons.fontawesome</code>为<code>true</code>后可见</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021 年快到了….</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-fan modern"><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><ol start="3"><li>flat 样式</li></ol><p><code>主题内置阿里图标</code></p><div class="note anzhiyufont anzhiyu-icon-rocket flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue anzhiyufont anzhiyu-icon-bullhorn flat"><p>2022 年快到了….</p></div><div class="note pink anzhiyufont anzhiyu-icon-instagram flat"><p>小心开车 安全至上</p></div><div class="note red anzhiyufont anzhiyu-icon-fan flat"><p>这是三片呢？还是四片？</p></div><div class="note orange anzhiyufont anzhiyu-icon-dengpao flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple anzhiyufont anzhiyu-icon-sanmingzhi flat"><p>剪刀石头布</p></div><div class="note green anzhiyufont anzhiyu-icon-ic_train flat"><p>前端最讨厌的浏览器</p></div><p><code>fontawesome 图标</code>，开启主题配置文件中的<code>icons.fontawesome</code>为<code>true</code>后可见</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021 年快到了….</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-fan flat"><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><ol start="4"><li>disabled 样式</li></ol><p><code>主题内置阿里图标</code></p><div class="note anzhiyufont anzhiyu-icon-rocket disabled"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue anzhiyufont anzhiyu-icon-bullhorn disabled"><p>2022 年快到了….</p></div><div class="note pink anzhiyufont anzhiyu-icon-instagram disabled"><p>小心开车 安全至上</p></div><div class="note red anzhiyufont anzhiyu-icon-fan disabled"><p>这是三片呢？还是四片？</p></div><div class="note orange anzhiyufont anzhiyu-icon-dengpao disabled"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple anzhiyufont anzhiyu-icon-sanmingzhi disabled"><p>剪刀石头布</p></div><div class="note green anzhiyufont anzhiyu-icon-ic_train disabled"><p>前端最讨厌的浏览器</p></div><p><code>fontawesome 图标</code>，开启主题配置文件中的<code>icons.fontawesome</code>为<code>true</code>后可见</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021 年快到了….</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-fan disabled"><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><ol start="5"><li>no-icon 样式</li></ol><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021 年快到了….</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div></div><div class="tab-item-content" id="note-5"><p><code>方法一</code></p><ol><li><code>simple</code>样式</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>modern</code>样式</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>flat</code>样式</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>disabled</code>样式</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><code>no-icon</code>样式</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p><code>方法二</code></p><p>图标支持 <code>fontawesome</code> 和 <code>主题内置的阿里图标</code>，使用方法为加上对应的类名，<code>fontawesome</code>图标需开启主题配置文件中<code>icons.fontawesome</code>，默认未开启 fontawesome</p><ol><li><p>simple 样式<br><code>主题内置阿里图标</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;anzhiyufont anzhiyu-icon-rocket&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;anzhiyufont anzhiyu-icon-bullhorn&#x27; simple %&#125;2022 年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;anzhiyufont anzhiyu-icon-instagram&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;anzhiyufont anzhiyu-icon-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;anzhiyufont anzhiyu-icon-dengpao&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;anzhiyufont anzhiyu-icon-sanmingzhi&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;anzhiyufont anzhiyu-icon-ic<span class="emphasis">_train&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span></span><br></pre></td></tr></table></figure><p><code>fontawesome 图标</code>，开启主题配置文件中的<code>icons.fontawesome</code>为<code>true</code>后可见</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2022 年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;icon-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p>modern 样式<br><code>主题内置阿里图标</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;anzhiyufont anzhiyu-icon-rocket&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;anzhiyufont anzhiyu-icon-bullhorn&#x27; modern %&#125;2022 年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;anzhiyufont anzhiyu-icon-instagram&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;anzhiyufont anzhiyu-icon-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;anzhiyufont anzhiyu-icon-dengpao&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;anzhiyufont anzhiyu-icon-sanmingzhi&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;anzhiyufont anzhiyu-icon-ic<span class="emphasis">_train&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span></span><br></pre></td></tr></table></figure><p><code>fontawesome 图标</code>，开启主题配置文件中的<code>icons.fontawesome</code>为<code>true</code>后可见</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021 年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;icon-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p>flat 样式<br><code>主题内置阿里图标</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;anzhiyufont anzhiyu-icon-rocket&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;anzhiyufont anzhiyu-icon-bullhorn&#x27; flat %&#125;2022 年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;anzhiyufont anzhiyu-icon-instagram&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;anzhiyufont anzhiyu-icon-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;anzhiyufont anzhiyu-icon-dengpao&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;anzhiyufont anzhiyu-icon-sanmingzhi&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;anzhiyufont anzhiyu-icon-ic<span class="emphasis">_train&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span></span><br></pre></td></tr></table></figure><p><code>fontawesome 图标</code>，开启主题配置文件中的<code>icons.fontawesome</code>为<code>true</code>后可见</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021 年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;icon-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p>disabled 样式<br><code>主题内置阿里图标</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;anzhiyufont anzhiyu-icon-rocket&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;anzhiyufont anzhiyu-icon-bullhorn&#x27; disabled %&#125;2022 年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;anzhiyufont anzhiyu-icon-instagram&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;anzhiyufont anzhiyu-icon-fan&#x27; disabled%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;anzhiyufont anzhiyu-icon-dengpao&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;anzhiyufont anzhiyu-icon-sanmingzhi&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;anzhiyufont anzhiyu-icon-ic<span class="emphasis">_train&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span></span><br></pre></td></tr></table></figure><p><code>fontawesome 图标</code>，开启主题配置文件中的<code>icons.fontawesome</code>为<code>true</code>后可见</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021 年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;icon-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p>no-icon 样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue no-icon %&#125;2021 年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li></ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="音频-audio"><a href="#音频-audio" class="headerlink" title="音频 audio"></a>音频 audio</h2><div class="tabs" id="audio"><ul class="nav-tabs"><button type="button" class="tab " data-href="audio-1">标签语法</button><button type="button" class="tab  active" data-href="audio-2">样式预览</button><button type="button" class="tab " data-href="audio-3">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="audio-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content active" id="audio-2"><div class="audio"><audio controls preload><source src="https://npm.elemecdn.com/anzhiyu-music@1.0.4/%E9%9D%92%E8%8A%B1%E7%93%B7/%E9%9D%92%E8%8A%B1%E7%93%B7.mp3" type="audio/mp3">Your browser does not support the audio tag.</audio></div></div><div class="tab-item-content" id="audio-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://npm.elemecdn.com/anzhiyu-music@1.0.4/%E9%9D%92%E8%8A%B1%E7%93%B7/%E9%9D%92%E8%8A%B1%E7%93%B7.mp3 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="视频-video"><a href="#视频-video" class="headerlink" title="视频 video"></a>视频 video</h2><div class="tabs" id="video"><ul class="nav-tabs"><button type="button" class="tab " data-href="video-1">标签语法</button><button type="button" class="tab " data-href="video-2">参数配置</button><button type="button" class="tab  active" data-href="video-3">样式预览</button><button type="button" class="tab " data-href="video-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="video-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="video-2"><ol><li>对其方向：left, center, right</li><li>列数：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol></div><div class="tab-item-content active" id="video-3"><ol start="3"><li>100%宽度</li></ol><p><img src="https://bu.dusays.com/2023/06/01/6478a1eeb1386.png" alt="100%宽度"></p><ol start="2"><li>50%宽度</li></ol><p><img src="https://bu.dusays.com/2023/06/01/6478a20a5f242.png" alt="50%宽度"></p><ol start="3"><li>25%宽度</li></ol><p><img src="https://bu.dusays.com/2023/06/01/6478a22b26088.png" alt="25%宽度"></p></div><div class="tab-item-content" id="video-4"><ol><li>100%宽度</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>50%宽度</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>25%宽度</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><p>本文转载自<a href="https://blog.anheyu.com/posts/d50a.html">安知鱼</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>开发小手册</title>
      <link href="/2023/11/04/%E5%BC%80%E5%8F%91%E5%B0%8F%E6%89%8B%E5%86%8C/"/>
      <url>/2023/11/04/%E5%BC%80%E5%8F%91%E5%B0%8F%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="67e21926d553fdd5197669bd49a541dfb7958c2f9ef8a9a259985d5830bba0d9">f1e2971e5cb45bc6de875902725b7e5bf10030e767a0488fe18f5b28db137856fe9586cd0c4b03020b23903e4a3186ae6cb50d7d256c3a3ed767d7953f275ff5749b46dc37ead1ad7671f8a4c27dfac207f075b7c165ed6ed27e21be9ebe633fa5bcae06efb1b7b971af43b21fbcba9c4f303815bbc19706402af0b0c4f44fb8e1f6319a4514eb8f0acffd6f21beb83db44e629171127af9f41c1efb08ad6df5b08717e4154769f0387ca60ab21c5cd0bc6dbb3c7878a96516dcbafdbeaef9be0926d444a649ca23df257b8636680f48730d52c25ade4a6c479d48c907f367af8368e6b5025b900e40c09e361861e92933af83263031824a8b9d2d7b1bba1943b0379082fdc55ed11131e2a1f9ee79174a62b6fcbe7ee4caba1303f7df2e4908efc553e044da6e6594a60f44907f1fd457e51df7de4533dbb00d2367363e632ebd383d36e2df3ad1d1a511e2def34ab29832be76474e6de4a004c0bdb2ea833b55e92f74cdddb83aab1e4495f8446e5b24fa52ca3a796dcc4b73dd20ffe442696581e79f0c44a19482d0d7528c657884b26e64e253a475201bbaa54efef124a53336e5681abc3a766c0cd38340818708f61edf550bf6a85f3c7d65556304bbf912b1b6dc218fcf2170bc963eb91cdea2ac5f8d27d98c759d430fae4a7bad8a091b87d107d882aa06671e9569728344946b6c51e1be9b9d8a440404ff709744479374cacae6b786722586204fe3813abb03b2841f1a1386a065ad0ca31c46d6c1b732da3a8568143e3422068b86c2003c4449485118ef2ab9ae6e2c01a16c2152d7158800ee17ae656c565c8b4ae529169403377c44aaca7ec57210ac6f83492c8220be9e66f558658265917294631361e039dd2f36d2b3992911b5443fced27a24bb71aef76b1df4a9ddf991d59324e002b9be25e4ef0e4f691ac0094d413712b126df116d800c485dff445eb2f0f5ea24fce2482240a8e14466a40aab22248e40d9ce972829e37fde55b24725fc0b5f7e595d54365a0f5196d6f82b215adc05aea8ef5de185865daa9f3f563d0900a7f64ba34db858b5e0118b43baf2611fe4a2b70da67e74f2178e82a74ffa8d8ecacdf8a384f6e9235b002528ead20aca002bfd98e204815381bb6a7e5341a5e11f033e49b4ec040ac712c4342bf5a0485707396ed692bf65d2399b0d01d8365b4124273a42538b21daafe9ff3ad01fd779071c7a1e56a6323a1ddc8c1556cfc0672d93d54d4cfc1296be355ed951f86eecc4b877431a1fda911b2134964270a015b346917b58c4bfa5e2587213d489a1909c61cc0ba310674e306fe5e1020a8e040c86970056c0303812752776ee30ff633dcea5c7b34a2626ab13327f3d4319bb05a34553b067f733e96a8496d3aa60f147b6dfd736143013338d09551c35f788bfdf84446e419de04718f6e23579e9958efed795234e9e561063c8e836acec74ee0cc81635d48d7517c7bb8196ece54c827cf7a958a01d41e42749a8ffb0715a9dd63917e2d7d002935c737c9e4b26992276742f97d9d622e4f49d890209d6117feb26478df44264fa2741d87b8aed876c31bfea5ad31a68d89ed97e2cbf24e0a843e562fa76b42ff248db4fa8bbfce8c7fa2d04d77c93944acc2e9eb49f9e38ee6af54f3e70a2eb1895fca1095d0b579d9707acef5fc3233ce982b3562a8feaf22fb578f318bc6f749252321dfb18c860dea9638642b24170f4310a55b9fb710f570f3c589715030865aa19d56a29cf95c4ebc8737e817313fa689c1fb35b81ae23866c177329d15aa61c2ca65ae2e4e8c60dc73ded2438e4143a3296e4359f6804bc361a5ea2463fb323054dceae3b26ba9ba0e54304ea2ddb3e566aa1aebdd1991211e79d9b4dac19ad387dd1b910eab3b4ce2ee78fcc93e14af568e844fc53fc588678547fc4e1f5e1271a868fb5c905cc5eb272687809a9e6bd21d749accef413bc4a69e1a71fc70922b719ae5c887fbc0814eec00314b5c89cd4b301db285bb46637645d6d611ed53c5d2ef18a6d2f5cc2f0098d077f691756bed12e083c30e289df94427f34210d8bcf89203f72e18ae353ce2c8d8669341315fe517c56d247d94dd9960b8b400f0ee704e480d2cd81d1303fbe1456c025ad80fee50aa41391a751c110767a989d57b2ce96040592939ebbb495fc79f98eff6231d4081d5fbcd6f1702fa60c9f01da4e96cd4bc920251c0aa15239e68210d94a4b05032ce0fe8ea1518aead496c5a73a2f102d0bf5af35af2b35625cceab976f132093c6f95e5186b90aea6a927266bac151cd19ee15e06099182f7519c9a5a53e8f13dfc00bf868667cf7ef9f23238e1fc9ebfca11099c0421ab4df8098ae946556b86e71cca9ea932a6f5080e11027926a17cc00a9553c3295935255625105429a027cc847a938676e570aa163c1f511037f8aaa5ced551b384a56a7a6b734791af7834acf4cfae6ff5d2493cdb306cc7c63a1af31c1d2b4c9721c2778d09a5f30462b38a252fd911177c3252cee01c4ecbfff3160ae92629cde660183f571850f8e8bcfda63f8881ab0c00c23afd9aac726e0c78bc128d36693d126b1ff79a3b0bca6322e9740b763867a54657ae518b9bfaebfa6c42777dd1691c56a75f9f7836e137dbd15ec17978b0c63c533f049b842068bdda24482b90a76e6c1a3685b74c7dae92fd300bafe85ea08ccc7b459538cc4cb3bbd5c5a9e8f0293364bf1bb54069ca3107c1e28c1b73f83486eaceef975a2bf43899164f984154da8f737cc9995607c134ecee1a57b522297542f7057d376f7650b22cb80ca5565dae579e1c0a30f56350524549957a38fa1488dbdd987f7f47bf0fe905fe8c95f0355aa6718c777a1f68f916f779398ed7971cb6b03bfb49124b85050446437c81607da1df43253bbfb18511855ba24daced88a6a909b89de769ecc15e40851a0c440da42e585825b40e60ffc7155b2ac4f9ca55c58fd30b15f5ccd4f65b321fdfe08fc7f8b7ed25e4e7acc800b1552529bdd02668c9d696ec3e69351399070e04bc631eabc1cbf584f28b630230af13d4abf2eaf9f745adc8af0f5c59456a0cc00bee86ba52c18ad03b0b81c7cdb214901eda527dc9dff15953c0b191ef8d22d25b810734a46c0a8f06b137335ba5811aafff5940624f0f1fa6197d385ece6a5104be34495aee92d8f32bde872670e550b37d3339386d91cce8acc34c5845f70de70813932832388c9f08a94ce43f9f3693daff3e024811a2c74e81a0c57fcd6ce410904af14bc506661be921c1ccee35bb40bb6b74bbdcc6c8ac8d8fc40a1f179274712f7fc9463bbbab74e3f680b0a35a5ae0fc405efbb0e8e650bb2dd7a055d7e734531dfd099c1805e9947411f3a4d888a82902fdbf91ae896808fe0f2f9e79a6a3aad813ff88e79ddc4fff68244d1835043867290447fcb4ed165b43249257e1c7469682a29b94bfc3f69bbd2aae99a2a499e207a2da68d8512eb7901e634b4a9123b03eadc85c80af51078e75713ac52aaec436c9986e434eb47c3ef48c23c1acd433e802ee7cc3ffdba8d31d2ed3c86b9cfe5014442dc3bb010258697595a066353cb08d7255fcc091fc242e29ab1cf2bc6d9132dd9d3760f3189d5a5eaf064b298d125f8a2d98b54a20597ffe695998959ae03c421a0c1d1be7aaa6acc52b413a03a66618ef007ee1eb0594531be77b175cbe9b320ce3e68d7d8565debc5df650d1683cf6176306fd1ae89b548870027375036ef8e9bbc9a5320a034b419d48ce9cd92d6bd7708eef246d6c40a793744cafd73150eb3bbda5b03ace4f8fe68b87cfd5d25f0860545609568391f1cab8f3721b5fe3b950009339486955d11dd5466269af07f5fb05414380401071238a001cee1920da81c618d1e169c73ee2f3e222b1db8c986ab997fae9a38a196aa73cac2bdd2bc146d357dac6cfd92b0633b8811e74f1cde87097f88d3b4ad20cf1bae8c652fa672475c1d1c00181664ba0cb26945e58a4b0c5ad33d51e86f7d6bed7e03e7e927b78219d4109716752de5be493c015d6e1751c4f9405e6149145dee48847131c59291e3346183fda764aacff134a7a511b39ebf4f7701461f05d28c53159dfd1236792bf52cfa3313be8ebf519e5627b7a7ec672c14c81f25085e2af1ab785beae52edf8dd572e29d441c4ec35737441e60f4ca86d03a42a523095a204e3a25acdf2f9f4a8134ae04510d0c74b521949f0254bb616de6869c03c7d712f8faa00e96a6a704533db6c6c1011704a419006fb57704348a3accd21b4f73baecfa71fdbea1cffe8072903f272984172dc53dc25be912fc7beb3814e80364ac0cc64a9823c9b37c49fc977ab43da02493bf938cd11ae4f6363d21e6909509ad709daa4711628585f4057e86012b3be60a98831a9d64ec369637b772dd7eb2589779f2e1e44a1ca12a6e4c2cd3882b852e8db0eeb5ce3ad8879434ca26069dfe4d914f4c75bb2f8a49679332d27bca9215ea3c9c10b99f432c5655a8c389402bdc708f6b408924d61a26eea214f17495f81fa14903ba067c15e7717bc1ad0f44cb232cd002b3594d92c9758f7e3bace16c184de191e3ada0487819510fac95404142d8e627ac5044d40622a5aadacd69015e0c61b0b33694c92961e24ea238647071cbe5ead8bfe165023fb8135ab7271445279449d7e78ae9c863e464fc5085529d9431dd93cd6325efa921ab8a2aab7c26630d72b89d53b4c494657f3ccd91925fbcb7cf55d42b6383a777ae6a0e8899cd7d38424e1162ae4a0f7e26fdb24095bafdbc8ae4a5f26bdbd664eb3bc4aea65ca0565455fbdc0f7ca0e11c33d24e62f3cec57715cdb9c6068ba81e6e3f33edf36ada570f912286f78ca892a545492fca85dff07b165aa9b629ef6b66f0b488d0deeb8ca134747a3076072a1aec03af060ee24f967850e5d92781fec7406285d5ab92a5ee3210a31be021100b1399527e4366a24ff472b48ce2aa2e809db352f80419a886175c2fe7b61e53ad979f7987585331cc6262adcb70bfd975bb85668b8afb0ddd7cbd9ff0b1d1a49262fec14460c31a023d2e88ef63585993a4bc3e40d378b3b421ff0cfb6e863e8f59ab5aceb585c4a7ce9fabb2664856d27cbf09de3aaca53567c688f3a4c1122527d927ea8933a5345ba0ec1afbd24582514888d89b9d3905b2c72b7bb253ecc81eadef470f4c7f6793bb5e3a22925bacbfd196561c23c9b8895bdd0fe7b2740beea39ff31c2c269e30a54d1b1c49777d53a199e940eaa46d27a2bd9b5bfed0472222713b58a9011da998a36d74fd092c1b483d94aaccc862ca895ce0649110fc57f50f55f9420b9074d8e8a51a44f1717aa48d0f26122a1926acbbeb3ddc243761674013651b9df14947e92bd22bcc2c1b89f3bbfe7fe6179555fd1a61fccf1565bf2e792dfce3ba340ae3b7d3b7da0ac779a8f361a9174df397b68822066bd8d0f8a53a7c9fa2320f1eea1ceec01f57b9edd5d00c6c0802eea55cc397f0a20e9f1243256fd4dc4a3738625dbd8b1cbfc6c9b1071af81a05d98d2caa45e29ed421d70d0118f567f84a70297f38c46cb0ab3376d8fa9ed0609f9433ee2a91e26395c28531e242923a0a718901e24e9f1ec215172d4dcc71b99179c0779a94eeeb4e0b9a7782fe3b5f02c408303f08af168bbe8eca2755b20f9825e9b22f8618c26129e28552934ef06872a970c9e389678830f7f764243aeffcd6445cabcaadbd351b54d1c0871f1742d112a5689112bdf4b8f47885b341e9a751dbb259c7ddb8fc719a4ed1ad7dd71c005272e2de30e466a44b42b16b8310cce1c50fe53ef77547246157a9c22244c93130e5f1789171a16e19267398ae1177ce5e325145090bd8ea61119b730fdb2eba7c117ef4be712fc3425b5a3be574a726d01930259fce3945685161f5bc86adb5ebcacfae4178ca6070d30a57a5657e0acc82b012ae2b4b019c4d205b67159c9b20732a6fd4607b117005a8a7c3e759b536bfda4cd2dd07636915dc33db2994a77abe33778e63beb4ce8bc3bcf54f23034c620b03d64c756b0d60a497b22d9bc5b2a9bcbae7ccf68398823bb7c5b9ac441a9731b81085d38fa23b4a41e9749b5653f9b93feaef62f81c1834f6215a50fd10985a36ce6ad134f7444027a86e7e36d05e12e1b9a9c3ec00ea6d0d11b4f65a8e85674b59da12626bf3d71a86f77eaca177d97412ea8e0ed238ae4e0b81badf9c76b624728009ebd21f7c8fec35b4db0652fb3d96f4af779719f49334a8e633e86ee8487e60a05df0a2d165af4b23af146ff20bf9d12a1bea5245ab23f38747378dc296c69164c3b614bac6bf68b4940335c183fd62608279b335d0eaf5eb001d2e588142cccc4a52058515638bb5b3f346fe8595c25e49ea41569db9604ecdd7958ef9928728c412a270c50df818832c9228835b0a44de850e16366dc4cef68762e0eec1129375c780a17585ecf48d99eeb7c04ae052334d767398a5c8ebf5c5156f2bd55d68ed6ee8138dd741bae8abed817e0902ef40002e093bae25ed8fb2bc4276fa239a0309426d6e23274787c1327af88b2db5606a5b99cfef7866dc4a90e0289618eaaba4d61541304972d830eb62c11f7bf79ff1f5f624f2f5ae09556a4cb98638d5055a67c373397671ab51a86ff418a956ea175de1a15edce40281324ee9e8008116687018f28825fde16367e4d0a4ceb2e8903017d73840cf6bf709c7049fc2ec54349f32554c695304486082bddf26574c0ba400c364d79067010c08cf23a6be65991f61a3275e19093518bee0c170e07c3189cde5da0f27dec23614fb34720e0f7ec0aed01334c2e42f26f0e4ba786486bd12c4e28eec9be9c2426ac176eea915f8253108fbf69b04a8f00b1fc662cc39d1464328aae3fc56957f1fb77f934dba9d3ae35e56e5f3db0e4a75c095a06815f95c7b7ed4a17277d0aaa8d8278dcaa0e3d44d2d0719a3a95f1150f175ebc98369da6646271fb3bac014ebcf2880ac4ba3e1aefc1f2be8ad085aecccfcf7fe3473e1013096b1f3aab491cfc45448df76741815dc44ced9c2e10ba707357fb6eb6803ec0308fd1f5b7fb14e948b1d5af26c6df60eaa7367f20a0cdc0bc5da58a34192ca5815825fdf21b7621dca8b79f4c8cfd03dec60b8242ba8ff4b176237e329b96aafb9b40675fa555f594ab9a8961fd32fd925d1530d43c8e0c0a09526a12cc3f36d45adfb9d5b42e0db53a95fd60859c7ff22d9aa25f194eb975f362188c44c5d456b86d92ab13e26d3dab43ba84b72405a69db2f337b434874a0d72932883c73b6a9bcaa8b4c46417279cd81f7d1695b81872ee7afd4c197becfafb0d8f0a2828db90ac343721d37956e599d6d9004de4d0fc45c09de3ad7b328463fbfbac297d36387d8da74f7b79710f4d7095415a686cdd4555e93309221ef9a47de155e78be390f61bf6e98748756781c805b426b356fab8f3f919fd20cbf4941caa9f07000bcbac05db4cf079f7dc17bee8696edc06d7dcfd2e1f4b544359544635108a18986eb6b1f22aba76e516839aa87e4741604c22b1a143089535ba71c7043da96109192ea4583e309b68dbfd8b92cd4300140693522dcfd4238976f0e003463aeccd2c84bfcb86dc255246dad0ff633a0de6c6c0b82df9e9e2849a8ffe7d44271213bc3d9c909c1415355c1d02edd381565e3b683e95a120102a9c8b17caf4134401384abcd6687e83f7c19e6cb2b701253f0ffa9b1b730e84dcef9a2c87acb4a5db7cfcf2bb0b949aaed5da95c2457a93b4bc4f06d12019fa1bd74e0ece822d170299a914178ef5f75bd12f6bc1dd2468ab45647db4c8a7b3d74b7dc09d25a25417af9b6f60a8cb30c5b73e8b75f80d45413d223c70787e38345f3c2aaeb9e48ea18e6940a264596531a042553a0029964be8eb7df428c02565dd5ba311704205ad69702ef365d95797b2e57c52556e04732445920a1d548bf2a6e0c153a544c2e8253ed9d2e2cb224ecede851fa53c4b7fecccd260439087131e8fd6f8e0d5f08540e032b76d1a5db06bac9d4e14d3c36e0674825dce1767c23c01d631264c29b11299f15ebfc17f4f93b3957c328814ed7dc0e9dd1e594be5a0a71388371e93004750dadd51b2f037ea9da3534269c67b79dbcff4638d4adbb8c652885f99f3db534fce9d2809f9e2eaacdf510e6d90cbafc212e167728898cedb5b57b9d5c35bc8c6aceb843eda48644ed6223d3251776fe0df7d9256f019c2e0b3b584964e7c0f7ece089d4223e26739fe738188c41b46ce3643299eef93bb6f8e4d80aa3e52ab27c7d06c07f8b1ca5e294cb863a404befe09894c4a622467b47c3833047ee6f04f7fc351c01de5aef07fc3a9a9deaac4ab66fa45e008c144727b2c74fb1e22f5c3c3fa73746402611738d4b62f5b4c896f727ec5189ff112024be5c399d0747f476e0e5e073d29c3d42bb54ddf886dcfbb25e02cf9f2195e00ebbcc8e0c5b16b3130e1149ef7f176b00da47ab4a5b3cd7fc6feee682a6ba3a1e07c5793aab0a79b328d48fdc98d689a8cced00c1247dc4e66cfbb6fad5dea02de724fb6bc899550bb452384a6a606b29562d572a60060d9f135febed9ec22bc58ded71f84c5247c703fa728e26516009bc67069c3f4c0fa19ebd735f004ab03b07e8a14136b60c2dde9885dc56c16f909cd88b4ec986ea0625c62755cd82c59e5aa9fb5f3bf6994de2f6655ea7befddfd9c0ee09e3e490cbf064b947a1137859b76401b9d9ead4f58179912bf9e1d075a374730c485f7c8e314f7d458d81a4740c53242e2ac4c02053be54a8509d6c65bd593f6d53b17947021712b7911bb79ca4d1ac86dfee895f27ad9031982d565a72b1fd53ee3e8e2dbc06f216c14001d9fc0fec833394fbf328d53b060e71c593a8b0d491a5dcbb35613a7abc2052dc36bef97ee59b6bf7e1c8784baf0833587640dc90223c7700048c0f5e4e084aca83c629295e966f1256dd26177da62c04ead774a1d2b3e75bac0882fc09587bebc9a82ff50ff2a87766c768c3b9b384bcade4535961fadb3916267334aa22afc27fff52e7946aa293f39aa02994c27854626522f28e7b97459904e3d8570e23a7df99bc13d3ab66467315df2c25e5b7676d0a270b8f4a5b6279dfae7fe57492b956b37a066d5e9c6169bb75a8e8dbb00dfc44fdc564bd634380646e50acac5cb9d2ace76f73e4e5d23b295526a4f93f4c2bcef5dabd9c64f0f357a4765548004652ff9f549d88497037d8891bc43211b4b0ff772963c26fb6a53ff06bf744f457aef1156db478ce771bab38a43a2036eeb9bc882bc2141d3df447786ed0e7e1d8281c5f067132d10dd68eb7e4d141652ff1be765831fa4a219a477dc4941c780d768e44955491e7a0ff0eb289d0622d106b869129cccaed452ac3465fe960493f8f580ab9adfb2cd3712fe2cda5655f9ad4233f103b0e9eaba6e85b688e3d679295e79f8f0379c6073bd69465f881d492a0ebc01b5e14d689710c8f816388868d53e56b22d8ac1d30c7069bd600bb6884f71efc6af0859bafe9494cb95b781ee05d3bcf672033e2377c2244f5f5254033484e3d9b5691d80c71a5ff8c4004407fab125b3a6f0a57a54827b7ba4c7b9e803df34db0be9eef51a696fe3a355d7902a44741830b46eb282ff8f36735c0d926eb8b8c456f15c4aa3b4efd5c9b1d4b335f3887ef3f228bb622d49b9837fe102aaea34d54ee448d5d1d701c1f1b05370581e2db6cf8b056c24b598af959443a9acf18d9d73e2906c63033e21ea94f7b784515675d13eb0341856e7f6596ae236b4c144ee4f3d42bbb19d230010022e57a01b593e73e5adb91a10b687e59dfff840e3a075f554b248acb68de24a46f2e3190f8b3cb7e14d928ed7a7b7ba5b81d54700c53cd918a2cf5aed7ab0450d17f7affa44a449174cf300c0b9a05004b20803747d49654998533123817f3992a6e5bfa2d01f4120df48fdda6414904b23b0a590f6e6bc5015bf6e3bd0319bef73b55b171699c7947f8b6e8212d17ad2e6fef4dcd546162c495d8303836185d87b0eaa4a332a748587299bf3374fa8cf7bab72efa72a651cb2e3aeabbab72dd8b8f3c8c094ee1598918f16379a56cabb302498d06aced50d201dd3075165edc021db3e1e924fa2711e8d69f44f9abc879fe1aae372be7bef7782143f39fb6a787b44d0416dd79711eb9bbe65e612c9b368b03b09333492a20b9928126e43cfbfed4693e0426963c7776af1234c771f1e87abc7d32e6e0e2df2265e4c3586c8a0879363376dd59837324cc957283a3c35be6063d167b9f223e2874ea3c091e7a4dd627f9b523d37464276a6293f8a1701bc19f72a9c9bbe298a5697cca3dbc51455b259ba36f9e1b31769b528d716c4e504ce6fb450ad166e53de88e538dc1ef0dc24a1d41c7b0d659b05c0401ee0d3c250cf1e26240efd87fbdf01b48e2191c2b5ee60c5a3c4bebc93d3b63a36b68faa5e4d882e65dc7fd89eb7b3795d678f652c56cf2a021d1079d152c18de9c90c76abca7f32578c77fc07c8b74361b8696df9ea2a91815406a32c25cc6048b7ff230a2f8d466da7f46b0b8d96c12aac0c22f04f47d45788e25281ed549bd318ec3ca0113e42b0451291ae4e66212c68396f7e10df84a14f8e1f52ec05c73dce7ca859bb7d31a11d0468f26cdd4c7f1dcf995706105457d3f35bd1a28a689f08b2f60cd3a852b6459aa144b7ee376a4412973df7ed1560f6d313e31ae33de2a298658890656ca10bcc4761f14b6544abcd3d8730190803d67032828ca8febfe2df198ca18d993395c6bd8e26411f89e651e51ea9f027514a330a10b31ce7fbe322eb913c8739d15f2e692c885b0912c4ddb48eb734ab83722edb288ec4836e2266af96463373837d223684a9037c77fe45a9dc53010a952b8b05045e73600c0dbfd5ebf0cc091bcf3bfabf183b8b3ddbb1c5330fcb464cb6cfe1247ce371828709698271b6bd98a78b9a9f5727eea76ab5ebd467e0d6250b109750d983388d76356d0ee2ea73d309096a763c64c46f54315c7780baedc5b56ffd55b2c7980a1072b4b61d97e46748503ccea5e7f926f34c7215bc044559dda0498e0a04a6339c418806bf38d43e49b33e0fcc744725f0190253915e9d397f58021517bfa8049fa3d9e89d4a055c12ec5f8238caa07602bbad7bc2a25e938b54d1de67ee7ec131b5e3e21d71d310961ab8fa3e51593af67c6d1721c08b0246f047023a6d3a138421a6478da87c4ad5b6cf96e6764194fe8b0f34a5c1da688db5814c98a1c1ae7cf8e5f8dfcda751b9886ea977808c458b21dc3c763bce7442b649225c1e22d20a58dd7b79104663a9d94afff71f3f957624b577a11486bf047d6872e96e3b1e2230c7c610331fc201132c4868564d86e42c07c407b412ec2481ff548d6854d3c5439f28672f903f87e6583c71f17d0f465c78a5e563755f36f18769f37ee71c67a05d0255d4c4d92dbd66d5363f0696a24735fa28d8eff90d5b328cb889d3b7ace8001905e7fff2677015be37df9f263b68f3519ce4f3350507b150f3666e4feeaaf92b96ad950990ac03cbc863237b94e837f49bdbc1133b9aef486a2a66a8a4f24406c6cdf96367e1b7d1b1bb4148166f68c08c669e02509c89027a52774b131bd76b0b65bcedd128e98a097ec2766f052631c033d97663b9c0971b3a6ab2a98258cd9a75c51a8a0d5725bfb56847a2c5ababf2b493d99525386e8da871f4ffc1ea205f52ef1908956427ceb1bc23986f8c1e586388a05b5c1d4ab26e5f631f3accce0a8e5f30f3827a5c52fd02651cfdfdd6527214201b03a78aa214c15894d44edf2a1edc26e870897c9ea82c0891851af025633c410b61b62a544a417e127af627a54f79009b36868704ff251794b0f1c755dac3be29ccd2b1aeb13c48ee158eaa5702fad89f43639efff206cb94592884bd632bf6c7673863e84bdae687a87e444618e1e084c3cf290f737d4576730121527baad39d1ebbe77e8047f92700f3f91a9d24c1ac9124a045828d1dc0ae34e4244e51151f3f6317d36cd13288db5eaaf894e27363fe3a8a87c5bc1e0698fa29411f5abe80b5e677944f937c1b8a3c59d1ac82c2ccbda3dec9d193d268b8a4ecfb677c261ab99951595fb9c0765119d63b87c3d19ea9ae5d31abac5a82d93b2ed3ee317fcdd7696e0f93608a6aaf493c8cb04800a6795bf17e2880fd74c5d6cba62d1ea2e370e06c735fd48f040d2c1af4b735b571afba0c8bc4d9193b76af9a136f0dcf8fba7bbada396ad17c3ec354d3d13123d85bb82fdfa20e693f7ff343ea743ac6ad77eb075a65839bc7c3788db16ebdaaee6cfd81881eeef250187548050c301e33a4ee5d92c6ea2f7179e8e4dd3df5cb048b47e64463b5ee642c9405e07eadfda22dd1def8093375f762d06946bf8c440763ddff88df3db854eae958a4f711f5d7f79d788ac31c184b69e38648c9ef908dbe1846922e7b4195364f1d382df78d5623d24daf3656323b3acf05112bd536695b59f7070f68f825b28277ea6140eea3793ade8681a1a385a91b4cf9e304975fccba4a456c97748acbdc3006352fa6981cb5845f8933debead411aed754f757601cf35fe2f43ac825c39c068aea52bc73f2eede91a81d0a4e6ae24ec4dce8ae420f2004159d3567ebd9182a340b79aa55bac6e693c824203b8836b0f240582f760fc738436129f6809a6605d7931ebf0501d759607ab302a55756ae9f597e947a60ecbb65c92244108d1b211ccaf058447368c80f0e5deb6a9adae73430f175c924938ed4a5e975a097b25145fc62e4a33f0684fcbb8b3251d45ee854df741b27886882469c7032b667e4e8865ba00a92623e02be816440d998d67e7663596342920af2f6b8faace11a15dd0ac1b1610af616733f6ad708991a379756529ecafed3052ccb48bffa19f7397a18394910078ef95f1f166484aefcda0e619daa19dbeb1b0f91af056ecb314e86b3f4322239e11a5ec6ed87d05857a1ce80b73f495c4e251177f60a6b1041b392f37dcd974134c588240c7f4562935c4acac757055fbbe72838df7c264e66a22fb9dd55c9706aed0c59b544ff62e489d66966438791a1018aa2c82d9010117666c8854f37398bf3a41fbb9491805efffc91e46d453dd8d036aba232e2938f6384c6d4f2cdc5eb7e2013642bd283387caef8a9aa63e69f12a3e6757b8d1879d2f6122711a1b37b542ea613b986f07becfd05715eee875e599732f07dbe5deec66d2921e662786fa18c5cd5272e54cf8a8caf9e33cfb04d59cdc605affa3915308ef9c2a28c934ea09105c54a144d6e10840260809e2223e4b0d8d48c43c5217700f5e982febcfd8bd006cf829173ff0981c22106ec4f53901aef949c8dff8161acaa112c9d64aa0edf97a53bcf763ea62236358d608be7d7fc89fac930873d7f09fcca08aca5ede816d3efb4cabf726b05e8dc372b07db588402a0d544aee07fdcf9f859cdfdfb5d4a0218aa1cb51c57e3aeb1e844a6d771bccebcbf5ff73c4dda030207e43a211d89a6ebae2500f06df310a3425c6278119fd89201947af2c30e8dd220f17ab3750422e0ef8802557aead4c18f797294e728da618a1c5ae0c2704dea0bb79dbde3214275b8d0bda92728708b32478925d6225a8581acc135efb0b6cf6544d0fe288ee7b7a90640da60324d76de3af505a99de7895cd5eadecec6750ff5af3e69e2a64b87da2320b6d98c4b4a017985958f81d44cad63f0efa518e802999c63400f78fab792bcd880ece705bd76282786e98ca2b23babc7e6c493e0f1216ac4f545d1296f6a838492fd9538d979308b261204fe2b4b7d47ca6bff8f9d113435a3f5ea9e4f455c71d6fa1c56d5b2626eb076395864b840a51806d0ade8c911079132430bdcd68bcc27d9ff974fb6886be41390da123fb095619910890338d61479ae0322992b67eb2d669ba13d144a6a4291b8cb4086b63f5f2028ac8aea2381261703266373cbb1898b192a9149af91901df77d76864a8dfbc9f1bf07831438adf6536ba4001e459a90a74d1aa454e65243f42a0fc2df5a152ff21cd15fff6742393719b548170520aae0fa8b037b5db536065f749baccb57f653833b6bb54b9604cdc62e2a65a046b75db8dc1b955ae0544a9627f157395df7ebe132a95bdfaee8895be22b8bf6316dd6319c9b75137d1f09b6963c7bb54dfe65120138278572c6472091547cf74341d6cdaaf27b993aef0f91e60e0a04ced295a6ebe10cfadb98667286f09bb336294f8e74167ca6eae8e75c4c4756480c78e125e9a0571ff6e3f1cf935c96c06756e36ef2e7d635e01bde60b91bd2af99508be1bc6598c562436e6e2dd5344bc3d466764e71940b5a56d24ed5f02de3fef1c1f621fd43cc99b816016a4b525a822da3e552231a61072b9c2b1c75a3eafcd47731205f36552990879edf62903adf86b1f1a881c20c678fe47d1ac61e9842e978b24f618eb91b7adae01d8d73bb205fc0e8efc042ac41eef6a7803f523994ef154aecaad4ebf8b5bfcaf3fc824841b6ec81c4dd2a63424a0726e72b3584e73e80cc9ddc1db310fa3ac11e67a1506da5ee666bbfca32fb6df022e6c89f18a1963b3e7755900bf16ba3f1806e203c92741541bda2226e41b8c13fb68afd7791ca27e85799ecffd83c4c6fa9851392553cf5c7b061e9828d93d9385c595e62840e1b3b28faa149389f51a363c3ade22396dba92f35b991be1b13baddce0ec618d402c355f1e9ecc540590437c0c870c78902c11114d11db863cd7c97fd41b8d5bb40af151750733e0377bbf271f15487dc370521cfc8ee9cd26f660c861876556e8c1335e5f60b68514b9298a0f32a2e7c95d638f83bc5c04deb1b42f01ee291b3a81d1ac82fa910f76fe764e71cd01dc0937c3e6667b78bef2c90319e358cf8cf047d6be2c771198cc4dad64035bd538c3fa3623b35758e23bccab0c68ddd9c173bbc2ea7c9685cada8a5e281822f14a4363c43142741ed38006cae53463eb30ee2f8b82f1f90261d2dc15f66436a38b1e4a36208d61bfee0e4e167f11455e741a73f0c0f9d99c4e5d3d0c1930fc2bc7136d1a3b85e063e121ac52ee7dcb114f9f17155245e154d354370ecc177a3fa16ee8fbe074518a49a4815f60b41b660f43c463872eb056c5d1bf513acebc3d0e69a290fe8ca62794ab2c7fb295912eb16a1adc39cdd93c281f7ef59c2881b0feff73e68c93a60f2eec4800dc6a7746c43b277bb2f1310ed06533369a5a2b380b45a60be9988bf0dde6949ccd1964991574584eecb92dd60f874a3adb519dfcf0aa48b85257364eedbb9a0d22196b7cd3333be86b43fa2bed9b8b2f87c54ac123cf501f652fa0b08495c4e2b3e33c78bc104b9e6f913c73d3ef30aca5124a69e31c94bcef69693f6e329519db865f7054b6299471778f2f8665c13298701b58dd84a77e0ee1cffae891c876d1db6fda95a234915bd8aaf65e98c929d94fa21bd34275253a8a0edda7e86dbc63dbe0bcf6398d6049b9dd918b48707e430e0758af25e0ad7471300e3904b261bbeb18ac1ac159b7cec5e8c4295b365bea0f36b0acdbd483438a87ca5a7ed953d24753e580fa31ea2555ed335fd6a7e8c34e4be3173ce93d720111e885d4fb50471ff9ffde8e770e91d8802dba66f99a1a10e8dc7e16462872adafbf41f3b235226313a099388f20bce1e4f42d1867fd91f69fa83876bab80de61fe23b5725e6866a1d373192ed672e62b1630202bd51c458583f8e3100472e646d4e55c3add7127a625217b18633480592e123f8cad63469e4d3826ed1c97c761d8219830ce5681d59f41197605d045105b725ad8caf60b1b3702dc3449b2aafa4b00c1fe0d2c246f54b552705d7346e9634573be8827aaf7320af8788711c79375461b5b2f7305d830af61919fbd66792da04b846d2bcd9ff69ca3a28f4ead66fe0c21a86218a3eb06321d278d438ad64bc8456869b946d2b48079b7e56872f7b54e2786af300e7e221b4fa41ac909e531c559b3a69e198ec6866403953783d00374e5efb708e3f54810654dc9736cea8e6528d392c096fd98fbb21d07fc109719a1a4fe247ff4d31443fd96e41b5725eeab49fc4fc22180779a31172298bd90e4250d0a6b793c9796c1fa32de02e6da1e7e1d56af4e7b482feb382fb328ea0217176532f3848fb34f7c32a3c046bce0724c81055e8289b78194df512ea29c07b1655b92eaf6db766301ade9c6e602e2a9d4a0bd308c5274ac71cac3492e38294adbba682bc0199cc5a96aaa2f10c959d44af973f91b18441b986a799274816c7609100bbd6826d8336ff10f1d4f2b2276c105b8a3c001ee2ce947e641a875ca4ec0f02ccb7b15dc40c45964a783fc8f23afee881ddde424f1e449f2c65cff14d03e43f88ed94b9fcaf161bf49591b5adca54665440b05f7ef0e9ab25a313aab9024acd39e948d5ece267832c36c8575fd2442dbdd2b794ee2d1538a86a98e004ccba7e65514c488d423a9bce17855f6c83e44d4bde44371849394d9b9efa99a67f80c80d0ba8b1482338aec8b5b87616fc91e203e0e72151c2c51c7469db52087860a4dce04d1c3084d575320df680e8d9914756669100085baead889c8ac0d2f549ff6b0a26408fd28995f75a9634b89842c07842e25d04f1729ed1b2026c00fa0b841404232b8d8e7b25720f39e554a88dfd7032a2b5756b2de38ea7762de78ed5f35ab3820a7e278ca37e51a32405ba9acda118c40b3561f52b8948878c930d28de8692c47bab9f17fb6be8881963801a11732d31d44bf64fb80ab4ac5a811674b9c4feb66da62c94d82074157428a6e7e619852caac8d16795ab43a55ea28ff940ca803ea575e90a2f0f95e828f96102e415a703f3623dd734b69f4c0be8eed3de8dc5c48d7974bacec2d8515d9ee8a921723057970d6e89b1fe84ac9a1018996af4b302222a752deb62a4e4101fffb4a247875025565c75b22e8a41626bb9b3792ed2ad0258906948146dd134d9444a8b791beed9143115fc1aed95c69e598fe7552c34907909e6133402e68ddf4e8b0f50dc2e8c3837889c55eed8f873d63e84cfebd4dbbe02337b0a01c9794f5cf6e2a156589cd27d81639e9c04a1ae261a41e9b3b6895bd4ed9f32e9860884b333fa8c1d27b043563b5179c602e755a9490f452ae3cd465b6094526202c9e21723d4a45674982ec2eab0fef74af0e7bc87d234282d9ed366fb884c8947b3695fcaae7d23233d18fbdfadbdf27247aaaf99aae0e8010fe2b55f98e5cf0393393b934c418599d6361ad218a47b833bfd69d9df08d14d9c5146fc72850cf38e36bea5e05e6fc8a42b6e25f7c17343f76d2bfebbb182f77a873e8a4c3b7bbd46b041366df73e64b55ee9c6d77dfa12943584f4ecd4b81d50a209052a603097a913a33755c7a7a3b1f1895f6e3290908e3664e95454d3dddba757c5c8941172bcadc5f1dd3643c4d1880d6cf60542f0da1263a09d7bb162fa868f7d3f4f4db92980b1ca96ac4e4a517e41712a148b07a4f36a1acaebca93a281c61c704bc4e6e2577d97d57f24d27c8729389b855e1156b5d7d39e82f11f45861813bd21fff4c78eb17c3b2b3e11c7a0aa95f663974ab80906e16e8776d6ef064f2c74a713c90c609aac2caa31dc89039d887257e2754251aba2021f61e239006edb7355ec78c0b7c63a46e4df4cc3f1c28a3d1f620f9042432a91faf05283fe94a9d79afb15a37c21074cfa8baeca5570f135a2bf259839174ba157e828d5de336a181847efc4d453a2b2aa9fcfff2c8bebb9fd2bdb6837b2e20c0e0a8d4901a29c5e960f0c9a79ff022bad14fd9e9c4bfb58096a65b88666fe50ad1c396c48ce24d28041919596d527128a563e7a009b64867372694a583db778d9ac30e6125f27d7fdf2254b88e7c73591d756809496a36168695c7c451ebb99a62b4909b4397b8e46299216ca97952856313ed8e2f2502edfb8dd8ceed7255a93ca154531cfc90991c109569cbb9645b552be5dee374e959598e189e0c1a599211199fab386737e879aa16f943648edc60176658c2770f3cba52a42fb55d75eed1a39696df86dc800020206e9418583a024790a9bd3ab5de0445e4fba519414c73ca8751010e747c1ae89bf46fa82374ccd13474b578352ef745d0911840170ff7300a4cfb0b2dad664ec87937252d3f89ce78e898d09c8273a3a5d3ebba09a9bc57826cbbd55c9f133d9eb74fd70c8a8bdfb425ee981159ac98ac46563632fdc2f67cc8b698bdcb5fc42515d142926026b219f429ba2ad50301194780fb7a83de35e15b0b785df42dbb274dacd8f72f21c091acd42c2f6ea951b767b8ed5278a2842be9423e20bac3a61f30ab2df81f5d30043ca79d668f7aafc02faa2415910fbf59ed8ce12a9d8bcac4ae4fd4427470b784edbf4753808d777ac6c7ae7226587dba7216a91600c9c200925652c53d32b23f183e3af4342f64e9204534c9b1760caad09680465691ea0d54ca09c42e13088e7b36e88f1404233362aee01ef6c39243bbdfb46a49228634a9beb31b93cb7943bfb5cd3d98e233c6095a2adaaa3b11bc87ccd9b5a0cb102e224ceb3f269747898c815ad72893d602123b0680d26d89eb596388adf46584cfd5d17ece9d5a06237bc834589de2eeeb653681e98758f676b45e49baf03b8a843340548be646f99da6b8fff4d1b5a072bce250074ebe9de28e2127912c669e6e3661df8b6afa8ff8f2e4cd4ac4e9fc5ae0f7ee166698696fab70742ee64122ec627860a1eed7dc6cfa873573277ae886f72670aec45938bfd1e9e501f4263d42646dd26eac8fbf3d157fad64a43b825327d801c121294490c677e660881a093e6a720b46c32e59023bef856d678bcf822319300105b089077a417ce5e4ba9cef0e356414b67e532484d430b927eb063533a921f0dcc987329c4639dd4a29c887b56b0e9187b6f98354cc0067500762b86beebdf46edca59571cc5c4d7f98730cd6b4f9c37aec3261eec0c2390d1be4f861ab86f2fef8af4e811968262a0a874f39895d85b0e91ed1c1f65eac067b4a2e5c535f1923a529bf93ae6abe838669816b80aba31e43db75ca1c50e98b5cb45cc4d37211b2ce706e149a6abde0f053a1ba3e1055f7daf9dfa0a113a83b483da1c9c0f7837b9e084d845800b9ef76636e1685f3be01f6b3e67f3f1e058d432e1b4eabe8ad67b066a945bc80b192e74527bab6fd681517001c8e329006cab7eab98e4a6a6b8c31af02a375266ba85402ef1a5f7dbc567d4a680e66ad98ae6d8b51d23b64601b122347c06b1f99f19b65b9363d8443addc233322a401f4610f59f29982d57b8a66c1f63115b9f83d36dee02122614a1b645795d81d3eb283accb80d1a79b91e412fe1c68c6bac23bba3722e1218b84df8482be8798e29cdde1c201232157d6d3bceefea8b86e2b182296fa41ad0a572e0166faeb8a7d47fe38916ff973b86f5457dd7242c0666719960aa22c3e7e9e577a23ebad7438c83542b20e60a34e504f9e48e6836c506f13595570afc262161bd72bf624059f219bb604336963c29a3f23471fade6726afb17db27e261b82d2d566bef7a3d28c564ef9ecfa18c158cc2c691d2644b3f2782252c1e8ac2454fcc753bd4b2dd05bcf77d5f38710577e9659d7ba997e23fd3ac1c8580103d4e7f9fd9051225740f32f4019e28373a7199ce17d0967ffae45f3661f666fa93779b1e52c0af47490356080317b0506e7fd2deaf654552455f9adee5cbee37a3068ee2a854cb274a0998460935cf5d93e90f132e2000a4902bd0d074de6b1ffb61c83ccb23cd98b4af5b8fff455493e918f03bd28469fb0aad6f97e868b94557e33d4a5b11a7497a01c2508dc3310b10ddfa69b35cea9e7b065d7a1a0d44f1e51092f132f13d66316c9d728307831ffda09d12784376d3c1ac6b9fe40f0fffe02ca9943a0da7283c4b7e4185ead1c4935ef5601fab3fb7788dda38eb7497ff210b94c475049893a94e66100cce8bc02750cea2cba881dd7d49908e01862cd1dd27c1189811bf767a7403847b29d0f7012631ac131415e8e49fbfc29e231af1eedd99947354835cbbbf7184fe490796840cf36b0856f633246b9424e71a64e8481029e357065b3626eb698961a42adf8e35e59f3ca7a7587b6feef745c1a87eab42f2dabece3cf09703db9094bace0951c14397907578b6b8e57ebaaac9a2598d7e879c2c7531a65ff6e1f913be0a248de5c4a848e16512c1a382b01b4992ce1478c740fb478bbd4f1fe2a4a8c678fe2005d32ad107024ef771dc49d50e5bfaef0dcd1138e1d1cde4498479b6272a302de9e8b171cd43ae9be23e1f94b70ffb526d27f3f788a021a5e7f72d545c6a0ff2e825c43be421a6dbb09fa2a4dd9e89801d1972f7f894cee9f507b46156e3741132f0fa28c3526138cbea1bfd513022da7b7184ba5f3f48fc73ac4430e1ea672e47c4e9057d45a08ea457cc0b0abe13e19c8c00d974864778f2a92e7135210613ac96a8d8430074a691efeed6465c71b176abb1b6aeccaed435ea14e23ac154f4cff2c03b64548a6f33cdfcbf9f0df4888edc14036db8bf96095982d622ebbde9593413818e845fbcd49f6eb90b0149d4c73f1ca14dbe5edfccda80c42a8868f5903daf7167cb815fe232bea7deb5c08dbbc3f91859aaf988526b067f98ee16220549ebd9283f0e5163344cdacdf671159fcfa08370ddc5b88caacfefa47e4605f0aa037e81e5f0e82b51fc56b5ed57ae0b971117145d358421322173c0ac1bebbb1a4a595a607b40b6dc34d163ca71119e1759fd8ad23132debc8e122f6261644bf44af401119b915653416aa15c8d9aa7f0e4c66ce1aa02d941453b158daf2563b8235fd048e540f7ff50881a73157f9d84387e6bdcbf8b0f975b58969445b917ce58f97d77632ec5753cd45b465529fb5994585c6b970f1dd9261678b3bda919fccc42767e5dc8e455cd6c028e977b0a51fa9dea31f37b5ccc85b9b200f4cc9468020f8ee54e205035e3301b96ff3d83d028383c66d1863209852b5ddf1fd73db0552a069296a0d9909d77b32f03b5b527b856c9387eb4ba044413a8b24aacf6ba8f3b26b6c2e72e247e1d5154222f425aae796689817805661fc382fd5d5f16bf6d938fa90f9e5e316136709ce75b5f38557518a4f4268990a638a8d5817764a22eedf039a8c326e60f9ed6ae9cb6c30fd7e09c14a7ce1d9761989cc40719ca0f261e2600015d625242b028703efc2c2a41ff692520a88f897673de2459f91c0d4fc0c67d5c4fd09e37109ea190c29a05392f7e74b66a1c84e3a5e3e1b7dcd295cea83e723972dfe37f03e64b8a474bc6b0cde3a7f69d5df840c21c2454c12152a348fd7262191327f218cd00156f3bb538bd3302966bc86ed90dece1d838cf22651b3e714143c558315f85b9f7433031d7baa07930f599a46ebe13d085abd8558b723569b33f92dd457b0606cc16789cc982be3bdb10cfc74162040f5761ae722505538130bb340f58e62f060185fee0a4414dd30119baf73c33a1f62d692522a7d8d1e7825bbd7e0996988210aa8c9374a659b59ce53fd62d74e9107a967d88d5e1aac1979f2261656b83f4b50549127f42c616115a576c9985e261bb729316749fe0f86c726e10b718327d7784b49ea72cb69900d3de68fd8a70d68f131771d94ba75a02f5a21826bf497373353e6ec83c1389e8c9ccbcc934f738125ec7f5d6b7d952389ec6361959f5fcd6164d41def1e97600cadc642916b87d38b0a8e3b0bb5e07352e760f03f3f85b72f615c930ec552aed121e1e7658933277bc7fcf53ebce13f999c841bb887dc2f9a1b1a82b0cf0a825f8987bf9c5219aa4aae7e0148a963cf58f77e9a3f561b9ae47ae41e164fb8b9cdc22ede36a36ac1e93e44b3dd05de60a56c2e0bc38a80c44008ab29f1585bc17d0e892e25fd7dc4ffbfae412d0900a8ea66b9551bcdce44b52c1206bf3d7e20ed347d82f75c7494e42c6ea627aa9e21b0767eb7973a05c0441370789aa7939d2929ab774cf2819cfb0c5b0d7e4e78c4ca36ca6f445b403fd6d40331765ac16daf36a6b7bf34a7b449762e800debdf51950c84e58090278f8220059a229b2aabb7ad07c36bc4f91401415329d2b0ad09f8ab840148bab0eec99559475fca0830185aa9dcb7018ac84dd4bf15ef40b75263bd06fe505afdf7e3f390bbbafc8aeede2f3c09133c9272d7fceed879dfd11c649ee5cdea2ef5dd1015bd948161ed194c629e8b97ece9f5d7270294f8c15967fe4df277fdf075588d5977a25af2510418e6b9d8ae0bace1229a4f40cb825404ad24849bfbfd1b467849ec8492cd79acd9e5a01ba4ed24e2917d7b1e28271aea3340ab02f0d2355a6c089cd9467537044dacce1d1fd2b1174f843354d3ab39f31912aa75aef8b4ae2dc17e49d39b27f5bb6abc57a8d8ce381dd79368379cc38945181bd7c62b2239d4e80991c1350c0b0ada84499ae7e43bab47d73e9c0452045f8c8d8261c18632bc6d01897d2a275df0afb7a6d5d5fa8b69cdd4ee29050999448fba547c8c6847da38539e820fa6e3428f2f71afa1ac96dc741605992239c529d2b68d6a64237d6f8c6cbf10173ac9a5f31c5e522c39b73013763d402947aed58ad68d491707daf80c1c8db7f97fd5b66b64a0b2b99a0613a2de135ba73bfd283fc1d8c02eba1ff20b19727180f66bb76e5ba71995f6dd996d4db8549d77a4beb492da37ead5ac1ff0c7af1978b2c6cfd140643bce5be89b19828a2b7d30dffe557a7416c4f2bf6ebbd27d70d263c6e5957dd6f8b67078bb34772cd98af17f7a812eba918667872688711bae1ee2671d9a24d67cced56e81a435b07de74215ba7a19857a5aa347957c8b364ad37f289ac7bfb09f5a9c8bc85a98ecc436e3383ad800e2a9cf4ae68a3274ea3864cad568c09bf07f251ca7248a7b946a7951e6c5bbd5fbc3315545251d315bcf90c9b12437f607c51145b2b7c2cd92520431237972f59795c23e39d4a69145a2043fd54a16284dcfd951e2d898129c184e9d897c6a5425f5b5aeb4ecad109f475787ad18492f776d897e4a928f1496300aa1a9789833bbf643a5c3eaf04bc406c7e960647b26bf4b35ff5c226525b94a0f3b015e8a595cfd4b0e7a061dda6bea8016a8e6bf823abcf0fb54bdd32f6616e25f09d0a63d5296c0489ba224aaedb320a818cbb883a0fd6843671f87fc4890a50ac0c47f944a34c90e0c632efb4d298262623422a82fe908fe9a234126f1c64f86d78262d03679a4d1c7d2b4202b9e14f271217fc8fba824df5cfa5c878c21b501ab121094a8550ecdcad5e98384cee5905ba12c6d764c9290ee71e0f0c68b5962e7d35546d75eb4b27cb045600f32ac678bfded6cd3ce47bfb93f81d45d0aa39b09deaeafb675e960656bd18e0d73cf39e99a7912f5d9db2723421800407e1f51228949415cb1862be79afa189d4fd18f1e76535d840c33ee59309bc892c620c09bfcd6ed1dcdf83f2b8ec085d73fb8a695e6554c9c6ed6de9951a4061f0cccbd3c887dbb1a5977d22ea1a1434ac5e4c63d7eeac1c23b47b9dad8c05efdce177e93a05651ad8228707ca869fae7b92db2b37f093b39bd0010dcf4f3a4519e43b294942d1b6c30c0678107b198401b50a8975c522c0fee6b26d86eca3d2274803efdd95916de2f2b0008489c1ef80acb98fbfe268e0a3b1d827b2dcd68e618f0f36eba284d0de32c756ae616bb071d4718e7fcb0ace7c37c3e4458a8610d84a0c32c957dd3d5356274aa4d29ed36967a858c38bf997762c975fd3f78ad72a6dbbc5bf6b06ed0b6cc0bf9029cee26aeac981c13674d9ef8be843c2891acc5c947efc9db2296dade3c0bcdac733e2f005bf6bd2773bca73fe860848a86b8d70c735d8bb06a378d15d8feea9ec961816a6a7ba0198f0a569d4298b2676efe8f6025327f1de49c39cf8437c06860636fa3670330317792b40431490b1ddf012636d51674f2e8bc51a2be676cee359effa239d46ce1e89fdfdf10a8c64ab24bf0cb93dfc363be2ae100efb7a2ba4e0b8d66947c7658e6ac72011c5b031818a9407893b5df2f07ec21bae1ac78e655f7142317c3e639e4fa1188226e2ae77d38dd495856a08173306619cb6694feb1159bd04015139cb671218f8b0f16e6a9d3473138988ead1394c01ef11003708e862781c2eaa4c03d83e9e016ea07f490fd1d9b377a775b244dcabe2b155f50b5ea0641611da7f7255e03876474e377e4235ab83d43c857625cbe135985e12af8b8ca9e6fd92702905c830177b8dc6c83407938b6034f23b2b85b347443ad191a6aff2b594c51f06290c8a55ec38a097f55817274ef8828db4d554a0837ee450df948f97a13edebbed43106a0c16a60ab794227041eb11f58b62b2cb6060fdf29a5a155adaa42ee9d799116172b95a788fbb037af3c23cabce3b9f64603f4185a94994bd078bcfe6b373b84e678406a8765d6fcefe8ec4eeaf9fa51491ae8c681940688d9c7b3a098a9b7893628c9806346a5abcdc31bc67440aeb643e84dfa24dc22780a89d25007fefa937f02abceb7ebd6ed62387ecf487f8187959c86bec90092ad3e6564c818ac67b0d6fb39d23f92b1bbc2b88d6e6eeb0560c1f3525931e90674ec36dcf49ea836c1b830c3c0c63f4a90b9d62241325a5aac9b6c80eb3c8963ffac1a0c40c84b6000bf5badab1183e3c8a480cc0b3bd91726041f593d99932e24826797dce7b3702796fbdc6763c81f0cbf8b73d4950d95e78903aa65816c9381d0bcb12f1e1de5c1f5854fc882b1017e13b13299f5f3c2e6568f49603370e982b5b53e1485f738ba064a8d756ae48b070c468bd7287bc2d0909df63f8ef9b484584e7a1198acabd518fc8e3a6ae2fd822674baf3874dc543971e2daff8a3a71272161d03a7dbd61af719e0be5ad7713fd770d89744f237dc564ae15656cd6d0bea5a2ad0b01541efd006011fcbf3e4c551a935dc8303f8fdd277785878b6ba41d2483566deec2fd974e021bb7128209082b1c395de2f49a41521216e21d473ca5ea94e2e482d00fe788718caba973a1b1dab5fe8c9bda97d9546f3872866ce32c37c372d818bc838c4de65e75072ba10440c622e19fad634af439b23acdd0abac75652f6f2f727224c460f9068ba66bfa93e7fd04dafdbd5b93321ead9abf85da27ea183f24dc8ddc2fcdd674c4eac7598041aa0cd4cb8e390e6cae00bcca63af80c17848f6f9574ad6d340845c2f21bac90865bda2e62699e3b9caffda4c89c4bf3fb445dbef0300c7041422d75ddbc03db6051d97035f7aa570c8d9c5a749aa92fc49c08c457a848d1130e2cc2eb599c355735da0c832b2698cc360c96e4873213462c5e9a8d56efcf15c3de148526da5d629e600147557cb752eb8e371eebe273ef5264e4f3715f18370d1d830dc222f34636aaa4208777da1c572a928c1d0cb2f007d58a78bc2543ba8c3944049c3212d767fba8b9da263a9404b21e173cc39bb55fe06db4f5d9da0de701bc5dc2ed0db8aae43ad1e15c7fd72b30f72fb1408911114aec5365f9b1511972ea0d09328e766308d77e3a3a6210e8a990802a4928137675f73e52e56f81eb24df9987998d31525c899fc4db5028d1df8eafdfc41f0fa8544dbbdaa831c77d7c0a8dad535d8ffee47474f5fe9ed02fe1620bd0be7f3cdc645b0be9bb49e1df414602cb5e22eb7b49c31b50188b9f7f1d2ac8f3eb2c659e9f028b1569704ca644f11f7d2eff45c026ef9c97c4a6f83ae7ba21e46d06bac0e399ca10f10a993caf0daec3eceb3ba235a5d075a36aafc1c98b6182a5f6e225eee87388b2b127e13a3a9e45d6cc55804356d0079366074f3103217f51c37e16f92c5ffcc70e5ada77af53d281eeb6904498d4b448c038cfff270538f9eb65f5b245c0596eebca3b73c4de6669788cf924f3eab7c254bba9b2588985a144aac5d589d9fcd944389ed7fd7853143ffbb3fb08a3ef874677d00df3b228ec6c20392248861e98a161f2d0d9df0b61c66a555e36b1c21b1461e732950fcfe3e00925337a8ca1e71f46d90943f63184274a02e54ef59830480880ca8a08003ded3728dc9ed56d7e9dc9d675cddfe16ad0131329400df7a69845f7d8191283fd13b1e79e6fdef89f830f11302e3017349cb9683326bc3db9d7498fcb1bf43a0fde8d61edfe32f33e37ef7556726dadbbb61c8cc28fa555eb818b134954eeb3db78df83ff65d89a0851bcc433baa0c91b9faad9b0374a7bfe3233da56fdb7f69785c0a98cf0e89c761c08a215fa03ca3748986a94ed55138c73e9b8114dbf01a168e96d9d334654ecff454a8f55da69ed55e06f0556dafcbd59c040905a930bd097138829f41ae7beaaf154cb96f4b387e01c812b4c220d3ac72407884b9542b8114aeeb7ef29ccc7d90661d62f46e22065f853b456a2cb6e119097fb76809dadb2a3cc0783c8ad2d65398c7770fbf04b9a511fdb12ae144dfa0861a8bb6c52f8f706d3aa2130db2d90f2688dd6dc671c2dd65224d935ece8cf7573f9d38b3839590fc12c557d4af292eedf3c7988ca82f2f3d8941ae30292bfada7f3cddf0794acd3349482364125a650a92fc4b4948ea28f6b370def8585a756a2a3e6f59da5b0acd91be1a7825e24c866006f5b3b4f4489d70683380a8499aa4b362354b15040bf2d4be5794d3f18fdd6ff4318b72eccceab4d4263429c051c09a071be65ad550f9ebdf8dc131257f73815f4d5f73cd50065886625e45b5c8bb8a6d64db784476b470f29438da13e5bac451d83fc6646b702d4650ab422eafe375e2cd41a6ea8d86aa908e45b8f21295c192d98d2815ecfef08b0562a3d76e3734532040e3bccdd2119186224c2c06ee2e0b64c7e7b132965859dc047e76d5de8d93ce342b5663fa69cf3ec78e0d676914253f1cb1b47f39ec0ca5b2741e55811a987c434cf1116dfd882f54b541f5b2e764912f07e2f1fab5105f37f10bdc09e8dc6ac2c91ffe2e2e88adc4a1a1cce084c1e502b74b7d737b6a766fa1d652195f939c2ff25039315be3d608f443b779811ba58e96168d193ddea8760bf510422db589a576cc67776311b6fc08923e1a3c25dad4e06a56361275d3254657bf5c7e429a6d62dd86a9720f2be7b28555dc0ff1d72db5eb172a65d3df6109c7b473f376b96759f63784c9b4136aaad676a6b729437b100e9b1750f9fa3a641dd32603ae2e544bac4c67ae8388475066de480c12628e811e96c6c6565781511ed7a52168c8b07bf612d2cd2e44565ffab48f428b53e7b8a3fbd919c206f8af4e1f4b9dfea92a7656f518c60e53a45cdc372c5cecbb7da8dfb5f8db34e12b271ed9fdd9d3703d0c06ae5ee3fad9f8c2bf3b4873bca30353ac5ed0f8e07f5cf52ce3501167fe476f0c244483653c32b19cf418616e314dee5a9da70caf9a6f1ab9aa8d5a0ffd6534a6e0f43d24a614ce9607bccd7e7b734e93a8e6487ed766c7c761e8b0a6440a5cbc9e0291e817e95192218c83dd31a179482d1c4ed2b75694230221bca007fe1b6fba66756fae4813b80f9b6c65ac2c03de0d6f2147970392e72e513a427a37854785de97172c3dcaedbea959b6b74a2ac87cf45d32b55b3195f6332071532dd0528f4fca9c297e246330baffd37c797e6505bb43a9a7978126a27fa507f3ad3b569ad217f6af02477e9668d7ad59c8315d6616fb57fe5c497fcf03ebfcd412e56816d3895d3b4a31f50728d17545de06d36e8b6831e86cd5498a29404c85a65c890949072dcf7b0902424d4331361f48022a50f7615d285d3f72a6e204fb6c96f4eca9c02bf46e174305a889a674c7342ef9b20ef4ba5bb7a34b60afe415d01b4e6a35e272ed687a172d6bec8ae73176e2be2ccbef4b7dba04fe9f086062e2ed7e2a790307169a57d6f5d0eed98c923e2a01d0c44cc3e55c5fc8c8ea0fa88a2acc008ddde777806268f4801c1801862d3ec085c5bae65147e659b094855f751d79f5aeed600b3502772752592bb362af6d96391c5caa2ff9287a6a7fa3273005becfd61811b52bd4b5a2d6176d16d8a4e8349ea474e6d3365a51e73fc7c644a27c3b4637cc07ae3ef4fd88da9ca749f2ecabb581126b98ffaeadecb1ae343a04f8e16d83e149b468c3eb12eb150cb1c35fc4642f7babc7f03c25ad5e581c155547f418583bfb88cf35dffcfc747643b37b9f5af5e96e37a3b3753d7a7213248b21fc778c0929d134c52ccc36e1bcb840d9a456718c5dda9a6d8cfb4bb390a7a59c5481827840f048d68bc9c8988d51fa3d208593c00639c87288383a2a57ce491cd412ff6d606c0e9cebb6961e5b902bf54fa186567ef22525749659ccf9a3e059dce0a82f4d8d79db8fbf306f8ce4f260686a4562ba0f18f0bbf84059933fd5677d44e0ae4f1c2af3674db6f2e31544bb44693d371341aae86fde6297f0ea6f43c38ccbfc1fc5fd48e8327b1d6265868ea168fdff91155ce2968b9adf0a18e40e4806b6f99ae703f6fe8bbbb7a7bf6a29f68829d2e52041da0de547900ab300ac1825b9061963dc160cb7a947c4fac5ca3d8c6fdb1ca86f7ddd855f6cca6ebfcc20f9484e9c141f53ab9859b1fb8270e6d70dcc68f3ecfb8eb701ea84880d27782d3c59ce90990a7c15cd6045a3a92228df210ab461f2af9e416144c571e6b5ebd77cded0a5e2cdc2630b029345beed7c8b144bd2c4cea9e3b22b8ecb3d377182d9c8a6bb529fd1c0b9a141924d59c65f592c4a626afce94ccdc4662e18c985ac320475e084e9c500bbdb8bb17a3610144dbc3f8c26b1a1481e513e2e40e986e00c6ea85d1360658a8d08db7d555a6fec5a5e078e29078817d574ece2b3684086b3bf8c2c34ed47374068ec548fdce10c89bc8ea655fc98d5f0cb2ed0a13b234bd06b94f025fe687485ea7f9bf17212c0bed08b4c9b0b59d97563910a34ff9cfa999dfb40dfacfb4717b36d162a502bdaf54b809598b14ff3c4871420a2aae6973fa0fedd63c841d7dd8b23ca10b99e51f7b34914751a3bae331ba0827c1ffc87c31f7622271c55ab78047c824c5d97d2f7cebd7401708c14218c3db38d03287ef4b3d9492c528f03fe1964e3c70fe5ff0920c6aef4d879c8ebc01900701f2d26b1aa7dd59f9ed064ce7ceef79f2b3c902ce9d176743736753d4317237f43dde4e190aaac068801dbc860fb42476c6b1dbc874db78ead60ea803527c8bf5498569fe814539f868f98e63114d8da282ec8aecca0fa788d5bcbcb96d075e0685d15419d98ec28599a0a5397930b65bccbd90a5878d45742dcff34f02643060104703719706ebaa1e0ba6c4d9587301390d971e11474e83b41c4bf2b4b503daa9edd2e143e6a5ca734338f2a8f53191859338cb40ba45736163f811211fc39ad1b3cac7aa9d473c71d0d80be1ee594d0864002a5d05aef294e1bdaa1be95b68ceebd9a478eedffae5a4d03bc122a899cc387db8be7a1b7d42ed75681b86bf0ece77afc46302d923106c7b76b06c16f89d70a91c1e10db69cced2d5eb6935ea4241071a0d8589331bbe677e10f25e8fdda510cc5b6be474eb315f016c2463cc41eef54350239d94c930791a3090665d296f58a8d34f14c601ec7836325a70db5323b72921f2857db30b1bef57d2c71524791254526a1dfe277a3b1b0265d6dab5680aaceab24822c4f0621c009f4e7df54d0dd0d539159836f85e79b57485c6a02d0c3fca5f569e1745273f7524f258f481c5de11c06e18c350682b8c1dfba965d2fb56acef0b85db37d8b1cb05bb16e9785e468123e1c7706717ff8a3c054995708adea9a2b1eca5b0dc9c72a4f1b7c7900e8b998e6a00d5ca44d67a72d985eac188c14f8db43ceb62697effb7682ac39877a4283bdd442dfe600671b4e34a9cd370392e1524dd55ed07e0dbb51e592e5baf5bb4f1866a31d2c6c0c11641a4b951b515242d424ed68a87754bd6138330f3f93db0ace053b06736793a51d5215d50c89e189ed88754d68abae6a2957c2d68aa2f597411a7d84a85996467926b47bdb268806ddf2ea9be4fd407498ae811d979d0f0f39dea841ad1a6d15de49f85287ecb15e3fcb0df2c4cd468b08a286b2f32f8d405d83f2ca016789147a5674d323da0ef449265c5c85d7f4302c0cee8fda06383b4349b967727089e80d4b762b6f0a60b5287acfb3b24e69b25f98916370d187ccb1102afb928434d5fb829109abfd844a3858e3a0a715c38a48136afeb78106cdfe48eb3eaba769935c7d5b355712b6a3ebbbd42a8348abcf516d9a52a08aff5d6bc461191cb053024ba834b34433b21ab59d3f7d336ab42f2fc190b15ed87010e5643a835e0fb06e46e1f93810c2d19ea973c110da307e2e1ae7ce3b2e2103d1e9d984693919c4825d72e9fdf9befea3cf85083736308570ef9dd619173aa34e8d464cca6b9ba700847a38d03d395dbb292ef96ebd6a5636dfd9d88c9b5e85cce6c3505c65d08013502d5b5931f3895514378430f5413f352e5718344a048bbe643040cf4ed9a9e2ca628faad204e21aa606c0e1641b2b4c6ba99fc852452e724b6be2f7ccac8fe47671a0a930ae4c213491a33c9b462ec7539cbd1cde3ab7477fd9a0fedd3160a9ce9ea583a438170406705254e9208ad9e264f7189fe84c3a92fc9bd3142993c585cea5df36d63f7d12a781fefa6c6402529522fd729a40a619838dc79499acea27b359be296acd2795aa5918cf27e3b10d4d3f31eb7b404b303433c0a743c7d9c122a87e5657e02dadb468937c67144ecf94e6e594613eb3cf551e0d80a928dd66d8ae387517b962dfc2242accbbb8c25ce23cdd851c935d6a9def62fe498340881292b1da735a2cc546a8202e1a706aa8937227dec3730bdf6ed8355a9055ed9f5de621617f2e3193d9669bf0165f5258f121ec0293b6f9e51ed8b5d7bbe5f1adf9202efa7af2e956f38363c4a3513dadc3f5f50ba287d247d3014593c977df56004baf6504a78aadcc19ca8cedb71964b206d2293db2deff502087aa4933bf69706b7d9435033c478d259ae79e6f293458a439ddc7c3c010b0f41e2f1ff0e75e16448f22b0a2ca8b5846f939c03396254427b3497d1d95140b40845ed0d9a00e24ae122b24a43577bcc1e05b26624c761c2efa87bba16410b855a2926c3b673205eb6e962922cf7c208510768a8064889ebec5b6e81a590e176b8a874a684316499a0ed3c53c42980edf3aa099b7eddaa0ac62ac69bf9483805fa6262638a78527fe74fb3393c4dab710c3f9cd85a87777367870fd5f68161ee8acae819f63cb608f695ac43286413eea0d6495acb1d8ed2258201929c92e51540470a41366de87bf6082c153eb8e90de6558eeef7ec1c8e270c5c52511fc6dba1f6d65a619dbec789f35d4145f72e303e82d76a194c35fda330e653e39a0a5769aa1c37f78a4b58035426895c90429aab6b5aeb8882a513305e02c269338177dcbdc71d0fb2a9054a9f0aac1e6ca0eb84e2780cc9c53b6a69e82d1cb6442a650ebceccd2f02f95f0be12894b35e3d50ef57d2cd85c298aeb099a9c8222f9f4a8516e87fd9e21d1cd3283db9cae22b4f7595f3cda97de695141339c0efcb64849ff24649e97cc8c4082c558ff00fa438eea487e5b811f17347bc197ebfd7886066f840d09d3b0bc3cf31977d27dc91c849c2c7270d95336b1833abe29904b84dcc196610d95c2b7657f2b9ba6972cefc568e40410c05181e76f59d81021d4d7a352c8acf073a5ebfba321f213091ea61af8b48dd766edd61147dd60f33e4d3342339bf7a16c6b71dc2863bf0886602c6525b41cea375becdf9e314f04a957527bde4e2a7803f05824dee5540612a9d8c6499c411b3eac063404c023eaf5574dd07aec40bad59e6f14f60437dca670659b43af4aeef223f76dbcdc0a8ef4d1a4472e390698bede1dccd7beb0e62a7796d151203e5f969c8ac53661fd8a016c77e2511dcace4e3fbed46df1c561f607b5ea2ce03681f97289a60e799d9b0526102dcc8dbb70a1e93d32a03949804ed149c421a0fe6e8730fd9e461ece4f918f47ce425ea6e093238214c3ccffa011693058ead5f286c2dca830bf1a6fa1938c6fa41780b89026a988a0fe0e2458d07cc22d5f4fcf38674c925d5dd8a370f989c7bd6ecb7ed7975683c71635b29ff83651cbd38a4be361929836f4dbefe234c89e1c81b768ce51b2996a5b2133133960d9910a0483b67a6e86b3f243c08f3bda9d5ac62def56b8df1b4a968436e62e8c35d7d6da7743ed35e0535055fa9322035d525d251b68517009e86bfa686b8608ed8f88764d2a498c33c2468515d5419f89ecccae417d9762e02ba69a924b3b850c4a03f78de0a67606e5c8532a0b3d5d82132b52c7686c2d7293a208cf08c536aa7cb587b8587f2685259000fa16c14b46c71537722239a2ffff816f689292d82fdf78b5ca4e8f5513428cc6f011b8081d02c816bc29bce87d354c25531ab673707715b5e8eedf10f4bb27e7d41343403174c696eb601ec81ddb12d4670c6fc104ff906c21fbb7cd67405e1ebff4426c1e06514da673d4552ae2279cdf256c9a9ecada08080a3ee07b07dffe9c76ceab163faf64e161655c9308b009a16b582872f3085650615689e480059b4dbe42b474c2e14e6534d1b9d4c71a0e060e3a854757f8ceace37d55559963dd6d52765dad37607f80d42e0afd6f2560ac687d3cd39f4d99a04daa04029b1dea67a91260c236d5c38bb92370ef3bcfff01a6ace166c5440de2f1604cc584afabba237a1289d74fadc1b0fdcb2079a128021db0f87a69d70a30abd9154129631c8f0080aa1f9308cbbbcff9edd7080ba17ff48e62e064ea0eabb37d99818cb08df98292fb49267fc1f52df2b9cc87d794124f9143c20d2257eda1b99bd68625b55984b0bd53a53f27755a30289e6545b6bbc846e92d52056451f25f1fab4025a5152cb6b5bed1f8a652c70a39f36364e4cecd288f588064d1455b134de4237a0c8998a16d0b995d1a5665a90498777f10427e32489c8b4bafefa498e73da78cb8f73cb0b60a73b384031b585d81b175a5fae9c72614ce4443e9c46b933d3abf2fa59879accd7cfb0e28d615a36a9be8400f13815e23672060f038dc1a3e757f7ef996f5fe325a22b368f20912438bca8fd7bfcc3c356f0113418397c286c156a13586282117a551c025f914acefd609688ba67bc9192272d8d09958f89fc1aa067e36991c25da28984c1179b95ead608055e429334a0d07f55fb3813cb1f87f0f20ba3dd54532b933e804819ffbf07283b394ab3aedd6cfdc1b8688a7e8f2af81625010a0dd6f5f63574998f4b298272dbf61e57b633938300dddb93cedd041140d999de8a574b05dcad3490607b8c28bb160cf287054489da719df6892c369fe1c5da60aeb1248d4be9d9936bcf686a49b1fa3b94ca254c642aaac72d7a41aa0edff9362df2da74beed0d3e9e255abec89550891ce32ad32bad11e23d8f6922086cb15e4f0bf7faea961d3fbdc0de06ca61acc8812d1bd8a3c3556b4687fab56f38089cf883f44835bab9a412c0a73191abf67e4e5147314caa549e7f578664e77560815aef80587c942699ac4fc1d4df8c94457c31d289116c4040554a76ebd8015851ed2682b95ffbc2e9fbc2d76bd8e001b1d5d6af25a16aba9bc79f4b164e4a1d9e49383cc68de0a0dfaef45aad7980a44d7f4f3892a129acaf4a1cc388ae74a01c9144e929ec560682ff19e2bde6cb1a907513c733faad7c2715cca6eac9f8bd85a1f5c5c785a694e1ab2a38977bed410799508d922077ae7c44e47f5095614b6ed0600c0159d4461ba4ef0c8577802d3a36e0bfd2909aeb569e4e9539cb8b0283ea336ed20ec79a236efa32e8d5eec42b6f6a97f4521f82a64f8be0f47b4d80e35464bae9bd386f5a888df95cfc96b479ea99a4b81c958aa585c06795b71d365a1be8ecb45b4acd82e258dd3e2a46b4088f50bd9a645cde114a2e6833af8e086ff8f53d051facc380d7ee86e5e18140de70a6d03e975980744c856d9e5d7dd0cdf2ddf0bba23783079e7b6382c4317a3537d4fe250876ac827df73f2142acd96b0c885ec543698354adde62e0c0ef60279b4c4531b60084f4a0bb27302e37989d60a3b14293e4ea6b0beb0f3081d3f1458d7d4b7069753a5451758623224cea87b13cf1437849c95cdb8208202bdf2891d782c8810548370b74571442b11f84b6e391a9bd910a52cf71b9548186a29c4f9c9dd9cd7a34334f22fad15342aceea50e276293934bf2b9aaef7fcae70f06f24d6ab75e1e2d4c4cbd7bd84147386e7549f34651c434ba3baa733fa74a6698dab5564736a10559530d21a642f37fa5f264b8a13966d04194a9868554547aecf40a86ae0cb70d70adfbfd9242c6eee2a209bdf5c6a4ce2966f296ebcbcf2469848855e78809f5ba6504fd589a7984f81dd5760f34d12a1ad2370b9b76398de4b9ac1803834ed4a6e25b19f19a1cd39bdd77e59bd623da9aeabed6b846714edd702f6ec02303b3baffce41f8397c37ccaab74c495eac14c0457874cd3cff53d519adac691259209c22a0a48177545dfbe2bbb6722ae65697579d1a4199630415cc8ff91a40a30c9c853c9220f0139d5f8ee4d09ee7229b7d18b66c1133db7ae751b5e0da62fa56b6e8e2b3b4586f43d521dfc52a59f20c0e17aa17ed34e657a054463dc7b88558ffc957b1c0d5eae8a0752d7618d10aa4e20e7fdda7c7ca4507ccc59ea448ec47362bf79ed6ee23054867a41ef9b46009844accf4e1bbffdf58e5be3065ff242ec42cc3b2d4dc2077527bc70076a6d170f06b666284152b3b468ada54d3a7607f61a0d595548a05f924b4d6d339c3f16462fbee36bd51692dfcd3226d8bf0ef7015e4d1c2838341692e529ba6c3703a81bfb5adaf5b7ca27ab2b6ba049269f625a7fac9cec2613d31fa85aed52a41c263ef37dbfca8922e70d470735f73456feec2ace74731014c3e7350963444ff03a7acad81a2996640e4a59b508416132b05ecce2bdebf0076d9b6bcde6755c9b5e15da9de461587a8c44ebe65d2cac9fdd3f1046819b76e31c5e8f6f262723e61de16cc1226b699ce26f44f7a6c33986efd2ce58540d350b231fbdf3c85d0860a9d61358fa5b90c6e958a79765a8a1b2d4a812e4b93405a16a78b350f2d89c2a1c85e86641ba91202564c85bcba619eea4f0384e03cbfed4aaddb01ef0a394410ed0414af49b5372c17669002053adeefa1eec80b80abd61f827b6fc906fba59240f70a5685cbc3643c9efed786c77abbe3c83cc05ff1bc344113795433efea1382be5f6471194f6ffdddb204690b225cf20c9c8c33ce6ce4996cfca22075bb179fe9ba21a0adc9a349e49f2046de3e2723e5cd38b510eead01b06369ee2aba62dae3af1a61767e6aa8e9bdec4adf19d3f9168c03cc13ab1d5c5109070a9df46e7d7642872700a0c14b7c2f7998f2750f9e8a9ca4f02410aca3695079db0a40fbfcabc0c3bf14d2bfebbc7c30d0c859d1d7aef08403a533d01bb647ef41125489620b421b02e5c33de84d2cc7ddb73cf6e909f9f55d3a2dd1333c80a19234a6c192038d52b6ec9334cde93fc8da5a96653e986a195431b6f34380930420c7b629423ab8b3353609c95ee7b38efcb5074e2c0962a3e880dc07018a89d04acd2aed3313a727d240fd5947dd101eb42f320c670da2a1eed6b7172cd51a7af08d511510eca4ca1ef6e8f0dd7fb508cdd5723f527bdd711a197bd5f7a70146de1b5c735a18b137060bd8626149f7c4edf20fcaeea43fb7b46814f17a77d4785ba9562cfc0d6d33bee80e1037ce88d922f6f103dc6805b209018592c182e73f9c2ff0f4f856d5cecae9afb98638978cb3ef7c010903be1dd3b9de278e33d6095634bf458109e109286530ae3d010671bd12c0b9a41c20788a0df4cf0e8e9ff48460dbed4b66c3868e6545efbee2a3094d96345c9f139d3af3d804a3c588ebe03a5adeba35600f91ea5ec8da71ecb97b523bdff20e598fdf53735527ae33d72776569eae325a44a95ca9f103b7a4418cc4a7dc6a0e089151c7eb734167cdb64ae7d7f29491f91b24a1ed5f3c2412886d33498fa488db2dee223a857c6e8cef95f64169dd63b5d257abf2247ab64c790e5dc1b5fa54d6a6cbaf1b18562654823edd00d0e6d8452b813d42b810a728577d71d82b2eaab6e57ef8775f0c568c260a2dea085ffd70df2ae482abad323a5c65cf3c3d0426d242c985498f5a70fce291da1aa7b3ba3efbbbf74a909773862fedf2002d8799d45340f6f6b2a2729d802897d10e0b165e8e199d511c18c19d355dbe1abf322c8425302e525f4435f78fc0ee5e3529745b74cc0ff886c75e0c5577cd228150298bb942fba5cabafca87aa5aca89d1cf121063d590873e14c9068ac88866e495c4c2daaf410cb64fd644e07605e50894b6cb02be9a17b3b4dbb825c6560f4e8647f28bb41b057549246c95cdea3166d69dca67d80b0c8b0a4fd37a288c1795c067cc7978bf93cc34814e9dbe9d305b4e83710aef8234c0361c32103fdcb6d02c16284d30af4f6ed5cb3a2d589f7a58ebc6a9865e9dfe2d003ebde76b7401eef038510ae16c2415b64cf22731b504bc3fc8297131fb80e8f9be792a86fa274fe084658787e427fc8e267bbb714d3a40008c25d107c4a9d62c9684213f8a6835c24c1888c75ef5e2b79f791985faccd02152cdc3620dd71685e8bf7d2859f73b778c4d75afe6409512093a4fdf80d9eee995b8e876e69ce0817c188e8344dd3a07fd70548de9952fa6bfaf776471f66122849622c0e1132aa1f3327c5fbb8aa196dbaaa96602c9d9a1ac91a4beaf0ee38635065854761aa849bd5a69417b5baf58fa721d4f036e0a5d94ecf5cd9d76ae790484f26ab7dab0c81fae8f80b9062a62cfac45977f7d9f894082cfeaafaf0bb60f000bafb502414fd70e6303def81fc13fdc0aedbf05209e0f9cfda5b5e3c467f7b38aabcb8a5d90cc8ec4a045641b147c34022e5a600934245e530d1d0206e40b48ffb7db023eee16e39bf50e84eebf8e2b030ac8da2233f8915fe627348950dbbe0552327eb12426ac541bba52baebc29a7a9e194478d54c667b91f78a33548f4e75aa79c51e30ce6546896c67d30f71e24f27506de16fa7c3cf742f6c8fad24c80c06723f43b09ff14e3734fee0494a8dc99177d362d82bbae757a26bd2226fb94722f7533d785b49b133d11a3d91793dbd1fb9daee82cc86cc217217b9923ac0d7188ff003189a941c64c22b0ff0737f1c3b77f1f1745946d87a3b39d14328c2c288dd22f938c026217c6abbdb0b66a839c34213f4e911b8d66a8b142117b80be87c776ea7b461d16eb1d4f04e2ed250aad55b2e500bf15618e32b569ac873234372a583863e752b280102d3aa26ddafe9ea710f87a140b666ad2248a7b18a54d3b8918ee7c30fce6af89aa7a513fb2d1f1631d7b102704732782c8b01a873e90f3ea6a36ae89deb2a4668e44335353399ce21760b5cc1d75a51b8b61b2eaf0911c2d22df835de0c28da19da10b7b2c62a518dda2895ebe8bda1dff74ee38a47409629518d6cbe4f5cf5b021fef05a77be8234d8532199e7c90fd69dfd76186ce9f66b0ff0cb16be964a0e172b97dc699463ceb5a565121d54f4afb10531f1bb6d974a25c382b81a82833fcda0142c28532fef9d1c9bb0a6463f9a5c40d64b4218e2ffdef5ea7b56edadb313cfe0d0bb36a650e85908e25c74a6c7d4bcd7a53d21ad136151bf7c2d11dae12901f16242c935c609d8fb115c1555abe925a7d6f7963841a3d3db03e9f0d9ced63a828c5e5f3848f4bb83dbb893b2c9bbecb431de116a023b593789bc73f62155d20f4b05d03e7396cc29391cea37add871bb723c17f5d517c11c692ef288739bc7c0df5cf852e90bf4e50dc0fbd8e8682bce16aa85c72d36d4499b56e46467544ab4a9eaf93032eb47fa994582cf1f4e98d2d8551cd9980ea3971e6955294349d5c2caa437364fa20d58d21294cc22c551870bab932ac4b83bd2f493d479021d412046b99d1b75d0e5936b7fb6b28ab0f2009485965ee86462680b0cc67f1a4e4943d46be18f786095392b13fcfbd4478ae4fb931d34d8fc029913f55371ccfda0b45073e3ed0eedfeca1e3965e22c5fdef64ff84a86454d82d5d7da87a4989b68c5aa06b4bd30d69d7b9a8cf298aa5a00bc948e76608bdba4b80acd29a0d3c31068af846f723692254ec9149b62c9806971ea84e6d2bd8fea8578472f849d6da9182491410e12469774051e2ecd419d2baec36742a07a0d4a4c33306bf98e600f82c78da41a876776a43f22b7327ad05a9218e06838423c5a86a33ff1f0df731b3999b34f1b2fe0f96e77ee9a5f695f52f3d6d995f79916c61d0695de48fe1daf0df9a2c0acefe04e1be464f3b1776bfab236dd1559f55ac0190f0c232f667460eae0389526c5d0cbd382991e33985acfc543320b19b4017ce2a9e2a02a37c97b1af0a4a5b7cd8a4a63dd014adc6fb923fed742dc4cb708b6080cde6da6edfe7c65e0e73cbfa023649c309bce62ad72df7a1a4475f24ed485d507c2519458d348853d6c02be32f3a59fda08d51409d85af658c4b88a0fba9aec26cacfad4205b73ecdae8a8f3ef57a8dfb82023978986661bf4fd455fb14f006990539cd39eb6fcc7a37472b31585184ca18fe02ef516a8196564cd83062b6a363c057670023c001c4bede724203a8f6ab585657adb00ede67885ade6a2c368864371de0e392cae26b3ab0d05d7ca5029ace95f8a1402f010d5d59df349efbe5a414baf34b2c5b8d3dcfbdd256d728772923bf731b8920a9f072024af69e2c67c1051df492f24b8c82c828d1b90c2a17ea97bf7ccd310d3eb35674d5329560df5ed043aad3b65d5fae15d53751552f853a815fd277f95c6080d02aa49a7eb798b33f4ac556d6f0e52d15b1d043acbef6a0ea27c09f4279d5fc2e6b87800019ceb9d070452734dcc4d088a0b502855a1215031809d03572a15ab82f0173357c532efd83705df6aa676b5f0dce745d2970df99b704147233c7bc8c1eee1f0571bf1d598d1eedc40dc6299b17a57ceeff38019f63680d90ef1bdb3124c4b77db6b475ec0e192c33264588667068fa96cdc63faf02beb38314396a65aa67609c0caefe0c6fdc90e009b5592054b14b408b56d0836cda47266e8d8dfcaf032119c657cb4566bd762a2254a52130f8151fd955b5d58ddf0bab13491e663d55a3d36d6664c3048da19f9b2e940788b2674a510a75a13e9563c72a33b901b32721acb82202fa5fcda644f5cdf7ac5e9692387271bdee4447f4ab3d17dc8875b1ca07d0500a251c47b191c8cd861ec681ac21bbf6395d4691fbf89f997d63c8e901234752a5aa058fe7f50955fa7806d6963c3663dd774c3fa0cd1f72c6bb6a8db19d225987bc4a70181991fa9f9f0ec7db5a6640fb438df2a3b61beed80710ff89b26056907bbdeef7b41d99826ffb029b7d90e15f22feb6161a8ca1aa9ebd576ec3549b86b34771cd40dae8ee9c11f242635f43c956f561c506a5dc3e795ae6de37328063fe11661dd293f92a5f8775d8feb7399f59493fae076009b23eb28a4b4e2ef711dc240ba109504984194744bdbc2c8153dd4426573339051cf796ffd17decd582223bb8583aa34999b40327db8dacb9012a39b6fcb64944b9f7091a542f637e7c567567e2f2df825bd67110cbe0b2c7f3ca4bd026ef3f7e32ac62cc3ba0a0b39102ea7727ea935c9d0db3ff101d337b882b975e311ed8ccc656511cd49a8cc7b6a888015b33f92e1ed4ecec0dab4f617890c52f93acc60a2ac217bf2d1c694dcbc5885ec94239afd16375cf911d19070533bb3c37f52e2d937f2b557c3f2161d487441513de2db4cef39875aef075a6d9da4c63fa4693b17e54aa68b4355eaf006dc805b74c6dd396b151c796f83b06acd1ecd1696a80863a5916b1cfce8c22c02fe82eeb7c02c0d2c24f5f653e161a674cb2e301eb175d9c6b343c151623a6eebc00b4aa49debd90360e5930139b2dd9334774312266b9d4ec04d5a8d0e030f29671638fdfd7450b34fb153ceb0c620f8381a97376ec1c1600989a4871e59fbaa95db0ddf20ec5fd3d59773a3e4bcfb114d855ed3d098bf8fa97967cdf620a304d09d9b81ca200d1d5221dbbab24d5a7cfb0d140e7c5b0bd9ca67b2b7f0e953f117688ce3a111b866edc10cd34578ec83a40e7808d5fab47bfe6c196bb8b49afcb6bcf2359e25318f9cef7fee4db9fc002afc0226251c2ef3c46d881f8cbdcd0f7b946554c3fcf2d18b0038641035b0dc4ef0bd2dc30154d0fc6efe3a76b7eae325c5d5ca37550bd62dc099a46025e1671af92e0e0a49e3e7a15fedd3fafe01fa665f12bf09267a7ac0142fb53902796ab6d9b6920adede9d10b0de9a4d1398cc7032afd03e3f2e437ee9659a27c960f23a5c1cfd8d8eb9e34df6005407bf97c3fb8ddb403ec64d79cc54cfc7fe09be3a58313362b0c3278a97b879a90d364e38e8ac8f1447b1afa27605fff5e41fb9d8d4de3e794776149eae91b98a6ccb62363335f9f351f0a8606b00826c7de2fb0a9ac0257a667abad89593bc1a26a8dea4a3fbe629b6eb368fd6112ea1ef07795f9aa481fc83c5b5ddee6716cd059d963da8cb9fabc0937252be564f158e0fd6c7ab318ea10eb4dba58e211fd15571d93fb6cd1156b813eca10785f51f1bcd789d86ab534f4b63a9bbcc85834a0fcdec67971c0ded9213d1d78db5361b2542b499ee745661fbdf6e3f022c06bfd2f0edae3c55e2afaa3c606a43d7a1f4510aad67ffe11714f0bf8daabfce4c66758d0252b0d4f070558e4d518ecd8f4a6b0d216fd737518420bcf2b762c82c75641eea6e7f8c8cce5927214d9ce0dff1141b3a996a077931df7ee8526eda1c6c935cfb219c28656a4d0ac7d259c4b10d1b98efd4c30207bf2ffbcfc48f916f87f1565a999eb4c83323b0eae953bab70a47f339b02d2ea182953593c6755acb4ca8b6a97fcaa102555a4582d6b1896c5b8600dd79e72b617a127ba22cde656515d289eced89de5e2c101fa4c844a5138fa5dc7580d5c396c781e1567754a696cadbdba93d80851fdfdc04a60c405332890a120ceeef2856e0fe09fc3e736da5b5ee5cd044c1ea19db7c92e4c297d8aa0722055ac747428aa9ae1d4b25fcc2d6483ee406094ec38e34883937c8d0aee8fd02088eac1fdca9e1028f39ec299712e99348e587125a6bc95298219f854540b06c7d8426afaf47513fae1de532a283b916b34b3f39d876ad2dc4505c00b9b9d3f1c2aaa266929735a1a6ed07d675458392eba37b6fffa0b28df1c8563bbde388830227b217f0964d09e4e58ca796204f32228e079b6644785bfa0bff08752d050ea838a308c5a927889dcc5fd3510391539e314bb8511e1b3ca5548e94f689881b628b3f378b3e966c482bfbd8aa215ac1faca39ae91b89607e720687e09304b981337d36b6c17ff8fb07f7d5c362682bde137ffae86a4a41dbd7a5203da2895da04f1e6d03e3689792c6b529fe96a8b64190476625a37d86586dc6e1e8e48cb34b34cd9c5fb186605ffb730519dd570d2f2572b4d00ae44baaf6d92c8250fb1db427ad913ac1591a1ba0dd0db6faa773c4e09d9b814cf0d73c422f518883e1726802173054d02e93f00ebb81dbd498c656b96a560975a831af531c6dbd45e493a9e6353b40c60bc6dd12fb79f8fd5cac89177f1fee7ead9adbb4eec3ac75e5fc065cf76542d2c5994eb6f481f3997f5a9a397bdd49a07d4bdb00d9137f17de0f44ba9c9feea603819ccaa89f7ef6f39cca6df2c30c067798b0a5f6002a07784d9e05f0c2dad135ddb1acf785346fb1287c794fc69bdb9986f0023f6dfceeee503b5e774f9f068b24286130eb93270892e459c9b96eb50ccac6111ee7a9c0e41c1e722ad29f3bc345a7d40cb57128c1d0a7152bf9642980a092f0bb8908893247efca2300107130a3661f2905e749f94e57c245c769d3f50e24c4d08bce846737d5eadd033d1b8fff119c04459424072f0bc93c856eb0f3416332832c869698d8b4bc0e6792c6ad94ae432f2e377d9043e708b41b0697b2732e29cd6615a1134a0a1ab8d836e416cf902c57e969ada3dde802aedd86283ce64a480654e5ba15adad7130f00c300090d8cbcaec864127d51f25cdc4778c2d732a812c2dfa7a6e8bfbe0bdd766c95123e9f3642a3eff1a7f4ba6bb0376ff5d640b5a6bee57bafe8af890bdb63671025da49014706bd542756bf7ccc8e21eba9498a405c5d88ac1075a2400257af5cb3789f71ff9bcb1e4c71559f7575c65fd14fe87bccfb5df9914ac819edcc67c4e9f3d7465b2e6f8d01e83cbc16474897801e613677c16cdf7642a385a2b4fd97929d59a2f9f47e77d574d2f55cd4b7a79b978b1bfbffccd0047c4b777d96a10bec60d475fbced6d2910ad1beda854f0f1107b0ae8d6bfc8159835358f2473f19f0a60463555a12c8b99f0c9200160a07c7db419b013ff08f24ab770b96cdbe72ccecf5107056b668d66bf4f8974cbbeb1d8ed1cb67cee2b3056725a81f99c632243410b5924e3c2b84fcc952aa769534c4654dcf72324e86164143832e903cad55fa7b1d716d60d12cc9026d04c5e82329c0847bf7fcb25dc8cd36ccb8b25daa6089e2e1868201a8f8d6f89c225087bb737726f349898bee7ebe3265403c869115619402564bbd5d623e431dea251f28d620131b4c48220e30a0a7ed5453c0439ac720f2c4a4ea08727b6cb53be0f8b2b238425b7bac755b6926faa1376bfaf2005fbc3c7498e5cbd1a4342d9f2ef74045082311c307fd44e2413fbe8de914dc65f7ebf43ae1b0d3afb5e763c1edbd002b07aee52dd16f268c2c6b2dc912ed0a0e1208a5b24f877efd0d5b009a5e4ccf49f76ee0d59f074435479434781bae7b4846c373e554beb6b32b235d2f58255e0e1e0dc04f90eb11056057048a29613860644937a7f76578326adc991776836fcceb0265f6378d8fc43f5d29809ac0db69567e2bc50c0553b86ebc8bafef3b4db3bb7f16ce38124dc1b0bc974585744370d5b4843eeb67dbac98d9f4fb20e0d4f282c96fd7b871cdba5d4f29d3b14d706473b5c3db9acd3fa043a5e738153705264c16412b5f1e842f5ec1784bb0df9aac5bb5dd31755b17c3a252b400796e33db56e5d0bd6361319f4bc0f30330bd203008e28de43770f4b14d7dfc5596805aa4e5d00522f4255629bf08a3366927e74f317290920c31bacd5e02fbebc9f95e41555ad9a4ed3b58e369da2a6b1b64a417665eacf854bd5ac6c10c5eaa50ab253df84620362dce5d959caadc27b3a90572f6ed09c48ce4cb46b7c615372d7298744fb0db90bb883669bfca30e7e6089249d46a12dc6b0e19cfc461632b7896d17f28f07188e343ef99722526585fb658c5b6abedef3125eef779b82ab7f32d866811573a88e25ac1c0048e9dc0ffec44467bdc8bf98b4b0ad1aa76fdb33d83bc186b93a3a0dfb88599449545d53bfc47bec14e71e7a3a35bd9d0bcb8d5c9f3543d36956a133165a5cc9fad084fbcab750788072e7619df73c9ecddc12e626e073b99f8d94d04a7569d3ded33080bcceeb49d0de46383ca57fd3d3209afb7f6e0ef7d538236e0c6204599dfea438c0b6578b8d9ec28c67114637775de683a53f2b634c2d105721a0c70ac72ff85aed3efcb7ac9f4f4fdef6d74c6eedcfd540d6ec456f574c92460b031bdfefed3b2ba240a5e9c491a67fba17d7f6083661f048356052084483b210d726007838b76ec49376cb4fd1a85b1c50635ebb50a167b5a7135bf0dbc7a4ea4823d9a2e60441469bc8751cbbdabf078df29c7c0e39ac9964fe41a87d363a110d1fc39a6bd6f434803c4768fa0b7ff24f2278c573a6aedb4f2df2ce7c81cd822001da108855e1635a70ba2a76f7d169035bb34146f8763ba28e9e20e07904ff5e9cd11ff4a6ee097933325d91e5ec74c33ddd0c62093eeeba1fca9ef143726543733368bb899672afde8194a7970ed7507590a5965430630313e34e1c6543ab29845dc0629f33d0c7c4d67d398d516f3b57e96fefba3a89b894a2bd7729b66d33cb520203500ff6b66de96f1fd63f059a23aa0842240b6778c13b686faec2ddb798a1ccaed732f724d104a3d67af20819a65a338dc5f2dc101fa0a65f9ae1046b98ed9a278e7621a1e4ce30dea38b9a21bd8cd88ab0e08bea71694889fced8a58c171c983d47e6c2256e74f50a3645bd5cef958a5bf0e004bb1d83a17ed92d07a8f69a85ad160d38a0098e7345cf6883f2b562b50fa6d407c75e52ba603f1890fd04f5ba586cef1641fe6ef2e886acabcc5093fc14308321b31d6f582db0732e70c6dd21284ab3945cdfee4162286a1f1305587792f1c8bad6acf3a0723bff66cd1c28614bc600c7114e59162fa35056a2ffa828a544d4b855c8cfed2de3c1387c63cd4fa7229ac75e82535ad279e23c307d245270c0b564591644db86dae046d5a34866ecdb24936679cf866ab74bed6085f3d82f923adb414b2b74a80c738a0bf4cb750b958b6cf46bd649986959e56ad5fec96a91c01c1716b7745e588725ab95afa94d1e937086ad2721d222bfafe6c2229417fc5c32ca90283b0257e0ffbd8e58a76b1210f59750522a3274521db2fa0b763171a02a7517383601afc553e924156f3bb1dde17a904b433766f9f588cc35db40c859b4b38fb62e0376ebf7ffdeff3afba03c496872d11ccd39387da8c85bbfba6627919b16d70dc480fc689579f3e8b9cfd0b7ddfe3ef94f73d5c4245ef4991555d96e83b091f9cbcb4c1d564a562a18c673f9e47791e6753ccff61eb0e1b985651b4b26148ad60e26f7a3a2ac7cabcd6a86eb6f655f4936dd50c1f5eacb45d38fcbe88b1a28dd398fa358c6703104e12153395f81c8b16cbaa9e3a78e3c407f563e9fc292bb898e8d0164e7902c8604a40e326d39ba793ebff8355db8d946a7b44648c62fc48a4280ed0fbff715d6d7d3367dd01c15569648fefb5c83084d42e82ff55d42f03026a0421edc9044d6547380aa05064d4989e7a53946d380dc58c00afc5356a8677eb87cd89f22cc356935c78a8645e11698a4fba115cc6b00040d4b5e0de3bbaa1a15e07f827c42f8abad5177976a572fa135539da54eea00c0fa1a9ec515a9220dea7c72660b06a7c233d8ff32be412670a904074d8a1a4641a985c90741bd903bfe4e2378104818ceacc6024c05c2ffb3bc520e215c9d63515ca1dcf9338e4eb6b82a1ed47a48e31ebb305e8f6ee0e83bb69dd39bac3f59bfe26dc52eacf2400d7fdc3b9337290d9f737f48868e5a89a818f1a57452dd858b782d4e8e7d23f92a8b2acf3aeb411297513cc9a6472e7f86f2c0f381a72e0118047185812b47572b07960e316b3a87b2fecd2669a454cd0c0634300123172ac447ae4528d1989f1265e0f59fb24c373f52b5391f85b4dd1f83f41b996ec323d9995b10fda4c2d62b910eec4b1f4dde5df0348f531bf1da0ff4c6e65ce7be6e4ddb5e912e037d196bc945541df0bd67eee65536011cb61fe8c6accf698b408934b39b98e944b06969305bf68cbf29f0d62695946a5b02e5f9b3e3c3dbcf2768da850545632a32564b2a7d3c125a83ce4e9583be7c3492582e157bcbb5e2778059a60352301ded2d4fbb4efb78dfebfa6f9ea90028315e42cf64ef3ad28d0d898db96726fc0953b772b68ac4d276c706ca797929e01d92e8cfe6b3b87da5581d40152c6afe291f3665d15167797aef7c1a309df55350fe9ef399e6f3ebc6357fc53466bdc9f70948e94b86cbb7083942f336efc848b5fdbd2574a34f4813d72cb17438c1bfd9261d621961dfe3f407640d224e750b15fc6411b9e4696e1ccbb8b70f72d3d07183d0c7f284971e2e8e7864a14a6ec46ebae382f21e0389828c5486299e791040e7d81723a897020d90be0bf9f7bc69f553bc59728bd4f2c4488464450993ee6a66e2986b5f011b46ba906c50c3292bceb3ff32732a37636dea060d5926dd0e20e3f708b94c772e517a88571468ae4c84bbd53a594844ae59fc7f7dca6bdedf8b68af44680527992cc2f6cf8d9704f6bd9ce7170088ce97f9ac367725d88e8eab1f58e0705f279e54b2fbc62ca3028bbdb4bd1c24ad7c83f2e57095ec2eae3ba7632367065491a6aaa888917ce540e11a372020373fff7ff00862b53c0d7ae49c007cba94e044ab665512e128717039a38ea21b3cf9d6acd12968b6e06a89f0ed411eeb6691c0b674b77cba0db26cc7eac1ddd92eac0601be80a298d8cc09b24615f2747042b64a3a3ee84110c1d97d743dfe8b836bbfa471e195a33cad11999332d1688a6a818773728c0dae421fb5d7d208a188604f94ebbeb6d6a970c42d86e90ca71d61c09b1b0e63283547bde97e1d48b9d215234fb4f9193cb4f9ed1e428a06673d1e07b19067114246d8b2076ea04a0c27b4c2ec32076f90dccbc79b7ae645cf8eb0191f8a416a188da5a3723eff9270ae4276edcda1c98321ff7e423f35f7c4a29f877640b8002f3f9a08a74188e488e226e0ef7b89f55875c83340f2c1dce5932e7e38871cc5fbd5fe6c1a355eaf8bd99d6f966af5750a15b1ee48013c2476d1f83218a625aa365dd562e64520ee0353f5ae00446cc0a0f3334dc530c5706ed4fdd2c3aaf03427aebc5a2c5eb659ff2b0053b2afe1d98f2aaf3532aa53d170b5e7b1f2f25b19203cb8d63698dc2bdf827b04d8531a86be8c97fb55b001efc441a7ab9635bad7f7c7eace9eacbaa998a7f92b60a64e4e7c375f3412e9724f7a9b8c55e0af9b9019f8e1094b2d7c1777bd46b74398f657a8b101db4ae2f82ab9d0a70c0b6e4e69bb66803abcc8204ea1290d48b56fbff747d09f2e345e2eb9e00b5461f19d591c5bd775a3195c9e6df5840b0c88df0245bffbcac5df7cfa9d5d1b234f242c2e78e4765cd0bd07aed3022badef637c35043bf6c75854927e7e16625d9aae9fa719fe54d25f1ea8662f23f739a907a5af82f318ccf5abdff348ccc580b045eef7d8d90831c6cc0ababea68abbeb0d9eab08bd2b9cca96ebc83667bb412cb2ad83032496e4289cb436e2e1c724899069242a25dce83348ccf1d9db2cdf347d0913047d007234ca069a08e337e15addce8e3cd2739b09577389f1d87165c0849421be9f1656316c8dc5b6ea16f3d659b9b6db0627006ee82a68a8050e2a40c1d3c6782aa0654535d61ae2827e67dc98e6f60221c62cf31b71a86d1f5c3ce5140b35f54a4c079c5eee9038cf2d21c2aaf73a4c0753d2bb09574e20c939686d3ec1ab34f37aeb2218b7e50a6af8b3378a17b57896663441f6b0a48c145a513edfb6bb3017ada004afd9c7dfeba9ba44ee42ee9c31e6baf4201108c325c8b145f32bab36e4f34db3b4f3c73b25f33297cec63840d76bf37000bdac45b6ee76462680bb7704571aff4fc19b2d2fdaa5375116afea886632f5037b33477d1f293578f0351f74e5c775dea9fafddc3b881d2e375db6504b4b1b06db213dbd2365016fda24f6cb780a3916ffbbcb230dfd5c3b20b97e5c213344178d177724f658581f97c047200807d4261d67cad6206f0078541261ff45a56142b0bf4aa447bc3cbe89ab8b12bf358e743209ac7cfbfda95e8549eb026103f5da16477fe700b66107467459fdcbc14b32ef45396cc315cf9a05bbaf386e3e0e49f6a4bd4c49a23320076d7f561aac992473ea9b82f12ab04474664a33b317a3990b54b9de35f7b78d30b47490c831556529aadd9c44642c3d0ff2d3f80f08885e60dfb6d4b198788b504c959c37f5429bb8d085f4f26e108f9a73574e05e14075828bb83d7c2b2e21c4ca8d20ae83422a7fca00675c587ffc52325bbafe0bd17dc6744c553fae5713691b60c966943a647346641310679e622dce2f3fabed78754f1ac63795e0abef3dda2849d68b1b8985dda74a539bfde5e2cd6f412817cc7b4b24b00b0f653265b7ab248e41e2280734afbb18cebe5b7953588992d82553985cd1d0ccfe2c05e5a402f26063dc9575754c128f54af031a3388db1e1cc1d79eef8ff290f67adb59ac8219b1597e85be02b76b766d2012c56b013a403ebed0eb3d330aac94552ade942ebb9097a5b33ab5a0a6515f2e86203c18fb547cb1313caaef66e46b8dbcaf3bdbca78a8e9700a55c805c70c13e0878a581ffc46d33eb4e76f94eb1150d74a7f4ba5e2091db5804ce8a4dd8738211e074650a46d1ff07de6e72dbdc7c938e8bf54c040908649099c3e0ef5b14ea9a1f619a78b0c6ec960d05bbb2238d8b4613dadac6e5cd22c82b0f832f4eaaa9b5e4cabe59a44488fbbdd4157bee86d71ddcc00774071898ae65ced86ebc89ed778fedf6d6fd03965e9243d3f3388b1051154b42cb504349ea4fcbde9d8c2ba64bd64c4ec53df69f3b5bfcff04c27116446733019a6d8bd6fe60f8edd56b70183e4d6cb9b418b00742c023e3f76618ac60590498ccad74754ef065528213cd26ccdcb1ec3030462f054b3601e4229c044924d323481bcb1736f89acd351353bdbf05c6ec0c115fe989844a0d7f36ea2e6c97d66334abca5bc16a8f3268c729f4b13aff3e41851c18d1d8bd26fbe037074d60bf625695d447cb29ba1514b1ce7d82c2006489d0a0118b5fffb8c7417476247db17e84fdf8b6571897dd5a1b193264195e4a4abe49a80c3e05680780ee56077fd223df95a7bb9dabf8a46dfa20e65b13a200dee9ee7391d7fdec8c18d1e658990cf754d8a0cfdda6da344bcc0027b7998ba819e721dbf5d2fb1ae37c8c454b966e44fcca99427149bcff098e0885c68ca275888268b32f2020d615e7f91761a9c4fe00022a59b4d18e546b4584578b820e147df308f2da4ae3304cca3b620126a6fa8b3f56cf467ccdb967f3532cee1c4d9979c4ef88509c1281c63d20d4a7d2fe69f93d45d922826768770579c4fa1f3fb8e2b065066644c92d51aa5490028f06052db9d3392ae897c8ba7b3259447f49d60cf437341fa12931a50088421a73fc4e7b6e5a9e580af1c4d138f14260e935c80ee1fd034704ef6791f692d73016df870d336bc1738b9fd99da202c3bcc9b09563d56009ad21718d67b35d679495d2bb951c0d6f78e3cd627e39d142f81db68bd3ca64dc31d44c85bfd8590e1e0b5635835a4335391421e2cdd6c7f45dea4b1319855f67ddc361adadaa87ebe8c2d341a0666d61d4f2d2159c979e1e8ff7e59190ed2f78318f9a66c0615fcc33078430df6090b98fadca9a846b75e82f86aa566e6ab02285ad18e95f7d8273baed16a99d652a9bb71d5436811ffd01b0b49526627a438d6cf01521952ee4321d3a7eec70bfbea72dfcd8bdf2dc6237813cfbc5df2dc7cf210be882408bce75a39103b38401942add1a2f7f9890483e933a106bf4e175b30fa9cd0bb357e023e94cad08d384cfb91ecbdbd33d4f2cc99dc1f6bfb5ac925188a09cbadd09c9679b519256f3c5c736f1564e5332c0131b92899b9f6d93d26e53dfbeaaedb0c32dd085d33c8e9f3ac6b7964ec294fbb0d9e176d85104cf9d8698cc5461a4a5fe405b36d8df489feeb748c183c9783e545456d093b8bc058019770ba6ea18055fef6744206b2efd0b0334c0b19ee16e8cd5232eeefd8961d4459bae580e7c47c3f9971ec78afb0e1bfdf28613ab0b5f71058cb176e6d57cf2c5f13a72a05d7e694e58fb0d86d720dff7e4b8e0a402c8f928ba8cfa4899c629bdc08ceb6b63c408b4b6ecc22a31658bdb2cd07e6ec1e776b621b526a17e02b080948f0928548ac6110cae8fe82fcdedf87f6468ca7efc0d53580ebac18c3380076aba92d34338368c51b9d81a4000e4af2282e7580e27fea6a96a2d2981c451efe4b70ce9575dcc37eb76c8b21579f32f5ff8abb862c05c2dc945ea423c5a75cf2e96fb06a1d50abbe4fe8387c77d40ad71e37f9e7707c20101f3d66d81f0e0c07a8dee458e880512f2a17ba9fc6573ee3deecff49c765796a28e35c708eb9013744aa672a2c02b1fe8b092a029b662f5828dc4375b1f68e7b73b105b23cff35cb14f745d916dcebb12fe1affa262a7b46cd943eecea0094431150054fe2a7f2c787b60c8477cadd7c2e28db150bd3c35398cfa45d8dbdd3b91834a654df993f088fe69eb609b57feceb873576e5fb5b7e435e6d3f4a112648082a9d8ed4b6fa0b000ca644119a6f1dcd9f76e4c878e4e8729ef1b9e99a9888623e96d7aa0d2e64a092c864ffaade4ec46fbc4d74c9356cf3bd11939e24c868f18cc822297c61da3d4339558d98407f03676838aea3fe9cb7f42c82055211f79a4d934893b79743612941b57f1058b946c0c04c71324d396b9edeaa7d6b85acafe203f86805204e02e7bcafbf252afc4e351e6ee98bf431ae2edfab94620d36c0c3134cc694471b93a410bca5abd48f9eb18a267ab4be5390a65345e1ad03135cfdfa577805cb02f40b2ef05973079ba1989fab62902da2c7172bc96ae15a10d2b39d16c47614843dfbdcb5f16d3cbe9762a4996511b6968fb09a6c75c3fbdc328c40d922ae35e6830b6037dcd04e142961f448202d4482d1e71887af6fe03a90e439efefe22d30b6aa7314cbbe5992afd4ae9f07abcdeefe9e8bd9ee3dc32e4e7a3ab7ec6fbb72ec831e755e5b5e8fd74abd9c461265cf643072cb0b38ed7617a8a91a36639a76a92554a6e027d0ac1f3af698e09a0cb7cbda2f2a6ee1265460460e10c390bd85c03c25e821e24f9c0a7d32fa7baacb3f593c8e63498da74ef335368199b71f7c783d9b43cbdc4762fef8e76e34c8600567e5be30c0e6cb890f766c62a76a9159cab78e6de076581caf23ff9a35c29c0300251f6ccae79dbc49a6981dc644e552ed9829514ceed9008ad33fe3e909cc1271bd766edda7ecb0a99174635515055cd0f735426cafa8c2e6129b52d4c400b6ced2c233eb6fcd47076b2f1d11ce778093f67ba9514a754451175c549f34114cdd658e0813bd4e31ff5e18b37b92454c8b05c49ce37e95606e075019ff59674b3a9f2032d13794269b28b3e0ebb922b9daa9a963bbc98e5f779458ece9f5f6d148c66b43d18516adec19b809f8f4320c6f56983485d658f2abed1bb53f53cdf9439ff9feb4b076c46238d3c018bbab6688f5c5a1b41d81060e6dbbb6ddcff9d2856fa9f1be65d3d211aa47dbd753c294ce2a8f4ec3d4e87a2a87f7517d649182ea68f4df458900c499f1ed6f640bb84d4ef177c803bf595f108d170ef1957f4b63ebfcb147fc55c31911af14f59da3b53e5a337ce02edbdd9edb802c89cb6184b07b5284afa73d069994d2991392887eae28342ce48c11480d09b0eb9144cd3b11408be1e570b2f81d3ffc12cc365a5151926f1b4d05cc296d40e5d8c134b1f10019e8c5a569acb319fa46c78948a189dced6b09af428594edfca42e088ef1cb976560e29e2dae4525a9d94cc123c798eba6d24a645d7067833655d2037620db2e0ad2719a27d25f73d1e048524dab85953ed5c0169469e47e924f9651c1e40a724aad46d9ce66cab88ecb252b4506c9732261c61575fdf35998bbd1029bf4640a03605cf7ea5b999853c4f1df8095d60f42bbce64baab211a460348a0b1f9abdce8d719be7c4b27a2591711035318b7a528ee45c592a7d3ee55dd088414e2f22284e54fec53b4ab62585f7fdbcb1c53c2a7a4c88f378b4448d9894e8ed446455736eeb2f91b3295e5c95915e6e61ce56be7999d5c3c117a7846c3cc470f3f74a72522f2e94503c32e9a3a502fada61a7bbc1d446c4774d4cda9c7060915be992ac4ea8c7e5035a7e00a0a5649dad73b453796a9c34fd1c8bf6c181a62a1f5772feb87585b6decafa767b7bb4959ab5cbfbf8cbd270783d55aed11d8023639f0cd572ede0391ac2384e026f4b2ab5cc84909d1ce89e2562bb5a6fd927db62b0a8ecdf321b7c988d2a05f26a0955ba524ea54b6423b151ae06439676efa598c9b2f8d30e0ae565917103f277ed9149a71f1816ab3a78d41bb58724ca16fe73e81cacae9fe563e68d056bdedbbe5bb024871efa919821ed7c55b8a7e18b5bd20afd88035547ea716b014c5435b2e4f35d81097ca6cac5ea7bcd0e930aab85a1a63c8986a0b550b6e202dd825000c677ccc700e114f295b54a6bd3ec0e7e816477cf9ad6a653e698071191ef17e1e69f0c90ca19d30ba2836f6eaf3d04b56446f3967fb6e9af316634d900973c2fa14abc56910243d4bd600cea02906ecfb891ab4c8cec7d681aee055e0fefde45b5e1e150479c45794f490691d74d575c0d9758cb7b1cf25063d5e8cc871bf11387974e11f90601e17bad80bca2cf81e09ad6ab4bdfc93b6837d9f734d923b78e49335bd2764d78cb1c220491db2f00e34a4347b8531a0840a64d55bfe27035a3f618a66a25c16ef5127caf6370f3e56e7d99c4fa4758e91cb70cbb46bc4393f5c54ee6f643bc42818caad29ead04baf89e873f9972f60e89c5de49aacdc908843eaf9a5cb442383035a5b80c9851d8d2d499764b830c2402df948550b7c8e063a3f6f684025cdfa7484633e285f22a6592f3861c5566f2ef52eb4a981c11058540831de060f69dd4d00362b1d02ebbfe617511ebe344599f9d4d133f9e382fd9d67e323167555369f5566417db53ffd7cf8a6008790ee5512b2bc500f7b6ae09ba35dc8fa23a356d8722ff6879decca6f31c123b14fc1f74e1134eed8105bc1704d87db2b1f152ece43dac14279b2746c12c6e21209f31216519575c7998a18d6b1503145a580f572096f7591ff43582edec23979f72da08e0f0a3947846f56daf302f4a02cca875e4e29ad65421efea60dd53927d39475263952ec6c0e2a3fb34e8dd8c86a7f36114ee34cc63bbe56b1641745f5e7c750d662a451d73111d37660204748942b914e95e6c992cffd4de8474969aa6180ab9b54240ed290a9310b431990c6f4f81db658cef9455a31167daa2c9dda52626e266b88578a56b1a530782440bc8a653baebf58ea16997c3dfc0697a2037400a221a1b123780940d2ec6386f15535745daa12fe419e08b37d12912ea76ecf499b82684a6812157d68e0ae1fd8e5232fda04c75e5e7c265a92bf42ca4d011ba6e24f27513b81579c8d63692e4b3a7165415cdcc191b8d99238cc2b47cb971a9847d155cebb431b9d23d7ea26e249832917f9498dbced03ffbd604ac58c0fcc81246e347d9dfecc29b79c47b601e410be0e2ab6db6935da57d00cc426d0784256857804749dbf845f88c01019680600767c77ea5ad820bc973df3db7a7bee3470f90c0202950f46f7733c8b18f592f1b5442d39aae7b56654216f4b1e0efc10b70189456c579ddc968ec07534be386d743c67ab67fa25355bef2b52828890794b566dba84cf27b0dddbeb928ec7b2b578bdbf259dfeb7491c2336ea8c1d24ef199107ae1ccaca9f14b7ed16daed44a1c06163a46281cd02ba06931f755fa1f26e780fa18c6c4531224cbf92df2b1aa6421581a48f588ef46d881bca8932ec622a84b5b4502e98405391c2e719c884307e49129d93e3842612834d6cc246aed8f9c13e651d847c44410d7f73cf06c2e15702af62c003793522ba29f2cd0307e614a24d6d770834b558d4c385dad214f484ac547e4667087fe241497129cc155b4457a0f5d7f7eadf5d764b909744672eae7b74a9870842ae679671ac27c993a91ab0b1ad8e2dc900a73200f212e3ae69819a12e62695797e53aa1b6c4fa3aab54da48d143580cc9d243df155dd0d34021afaaec57ff4661d75722ea144121fcc79f13eef348ef370ad492c7fe7882cb9e97edc8f1c0b8d586f327fc1abe2bad88b2da8491cc3ca8f1692bea7d98f8e1b28e56c7136ca04691b4f735ed18249afd710754e1488f1ddc0424346e92c43dd75adae571ede236416dd0d724b549caecb13cddd086fd80564a04699f2ceffe6caedf8a09f81ea70b74512d28517a35019ff87aa02e6db2522919d53d5b48a8cdd008f7449d29ad9e8545276af612caab809e6f7ea3a13ccb9f8ba64974d77d2affabcdaedead8a015d2273b894fae78c6a2d432c38620eb5ee9544ab6a11c65a3fff0fbc9e8361dee3c6e69627efa0e161c026e4c01aa40b01d0ad6b0e8029a42940d41d5b73fde8010175a33083031f0ac79f3ea6d094f036dafc3538c8c39aa626a23a0b0b6278f30ef76db445e4576f200d6a41b637d37480c8f2b78c52fa64215fb2b4788ae47caaf2c0601ff7abf01c4e3b1595a41e6483bfb1297af94b6edc47a8bd67b0547b5c1aeb088859b84264d36eccfa171540cbca072e60ddbb7e49d09232c41e0aa065329bd962393fe16f72cb719fe1ffec54886b7dc0995044a35d1d0e3b75ab952d0c72c13b1d3962f1acc6fd0b78ac253a9bf1d47f3ae05e0a5bcd686b0ac6ba919f522c46d8959e6baee4c64458b9d35569bb3d8c572d96dd48b5abc6bbecbb1c00d2c2015fe6c36ec100d79aea93583681fa6096113e5e4b0c1665379341752f849db3bcc7506f8e1c34352e3e45974fe4f108c074bc4b16e50afab4bef125ea81253d93438dab5e367e65ac5df06a0586ddab1360316bc4cd1bf170d09c8a3aa1ae64885f9c1bf479c866882952a434bbe418a1eed711af897ce2adf9ec297b768430a2ee21628d8e03f6aa8dde3a10cdf1a46b22fcf5dd570c1be2b75f2880b623630da72c5ca1c2bbd32ad60003f3b436ac2cf530800b637b5f36ee57fded4dc48644f3f5d4361c5ab9045136d8956bdfb8437a4d403c539e3ea3920086710c97972c91a568c3bc2cd50c8b68bf7051972e23b68a9eb07d2a52e1312e7756d19f014eb508f985073a47fe04c0f3a47af5f231c12efbf3b7af64d937310f76323eac849c3fd2e06d0e7b42b30282a6d3cdd9de5d6fb115e41b2a423d2f193f1778294fc485b98a97160d395131815e6e573d6522b17867819a1d3971f881f11e3bdef04cea86a660ecd359ba4a29246ab296a91161085f346e3432da65cc5fd264c10200cacff7cf53148e6df2d056b55d5d2fe6c58010b6dedfa4519e38958671bb7566518a413ed6c6cc2b64e6379518f6412098cd719f1db62d09e2b82c0a13bce849953840f13453ab458ceddd91516527af0339f18d0d20613a231c6f45caa0ac91324ee9728226ec80f0c1364ed466268845a23e71f9d9ba300591ce4c4e7e400577d35e9a751721c5855f87ca5909f272ffd77b5554000d3800a23915853e9f2c6ef7145a44293ec5a6fa5d5c4b0d02d9cd3e274ddf933b23a3ecc1513c195d41f7ecc7be8651867117295235abaacfcc375b1af2c3b399872ea80d1dc8d1f86f44e98f8ca8bf55b773cd71023ba4e3f6535284f66a2c5cdcc4b455eda284b861e3268723754384d18e6afe151d8fde5292b393d6b0428d7b36554484987da0288e885583caf77cb98e71b1d9ae62f856d781f6c3d335996c8e554b5358a147febeaad64231e9622b3a1f57d483c0c8d5dc02505f5ebf32349487f1c4841527a97da68cc760fca5b911011d477f6c7c2792655f0ec685bbaa149f3c346d4569571c4c836691c58a4a9511895d330ec3cc3dd0c9c7513b16c0254480a3b290d6fac755dae9896e9e1708815167b9bf1289e711ad683ca676831cc23472baaff2039a137312eea11634f08c4d16511e71ca412363ce19be78f637151572548e31dcce72217d2d84e934ec016d01dcff23081ffcebf0792cd1e8613b3e0572792b5f9cde5420dcd4eb255b09dba3538ef8a84593199f9a5ade46966f55eb6155c0cf76ac8eb4db0e8d41a564cc79a5e51746a8a57dcca114aa3581247d6ef7634d66fba621fdc5891ad71e3d91273dd3eb89cb673fd2ec5d60502af9c32b92f47c104c89749b3bc07e47e8b06654e593c2ea647b501412a5bbb31d57ed99aac40081220babbc46407046f01da4b8bae9f64d7aca9264491a625e9ba31bb3cc2e9599f865ce960ea3ed558df1b8456ec4188735e519e7dd43bfcb3e8835d09e47b6793a18e1c3528ef96b4451e323b444c78eeccbeedcc6fed38afc85e8b934ec85bd73ca34b3f7fe927a75422e781a1f3736abc43707d367269fa6bf7349667c62b9c796a61fe1f6e98f371bc5e2d1ded48bca273dfdae0de862f49d793c9b543c23f3b3d2bbf3fb2a14a4a03c9aea67ff918c5564cbca219bcb6485ac78c057e606db61006743cefd93b73165242a244c8aa49a8980b18d596c366d940b7320c1c0d955b5dc89137416756e12c2f9c5f065c8f8fbf38386d33f86db4b8bb6f7906256e3210e6471e4d44bf8a27cf88c75c5123fe4c94458f6d94fdf92adb6066b316dd772f6e36dfd5885e996848962967ad32d0b84726b955036482651096c050160ef95b24919f7dcbc95b97d6254c8d1a450d7863ec56a08ae2853c685da066c4b923e4b9b8af2041242c9352630bbefdcdfdb73ca892d953b032e23afe1d13dab5da8f683f8d0bb0d1bb090902fe675233e8e63d549e25f270f0a5b31c3372a9f5bf0b10bd685c7f16a2c75c867d1fa042f6490bbe98cf2fb0a23cf7870b0fca6088a6b761e3029ee4d761f22d3742a4d1987313f2a2f521ffeb700d6ba1e118bd6155adb9c95eb569b9fd604145d350aa1902e1cb089ae18933c92a0212512d0de36bdd86446491753cf5e7344c9a5a61d41bc5803fdae9689c0cf855b34519af21c8bdc57b56d266e55cc0b9df6c717760faa2eda311552d9cb00fac5f8ba8122a2f736effc3a2c95878d9b89dfb7db81722ec112f5e432586eea862906196f257481a619b6764adf8bb451a732b8cabab229148901991ffc0911c22dc6f2ebab699265c2fa0f2a101a24a127a3029de9e4ed14fc488a6b502cec963c1ff21d6280d6fb6885ccf3512cc905b03cce89fdf2a8f785c65349f022d5edcba486132f05544879db3e8713122aa5eb6b08731e61a0199cc752ef0c116fee1bb438215f7440d2755ec31b0f176692b6103afaa5b9c95fb8050860bc07cfdc6c4787b74f460c0c9f2b2c5b42f1699ce3fe05989b1e7e42d18e5663e46d8db9e8fa22418445d674f657ba7625922a7cd5a0eab386f23c05698a94e027564f748c1044799c482facda9801028d5da6493e1858a446e548d98ab803725f5f44c1e362e1747e1f8b1c01a19031becfa34ac27bed6ad29479a54689be0c94e64ccf5ebf698a82e37dc050836a5ba3936d7ebfad705935247010fd5d549ad65f4b0af4c44067dd51efa0040ec97c38c2ccf6d69b041490d70ca2e46121219f91a549dd1c953439affbc2d501e7cafef74c783dac6e77062f0b2fc214b1c5b3263ea34aeef5d182ed4e290a03456f5a8b762915634215773549ac66c03076b44cfdf6e14c188713b6a71e5b7efa2445da8f798f83b5839e466f87b4262cca86d5e535acbb2010c822d2f3f7b7a60b885739d558105fcfb450cd80aa4e72c2b77615ebc19152f93f52d834816e77a44f5b5b507a7b59c9dd7f9bec05a530e840e4b8a1b1d2e5cc61923b22d231c1a5f1271d9bde5521c8ae56e1a9745ae8fda9bd1a134391e47ac5147d3204cd39e590deace23cee58bcb468c7a5684af6f77e76eca77eaaead1e817fb2965f3252d067ba55834de5a371188f9cc9c68393f33d9b697aa94e62524de2a82861c1707267a6ade1ee13dc4b8646c8bfbd8b704d99c5420cf3f5f13eec992d2227ac08f7a9015a7499324f3628701d1d0052c13b2c8524fe8c07da362b5be81c457fcfadd9801c4ed9b9711a89bd9cf9d45cc7d3dbb3229cd845def70a852377e551c58faf40ab0e760b0ca813824674abe4edcde2b6b64a3d31fab3a5f0f3494d0d790cf990eb627050466ea083a0be87f7294b5973d8deef4580165906ec3cf2b6104539540ab5c24fc6f6d49f180e1342ceb6753a8a67e3824414503201835c30db2feb4856006dfba21b3120f8f5e7e35bab4b425a581bf8cdb0387b72ce6d6c175b6b1d72442c72ad0ac1e164968e0379e61bdc786af3a5b3210aa3d088a055120a9501da0f59989f4f60e092bef5a21fce07907ab29a0ec100190c4990a0a37de89aac5def7238b42354219819ca3e44a32a08a76d1586f093291b721c05a560573bea00aedf14c5d8f47f234f9a816041c03d7afb8984de51196c5ede14b499298bd7e222d081d74858e5dd29fbed9a96429ab3a92df16f0854e2d67688ec5f360c63cea689f2da9a90cd33e51b45d546b3bf5a1ab61fc0f08be934c252efeea4f452eab58393872497b93528076314b431dc204eb2038e304329083528cec58fc0ded8358f41b5c3a146875aa021a25ac776df34492811b4452dc69108b94403c1438498e63cabe211ec299639d484ab2b346f657bae7b9e2bf96ecd51ae7a1321a122c58c69a1e647be3da9002805e2773dce2337f011f7aced9a8a1f9b439d00497b3ddfde4a73541c7ba5e8605c5d53e00481717e3deb38e460af7e62babd9b5102a46c74f3b74552775d2678aab2c522a618ccf0abbe343bcc097b1083782161391014c2f0b24abdaca6c0b1524bbb14fc02b85680592c067e7ee779451a0ab9c6a87e4815e355be613e3d543843e16fffccdf5a8b28c737e2dd4802a307717e69be6b6a71a1a46a162c42be3690f43f64852b41781251d4509d28ecbca08452c2017339fcb2164423ab8fd4b1b83494ba42b316e12e5e55f01282e2387cb48999354dc4bfe0a0f05e6034af0fc9f0f43392c6ee442e8b71f1731cca2ac0500b70a1e805dc8f46b933bc61d420b28084c061a8dc3617e9f932ce7e5140aa9643635805f5e34b311322fc2b099bdf86d69e0bee4d2a516fb613a7f8fc02dafb8ff7bae14606d768d6a6b5358dd0a092fa364b336a8e4a1413071afcdf08cd170a9cc843a9566b10ee50102c813de82ec96ddd44d9017f39d615fa20722fca465cbfb1c88dd7589ca4dd6ab7635c61faab152786115e20b3018ba0d7520c10992e459ad8022e14cb9cd12a8827ebc5e36ce6561655cea4df60069645d76ccb222dd885cebe78a6fef11791af86ac29f37383fce9bbffe0a482ac3432d07701ddb193bfdd523cc79282ae25f5d75748baaf4bfa8a1501f2653de5898c9e7fd0a1402eac7f82ff385fb115196bdb7bf18303f1b02618121b145bfa6931f62c8c58bfa1cf86998fd70a629b094dd96bc12e30985065174244417740e46c797d54b27d9f2e6c3d2657545af6e6ff7ecafd74e0512b759cede9439e117d5f04033980a3beaa83eef1dff0b24e9c7ba492e0343fdbe459261ed06852989eeccc8709e9ec362108599eaa25aadaea473a1f34ad3aa83b59ae26f903b48f6cf9f05ff52d7808d89febd24b2c9996f013c72851dc4f8e8d5a807951934dc83c92e2ea4ea8e08fe0e397159c9b03704f3ba1a291876838bec35f8e111441978f6835c5839ad16fe595bd3c53dab6a32bd904abd8a1f42c947328947dd1dfaf46b41c71ca634c44571246a1f0759f93dfc855572c640a92b9ed38bfb55302760c20f1e8318394e7bb6eefe571302b7c70c9ce2602467f39bd3684005ce2d9547048be2b3c11af4d2b4fb1889ff4ea07c1d1565146f7888bd11ca01d4ab9790e84a303d975fb9ab5c7003ca01055d6992bf377cec084ce240e2146a8fa55ef3c0a453f7a041e2900d01aa6ab6cee0af36fe7a1a1dc6dce4efe8b28276d31852d983d2ca8f1ba2e67adcef7332bfbca91a956c76f768418b82de0833d704c86b2385fc8356772071e44bc7f82eb95c2a351e4666f452920fbe478275ebf541af85cc04def0ce119bb86cf4dd7608bdf862a52c70515dc1ade52b74a6c05395c04f3090b4e84673016de8af1812563e2d93b36fe518b5bd821393dd2247c2b8a9cb5e431233a26f5ca2d0f59cc6b729bef2624085282966de5452cc9ee86b25e17b02b682b3b1b13895b7293f95438d8c7ea41e46cae49dcd04ada3d9e35d208601ee106fedd5a1c3925ee113f682b9a5b6809c35c5fc1ab7ed7f21e41b0300fa17416a7967ef88b575168a457b8192c4c286a6d4ce5a8d674d36fcbdcb1ef5dcd37dc2313e7ff7d69bf2b70665bfc901efd2c0a9999175534d6d2eb475c1b39efa1ec6177584e1573c0c9ac3182ea5c5792d1f247b172d005b084d4c969e8671d29149dc7aadacf1a3eb0a61e62100e7f7ba7de099a7237dd119cd06249382374ea6a95764ef5f0a93e271eb7513368ad776b857d33df9c1525ea9db5ebc8aefcca2373e6fbf8c36b2a1634c4d3b8d0767d094ddde7c39dcff9cc1646829550a3d22eb31977d3c471edc7fe84d72bb77cb92081232e2af3de0600e1b956ee9d701ddb1b53adb52be62e15ebff75a29e0ad79669dd0d7dc63b296723a78dc6a0b3b17ac02322f4299e0a798918e0c50c359df41c37111bfd67ae508dce045fa8735bef7bdd69b019ed88e8697fc3f6f7e3ce8bc46880c0144a4113fc37cab2b470ae55d01778f47c23ca8b2c4cf88163d85692e7b586ca11ecfbfc5fb2b29c0ba318fec31a6d7e476656c0ef024b56986b6679ec95d5b0195f36d5f29d96c0871116ad42b25160cc5cddc92104a55255e2667e808543826a6d4c9c92930f6e8f6108178e0427d61208d70c152da035fdf20ebfd80dd3a6a0d590cbd27ac029688d912e0d77db60ce0828f1d77abd075b03103f40b32d38f81f6bf454365c9d8c89f655af7698ba917b4115c7ea8b9cd64f1588c6d3c451acdfcac4be7a5b7b6136608c86cd7ff35005d9235b89ccf7c9285cb5d7122769f15558f64823a718b98672c9e65d3f0047cf14a4c324b4d4e4a3688b958b0d96a65bd105541821b82a95e64cda6ff8ce5bf90c1a6a72dc5b062317625a418a31892476bd3a9a6574f220602bb64aa2a1a57382cde4189db1414df9f21ac9ff0913890e9242e441f439820ad9656fc182f947adfcc9e3dfb5e3ba1c98266332e531c746128b1fee0f99e57fe8e70955b4a998d747a0af85a778aefdcfa1a52727c434cbab92df8060ba2505b26e48ee346295dcd710e582d9e246384c7456d7153b1ad74e9451d2f3f7abfe936c3d73d97d028907831df06bcdfdfd5d568cc83baecbf96542fc707b10298fb90f056f224d17d983f3fee36d61552a03ed689cf557c57a00312ed0af78e7f6ca03bdf316e387c24e9cdcb356dbcbec453573161b0b83487b38b5d44dab8f7044e40eeecb283aad823ee669ce1a740d3ae0759213f96bd90fae6e85c6fa70af31b0ef43e686cdf66f9e5153d0b7b7a264591b138bab028fcbcd711df4f464987c3500eefcdee616c4c7ae9b56b9d99b6b658989108ee409cfcd28606857a5ad980f2bd31624f8363580e49c95dcaf8d196dc6218d866cbf82947ead7c77fc5b60c20c0ef1fa15bccd141c7d2e34d9d98cc3e612915063dff24d61b4a1b79b3b72182e84a6c42329bd29d00576664a11bcb4f437ec0f2b4b05fe01dba10e59b705bda8d401c4fe1df91eb97e1838d221307b80ba8e23b80e4d3e079a3c29c951e0c428fb94df61db0467b64ac041a26ad338475e851c07787b689a05b5f3b1869f3ff52af1fe10c94484985fd25a390422e840b27e2a51983ebb1e4fd0762db0e432bacb73f49d36cc8531a6553f217aebfe27b610351c79f05ffa0d02effd079a9064707ced8daae83d9f03f62abbbff041c9cfb5fa399432e2ebf4c84d05596dc02df97298850fd2add1d488b9cacfceaccba9749de09499b1c93e4d647a89f849abc6739698403c3b33b378a4897b77c7c6944d5e4d18c656301803cca2a015a79138a2dfa9e6ac671eaa91db965922ab904bad8b8e4f3f32ab2cb6a4314a4cd53d7beaf3d0f59cda912938b99d805876b8a06d528ae5f778105c0c0d5b6b598fe3911930e28e6c6e40d791bb9d938d8b0d77966115339c2424d16e70b8474ab3b7a9482e061f8caafe57d07b8bc3573e276fcf867fd33d29fb1a85ef95d0a0da7424b37a4366739b246d225f949fc076d5c2afc9c1307066649f4da405160eed1f0d0b0de3ed724c0d3c4b4551dd257f4d4dcf8cd1f22cdfe3895c24d84416a40fe08d6bd573a18f590b7a474333e9428cd77515ff2857527185cbca6d9bf8b34cd0a077e5582030b7c2edf07c4648285d440929c95f1a993e3dcd3591116ba78977ef1117d954ffc4f62a5dc6c861586d668f59a98a5a3cd7b683143eaf2eb78e286c7ebcb5a0f100285f1783abfa6ea7951f66ce0c28d4f14d8ef4353588f3054a4b0959213dcec7c99a0315df94402c5b04c1fafc26ffe8d7ccaac0335b44246b60f5dc7d272ec2925acd5a9770ffc4449cdbc56465843df0c8bc74558c9ada865135764cea23ca6ecebc6c9e2bf0fee50455a94b5683d89d1e3166d3a1117a1ea12c49c0315b153c612b02a0c0e61c9c7f109e98c8836b53e55ced72a0194434c14979542f3fa35d7cbbf4f5795a75450d19b6e51d0a5d61d3ac7376adb0edddf52310fc6a357641139283ea355ec0db6f597e85ac4f127d8092700ffb33be5556959bbc57313e9147f7b9795d182b5f5d63c6106f5017db063376469f0f187d95512c8655ad5c9caab9689cdb0380936b768e16e38366a32dab27f2851c823669188feb4410939710508d4933a5e85b3875273967fe2fac60c94fff79395512d2fd697561235aedea571b1e228053a1ecf2de45d56fa006166c471caea2635f6cd026fa9ddd313ee368f805336d7f719b67b9fa583d0dcb2a78689758ea8e2f4d0103decd85a43e27bf7017d8ae661e04a98a59c2645b8f122e244be2cfad61f9f3eb84cc56df6fa51e9bf37c106f1f66d8f94f7e5c9e36b0bbb9745cedc18072c6d1e90dff3f595857a81bf6016aba9913c81f96527b95f883d32c62db6bf86413f71d4c3964746d89d62513e076876d2c726d5cb70fc9389ef5043240fa83eeb63cb659e18ea101cdd955de5a8200591d57bdf105951816a362de38f95cf9ccfda5bda57379070cb2e7cb2761179db81526a6ceb763b6fa5876999be598182e39371d099779e5c5e3b68f59ea02d3f3cbbcd70e1454ae0d87e58e97db88481888d1928ef259ffb6a908ffc5f17a5674160f902f4e05b465bcb63de2ef23f3afdc2572e9c85857b24e1f7b1d061c7563e53ec7a516a3e7eda19f00e7ac06d55f3cb4fe7a58b5491d50f804899bda0443a761e1478f40df3f448d75fdb10076b587ca82dc47ff51996bfb6fbeb2be7842621b8cc5e8d99e99c8211c2e56373011e353e778e1b9fba38c6a91b21f7d855abaaaa77ab8e8ec7e672a4497d25ff89047ebec8c430fa612cfd023e84a0c081f5854838a88f047c0fd30d9e0a8508d513b3ae5afb54c0705920bd10d603db9630448e5cbf8231875c1dbe8942389cedee09d832c4baaafc4dde22de3ed728099a2d43b3c31072a55085ce3abd184bbc6f01706e1e9fb85a4d3169499a7071a04eaf8b84e5a0b93f62d8625d5a86716636993319a3d3581e5f8a953a917d70f9ea2934a09beb8ef99e459c1a2b58cbbbb6603ec0d72267720c6dc5cfa157cc92667e0413ac9fd61bee3236a5e62ef4eca82d78c16afa9ff0afe47e73261f81ea60cf6a32f7088d7a2cc69bc87c6c2461c4a98af3fe3ea5311df6a1b0de9d5858ed2105c56a46b055d6adda9903fcc9945d09e684321860c402b1d44c58e38487b1f9967f8c58608ca9794f76be605166d5911d18b428a331f2ca711a7056bee543e320904a90af3fdd7461bc239e38ac468846d7d0b672f8c97ad0194827dfa9ee39034272ad37ee64d44415578b0dbb7946fb8204acaed33ca58a8c47fec5d128572b8b4bafdd78a1a559d2f7fc251fc0d8c11d044a4852cdbee96b889c292afbec1cdd0707854f75fde3a0a8f7f2baff746cf68c39b37c8a14c0defd42724a5c8c3e6e912cbb8a2ff007f84365fe9716845ecb56077bc9536bd23b53819473b33533ec8fdfcfb577eb02671e5b4d2e56448d0691b16ca4bd9727547ff6763df6deea0b0ac11bce1f222b02afb7b0d3854345d9a7c6720b24d06209a594f74c93e888541e7e16b8e3804e97051bdc072b70777a08b5e4ab70af4244cb487c459784736a4f057b9f0b87ed0030bed1ebb0880022e07e00a9c3d37f4e22c4ddb1830df349eb5018ba9dd13447a24f9709148e0d1c01c88669316321af6b8b477350524984d01121fc52ebd6ae9d27004c20bad91950cf870e5962af7998d27a5e8e3b286ba7297caf69b4f2d9286ff3180dc3c77884e8f2558692cfedfbcccdc296fd135a7972a561a6f34c82c3deedb5de7ef666cac5d87d1e833a2e38fba0409de08822e1504db9376058cef756785a99ea940052499256e9aedbd741663138778648a0f02c796567d76d13a2da8881c0a789ad475917aadca77938c4598dd30a9b9cf4468bd8e32e6054135c4529b05a59d1fb03f8cd0afcb11b36005ae6b7c5cde8ec89b70904e08eef45af5a06fb26812ba557756b974b6d1a9bd21f4fec1b134b257934b8dd7fe56c3416e47bd63b47085a61f24ff4b7d00b8e44b2146494f55e5d2c8e5e975907b7126fa8e71e427351cc2697bd8b2ed0dddb223c5d0b2cc552dccb9ab653c0bed0da72fc79fd948fb379c7c927b56040ceb99051bedaf6326c809af040659ece192a3b043893a2bf5372e7fbe7d38c7586b255f1514e05ee238660c4e8288c5ac181c621ceefd59eb5ae973b8ad96308a67b4043d0a2782dfa80139339d8f66b337e7c9d2639a2942063b78258580a7b68ee385fe0e0097f6f05eff9ed096bc0f38f8d0dfe309b1df797dae7d7bf80f6af92d998881408c020d9a76c4d3060e3223ccfc48542e4d6f2bf402598833b2b55f694884d424f2aa66174ba3a4f2ba91c77ff39852af4b1bd90a8a38677497813b9469399d8e9bbc1b8b83a2de44f4fb1a84853fb90dd592d612e16cee7e6d38a7c544ce1c65076682b867713f40aa8a74d3cf36c0b14f430a42e2091a30f1c8a5fc72065c6ef1175ff9059f45e43f0c6e8aaf5c794c739fb842f7a4038f28d54b80e625b73062929a6f7c1071999f1be8b5981141f989a19fe0dc7397e30e31fb804ad332df72b7d41a4a5f6205bdedd3a9021a725e6c9e5fac965917ffadcfbced943ffbdfad83b8b0c6ffde9aa6b3398bd9846f86b602a54062f9da4d460e0b2558aaf8db1ea9270a1ba37096581945f3b8cee9794c15eaae18e77df4cf21fe1ca175f9a84304f87a34063688c49a1bfed38a1818783ce47221e195eee6165944f3587b28f93911f4a28abd850da6dc0cb076a540ee60a489d5038113e4a1795aa8bed454dae8d01073db250d857f6ba51b001ddac5d263a6e7e2ac08234f2dce79775bda18db9afb261a4099d1706fc3a1f3554a5781886850d63c22d74ef6ea686f40f1ddd026e460eff9f8b5f522b6aac1a8249d793275aaa317329d15d72cf851be807a2d94ba708aa1333aafc1364e19c3498c725386a040feeb12476018e643525b511e6af18581a1e72633c04e39d1abb19cebb7b754b38d85b37f971a765f013efe6dd7413ad1faf250c9651db6b55fec8a64326c338a7c3b3cdb15f9acdd114aedd78cf0a12f7bdb37ed84175048daaf71f0e4eba5f9eaaa3ddc7fb795f7cd95441d6d43f210a2c811b4dc3fd2d86ac4f90024f761e34e5424934c9e99033f32f601fc804cae77c97ce1d697e53aa6d4aebd651e5b08a722814058bc3cbec3d43a6a7ebde05d370e5d96452ba7ae6fe07a7a2bab2dc2ca9ba4fc244e93fe9d673d41b6e01a1077eab51101ad1955c9ba3d72ab3dce9a21da133672eb5d62b10d391cf06df0f80b880063c87a7a44d4d8b3d3a2db634edc9ae71c9d0fca114d770a8c39b897630fe26bae0248b5929610f5f7d7b0ffffd25d3019a273a6e058a2ed7d3b79c1b886820669913e55182f55adf1055f442298c3a030bcaccf6fc2a5d7859ed14b72fcfedd9552e05b079727559f8d1920971a2f380b20bb9b101b97377662b39b1f2c85fd4a6ddd826dc1321a1a7f4ecfb1a04b798c88754f9c34eea3837bbfb8a77839175c919631ce1cfcd3b43686ceb010d3746581832174bc7914a5144ee284a767e6a154c7a1c8a956663adfb44b1d3865f302ff4379e6744626aa462d21761aca47bdf25d4cb536e641b99c66a1c2fd2a1c23ec2a8aef85723b63354ac74daf8793cc3afdc329bbf0d517af509d869a11b849ce86b7c978200c71957d72aeae9affcac0b9fbcf53ee42820eda147de63682df6c855b2e9763a2c10ba502eb98e7c562d39d3d8a45cb968dcc635d53382b891dde98cd29fd28c0a8913f93d406e0eced52d6bfe3bedd88c29264c63655b0536698f79d9a35b7116ae4241943f2579ae5aa609e900e7020ac224ab2ec37ee015533f10d5bf18da9316b8a67e338a2436c43448bfb78aa111b4596d8c1ea5d3b0fbf60822b052a41c5719c07c38a5b9704d149acdc634cd992a91a05fd90156e2a706da2164d423e84caafb680416faba852a04cc84a5c78627958aadf3c1ddef538830421a8776679c218f31494c506c2f4da8434e0e3209c0e74675c092573f45545c00db84bc3f8665701e0f0718e0e7712da32cea855f32fcb307d9f897548fc9dfc75e61a560fb16c136bf9e99f3467691e77d453e6f57dd740a64d62accf7e88387a8e9df2073300af41d1c39e5d4fcb9a2cbee42d27534cba5db1a4bd327aaf03bec801de41956b34016eb2a5cc0ec485b7a22572e5dbce689cac5b22aa7ed17084e8135533f2edc271bdbeb62b1369947656fcb3a01072e19b90bd41df47a6f0f9e9e61889e8637cc44a326712892fa6c281de904c8326a6af95116abe5134aa089ddf1321e5f4f59b7ce6b297fa470af6dbc7a633f117b8b60af60813c0a5c4eaf3bcefabf8422a4fdf7e53337def53cbf36b0f5407642481273b21371906619c086822f45911b4834e743974cfcd0d1fb88e6529454d2eb6878c1994cf35d376e66866e0949bea009693dbea21e436b52792936e23c5a2f66f96051e947f990aa7b5a2727c095c8de6a9172b4b203ee1109f3348650fc86909818a4a5e8c5831f4ce7a55ae15b12b8874040d9c7e3e143caf34425510f8edd0d426640809c5d2b5f487e7a6abf5f85dd720915501a43d9aff2d79940505a5bf3602f46fc0c6ee9e5d973513ea23160e4ee7fd3ef9625b88bfa35709b753e2099894d94fd534101279afb9da6bab64a0b8cc779278186195945e67f5b6a34d43ecfee6c036415dd58fdd41c1a7d4ff1d19793abd07aa685549f825ca094f99edf088c369f3d1a2c579281521b952dd0053cbd6809dffab4ab7f990c3659b0db251df870a993e09c5e4ec8d3c5e92eb7bce77f6ef514fa3fcf526866b0642634a86a666a9e7da7c2965e5561e5147edc7c7bc4a4674d39717f4bfa0db055156f8e45163b28f1be584722d7d22e338eb49cb81808163e1f8ef9ad312f1c2097a614c4e265099b9c3722119b8965357c0eeb8a4641a71cd2d0d06fb57e234f2a8153cdffe607a9c5ca342fa91a37ef2562d3552961816d17cc68de2f7e81cf3f725f68a9f0c828d47b99a533068461f26d577f8bea5afd0267b0d31780b7f3a9d789972314ac464afcdd6371645dba185da448d77dd79e93efade466bfa28fc0eb9ffc46c19af3fb48769d8f7b97b8b6c622c0a1c267f809a643ccf17bb6ccba483c1416e4c5ce7b5642c1b1e553e65673f236d7ed4a9ae7679d9047945f0ca3fb07d4ae50316eda3b18d22963bb111d681c3f11b43e9bc386c6bb3dfb337c0370bf39280dbf060df52dde3aaa8455efd73783720e3328e4a2549337a376d6461a05a8dee636654b4faf3158a5c2d0c684c1cf788d132be8c1aa3c55fdcbeadb5770232e1b14103b1b7f65390752a74320f2eb9fb4c69aa3060215740d05dc5d1f22ec8124124f0e3efff5ddf29817be1a1a75fe1cd6dc5e0280f296e41489adcb8c1d992f157d59da05678393f94855607a5e86398251d504485784ea34b1ab5834d1fa9cf7e32ec39ddb498e77d35b364df2ce6bcb8d92dfd51fc2d9ffc5a5b4c7c6837848a467aedb6be995d6853d707cbda49f6cce0fd4aef8db446c19ea5a89269ce49205e7d0c42f3bb2a0f3ecb640d388c8fffb933229a74c1a371335799d53c50f21ab259174cb8575c95123e884cf11706347aeac16ffda2f310f2cd80a2d1b22c3884b3630529477dab5ce0ccf1e3885415c429417fa4848e7ed3283cb653a0df69e291258b98479effebb261f33b7532c68fe0f2185df98fc4fba3110e83aba322a78a8dfcfbafba1b556dc877e71b97b95e59160555eed7c766f339e4fd56c7723c5a9761364f96f1b123484865135881870e58df6998a7df4988a7aa60244a4e8e2b2a7517dc3d384bf0ba01954e03a841de46fee73111c856af5ca093c8f2d6ed5cf0f73e7935fa12f3ac03dcb028c91e493c528e88a6905e18e4da64d445e4130d802bbdef0f5313153cdfa8e2bf88c7e979d0be9ad17d38f4e098e312b97fa27a8505b7cdce617925e308aa36bb9afe13c5735ccefd584b21b114af6d5456e5fec7d93e07391e7f30ba21439c4ba22e3c9862bca6f010bdfa8b98733be4b4e215142bf295731306c5499a3729d4bc1a0a88a9af1a672906acef5826e2fda20b674a1ce7ed1700fadf941d00e9797087ebcd3e112d795d94c9eb698d7bdabe0327c36ab3ce0a2ebce2dce461edafe97fb6e033d6662c17c0fed98e46922ebd4efb766cff0f0e3cbad8e04de0c910eaf66cd2ef899b3bdb1dd2c30e7b7b6a9ced023531dd8b44aeacf524133c71e7c8dc80a96b066d3628e1e3cee9f6f6ca0f963520182593909ea6bee58ec566d7fd0ecc13ad03823ff01a2faa69a7a2b358c0aec7fa2fbe0efed2b993e191e39b0520f0f2552db68ca656fb21364d68943f3125271df349001ea856656cce56e3af3e450acc0984c1c0595f5f05e5724929985289896e8c4bedffa330aab5772b337329ecc1773c4be90f0bd8c61069106f2624b9e892376f427ea85407cab627b54b31c6c7c6922115f2fa3632ffcabd5629a131b0be9174470b3e1270b0d432b3b7ffe656dc33fab8d58886fb6ad03094504bf3d39cbc8764dde333c264a9479a70a6862961f17c254f9187d9ecc305fccd1bc28f290ff41f13e4e0aad1218b57e1d8a20e268d50fb8d9b2a21c08a3ef0d4079f259847ec27f30832885b37723a9060f13c1ebfbf1676adaff1b0343fd8568995144ee7c637af349243fab771e99c8700359e1eebfff92afc6613963d3f3f90efa22247c4a1488ff3a0bab7f64f12b0274bcadd7fa62ac3f117d423ef5867529e72d3023ed08dc2870ae886b3d65c05efef5ef132a8345f217b706744035741bcd25f36deaf1c49d5598d1d169ae2fa0d10fe5f608fb237a4359a31707fb49b1cee5444c5487525e9582c244268dff97a0fb619684aa234a21824290be03b9ef72a55391a69d122a350f2dab2deebd733d90a9a5b7f156ffbba5e9a7c8d60d2a697cd4eb056021e18c113b9f7ddc724298b6b2e176a5e2bcb4eed4fd905f4e9745dca98b707580a84856f53ed6db37526e9d8e4d8363eaac2a30e300a11f26e84f12c4dcdc8a589daa4a5d23b3142fdc224f1ca1e71909c8aca4ed5ecdaca1bf6243af197b21ea010b94fc60c59e7644864f227eeae4badf1147441b9736326321f1f7c360d33c07a6458a03974579bf93b912a207970fa1d00a569d6c60fc5a9c5e4d98737a71329d8206f26c20eda887a67c95eadcf2e2b79842bc0e7aa01e9974921f27554fea82854f23e217d1bbbd36a742de4a7fb9f0b69db14478638439eb2c9e0ebb7a041015908e57776812d5edac5f974526b0e2dc6eed965489de90f012350e762f0779d9580a59a33aa7e6e36d11d12087af0b9d2806fa152c07d13aab87ee1ece9a967ae9a316e381da77f1a77c9b072e641b1ad824b1f405c88bfd1f0255ed206bc9c4c3b2ab776dcbaa11a7d54a6d752fec25eeae2402cff5125e96f7f3c7b9cbe5cafeaf899e8b7beecb562c8608f20cc6019428ba4e92f1c081d6b5f4f2214f5abfdcf17021ed53e341ae2c0be4f24f8e29bb291306e11eb2bc44a865feea3e7850fe2481f858b6b425e382b9d0ce2e1c8dc3f4f634f246e82e1db306ec23c73d6c34b64e49b5efe716dbb4aeab07c6b617291e7f5c3ce95db562855c54d029c466d1b5b7467665132885c736b9e0f8fb7cc1ada95eac182989a81b955c2d2067af0d4516df40097828067c93671a78f2f69b91f79111780b5cbe8de4904ff5dfb40d796c09101eced352ca569f4c5b3187724775182ebe7d0f8cfaf71ef6c368cb65d8e2c1614d6e439a1e8aabd3ac1dc23250719c66b70a2683ba44d784f2e4fb434835ac3dbd2e8698a63e66fe19398664ee5b50df946ab1903ec2133ff864d7732ad4055f6154730db0d3152cb30c575a4d018b3e8838fc1d400e5ecc040771057cab0ee3dcddb41030af98d39ef78cefb9cbcbc4baab75c17e93862e108eb34b45478cd15f099a17169fdcc960aecfb1d88c46620d893d47c05943d2de37a45a1a9cbe184a1c69c64348bbe9523fafb4ad3d5a71fb89a48eb078fd248d0daa54083fcf6cb1b8c6daebd88e0add69411c2ad575a305e8e8415685bda98c6a41d03991c8b46ffee4a326b64b3af420c6a4f0d759f5449aeb4a89b589b4cfa36eb268311176f76100b7f03742c4b7b70bdef4f4a355e0f9a3f811445496502d81029d949e96b986a91303d77efa756c757afa29fd0c42df001035bec6583fe7da1ac481645ab8b3861ef9eabbbacc670732fd2c6db3c6a66fae306a4289afa93f93aadd951cd662418ee42ba7b6ce73dc815ba696010435fd624d8eab4512906473d75e3c0c4b53ade1a632117bc67148c80d464e9b491be8478c761582c514365537f81f7c7dbb64d3b1190e4c9bfae42211c8c9e1ce096ca6e900038e09ecf8aa5a86243516655dfe5bb64e9aa0a5ebef9d2e5b8a51e2b0db9f745a01d4405f42ec90fb07edea8e420146e48e06b440b6751aa6ba150dd6b5c49982626abcb60f7ef98e7278b3a28910b9338f9f566b99fdb9802cd0bc685d09d2b23fcddf5827cac77cd19eaa25757b15cbbb1241121c99f41cab0a4f5bf6292eb8d815feae4a780686f57aec8aa99beea997e0b4a6d8122ec70be4953fe8a812d1fe35e202deb43af21aebc0b453929e3026864a5e875688576f040f191601b5567801586d6960bd32d97d289b3df861ecb6a39c182cadb6767bc509ce14de90c0b2bb9713f2778197e7fa954392df09ccbaf47500d682b943fc20c8314c18ff89f17b0b86c0da52d70ae27b05d1c922243ac4e462364316b05cdb1808517f80efca93263736c333eab5cf102b33e03a5a8533f5d626ac12f3a68db392ddd9a9f8e14968ca79944fb1c458c9f424b7024fbb3b079acc17e0170b816811f5b0b2c183824a191a03977cbb567d3aa2889912d0619bef7d12b5a9894c1c691099e31017c22126c57be83fd4461aef832c56edded6106dd609619174fbbbb64487910857202128d77a7fd55eddd0f4f410af45d5c330bcb89e866e214d7b6f3a9c955a4c987bfde05f14dd806e4dc611986e57bbd09a3cc1262ee39c65cf7814240fdd73a9d1dbe9306aec145bdfd53facfaddfe4e589f3e9026de79a5b0b67fdb4f60c5ed4a7c496d4c984c3127670280939494fa8c214e9b93116393454e700df6f1abfc1e1306d055498a88818ee98b0c7f075c477ddef1ec685c5f4d33df2eb83466366104905052d3e532e18d30af89a194e889f3b3a4643b97a1970c57dc5edbc051b7cd00d2220f2a9397189095f7c927d6461f283b70f2cd5a2e1b64424b6e45df97b0fc16f308909dc785cb718d58de28457b61e401927b73e4f3e42117c304edbae0b5ffafb1ed1a3c7480c3a95b96678c7e00548d7a4fec2ea6bbf88a4f2fa7c5f24bb4162ae7d191ad7922f4c80b0cbf0c4b9945111276b38e73402aee20507c6a460de49f74e287b90a0099246ee8c0b7d84ff018fdc5fc971713d2ea88095afd01906640727c46b2984c0fe8f23ea34716f2d288135e523f33b6bc7a0152fea0f524a8ceb3a76c28ab690c3b8a5621c8c7df5dfc3c65386d25ef625d0e1e05a78ac6e97814e49f08ed24f5f263261409e126ad456c28c0ecbd295b6504cb781bc6382354e8bf3a14b1b912cf044f962d212864029ff2136cf24e7c65100be7611edeeac5afcceb02be21923c633309c8621a1dd58de02a3b1cf754d18f6769b21dbdfdbefe20a6474d6cf8a3fefaaff9477a66a3d31f2654a704f1be3aae578c6a4648e6a8aa00218e033bdc18992aa114e0fc287229ea975884db1c0e55e87c136eae33e00b1c2aaeacd05cba4baabdafdd292dda56b15e6b78cb4b0845b7e409d315557c51688c804d1c5df47c1f3caae457107bd533151a4695402c91e75df6178e2bf3fcf1e87715f5c3e89d1946a3c57e58378b3150c7ac9173c45218cbbb25db5e26738a57264dda9448439c8e9910fb81e17ae09abfd4e2a3284394b43a27b7b19117185810ad9260381643b8b182ff55cd5ef42481c32b68b5f64d5240ef7a65e01f5a47706104a0d19a52a891badaa8ed1d1afb89189dd652eb123e91946d94755777348dae7f7c42319598f63baf1f5391d37f5cb2e040c27005925b67f2720a15f8469923fc7bb7fd2d20058926dfcd7e7add524acc392648c62cd6e75b752750eda14529b4538ac5720058d4e7e7db447f7d1d013300afbc2318174a3b7d6487896c63dbd26d4a065894eb416a98ffeab581e7e0ecc5cc7e7c3502940367c430d1f49e6aa27067e57ba1b62d9ef97673b0feaf16d44ad2b0f991f0c0c3bbf189669ba3b6ce967c5aefe9f1dbdf4c9d0685722d4f7803c88fa725212e960e8a0b0cf6068d65ca6d4f798ad6ed96a6a489de924ecdf2d077c860ecf0d35bd9a3af13e9190553e76e717b5b824528af04a47d3e2e3184d9cc6da627bb44ed030bcc9fe6e213dc41ebdb328e104436ad3c651222bb7e2a3c83e600301d9434f61d424dae5ca98f0a766f0b8abdf1949ea7f3cd2031393772a6be69ec2c3a9d74d8fffe63f87aff18e24f0c888703edc323243c4cf1fb0d55d1fca3dedc4332db2741ab82859e9485beb2b96043f872f5fa7dee422867bf19701cde113c0f827192a2ce40089a72774ba392cdf1ce627731d36a0dfcdcdc6b6ac9cea16adfbc53821c0dfff417e35b7aa4bc103c365f2af67a3c7b60ceea6831a4862036e7bb7787afeda5c25842e8c1f611325d2b6cfa39474385648c1c0fda22e882205880c48a7ec7b259f6c6c2d5255ee3f279d1dae50dfb90159872ecb2797502902c16caa1edcc1266091bc0921f55817f695610f013ccc169f41bd8a6576d192404256102862259b69994a1ccf1e8018491e61d5a13a5304c12f85b325aef15353c519ed312c5536b4efa08b2400db239184d594eabdcaf7082121aa463cbf909f72b5fafa6eb9e62c38d44ca8e251e5f28f1bd002700af590d2040b2ccaafd85509f404d56cd7575dae38006e74277dbac3bb392127e07e99d918008aaaa2e6b445fb3ffc2ddd85e422bd7797337ea2f475663b0f1df218272a8f630ecbf60fe7fcc3bf900e7c6a3244b9d4d33dbcc9b00ca3b32ad68f54fbbe07d13f69dbe313a5e17b8a1796988575b56431489ba32a42dd0eb67abe483c98a1acb405458d8c21a3a78985d690d214acb64fb25676a31c1dd9b45126143e9d2763be129e8ec5400ba38c598a9aa2078265efe21601358e3821ceacc4178d50050a7176733a048906f970482292cc386664505e32e9d07ae36e7b18e2578187d1be1da8a04635d40b495d9a92b9057c0358ed0a98a1b8f04c79edf0996e9261340c74c5e7166ec2254adc5e830e10cdf842f895007637bc0229dfe2cb47903d042628ad3046f2f773d0c317f5a6a5bf8251d0d3508fba16f6a6586b07810e8c4d9bcfa76c0dcefaa723bf05edbfaa017f588643dc4dde9d146b33599b78cd5dfe0d1b656cd9d515f92911dad99bfcc5fc642873d6cf4beaa3fe519747b001e3bcf7c4bc218ab7bb6bdaa5037a9727afec650fb1f875dc92731a3072b5f08abb42aa75aa60f5a754a3174f33443cf4f4fdcbb1e6e46e0afd4ddcb2febbe9990e69f38cf1788ab091a7040fd93ccdca1b8602bea30faa1174471b2fb2f8943219cbdf0451d4833c0b88dbaa00aa14314b5e41631218abcf450cfbcc68857de7fa00cb97cf43a17d1c3ba9e1ec9bdaa4ae1b31fa7da2b3d4ca3c19df5a3ff888fb0efcfb5a57e1ed001e1587ed77ce3ed417f2bd7f526c520fc64876a99ead0db898146e69af8a3727f0a0234308da48d915900a30c83164a059aa2c975eb6ec2cc04563ecad0a3e85a756a37f578c935e4a1e509754c1f5ae953274c4512204cc27b9db8327089c9cbbab260c8a70f30c345dfe3a35321c52951eccb16bbd9b5f4eb01dbc4d9bd1f3dd2f791179dca4e73f59d2861ee452ea6b39c4122ce4dd2c7a07a2ea75fd8aa5dc213e7f728d07b493bc392766949f89af39d67fbde008d3fbdd3404142f1f8950044423434ddeb2cf52dfb151dcbb44dd215b981bc931732e093e5c3455e928b56317de958bbef22172d6257d49727a78565dc6f2a11750b925a9f89326d0596f212e764e8f2b2aeb2dd22601e46a4015291ef8b722f863b1174dd9767350af60485c070f80c27d4536c443aa667532d89ef5b39e7ebb4959ed5194da7f91ba57cb4c4193fdf76667752be1219b3852b9d1c22e90174066db2c2fd9befe3966e20a367d013448d0377b74fdc40be45f12c584e27fece64aea6b7aee169fa91c0347631bb3b21e8a0e769325c58cad9811024af751063e293915b00478274b5078f515d527f8b7289ccceddc4c9ff5cee60d0ffc07fa749e71280708c03078796f367ea3d3d9a4db19d0b069db746ee42a014f941a01f23e20c840f0c711254ffe5e791fdbcebd3cb9ed7fc2eb12119a63b5d1b27aeebff6175683bcd9ab381f032442dfe9077d6b9a205b7b47d8a705b38e920fd7fac4286805a3ae05a25939457896cbf618deff962e9c090b975607d56d2a966756fbcf824d02aff11edccaa3d04136bc367f38438ca1660dc40bae25f87603216d4b6788c402886c1f8a347c1837bbf0bcd592389fcb5e708bfd9542bdef0704bf250211804691235d523dab195c074b59bcb01e557d261e877cbbabd863f00210cee3908a8bb84ac918bdbe9e938e8ad2feabe2396ddc32859e065567708249f67fcd46350d27b8de1abaccabc4d66a0f4856334a0ced72657248ef3a641ab12ad9348ceb331f480cda73499d264f042984d79d10e9bf9e0eae8b7afd2bb1209eb073552788559f87836aaf0e3554f555f5105121f1794c460b9c147cece79fc7217eb8d8deb837f122443e4f9517a6f207b82b0744204c4ecfe10c351f2db6c46a8fa9aae13218bff224019ce60e9eef077477243ca6b50d6181c9cce3513686343bf9679d65dcc059ff545406f8f89ce5a9e6a5d1fcafff0bef6d3b88ac664faeeb4b2d4cc5e4843ca8e20307f10fca4d72d3d6939722e164d0fe415a19f6e6a109a7d6229c1b6c4e0f440d5e0bed3d2317024fd54884ac0a4000d6e6c95867f77530237300dc44b1ed7f0afe231f193128fe9fd217610dee54b5b783e089e6c4815201d19d8073b8c96746ddef374306b477ccf7b71d349d2c9c8a14a962d4b82d7c1ca579ec31e1f4eb2b8fc363a7db3fff05d29938a5f8761301fe7f6721838462e998dae8361028cd1e09093f56a620691fd95e4c8bdd0ffc643c430b35ed9fb25b1f8396e0f58909e6cc7997fad6e72323ed2fb12736e196952713500b9152fb33c74abfc28553163dfd759e53ac16bb99aadbf876a44b3858cbc9a368f766ed93bf8ecb3974970e5a27688b0c295c5b8c9f831a2b2526bb5d69d678293dad18647ae3a25c461a5c649fca452e6c09294e7e4e9a444d5e7d9e524e107d8a7553dd91b1dba39204dd7b4a4b645ec061ce765b03fb507fd0a7d8c56f9ed1e04f2ba253eaeef795c2c965fe23e36fd87d99a1864bb6b129b445c6fe53f5e9a7e74f443868cb0be6898c4c7f46fb67272e777f12b2ca5353ab351dddc23228136f79b4a1820600a67ff90ec2712c739e6d1889f1c7d682516cdc85f47555f62430e8de11daec138a24cf49fbc207e43a309361b176f5912464559fc2b27d41003951441488cd50f80f3b0b088db6f59cc9d6720e75b178fddfd3cf25149c977466384a71e83774242d94497f4901136dfde18d6dc6e3052508f61b0d826b763ca49394e512972beb064db35ecc9c784c3372efe066b234357dfd834663c23eb82fc0223a3f1595404e4df1be38db8ebebdc96f3e19705ded66bf3f3462f13da0aec474ba1faebf44922735c12b66625f10a1eb14d37a0eff3503965852eeaa74cae2883a2bd263123a4eff5ec88e8fc24dc994e3c9f3c10a0ab81a77c1c19e1975f8c4a0b252cc9ba839b2166a39dc2b47097f7faca015f214e78f8497548d5f0affac4c2c08a67d723c6d36577d1869833e970265b4df1ff624a644671d8d86ee35d10bfd5d353da5567b64c20ed7cb3551bc1b0c31deec48b1611fe654377d90442b62a6e10286347222c8fc12ba9e2853544a8d5f2f39971ab509b3e7d03c89eae15cb6c66421721194bada44cc7939ea17fd1e5b108a11d331bc3c991044bebdc3d797e0e02a19a7e896d1712d62cbed21d7a5fdcc0623345c1520ba488ed59248430815a302cd218ea7268b8daac0f2af2306420100a35b8d59bf583f69d83ff5affb10c2afd2385e8eaa5f9f4642091109176a6b163d0ae3980880414ef9d24356076cd7b5fde29dcbe9c11e7cafd49c883fa05a142c8a89d87a28563eadf02889a392785ae0e25ef1d92b82e579df47202fe47b91587ada8e43b7b47a1ad081060e71cab3a920e00d944aea18ace806625f6c42495aa11b879a7ee3f421053e73bf57925b67bcd72e6e4d4622bbc5036ed1b7117be48a35ff74177feaa5c3e4fa92830e6cdc8aca0e81acbaa122db7e55afc2ce1af5d1dd86d9623201f508174dc024aed56e2a4cdd5c445199e2e1df297d08591e34ad83c7239a80e593ce2ef1a5771499dc3cf99bef72980dbc45e6baff52deab50a64bb9350424a0a14f46bbb8bf6efee8ab7dc23ac907156ee2243824d7bef42b24f661691232db1fef88518bd6232de1648cab00f2dc71962010c033a3937b060de7b3d94bd1c616d0b3daeddc94922e91a166f4bf05b501c85dec3a182b54e246f25a49b919b612d5ff5624f11a150cba6d71b1c4e298026484a0033a2b4365ae0c891cdb1e362542a3a3456fd0c312b7c25c571457bce435deed2cebe71295aedcb666e6f63f99ff5f8f448214d35febed87c987fce89298c8fd46a247fa1f5f0437b0f1e8a436eb335aaf329b0efab84352c396d703cc9352a01d24741047bd4d559921ab1412c494ab531deaa1f8f136cb301cb9d3e73121f2aba2550d2216b52b6e3209ffdc783c34d22885321431073ea0c0a0a2cc337ef5bb0daf4ab631e52a9dc8bb45f0c6e23853cc6b1d6705c29c5263d7945069da46f2f591cbe1a912730fde1e355ae6ccdb62b763c380b5666349cd2fe4c3919ea8b558dc29be801701c4992c4b6041aa415318463231a25946903c9aa2c36cdcaa0d0b0c37014a3fe9449ead7ff77ed3c3cde5ed03fd7e879aef6216c78b6dc127802b3f17c765465df2e76228b06fd090f53e23236683b5e4ac8432c1008e59714fed77ce44af3e4d4ee283b2240aaed5f4f9bf25f7e58fa7a3746077ea62f98740620360df05471ec395f6d9e231982dacadb1cb243ebf6f4158506b518aa1a8e87861a793d7b38cdf2c07ee79f2bcae0559e467e43bfdb87d02bb4bcb37bc8b34eaeeb26889ea2f9f4c49b7ff159cb9b5c5b4fd18b76d81962e4e1212cd320920016346691f9cfa90c58da37492e4b46f56975bd034fafe9b56a3e36d3536c5bde21a7b75e282e3918a9b96f44eb4dfc3860e5297b1b2ff4691b513f6ffd5799e8c09d518b65fae0386018239f8cef1519d25cc0d61cfd767d05a5161e28bd3a63f7e51483da4da124ae00e5b27f7e09ef3dd5cb2be758d53e9face05e8f9eaf57f5fc72591ef9efd6a6e23c0cfd8c44821b54ccda046a96961de93bbdac6f86ba30e9d9ac5150e8a6891f3c02421bd900f814050f8edbb70a86716e6ecf3a68d13d94b4563d76f2c5ae040e762443b6ed623c07d116320c45364434c3f12b27b0c3879b3dcc90e1a0d0daa636ef9a6c7d14efd018732d7c1712b3c71007b2d3343244140fb1470fce86f7844c742dacb08918e32955df07a0fe5cfa0edd5e1d768be219e2e4f4d6432607d652e87c467b6069b35c40d102d9306b269839bc92d0b2cacd9664f160e06da1001d29c2664d5bfd4ba92353a7f4df372db33a8289e00826bf6d5f46f3a953635ff8accb02e1572af495da1f9833b30840ac7cc48bf11fe40376329a54239f79010d28de1739c8f3c47fc2e6c4fa4686c0e366ad92b97f44020d7c4110a1b82b20aecaaf946c14763c531aa905162f366a12a4d0aefed18b011836a90646393ce6986ee47fcc2a7be35149b5248c14b2a675730b6984202c1a3bdfcf9f4daac6046562aac79631f7cf01c8df0236e07b599bd782e9bfd288c885840ee125a9f28400f83372f06e7df2e19e596876b29b6ee22fecdcc741e49257612f9f3a77fad8a2821a910c404e0299c67de6a997aeceaa6b86f9c14b9e953265abbc35ce6d3848040acb6edfe45d6ae5019b1edc2f710ea1b11af0fab26941de8c3778a6db5180450be4bf5fda80e31342b9d7741c54536db082144f83fad88e891bd58dae4d0f5bd6a2b1e0a686dbcb1cdbdb6febded0cce2bda21b31269405bdc7e2bb80c7410c72c3f9595fc350503d383e57232e0d2015411e6b27544920d3407692438f47f5369b058c3617edf7ffd4dca2cd6e5828261fcaed947da76282090095a2859b97c0e35d419f6fd0b6888d284c153cbcdff1523797785c21487ab9b4b83d38d604d0a7f3a2f6a10638c9bf04549b1dd526923321c359047642241627ca7b50e1e427e06fbf3693df03a1c3fbf4a4544fbc228abb699e1741cb5184c6d9e159e6c93405e9976016e45d6c543f3d912e8eebf4204074fa504a13b7ed6a1dfd05ff622e09f9cac036c131ed1a6d68fc8ac48ec9e76bd299e1691f3e27e48d613f570bf8ef9176c20c9aa477e4097fbfeb32b2db639ec88a760cfd391eb0bb5a6ca517629e10ad68ac52d83802cf9d1f8f5e67656f021d37af34ea4c598dcd96798b7d29baed5b1fdb8bfeb9dd62b0c2c9d1d49f4ff7f177971327153c4e9a77bfdb869a3d8f582ab8214c5bac4aae0fb30d31a3416bf18fce30968a76613c0693d95b80065643ed39ad9eae4badf21cc3f2d08904b3ea0838b7130714ab2da7dd1273b23f2c323e1c849a0ee2688b387611d39804430fa964df06258197b265f04beecc8f2d748994d038764432ad192aeb0435063395b70cbfbc03c551852bd59819410165b6428d3ee67279ba2ac6ed67b61df8430c90635e2e54e27b7f2f3708fe8af370cba63da69d933280dbbc655735e38797a85b17a4a1ede40b7d89b0e7560aea6d7203ccb5b2b5978e3cf82485de6df9439251e713e5ca4af67b56eb826bc155a27af1b58d8628546de1d70b9cfab136d6e399904dc46d3c66b1c44b1a63c4ab4ecec1baad3e4b83a26a9717884ee74ed72ebc6b608c58bd43bd3f81e20dd4a8fcf29e48cf2984ebc0992a73096a73aa2fb9aaf2a88536ac2c02e6fe0b2c14c88b55d383f8aeab99b8bb689cf5d52c5989a461c4c45f19b6669ce5b50237c7e0edbb2433e2b422e477903fd1c7c1e4f76f010f6d8f0d6899895d551cbd8ae83fecd0cb40fa22f7735545f448264a01c66ad553a542078c5307131a94e074c3278ca7d61469c54fbed0534c83fdd336670449d42cb72267ce7972803f6e591e24ddfa2829cc1d4a3ade3294a0ffa438860ded0121ac09ad83bf577917f0bf3c521c3efd534f97bd6744bb507074f47ff68d860427e5957ce775b3511f0a946a597edcd49ab27da7b842b7d11ef4cd51257e8e83979d9d21e768e339ac82c38635f0e9b02289ad1b50e10ad8d91f65e9f9d4c4a0713f53dca04fb6857816b0b83ac85de91e20e0caa5d4a111da6ad8404577572d0fe57f53aa5379c9cad728da3f78cbe431361a1a778510843d754eb848e0e73030abb33fe57ad19cacb584dfb34ee2081d704af4668dd0d6ab08744501e418f16759aa99b77ac5234c32d7a5a17239bf9e7d7215b7c1809180a74e9b3cdebbf89961b6dec91e4be1b9c4317ad4f10e6517547efcb8cd6122e655ae0cb94cd229d97ddf836f1ddc95f36eaa34aac8b94033e4b64b64244382f37bcd8040a1e84902942fe2eceb3d2cb9df1af484265aaca1107ddac83b95938b51747b510efcddac3c21b33d0a6309839d77bfc789e78253073ca036ff04ab1787cfac612704b755dfdb8dd777a818634ae3b24229ae3f4c3cbafa4001feb4345426ba6bd11d29078a11370a062bec7048624e48cf84d91a8271703f03f34d9a68edb4aa5854ea0bcd8feeb4d743b31cba159ab2a809dbf131dbc81dbfafa72207db1f4cafa9da9368417bda012ec1fba36c66c14d22864134a307cce4a2fb47f7840ff8381df3da4b1ab40eac7c098d7b597e400a62a1847e84934ee744e91e63f09b8f85ce0be10189cc2958d2390a348293efee5562676352237fa5f0ff4c165c624a2b3175c26b6b77c9c699dad3a916c0264e3f857786c6862519eb3187152ca69cf5e324b99513834a8410198dde03181eed8136e9139672bf7b7a7b4b4f3f1dd2987dcbdf0d78fb71194963a5b41dd145359373ef3a557888b9ae76050f73300da53bce2d65a00ccb7d6a249076d92ffe789cb685942fe4f82a3bb50edc50e40530cc37158dcce4ad59a27363aa59effa585bc35baec54df53d1a620f4b32fcb22a61842d21fe5ae849be72c99bc7f2fb3e508b8c93a4216663d998be419806ff61cd50eb0c037cd86b941bf673ac9495bbc54fea254c70c1c10680af7aa7b5ce2b193c9de011076743f6157e65693afcca6d14a55a8eae8a4f832ca700c473d975ffbb0f8ea61c09c2aa3a208ec7d648842d708e2ebd5491985c0fa072bb283bed8e6711594d57cb3941a7561093c867aa2eac657db690a9b5ed981559a79101b00db2dfe1ba29c33d0aa5ac29d2cd6d68902edb3346f1d6f17e476342414baff568d70b8cf867ba3672beb1e565412ff952a082e6235c00cb4a3e6afedfb736c47d626241665bd05bb5be0f9299a965b4967d705634eccc777b8a167937ff3ce9a682f363363b0ec6de51399bcb7e357e11c8e8977b10b258111f084dbca68ae2a8ae6fa9082507be099948ace8955be17e346b4f778de20d9acef3a6873c5ad39249d99163190e0548dd6f59f6815d2335486778e23419401b0f4ba16700ec8949e23790b7e6be3bf4ae3abad36095f73e97cfc5e31a50bd50c9d153c0c105a68fa6fd77d5420e6c50ceba3ff8196dc7456a822b8e399e29a4a00478f7df74f7b3f84da63d7c983a9e68acc1e0d175b92cd301f2fa292dcba84272362afa79405211632d181db067ed9295d6b8b9747abef5f44af636fae58836e31e86cf7cb1b7616bf3cb4ea8978adc0b7190926a1577af0b9e8e09b71fe14b5c0075b54490d4d900c67563c7ae937b0ef22a69d10aae286b2c012bb6e2712ced544ad120b5319832d5f659e97a1e5200bd210bed5dd64fc088e2921273769533d7fe199e37e6837b119219aa7a0805a3840e2edbc85983091cf124b66f33d8ab75f359802ad928803dc4d13c222bf27b05fe36fdd3d15887738fb167dd2e3b1372444ea7c720bf6109c33b2c39976ad3d13924c0a69fcb9c428aabda785759d61d5899b346326b260798ac0d25b36368763bd33e62f227cd2cabff00ba251aff57f00e21903ba32f1075ecf4f05f82d3d41114c8e5c2cabd38398e7b4b543e915a372ef5871c9c5b1aca8868aa1d71db5eaee7947c92bad904daf1dc92390e125df96b111b670257c5d43f05d01111386e24e73f17dedb6c30b612987a3fb7a5e0d5989003c64f80ae0305d7f8c0761a4fb1324c601e1ef9bcaebc88cf1880f1043ccd02813822b511cab8c89d2648a11387a142cd3c797e8c9950f377645d94440aa93c17266efb12a9072d7c1c073c097e6c2f7cdbf7a2b716e741b661132fbe8d813e4d3c6b5f8fe38a6808190afe6b4b21907fc8eda30920e18d1cb68a00d7e9eb2f8bc1cd15c08b1fa1713fbf3b2fcd4c22d9a1d50b5a2faaa51de7d4ffd218aae71eaa8a9b4a03606dca33a81a82eb032207516a481b3c1e67c1fc6d1164ac42816efe091bf8cb2af8dac1308875a7f83039e9842edf57ac9fe30edc3845cf00a87a6650b71d23ea0be266ce5a38d5668efdf7e4f29509c7b7fe76653fa4206b7a1709cb57a40e17452650a3d620b3b86e13a3f080963336d47f7e20d62fc7664adc69b3b2e5e0d5514e19619494074a18ccaa36d65d984aed75b95a926b1480974708cd651551c2c043301f2aaf3225e191acfc77414a86bc93ffd9f18b71f04daeffaca5b7c2389fbb93b170cbe4c3323a679e54dffdfcc93af62db577925ca39983c78827ee71fa859af7347f5d884e0dd3605d6dcd25d60fef6ededba4a684808230fb79785f071ea82fbcac4e193fec2b395704f0c49de20a4a56418ef74c88cff6a49acb432b375e005f8aadd831397f2172341e2bd8c09d87f7a2c54fe5ce883d2b0347b3cec6a2b2eb42cf022c0bcdea6f3da309dfab82f8f2b0b9cd95fd05f95466633a4b5c4e8c9cae4dda847b8c44e4031891ea811e8efc116728c9f5de80f52691609de064f0655532ef445d78136c07436cdbe061c13833b92e7ed894e567b141fca6017e30cb93af68357be6aad2d794d0736936ddb67010288bf581ec002e504969e04a3792ced1aced185e3affc79c4e3e4a0d5fab6d8adf5987a4aedbaf12bed5ac4fceab37ca06b62481b45a9920cab4511688e91faaf8feec37306f5229f7a83939034892b003b52edcbc4d54ea7124dcfd8fad71e94f69dadac10a6a8f9d19d20758c660e19d360198dd1aa2ea140c8e2658be27435e9235e87aac94637df53579b8ecc3ecf7dc7ac5057e13b390ebe73efc0cc1d71707be0ce38ecfda82e94628645a6520607d4136c2c8d15a54fee383737698f7d579845c25a6ab7e52313ba3bcb35e0197c627694e8d915fc14a4385fcaa7273eff00b74f59ca28d96d65f4f773e14c6695a5afb80dae4824f22392412ec57525defb8ea9510cd5d0eba720c8fcc76e16d3745ed01491c1cf444ad08adaa2b86430125186e72eb938ae886e5df1c31ec9bd7f8d86ecac5309da49d2d706204c6a94bea4a9ce0e49b60819ef434adaad15b7a6559dff0d4c3fee3e7a269aeead9f15aaf2a27c61d4a97f5a6c7b42e6dd9ec448027c22cea435b28d68e2ca8cc652aad93a9e29f2b270a5b938a3893b20812b6895ee73692d5a0481b34bf907a415829b1fb61983058cb4634bca630bbef45131edacf1235be8a7178ae8464f6ea04946502e3ab99fd811c49003857143952ca47c23a9d00d69139f3e855c704e7365ec133fd26b740ea900a51d1653ba5eb80b45531438e9c7b899ba1f8ae05e0f0a3964ca68d411020666617657bf33b6d6b1d4df0a8b5226605a5aa709ac3844edc9b5b60785d4bdcadb6ce1e720d6bd83b205d3ac3445bb88503f39962fe45cbc2845fa3ac5cad39e31bac9f1f1ece561a94c0bb20812251aacebf155131f6c5ce98446bc14d836d155b83709adef5c3c66881983aae732b2f5b240e7614d0253ce54571ab68b818f597aedf31b4f7fef537807f7a2891b11a4495497b3a46e88480e218c12777d8765f2a97b667054c8d8f6d293b7ec0f09d7d932ab86761d15c15f689fa092dab42b51f65b2f7f43a113e50b7657e15b898ac2270685824c92c5b67b737356ee750d53e50c8630efc60af47f0aad64e61c3d172e8037620fdae8202dc5dc022d0df3f570c33d5c60d7f236e3b7a539b70b3d2083ff53f042d70217751422ccf9e9a80c35c0331b277a9a6b57ad16172adf9aac7d146bf56552f35f7cf818877ca3832506e7358c82fa8e744747a43d2b712b963809ca933c8b20758625a64b61322e425850f4d54b8a037e9573c6c3b5983bcdb5f71951aa6cdb206d2982324ebb7971b25016b5ba31ddbaca21d8a614c82a0f5b94f2458103a211df3f9a9f70850503f26bd4d5dfc02dd509e34bcb09c3a8bf8d6db0932f692fd155022369531d31de96182d49847055a90e30f16237f458c3d620f9c92c19a2fbdc9bcbba5a96fdd5aa15782ccf9d5577584204644a48b4f0b3e0b149bb8d3c3838d40ceb0131382a9f2079a8277a8a1439b3807cfb7798de4b41ac7bcfd6b93edb124fc5bb5f0f70599869031745e901c7bb8959775f33482f77c718d3b517b361f956e2d001e1e990daf41658ffafadf880b257be2f5a3da4f2de11a15204d634e06ce2e8764566049852fe70bce4049441440bc9f805684143e5b5367fe327266fbd234ead372679244315021da7ac32ef18b36553b3582b1d47e496ee57265404d78abd305800954d493f835acb6e54ed2040d43430f80ee894019a9d3254f51387daa975e4d1bad772537695002b5c97d6c74e7c03190a60078b688ca0950cca460b3cc12d2fa9fc624529234a49a12482a211d5cf0ae3a7fcc70bff58b135ca75881b907550719604848c57853c8d5623bb23eab09a5d5da4c20b5982a6c5d5fd55c0d6e8123b8071aa5cc689de1c19fa2bd1f92dc21672f91fd81ec668111b4652aeee3d6648a8ebbb32373d4c23fd9a87907e9f1f75f15ff8297a2638c76cedf3272229687c42b7d9aeb329338ff602e4502b8d2fbd755c0508566862de8beb50d9ae4684564be3cf01f4972636b40fa5bca9b31343a0b089798dfbaf941ec2d83c1d1f813f85356ebaa7351494ad1e42972b9aaab8e0fdfd113c49696febae8cd23a613f43b76db518776fe7e5939130abd3c592be12ae3c344bfd733446b56a201b978aa42783434c24fa8f370b7237cf82cf51e4fdaebdd466e4c62e8c48185700adccb8ea22dc656d85182463005ee6f3ee433fe23eb79747912c126a42b6c29fd5170c5ac3c7669b7537a36eba6bf7b81cf0985f7ed578cf5c9c801c4acf70c6a30d042ceaa997ef6a281330d6cf5bf6b5046e45bb16bd065f8090674b1680a08678df6477b6bcd9a0b0185fda14f2fbadfe3593c4b6e24251250c1501bbdad4b15b4baa1fc49be45d4a41ed5ce2bfb20b610e170702736807ee89db7a68aea77292fd7f7f3ccf96ec2b44b8c3c552dc682d69aaf92daba039eb06409614450ba06197b850662473d55b7360aba752bc38531a9bacb3188cc6b3c425bd4bc3017f07f687f8f3b72fbb6866a2f5b737737b93e72f61e2fd6d288a7d786d039fd87e7d07580a1fc9ae5a0e2ac70be77c98a1fcb034bf1eacd69bd0ba3f4e8d0a71cdde0014694510b9b7f154e632b0c5096ac44ce4982ca00d1b432c2c0eb71a3156daa4fe6bd22639e9a463aec1a640ba3c1c9f8f72b3fa35eea4405574262b7f6016fd006651f4be905bb52720d7197cae37f3082472d8eb067bf5b570966cdadf93981cf36126f8947dc930d03b4bf5e081f81c3a75a38b328315cf73fb16b1380233a659b4a6cdd964d6b5a0eea5a98c12600d7194be7d3da99c81912718c88c3fadc77e29e486c2892f53b5c87ec0dd8d2f8eb808ab4596fcd0da988b203bf1067ff30bb121c310693095c8dbe33544b043c022c3cf79d3783df2b97f07a9abc1c560c65e1ae8155d1e2d4009bdfbdb4199a416b755efe74dc6f3a843eca4013be6e654cd9e72399e22ca4c4f530997d1a85f5ff3bc86e7a25b15d4e6109235c7f6e7ad63d5d2f8454bc90adeb5c7791c52cbc409ffc8f9441bfcdf3d841959738de3c18370c694f2f68f3df093281c4f9c980db58f6c763c428be5be57b159f1fc6195b3f9ac29cd5443987dbec7fc408bf4fffdd4166f84a30557d177946c54bc93bb2d273f812bb0d7923f871ed8367c5a809c68f64fc79159ad4749158efa5b415b2b28da2d2464774306695fb00f1ca34055684920baf122edcebeddb676b66964f82dc8c79aa54c726592e192c48974c9fb7491f54c4d34e00310affa2c99900f43392a108497e9ffa4490e70d5bd793e72a2b808bb93abd5609e1fa67a2294a7a0a4974f85c3f1ed7e187598b6be8b138c3bf8338591ac05f1ae45919b272111935bf56219b0c4e61ba42041c721a125b5fe1f8764a75795e234004684c120fab9254c513043d68a66feb742ef97baa416f3b365c731b66698701b8fa40db9cc209dbfbebb05d594e027251f58d275af533a2bcc959846d5410094e053eb25b140acd1041779e0d4b4b79c5d960813c7cc8df5c0e704d1f18a23ec359245c46082019b0d94451e354ddd0b1276d2ee8a6d8e1cbc261730158afb75c37e05774bbcd1de568ef9f646f3267934fbc1ae3b2d97036793d3ebb805c2c7f04b1c6f817ca31a747c588211a2d8ace57cc575ad9335306486361f0f400c42750d0bbbd479b02517c1cf264f1075b65bd6e959be1c76b3d31caa7bde853f390a040c6ee0a80403b673e513dd2051140c0ab1c6b2f391a13e8228735a03f44ea063861ca4f3d5fb51ebef2489472b9d3e11b4490ea4d2f247e7571cb3381e192fefa50668c775c16d05320387f568299fa174e2c51d0411347264e319824ee4ec8114829ade5471dc3e2106acf2e6da1b6c0f452e3f5a26bbdaacec10a0c4880eaf7cf4d44ad9cf565075ac4557a0c44831fcc3e4a220eacd220c0d754e7ede74e6eb9dd110ac30eab65bed8a5dafa136e7ba6e02910493e9e9b133ef2b173ad86fb8a1c66dcbaa2caa9534b8e8f3438ee9537a29afaf19075fe4f544a8de20a6e08ecf3a075386e56c8d2148601390c3019a96b145a2035cbbae1d3f7d1ce4421e5914b671d8a3ed5be6229d744377281be881df9ce0a294eb53cba4d5060946d464b4a81ccfb8e535f6b92e37222751b56028993533ac1c36c0aef8c0252a80742eab6f4b045cd9d0593f7acf863718484eca624d7f46c3c373037a54b362f4fae472a2e2df6cf1b88bd43db1042ce5be403a0ff038a614ea861f9925366721b7ba59947238b2995319db30e35e227e63bc81eda2219f29332d57e955d93d7f81f5eb93c3adb6b15fa09e50c90b4409cdfa7b0ccfd478a7715118497fe472fe9e6386961359181a09ef89dabeef309e1681fd57884b7ddf3826548cf0554ee39d72e22a9f9c239764307703db9a71d615b0387974770c43630f505ae6fc56c30781858cfbb2744f88e6351af30894f15a792a5d90941c1aa801c9dc5c4c32f4ccc7ad82f1f5480539094e43172ea52ceff3fab94867a83ca1344878d5f286b684414ed758559a6f90a12603a44982ff50a8ceb0a18910cbe9adee65faa43e917a2c6a5ab9b25be241f2fd18fce0fbb610fb5fb71d59e4ebdb5d853f4c21914b4267965d875b3c4ce1fcc56e5951ba81b74f468519bc5218ada9eb1add5fdfd7c6ac6ed69594bc2067232b869ebcb9dd658143893dfbadb2fec9746237bf67e453342fb057187af9a10dc933731fe93b903c940b7eac4ce7c1d41298344b3e33298d841851198b91d4a2440e95ae579482bcec3d134b365a001cf2e2c894b851948437d4cd9c6db227232459adee643414a72697786824f2e2086355cb47cb491e87a7a16a758f2bbe2b2fc255f8cd63dc5cbf35529265d0303d2a8d32e1584a44003a32e705530d9173cae79710006da76fd9bf4340f114db6bf9550237f4ab415efe0f79d85d63c37eb84ad4a4d113aad1dfc4510476efb08fd236a0a77b687003f799551147b1f50c84fa96baf8da3f8d5e6891af29b207580030198acaaf43cb2d5b218e55e0ea91d6e85fb494e4730fd54aa16ab392da50da53095a7a6cfaba3f42dc7a2247fca421b413160d023b50271adccd4b5a96a927f4b2b75bfdc794e8db7d5cb3a4cf07d4086acf927bfa236bfb967a647a10713160dac1668ae42f92da73f2fa178ce89745fdb3a491c500838b2ae83e61ee19631e322dda07a2239d987c3468b8cd433b77587977737829d8918383bce664487e3aa143f675e127a41e52a57f3e048979c5ec68f4f222535ff240bbf05bb6c9b2f087bb6afaa172b0a0c823a98f053ceea65343fa563557a0f9a61cc015e0784e8a168e54ec9a2f1aa1ba74a5daa727769aa812df9eb7f063d3ebd35a4d27738225e7d30ec21a465e960cc2c0cc455d6acedc5f9ee6a4636ad8f009ef84fb55d787cb76dc7347aa3469d4c1eada0f5727f1067d3fbe3c6bd681e4e51acc983defc62797356effab6c24d2aed1097d612b4d158bb3995f75bb968d086deb3f4a91079e12c795ba286802cea96cf4b856380cc17edec4342710feb192b4aedbeb60dab2105e16fcc4a29f067629fdd73694406073754fb985c4da10963185d3b90c38eb34897f8bd3f6367e7b4c2029641b30a451655fed0643483f5069b9e0c113bad3491eeeefcf359f6fbef063e965daf8e138a74184e3e19495f03ed8f66d592dc21c78c576b4388799575294db84abf1b1a3384f1aaaa7f8860640d518464ec6e7c3c3564e297f2259bb77a605d7ba2bb2beffad85171e0fcfa14e57cb88f4754918652c7af79ee146561ab58d2b207d4fff20ad93f6f6d62d4f112e5801110fefbfd5b688cd816790c091771d2426b8f05d5f1ae1d357c3efaec118ed9eb125658925e9e3bfc2c01895e32919c2cebc9df8d774685ccb4aa8a5c42323f0e6873ae2a6563966972b1e2439c53b4aecac993ceddec1e15cee3347f1accffa68dcad10c56a5115e7e902f3c95fd5ecbffc45b795e1dff798030f4262cbac2b86c523d4812d2958f8c15e7473f044952ac50d1e7766a6ad5b3b415b511dda39303e99f04fc42953a93d460e65d6a3141e590d410a13a33bc217f771aa598e10fa309800420ab8e7a71e74266f08f207caf8ad76bdd1ed48e1678a0ec22eab4612b5e1168b74c27aaab9c184f93cc8fa93b8b618eee8d51c5850253f23afc3612c8bf31534f2186181f5f2875b5aaf31ebf16de00f49056afc37cd8d0dcbd2e59c68b7f52e4c22cb7aa5b9a93e4a68e3a13b329cde6c04460bcb37f61164c0150c6faeff4488922231d18bbd4b96f611e7b28dfbe49bd00e531f1bc501d3f3ae15d39b10f1a3ccb39fb2004b62356d79276c338a66ac7d8a52c65a03532ced3bfcc582df7296fb2788211e70d84a67fc87b4fcfa7eec5f4e87879f43cf7a7d5c88a2bb8656a53035ddada3747aa6b751ba9687f326bd24c8b438c6a7354bf9aeabf6bb77672e06cd1dd176c5eaf1fbd22d03f1de17f3d82186a1853bea20a777ca9941e625a56c7a32d480c5e4cee36c7d3d595f23f1dbd3d1530771799984b0e24c208d868d28705a26fff1a828899f62323af497c8118b21a213807b1da89b4b067f3c6f5d845b937e4f270abb64c18c4172aaefd93dfbbe96325bfa9cd1bcbc76c06119f3613dc3c8f5f857f16f635855e43ff215be108225178424d4be3ec3a3cbf568e5e5b0657ffcea46ea92a95060a5e73fe21fdd56fde98f8bc08cb3d87cc8bdb469087d474dfd97bfb27a368f4cdf9390971c73698c2e3c0e43e6b26f2e7ed860763321ada749302801a8e031a962083c09eb721f0f4dec9a6fbffb1f695a922261d73bd6dec6d637761c959542bda03123fbdfc1eaa3d58cffe7ae92a1c1454d898e1ae820dea01ee9fc556a875a0c117427d191a64f05187ee44158ea9f98cb8c8b25b79935efa36a35409d2c96b9d1db739abb313b7eb226710085140fc18899d9e3474248c301d29d7e7639952e0ec99f230fb2ad7bdccf1bebf3704df77629fefe2cf3788c02cf6d4ef5af39c51923ff6fa7ef79e377bd6ebcbf68c16b70c8ab0bb036bcecc2ff9bbe550d5a74760577f6b4749e466d24586ca20ab2e70cd7bac87ec3aa7b80a73266d236ce62e7a4c72d26d0ef1348e6272892675778da6623841bd7f7f11547c1ceba84a7c8f124ce1293048ad232cbe43a5daa18ce7ef0cb1ad6bd2b2a16211214f8d18a17b71da939a6f4a020784eed1d6637c29fc7142145139058ed5f1ea501eade840452a4ee5b3a21ef0f1a2718f742657682399bbfabdea4b98f42bd8ba336430f8a4588f53a4fd63a6601e5bc4dc0a3f1bdd39a78b9b3b473ac38cced3055d8a266a12a8d8d77049cb5f9f47874c9f14348a637c6fba0b73afb9c4d5e92f2ef69595f3b5b82fc39e1a95057c939da03ee257b221afe365173109300e91f1833a58e490117ef9b69be0f8abca3768f6d958371f4bee1bcb4cec1d6a7606dfefd50e32d8c919a8fecf84a1d38334954cd1bfceb1f1c46d084a8b11a97769caee5a64034b05b2ac023a32f1539bca68df6bb119569567f812128cc1038395f5e6f5ff6b3dee69e08ffd5ffe62ccaf9ce46ef6a53c6b2a0b28b289b2be6f2456c05b115c71ac41c9b13f2dfb4ebdc01e10bd32c059cdcc16cd3440b1cd861058da069ec8a8862f3b932ebba5ea3d2f730a5e4d5e008d7abd7f125e1b0c1cb8fa62061d05bc3d8b38b11f157166eb752bcc22d6b71fb033d553846415d9046609a03f9aa6a08da54e9ff36a9a4ee4326677eebd1db930e7b3d111f2852e26215661b830fbd7a0cd9d539c0e610f838a9759757230a80f39cb0146423405ede925b4623057195810a3c2da2b2155fb606a6dc44dc442882c26323321a84a7c6687bb70c142a5ccb4be7260388802e714ba6f6cd987b270a7e42477246b7fe0a3d1b6d0ccb182b3ffc07eebfe2399c2b8350fef37744b5e182ef1782b4a48692df3b8f3a21a5f08e1c3d6d93a44a9d7eaaa7c4852c1cae4c8c2db42770b115c0fa0f1d0d48be7b61efd0736e6689678ee30b79304be892b6392e67530c0fee221fe21a1f81b19e38b084887c239ded0976ade453e3600c56c490b2d50af7499d4322ea8911bd2b544c34d45047e7d1ae314a8ba131ce1834d99c9d6a970fe131c8ada5b2af5bc84a41a5217a42526c2afb261219104726a53a6add5323d5357d9401d63e0e0e376f4424e1a0aee615f8f6e5915404552d7127f3372972f6c4be11e0f3b0bda152b1c2f79c7efadd1b41839f6ff412c1df1a4954e081c869779aec1b97d6626de67e35b1a6fc87495aad28cfccae51c5d9cb911577a70eb41cab6be82240b1f95086096f198078dbd1777c734e3b7412bba6426c15c0a04344b82f0397fdc52878e538626a37cf5af1f3989d2277c9f4f6930d504965e311227392cd79d22a6a6d691aaaf3fb615cbad825361b53dd74be5e3d18e5b329383b656e501810c3c0c0b0b136a064e70336e07194de6de8980b79213bded9019a012245327005cfc083879ac19eba2625d4293203f8dc7bd93b582dc41c0da46d8cae2f511a3425d83fbaee75e8d3fba85e5e325e76f58e57f2cf0477632297808cc43f35f4eb79475c5f7412b04c6461a4be795b29b0777ce00b164ca4beb187516e0a0a38d2fb2556f7b6fafe91ecd91f1bbd709040f6efdb0a7d7a5f37a4e7bf71097a06c581849eea032fd55539c23a58018b810faa1ba535cf055d493ada1a4f1fd5b9a82e6d39cb0973ccc085f89a98fcc4e1b1cae58e1e51f19b2f8bbfb1a8d57a1a32194121d725d9f27232a0b2ab7d5a32f2ae1cf2c41299d6980af6269ad4bdf71bc38687d0edeff4f8f0d5a16dee2791b74e7ec463067d55ec3b3ccc4e482e63e62d685dadb758d3772b1a8a651dc842f815e1be5c7f03ac331350e65757185fb07e534eff5c74bfb92aeddcb980bf087fe82dea027cddbeb61c11096b74da4fc6209e9048ade274c50b22836ae199dd9955df8c1d2faab37ee0b7a7815aebb4af7e7ae2da3f16b8f4e7f399c251e75b868e75fae1c4e323af2c821729ed5aa03056b8820e299a1cadd2eb5e827054c3851670e65533f01115f4046c8904de9f0ff77016ed8b92fe02ecfe5b98312a22b3936c9e5288c4b31badb965fe087bf9d424505a5257310a717b55ca9dd727e916141945229e7d226bbb09989678fc44bf7150eea2890a83b438f378166f64de77c85ff9a45df88f429a13a49ae4cf1b4ce4cfe3f21dcd5f85fbdebeef479b2f287b7da8d3bddb5bb06caf8079b80af1dbc542698d9a76395fd4551b5fc9e1c6fcba1ebc286e251a70e244be0952f3c90ba3b090d0547658b25cea4f4fdc225365d6e4a68828408f9e4a7080b49cb3a7e74ee29150e64de76aa7c55b361640fd01e665eb67bc78c6f16e80b84449e3bd09501b76b6de6072a5b725fa5742f473bba3d3b149509e9d1851a83ed2977467a0965253385e78211e19e4228d75a406f899af65a3cbaf4f4063d4a33af832388f31486ad7e7670bb199ab3c006dc928d4127a2c0442c65368a5ab28d759a2240ad0904f66e4b079f3a5d1d1e3ef26a2bf565653d500cc63dd1a7317ab19470e7f9934b7abb2eea3125c6bef574d99fbdce7aa3236299f56ed4915d87ae26deaea7c3cb274cd0a5b8a7339b0b6215e1b654f94d17751c3a48467ecfa17885e49962e36d2df052db630a6bb2b8256f0f64bb7826b0d01440ae44084d0cd7c078d1427d91d0c71f58331dfa985cf0454debc6b8ed6797c2949ecdabd24eab9c4b0b4656094f30f1ebb7e77c80d2e61e3d15b750f5cf710c029c8fd9f525701464556022d7648aca4245ce0080dd9cef1472f1e35d0bb857f238aeb969a85f6a5197e076b05b940222d4f67f3874acff6abcfe3512075fa7750e41c0ce4c1855e3e68eac5690415b6aa241fa27d4c2e8e4bd95ffd20f8faf57cce5ab768f19d6622b2212b648786c447dc946a35d73be50c6c380adc393f739ef862a2f97454974fe23d18f0f9c27220c999017fbb03effb1e704818d536dc40dd28b96d488707199d81a7bad0137fe6aa249e30545bd16dd064e6c173288cd9507980789a0f3efc113be4de06a10dc92d8d66f577fb9d9070045bf1b63d740c18de7eef4b55ddff38a22769a8b9d6a5559440348a649d252a7777861062a60bc89e3a53f77e373fae63d791e4637482dac4b250f91fc93ca9eb9f3992ff1c7547c02d55fe6ff5a09e5522dc59bd7a70fc16e83fb1cc07e72f216191aad61ef8ca21dfc43379ae627aa28b5e1b35a2241d89a5fc0aed913324888a50a040b79e7b73bb818fdddde6fd67d4d9ac34d27f1c296bb300555b79313f89c56cc38dbc4f640d37fa3c2430c9847912e2fcf73c9bc1ae4f987cbf856c7386cbd20d28d57df5c3434fa767802cb9bcf1793e6bce72fb821234f13d63404c7b119eb98c155ae642476649a9bd2bd0c50feb8b89f28ff484e0b6e981bb1ce27423a6d1f72959c8da499e5b400809ff86acf510b3af2a0337f8f154a9cd6a41ece69a6cdfbb6ebd174c04ce3ddc5c0b164a54c2b3ec342a88fae27f06a7ff58be45d6cd44a7a6d3ef991bda173d748908e47084b35eedefd604c71bd1efb972f0a2a206e87cb62737e86c63f52073ad8f3e6234d5859aea87f879c93477b656c1d47afc3265544fd09d4a329159e84248b70dff8c7325812b4d42fff517392a72703fc58e8e5c0ec7fb8796cab3f8d5d431daa44c4e9c4573df5ab82864d77e935ff76778e58b5eb0f8eefa0af626cc23118de59197cf04bf63f612955033dd30904dc537dc05091cb6f68f26d91c63b5727a33fcbfb12e56d472de8436a453b7f6deb2452632f622fbf64e4035188d6553900baca9a946a5746b5a7f83ac5ae4a22653ca94bda440cd37d33e2c740dcbab1f8bcd8fcbe83de531686ad8fcc9a057612fd3192bb545551fd590a3192ac21c83e8f21fb080b741413553005d911e1d5e035a98f0a4e1389fb52bb1c8a77d653b9525e760b8cb900398433bec63cd5d95fc3eb1d5fd5dec5b0dfa0ae068a5854b2d07bd3c06142c4ac0996c2123be7b01e76337f3c39e9d2bbcbc991ef85692c89fb2080414b8bad2b99b6d716c648b5f05ed4e3ac53852472e7adf7aeb57966578c9c514870c57b85d6f4b63f9c1ed364883b62c8c13658f0fe7f93c1465f309a47e8f74a6b5086bad7d0c11b3b60396d6aa2e7295bd3703048c0a76fbe943d69a6541041929648d5d28e7bfeae4913237b4efc880442e40273f32bd990c2e6daa706f22fe87b797c72450a9c0b1b038bf1a6557bbcf269d72b6b581849469335144b89bde4a0b2547cf45aa9ffd2514a9ea20fcbff3057636417acb6b8c3e595bb8ddc9a3d38e2aacb4656b51d7a7e5a0deb70255dc29dabd43e1bb5404bf1671dc92399010f2240befc6ca18ac4c322121a6df4a63e36f09dbfc31589efd218d86daa670640dd5baa6721cc762f27e98cd40814578c8786f141011091fbcb20176e74c146412d117d6c64444e8016194119a581e8ebbfb38270994d2f80c023b0b991d1a685b947c2dba890aaea1d18bdcd9588bf9b9fa54932daa32dc293228cefdeea454c5c7edbc22e860d04581c444c00bb5c93e41698c901ebbdb098e41df0ad7ec6f9725e34044b6c37dec7392a77d37794db37b7df5590d9ac897d022034eee1da509459bed947ae822f0ce5d8eb5a968df3b66ff6e7ef64fee9ebff6435e5501c5cd08d30b66931f4ff0444e4f195a4febeece9515cd2f792915572fca7d58974205fc287a4ebdae20aefa24f872668692be779a6ea5230095a6ee0d0324dfad474224d3b2fe423737bce184482e096bdd6fcb8a051212bab7e39c9ba4efd5673eb901c953266ec3f264a2b8f549a1fa09da8930ca7c5d0300596e3a71b313317f243a25bc626e2ca23a47810f0f6e7ea8336f020ca8df8138d541fe20c699e014d6a6b36a3e6942d5721e88e7cd00809ae3c5acfccc430d007e226ee2dee086fc58b6a1e79c5a8ca206b5566f35e1a099ae4cf5bf5f560354d2eefb11fbb70d2a2f70d72e6b19c558a9469fe54c86eca62b87ec781208657d8f1a6f3a89f068d5e9eb8500d2967264f6ed8219c16f859d3b275584e3c20bdd3a42dba6f4a2dbfdfa5536a324fab798deb33b475b43679bedacfc025466763f5c8bcd335e8d4a9a9e0bd24e3aefb10b3695ae5757160eff210be566c3a25d7e5d415d6e91dbf6c7cba2c930918ed75a4ef7eb2fd6aec2236b2d6e7bd2222350fb40a67b91f1004fa344e9edd6759c1ddcacb1f37389d9dee34413187c30575e575a25712109cf2c8972552344e9032e9dfaf69da7cfa687023eceaec123a13ed686a0c18bc29ccd6eb04080574b6c106813cdc8eb1cfe1dc34452c77490204ed7f1b1f0ab475ccd121247a6b405a2805462b1937fa645f7f1fed9149d09ae90fdacb0f5b55ab32fae211f179b95a5850f0a371f3bc9745555af24d6a99bd738319109155c0f9e5f63f576a17eac6f478e11fb3730a6f775119bafbbb2e8ae28f82fabea46b00c362f3f71c2b5124f0737e23167bba7d25e8efd571e4cbc3742aff4c4e9a2002a1c794315b0965659d81ce834dc46ce2566e962014ab0b2ec05859a49acd4691aeb80d8d347dce5c43df92fb33b65902f3268a69b155ecb73f461ab7db977635d293f2cb873b7d00f79849d0ce5924453892f4d94ff05dd0014445549e304966d0201713988da94ef194ab2fb4b9904136aacf054ff9fd0a8f2e018d6f46ffb225387c4e4e87c2ef92562490aac3b8a3fe4eb3a8996f7c071fd26f010b9b6e81344bd96c102bea2ef1540f62542e975409761d0b29ff71633d12fd816a1677b476d84335d3663cf28b5d87fb85ec3a709f6c23849f6b0d0d244371f0130c10e1f413c1e4d7ea4bbcc6e3c3c44da32fb2bd1fd0068cb4cd9a8725bfe36e892b496c8577bca34cbed521acab6d6068e3c13bd6d3b4e9d576a1eb3a1b5ab4c49734b6a35a21c726111baaa4380d5b656ebb7a6fed847b65ddd408cc93e6ba3f5b5c7975d351b5d3a6bf9cabf9b9299d13c1b392ddd05e9785dae7650dfdf3d8eb9ce979b2a11f6f67bc72914aad3a1efb8fa34056b69986db3d8443741a5589e749f0804d390c42fd28029795bd47a8318c770145582be7862987277eb51c521c7dd4eb597b35b627b4a404be5d32d22e6c9c1e20cce721b6f3ff6add778b795c4c3cb986ff46b32bbf6a3b7eda2773b201eca24185020fb5e257120b491ffed8ad3988bb08738b228c5916fe4b7c0ec5fc03f2837971b5343428a38617523347c66c26c023da0f6b7a700568a7731e2ace36aea108634db203982960a72beb2ea7e4e4f57a954e18c8d9aca0014687f1865afc031cade87d0c6be057135a7b02ee470640d70a0641d9392e70bef771a50783b641612a96f7b97b61f1b4e2c2aad526778bad04effb018c68604c8189549be6c4301c2f6b316d40c0b7b07244fdad5613a95fea0256e09f8d8bbb308fa602ba11e1c5a7b7e3db99266c6fe1f59bb1522d5dd83295c73037b900b6d1f5b486377b7791dc390dc7ce6b6fa444caa4bc5700a5c769b70d31b2be7d16ee0b0f5f3f209fd1f2128a8639a29df600bb5a8287561544bb5e7a5f8f7e4f78a0d321af4fcc1d082777e928d6f848240cd41eb3fb58f1751f09a9c4e696319dc36ea5eb0c612a33808274edae2159b3455f7a71f47772bde2039365e8b8ef44ca689d2e4ebc88b1fc70946cfff22db85a1f9dba5209c0f00c13d6bc14469146fc7bf77d04ef0b38867d5b30fdc55a2966c623413e53a521f0a9a59565054287f97405c4e30338be6687ed5c0d51b72f1853fa4ffba59ce5d583f73e8561f50b237f0d306b934dbd534f8d036d090d6af5d9027ba3dca0e0220203e655a12238e62124b9d9142dcc7df0b28936539937ba8ec24aedc1f7524ed43a0d16610fc71869d78836f7893b76fffe6805ed4a32dd9851044bcfa913995bfb2f775b43bd0b9f6086ece5add884ee63cd51cbff54ff9d90a880fc285f4d56b5fe8c262b60fa74a7ac87906497207c449f2d53e92e44b2a9e57cbf7d70f029ac768f13dc2ba200f6ac9d8496726df1dcabfb8966f303c4e0c483fe7609739b66450b4f0a192856368be62dd237ef05d8172c14eaa3d411d0161cc4e334f5e487b736f2e25064a71eaaaad4833596aa90268ea010a3d8767dc05cebadf6c401c761db27211fad5df87226bdb333671ad9d67e91ad0fabf57e3f1eb73a5281713b7d710a7190ea3dc57a4c73c63155ab2a6554a2d15debf5b56aa84df2a75714079152a41cfa696a72f21ecd637153da79794173285c97e44fe4e33b3b46d4f8ea01f6a118b8ee64642b976e3a804056ec4ed34d6da5c533a7324dedfbab1b9e97955beb6d00b1b62e0f915777170a4a937fcff31d443b086c3b175ccfcefefbbe2bfdc64191a58497f3e94fd94faf58da01aa7df07f3c478de60c6289594d1727661152bb73d761c8bbd87ab1c103fab9be4d5c36d469cd2091ec071336622a7a1760a60a1cf332dac563e3ba6aaecad499376e4f9aaef31acbaa28a2f7caebc81237afb7907513680de3f743497f9cd205bdb65ce8d6d871f5b0552078f899929f76aaad28b113d2b1e0b8bd57772efb079a29af8ac5dca02bd27b25ecbbd742399902f95d15f658dc88a7c1f847cdc614312546fe65d40d2085750330255afd8385468d1ebe0c8a2e4627945a5c7fe7dc2614207bd76caac729edef578032f26903fa3ec19699fae93e8a4b21238f8765dd5a5297e308e2327dd56b2d47a539b9242119bf19565fe754f5b65c21f74b6e3c55638c236447356eaf8470d51be773da77be3a786c7397422522a7d2fafb5dc8a6ec4de57b1e637fc785ca3ebf5763934b7efd80003575d65d504bb8c7d69feb887596db2f33510f3a6ee2dd60824d2d8f2986d23dacb2c2761a77da4aaf6137aabe669bba5488fdde7facdcea40625d92a190ce055946c44669116e99cfd967ee0258b5cfe94a499c1d3530a210c80d0040ac32cf3a46bc1304feaea722e7c0deb7d4c8ecd7bdca3d35e112e6c19e203a3a7bebf0f2459b5382a188ecff04b8a4a591a7a9bf774d36fd76d0eb653208661d25c820d43228b2b89cf83ab73d73450c8e37ec37ea7eebad34f1fb722b19b697e41f4478b0b0e060e66553911c6b70faaf81a6fdeb39cd03fd42c95b365b4de17a5f7eefc46a58aac9995d4c55508970166d9bd1a54aa293339a27e89a488585934112919eb1e29819ea2a814254e3d0e51f73669b119cf0c9c3c4950aad7f0fe8a90b8608118a1476297ba50024a95e11a38456681cfd63c6bf37b8e3049db66ac86a036f1a14e8e01d25a292cb45b986d4d4661734058ef55fed7cdb3263023fa0f10bbe8f5ca7200cae1373acaaff8804bbba9845e430b8835660ab2bca203529ad993cbc6fa46a935ff4ea1ff7d4d7113fa6e98c329ffa177ad9728e33a0f4748d65000ab32f0485e903c30ab111b6d237860805bfc913ea7ab29b80f1f98e77b5d050fa98d26f89cfbbb794136291df09980f2f56967f596430774d10adbd8987e482df9419740945953b09baab0500123b4f51d44007f04ffa533b78b9ef4557a79bf2c77d1785ad7ffdff81c961908b5bb200a5bc6cea7ef3784fde9b94fbe1e508e11bde8a3db3f3bf6a03284899c9eefd4082324d438d506a0d4dfbf471ea731f811c3f7f442050e13534aa0713e826bde42718b443c56e6374c3b910e362bf8c3e110d295034f7bec918b3ca3d6e750f211428fb0a1357a65b0c6d413c6f6636012c9cdf513f71dc2f16fa001a4c287f948381e428519872d2a1ce150733b947000b69463f4ade91692af6dcde6e039647e5e159163005d5ad8414e7cd8783d84a635ebdd34b7a07973a90937f8ad4f2d6dade58266458b3537ae474deaba287a5221c2d4ab9de8988af92e1fb495cdd1f062b44f956d33e50fa94c119fb72667feb862b2d0ae5f5f5fbb4e4aa965c81f9ca16cbc93e0a6eb2c527db45e470d06a9d67da35ed72c749149a8250f7ecd7799bbd4dc5902ee76f04db5b2b87c14dd9f0b515c5bceecac5135588612a3df970fa1262b1f20c0a222e5b223e793af1973add3d124cebbdc4fa1a3de825571241bcac20bffa2d8f403bd7ecb14e60fc7f32421fff8e5d601bb3249239ebd70aa70765ac7f5fe5e64a27eb0d43dba82edcb1e14f66025eab78f78b3d1618d270b61b69e6bf5eb50e48d65136aac3ab0084ab050d5a67d4244662f9d4747841d2e01c15e1e34e0e62be7d066defe7145537be51086f839d592368ec8183bfb466c0a71fcedcd3fa6e3453a916e7aaa347562474e6a3bc1ca9c9d48f473c23c5aecc0e1c06ea420cfe7b2b43fe06f9127ceeb9f206a7f992a8a13b2a7b752e9fca77da157b0e7265c18bb0a2241177ba042d358396a12a72c709a9bdc27caec2a5cb1449ca7e2cb9ec9c82ab5b0bb2f77d57388ffa744c8b97e61c93f6ebfdc51f0d52d62ecabfb717dd393ac13f3bd72092f7fe69ed03c41b59a2b1601587f3a900af4298a189e8e0efcd27b389681bd2e2d66a1f99f91e696c4ee182ffb84618d608a05bfbc6520f182515601c6ecbde50219b7a80ddae2c31eac095e367e92265436398748ba26521e0fdcae5ed8d469f2840ffd257cb12561a0ebcbac99490a4a054feae6b9d50bb57d925ca0a4b6a0f1cde6e63b18bb8fe038efd4d276979c3269d4613e87f3448219d779f57245eaab7af102a3750350e8629382befaea197d39d6fb4458db4baf4aaf508d4a198bf45c8f904a769a4a3c3a446563f32c69f912d87d4e65f48adc62dff4c2387a5d7787f2276c17fd4f85345518a69b2fbc4338ab037933e5affee3702f5c3259d9c73385b23f2990bec27144b3072be942b1a93f0d9d5a28704ac98d8f86dc2060d1f9ade1f9081b5f6afba629bce66901a306b3af71380cecffa75459bf8ff850618e8bfd864946ef16018b6bb9f71d5e5679245d921c0deffbf68283d9070d66ca3d7c4f3d684ed15102dd2b6c21f0d0c42747f0fd62267422a956d55e9e456a38c58977b6476c83450cce54a1cc31ffefeaade3f414f81df9224662d3c6442223388ed2aa30087cdbc86d74868658799fc9fb6f00ff0b955a8f0a60cce407ca7fa2d0a99f2bea0d2a0df2dcab1c72cbaaaa49069c8739dfae88253bd2feec0a2b3622667f7298b4c995a49389c97ec91667bf5dbae569d1c1e8d3b79b0ad55293ec4b95da65ea1fe13ca0ccfe4c12cec14962449b86e3d0a3086dcfd0c740e79c2b1f40a1807865b02eb37d07869ff8113c83214e2337b08f50979b8ae9246578490eb0fabff420ea611beb03ae65c8ce378449eef80778c3a70ec05fd0bedc00856ccb8d8d68d70a1dc3c4aa70bd98436c1466a29101b654adf724f6b679e4ee203683a6a576c4ae6034989f71b313b890c1134daa1ea8ac3b92cb9220d00ae1f46196e966eef169afe6b0595edfb086aec6636baa46dce06b08919323a9c8507cc528c3ce64de97302c1815f0407ba291257a36bfbca8659a312edbd620be581ebb706c8d5267bf64401661bc20d9b03e71d29271555bec63df171cf1400a0c085cf066c945801534bff568e1cf56f6af2cbadda019b3b6506321855bbe965e433eb519b9c42598d5153495758a23c6f65020d9ea135530f82cd49a1e778b5665a0101210337e4462a8031e584a20daa7dacbdd0b81ca97b3956c803c955c8f801b0afddfdf48d4c11559c4233dba0eab4e472abd7a360e6e29262214aaf0e554a2a635ce75a15355a0519620e302a1d1e616c39a32b234a1c1b88b1ee678522472c99edb4c11de6344c9b89082475e23150636f501736f8ce158ae8004478ad94d7d52c0b91ebd4d8b80a6b2a53b88d821c0321ec09ea6c82151e215edae49f961a950342eda84c95ae904e25ac07cb12e450d88a3e4b04401988655e64ea268d5708cebaf30f63c5eee8c1a8f14787da9285e19e46399d2b83d67b658464e6c8ebf3161effb5d9caaa41a95f42a68135a6817287af41d4ff7052c686bb7addaa82d9ddb81adfbcd1c094d4b1ae072c73001ca0fb41fd6c578eecffe5159254c9ae7931d870beb1867ffcd50f261f81ebacb901286469eea00db3f213a6628bdd4fcfafea2121069f3f679cd6d3e1f54abd126965a669ef32191fe8314d64d8cd5a530f3b0e82d08c02e608b0552bf0ac7773b483eadef650b09fab00747fcfd7816e84c5ee450be5d70f90adf4670f9cad60de8f70f1edef8a33fb38106636131976eb424a219ba60db959a34b8ad7eb2d33c49264206863681c7da3664f9265ccd1dc4e66d3e53015cbbddd5d39611b1c076f9caac6933856defd5008302a60fbaa8141d73406377918fe74482a72947047e98abfe3ad1c69c877a355e578b699603cfb8885a54e628abcc5cb23791c7a2a0d1c47fcdc5f8eefa9312646f1db77899cc3adaa36ca5bd28825634f3cd47d2223e51b337edd5868858986014d25eccd84ea072e63bf4ef4c5c067db2e036a439c7d1c089a3bc0eb30aa7d4c49350171a401c2775cee880849c923e52c6728b1c952db1334513e38208a3ef627edcef0fbc91a370a2082c82af4773f22e2aa70f788f3045c0d91f34b014f9d31d0ca67fcf1752e78f148c3ffedc213fc23b4988f2df78c917bddef3a41057a0fc711ddc21d45246c40bedfc3007234abfb46f4b27a22c2741a632a41878f013090937dc8bb69ab7e062dd91bfce09bb35c2362ce9267535cc01c3cc1f69b2cd95239ac5ec9ad774263458974f1e76c6db3e89b1d1e3745a1a60949b4dbdbca1a44c7380d51c749d1f06a3a2734ca2471fe395745cb4a017f23ac3519424f0547ea29f582c17722be8c0450e48a6985a2d163aa722c799ba92f5cea582c0232e61da203fefbfbba57a296c73ef786cb75cb2a0fa4b114974eb9693535735879afbc9e74b612d425d58cb433d405597fba1012f501357fa347c0bd9f3ee3b1acad45c4ec357877b0bc9f9e6078bd8e280c36027c48538c3971ab3f28a9da437486907862f69478886726ae927ec67b8fbea747acd0032d622c3d6f69056ec41d8402036610bfd6553be48f82d90856963b0871cb04c618e0298054fafe7cca62a9bf9d6be5c66be57d95827b1de7ced5c81e575c12978aa1fc9f3f543dda1ce867362e625ff1fb5ba9cbfaa1ffec55edaf52c7e0611e91f4f1fa14682e2ae852f8d8f83f435ca6d7ae22b71f83bfbd85561db0ff1484a4373cc0ecc4221138295810af6963fb454de18a1dc0da45a75bdf1626f81c42e9803ea291ca9254c7a9e65db1e94d9e22b939a56f2406b502a5cc889309ba6c88d2d1563862f1032769b16e2dff1150be6c25033fb5b92efd08cc05f2d1a1d0291b5901e7c3052e708098b190f799f10586517384bce3c59729de4aa5acc461167a82c73374e8cddc02361d9b792d879971ba70a06cdf2a679c3543261483a42e30e8e3f8bc6f663022866c8cf6903e9d25af8bea250e6ee26831b6fa18b3ff1062d14771138525ab9d82e7eab04aceb210e54d1aa7e2ee4c8b50896261bcf88d0ba4df68dd3664661de0f412872bc647b611cb842c126171b1363892b42cc206e2bdb97754cb12fb4ed9fcc42f29a43bc930b25a116275799c6a1c0aff0ae15ea998ee11ac7885eeecbed970576fc47e6a85c3c2a442169189378de421185a3a518e95e99be59e40bff17943ce05053a02c9ad9cc3a151f67a8c7a0c77c324829dd8669926698c909373b00d689c0424e22151e0c61be7aa5e407a0afc53aca7ac67204a0179fd684ec7c366770006980459783f2310fd946d75ec84006a508024ad264dd864da39d7f91604097faf35af02e518d3268ad1ef4e36f2e162c38f2a388301ef6b8fc286b11522c1c33d80eb3aa316df7ae3579ab6bdb97c0fb50e21bf8bf421689da1a6f7524f89235c4e2b0d5b0c9a6edf1f320c01d7a9cb655de197a161f8fe797e1158ff33a9faadefc05bc02004f5a04a4ce08425575df5a321a23f4095a481f8fa87a851211d181ce46f4e0c2ad445a39de4f5891de0da84ac7f3bd5ff50c415b4e3cbf16514a4721b628d2231e1e0c2f0a7fc4908b9c805ca7ad1f16773097bd32aeb28c36bbd325cfe7bd8e0a67c78c17d67c8d820c65a8b818bafaa850c69004363482327d7be5787c8452d4c975746f87b4726d4ac9d55bab51d994857545a27a797f7d74c626a85a568517a0f9ffe122c8876b60eaf5cfd66ffa8f31f29975ccbc45e576e531a6155aa00ca3930fb58fae4e0fd9ddd88a1a1e2a7c44d905c6ccb4ad0caf5f718c5a4a86b41a2f62ec64f2f6641ef35639212c20a0e92f05527dd8344c3a64f47c8a349673a6cd423dbecefa646ef59503cc900fad8b6c299b3e1da388028cf1f4537412cdeddef74cf188df42802cf254dd40dd5801ef7da8e741e68112fd2ca486d1fe1778ebcb99300e4c0e92f8f8cc0372ad5d4806888dabace2535e2268d5e5f4f052c6e19dd7fa83aa177f4765afc09e83f1884c8ca4c642b6462e8b31c8a2507be48246fc10291e7101a795e3b686114797663f7aebf4d23e3f6c50fc1c4c42301b22bc97a8c44f6cc32edcb6cb95397a93220d98ae7570471a2c9fe838376f688b25efd3a695686be673ec55ea9a8d110b77f24057cdcdbb995ff2bb778a45a8f5437e75794f62e6c2c5cf04f60e340dea7096fbc9d9acd7ce7e878bc504ff6ae2da1c47506d27e26bb3506bc1d1220304a44ed31cf9839113e8af8dc7bfa42a5e2db4869b8bb166bdb98c9941fc654ff1b221088d3cf9cca13f02614c484b0a62fee4c286a8793e266cd3eba7c67d9730f14cc9fbe4b0801714fc65097c51dd20e230abf7fd279c86fb8bc0eb375807a39f688cf4541e9717ddc1268e3254527482f20ccba1a7e97866739cb6b7f6dad7e86ac9b05f41762ceea0347242c9a3da627949b3ee31db1539f65142c774da487fe84d2e33784540dda0474093a2e9353c178c487eb6def65aacd049387cb2e8132f0a62d6624fab2da0a5cad26ced1c399bf3b61b831ce0ae6af97379737a4ddde7b3ed1d748ac0ab22c5b598e8d60fffd6a6d0b1b53d13d49bc2dcab002724d8f041b057f40e5c93aa2868bf504982c1af2aeb42224544dc090b9aa5b64cefcece87b5ef4a4af57e1309824a41ee29bcb20979efd4029ab50a19e4a49a8b6aadcb622382c7966838691d8b489e0a81f63815875d12a8bc87a24f0bc4a52711b6d3160cff411d5c1fa153a5d73a29f0fff5814f029063ade0636171d85dca91656002b56791b4b4419bd7054509064628cc9873701f5a9c1ec05572e4eebe1157df642c73a8d9246e1ec3fcd86479a705d9d965be31847d157419bc13d186464f49c01803a92c7b7d3cbc73bf6e7a73b314f9fcd9d145836eb5961c42e3a3d1d8d985c8a70468a2e5c21ed850320f9a229622f53c5026a4ebfd93f431c4d636dadd592ef3fb4cdab2b526c016206d39efff559df79a992e57a414a3a99addd9d45daa391de526d244e9c38168f390f737e6e0c8662e61f5abe54b4bc826b76be505a7b38d17f249dbd3aca2cb2eb9f6e04973ed6f43c3bc37773cc5559c3f01af0bbcca6057033bb3b1314aca110da23391959eea3dc62eea17f85cc84c7cd357b242c9c6fc201a0c6b4ae80f7eeba782374e4b1449800c878c287955877d27b2686440eb5cb65b448142b9201b3cbb9f9a0fe07dd99505517d072edfd6c5951c335f1ff2a3768da35d9cb418e1a8b3d5cf480d130a39a5fedf432c1163106c28c8a9343fcceb46861d31e67a5a5eed0aa21b607f165124a2d7af0c6850c05975b310a100e437629fc85189699f5305f110037f4a848c1dc07889f680a45f4650fa49e1f2b73cbfcc9586dbdd8b8eb6f2315b57de0d5c943fa536d51715a38441fb4eb2f994993db2700c60a6e91f125008e943ee7ddfca5a61303b68dd05d3db40eb7623526dcb8d028363614c6773eec6b7468785203f966bad451f782438fa298e28298a0b729e6242f5814061d28e10a2ceb6acc556c5829cee80556efc554e711001c3f616061bc169113a114e4ec059790d6146e7bc5467de33882c842d739e5b37aeb2ab790974609621637074c71e05d982b4e4e8bbbbe1ba1c31f9330d32dd86eaf340288eb8283aaa276bdc152dbf9732e634a579b2943a0ddaff29a1a6ff0d346ca4707d9f65461845b8f7c5d5b855dd52f024b61befa51d346ce6391d64b9896460ac33ce71f8825f81204b99ce9661fc914aa400e8479bbb161e8fa8444cd10d571ceeb77b497aeac7436531824709dfb45a682b0c349cf3993f7b0805f073a655d9cdc467c6a4c0e5aa71fec3c67834fbdadd0516e4cef9f571d543d88f0e054bc5809a1167ae5a4c2ae4da808fd5136562aa0c146a754c35d012e2916d656a92e40251bef45ca9546ed83ef5e5e94d863352d98b32eeca48618a7c9ad148f0e35b40a0cae9367f400341661d23302b3a0fa8cc1da925e51f006e3c4abc13626ec03ebf9bfbbe086ced5c133a85bfc7fcf0cfd2d3ba5d7fbd5b4b1274c588fcea2e74b18c85b33fd7cbc061c634b3fa0d81c5efdfcf99a464b2c9e169673d7767d53f8a7a89dcdf4e33006bea58b688971f077669e6afd64c0ce86603507fdf756c3155d5ae7db1b2ae22f0fba050ce54b0ada8dc043f07a6a1f3ac1b74f6291d4100bc91bd9f210d5168ecee69c4d8ca87b42dae6a4ee46e84bd93f21b3068174a86d6e77b42fcc1fd330e42781d8df9186b2ece2c03203a513e58f509631f7bb08e8a49d08438c42b8ce0faf7ef548e60d8d0dc351c4dc9ebed086c6db662cc964344b72a80332d027b87e7382ba0c3f97c9f48848c73a17838223aab7d5abc86cfc2a709d7db082c70169c3bacc54fae11b72a4a56072c18bd6c493ba0d7a5d2d97bcae647e40aa30b2cae013fad4bb8f349e3c6b5893c98ac0c79b3b707b596a74e63a08a45dea046e60eec4fa928072fe95b6d1f4fb4ef53f6a40824a40336761a2f77fe96100894c37194262c54cafd7140e5e6f5dbdb2381ef1456b1d8b4be21ba0126a5cba3f100557a4c4efd1e474facbabe15f0dd87b6e29660dfa725a1d5c00a119f51fa7ba8d970be1d4aba9f0e7f21543ed403bb0fc8bbd152ed88d8dc3cbb26ce4994000f1d946d1b30d5f78197b4d74a94d053e7d96b7a6fbf5a08829651ab5fe82ae4313802e8b1877640050702a3bb0fd5fc704a327ffeb86ccc0159d6b0dc14b7c9158c26d66a52e964c5099ec8e5766824b046d01113d4f261801a4e6a1270b04379896c0cc0d881c67c8d6a665227711dd7188bd79e6db4b8f97b18de9b0d7135ad3c475c69035d5fdfd08f913444ddb437ce2b07ed8a5f108f35f2435113487a37f5796bad4cba2413f32fdd3ae2907c15a4fa3a8c56a41c5004b291ca56379ae4b6a1f02e5dc93d08ad6d58b0c0d3725e4cf24700d4af869c7a883e2b57fbcf0b71cd8e047683096821fc2e1bdfa307c20c5177ff08724d333f624c5f1f975f61b14f17a4f88c22c00819ef4b9c0b838e3f15183ba2018a670a7d884b89263e13ad46cd7913d4b86295dfcd97054212077536d62e61497b90ec6b64b91e312914b86c3b9da69bc527b09830c0c293671c67daed1d2f32006f958ca5bdaa2b7444f118a3bfb45811ec3f09f9461fcca4a2068ffa3037ffc42fb3c56ccdbcde62d4d80ec780bb5909cd60ef181a755eff8372c09dd93a962cbc6aed87afcb90158893c7cf9cc972a1ce10c8c72c55084a9a41f56c1d115e30c3d10d8d67125a28eaab1df48a97f7a732c4e35d19e6cd6bd3960506d43b0be16bf60b7337aad5d10a11629cf53e1ec899983f5e3ec67ba89ce97fc9e332513b2c82197a7f13f6de7d97f0caaa7936df6f6caf708e96be14ebf1c702e7eb893861a8df4752257f56b35cff61cc2665cd1313155a2223122dcaffc0331d442badf9126d22c2f7506e035fe1a4b7a4204b5c5e3624849d4fde46d86317d36bf4f72618546350a3ead739a302d828da422a9f6a69ac68b597d3c2191538b5bd3274582bb77b982f37b925cab6526b92f02e58824b436a8a95225253ceefe725c626f082fc159f9436781e731c612f69f70ae9f1be99a6b67b4980ae88ecdb6b5e3fd11647c44a1999e9786b569e82b2402c792b500a2305ea4108f58040ea4d16957b5bb11d3bd4ca5975187ebfac33f844651c04aa127bf81ab5bfc6c705be761ea9ce9df82bd37952bf3cf7be6b5a8a27c537be124165b246bd8c1e22dfd9fa04e3a91adbe029766eb24e56673080adafc80545d842a299e65bf0b648c4d9c701dc6b6bbd4094d59282b62ed38ea9607e8e56c4df15ba989352ee5ca7d1e167ca862704b45442ca9e387fa4189e528cc602eca998e40903a9e8599d5bb7d02cd37b24ce71219793adb8cd907a153c0073c0fa506ba0fe9773461be6f76fdfd125cf7be1c5ce8f85701f5a7e0b97e3f6629faf13958ed86c9997d8c95f78a227705754f1007f0631e6d0cdf3dffbdd2c4a609739ab7f8ba6568c3aa71b42517818c9fda8274ac86a17df153ae3fec0b4dbad447018c4382d44f932d7b2fad1e67631f7410cb1de6ed691997192af565abce7488f59653b1c9c8929a4b765fefcba85f4ecd32f89701615b74882c71dc8f523b07d26fa41db982f40f03c8ffa8ed8e5403b3378594d5bc9b62c862dfad8a05777aefc6339f6453cc4f80ac517da841e38f5a19473d5ca93b0ad4ea30c747c447ec16911591e43008c444592443bddec6acf367085ff4503322c919a4ed1ab44f44641a95ba8d88328540ada34033fc9bbf95ca8eb0944269108254f076d78667957511e9d3e15e687d0085d66960b52acb06c7f7ebd1497a7759bd95819599b741bc52d0ea4b4158c9266b514d9a405d8519854003c568ba7d83b1acb56efe65a8222d357c12faef306ac25d9d924d07856a1e8e74ab67c0681a371eb03d3f0e086377dfd7ccc4bfa7310f9b74d31e4c993bca1746d7f0027d999bbdb857807d52ab9821970c5350ef918d0ae367a924ba9be65c864bfcd516134cab011cbb51046b75d18f30a8a8b7fe827a1d730377d0fd24afc3b498f9da37932e053ddbfe6127bb2b9f5e3f27f266f2bce8795940500b5df9d70f14f33ae439ee299b773dfe14326b62fc70b8049d60362aeb0885ceda4bae3a6c7283bb62c427ecb32f8b185b00eee106a1540edae68d39e0cee32294cd205f32ef631b4d565b33a74793cde07784e4d691629848cf351e93a67d7412f2aa9f2558d922ae39dd478c924db76953311c40c62396f10693bbc3b410632d3efa0073df4eb6158054ead4f6aa7d360001741e0862cb69ca7f18859dce21e8fb9bee1edad780bad7c6bdf39f2ea8ab45bba74cc5fd1f0166c80b6fc4313d49d0f51b82b72b79dcf8f44edc5b243e57436c6a57bff749be39f25a19529a2fdd6ce94191569766d150c584d1ea1b1da2f76d5cb314dc802f0ac79babf5d77682516d0535657df6538ac3e1c0c3b3a63573aa54625d0c286b1e4367b7a70c22bc6bafbcd8e0b77ab0eff208f02a08b6767f4a194413b55754c3f38834b8ee5b6bf5c45bd13f6ce5c52f4220b5b6f6e2a27d84d2ffaaefb462d6d80a6e1367f222d9620784d4e02f95ca2bc6f019b2fb7c810a19ac8a1fd784e26b733695a425e14091d1f2664a4b0c3705b01325e0fad7c3834d5e398da11af8e05bf3dac78e258a69dc63475d801d448c60859713f0b11ea94cba73839079855e06585eff6c60a66dd922d70eb2b86d072aecb33957d1bd67e71a65761e99f86e7a371a747e015722220fd871f3276460f282b01e05770283f82aab567cad56a3dc832f7aaa946006f71bf99bd13150b159dcb7a72756eb06835276adee609d69534cb9750bd6c8dbc0f9d5ae8e859ce79cfc0bf2d702fca7b2e8ee2236fa10fb5082876e5b873c629bb4ef37d48786037ada68342d8121af49a7526fbb5030438659312651edc8465534e32ab373c513e44d6559ebf9b18dc6590b3d2747f175c038d866527e4d155535bf5c8f86254e47443b253109cee31618b59169a544a64407ac1083866ea273b6fcab4f58e0e339e0434ebd0142c86758930c9be310d2ed590b41b946a60c515b7e07950fd3d385ba469f3d94de389fdd37b6d24399d42935e3fa5a3d6950560226b6843da279a3601a088ff724468f62f195045c8afa29de17557961876c247726b377ccd5c1c913b5f90a29975cb0d30da2df498b24585c5c79e87c589c738130a82eacf8a413b8aa0fa347c5d8e9f8325694ab4cf8207f0ef645bef45d6f2b4e2ffeaae96fdbce66a5d917beef61b3222f12243bdb7aaabdfcf798efeddf47b6e61733a91345fdf4d2368464aeb439a5f448c94113a4c6cbe6d52806e199a090ad41988243302ce40f682f4541d9ce2cb334f473f3e6ff1f721d836a6843cf4018f81f74a1370bafde5e3c376da12f36141b052d9e14828def05f4eb5a1fb33a0cc9595ef1d1410f7d58433c9acf9232138503b3d66a49ad241da404df9f4af6d10a27ba2a707b9d60eaaeeeaebd1b5a1ec950be3f622ce55d0aed312cad0a21bdd40d7f3b1f9f70571ceef8f7b1f3b58d7cf6ac8da3ec3b40efdb8088047fdc61c5ef34edcfc746fd30d27ea906f7c688f65ec4c573c19049b3fdde33003c92f512df223cb8fa37940c77b02322184798107a160dd2e6ddf906cc0074581515429fa0ae845f83617a541908956c993d23c25beaedd62c251d3700ac68bcaa067f18e0548016501c6167b62ec333099f8bf21a7954373b9dc56fbed0591b77e8d41be61303f0da34fe3448b361ee70b7094ef9f38bd533c9dbc27965ce66b591ffd67ac73f1b9f0cb3324c5c8bffbf443b863be8f23413900228ccc50768e0ba69366b228cb265e09a5fe8918a56867b80db26fc64c424aed38692bffa37c4f55d0c90f4e64ae205415b145f14c5602d131fe99eb7a57c2a49b4b8ae942ccc1c3b4fc02d75cd857717338fbfa7695599127ab733e1df8683b7a979a37309092a7812c3514e125950fe74f71275c15bb94d95d745ed3ce246411ca2e7b5e92f8a50dba5579827cfde0a057081c6d66acae98a26f036680a6328725d4f3c52b6e15161032a4b651fa96fcb4983d384a78da141aea18c40d046d7b15d5496defb36aeadfd38cf1b4384a62ea5cdfd7978e10a00b30754ccde250123005798dc6d357c464c50119dcf771595fb44ab9170ed56d7a1fcd66a1dd3a04dd593f095bd443eae666c88a2a30f2c069e54a12604b2773fa2d91bd3777e48de3f43bfb9e0fcfd27bea6c43389c26188adad6afdf0cbe8a5d7105139e160d15415b6777f3a3b4ba39321435e87615244b44e2510b2f9d694da82187989bbf3c0dbe97983ce7b1d4ba70b773fec8e9dabb60d12c37f5fff4a7a38010d5f682a6410ae0347d17d5db141123c8cb624bd89a54c0e3a17a11c3759f6f527aa15c8a36964288859f3c440bc4a96822e85f8d7ecaebccdcf5f0d138d6e46125dae5f9f6ffa53dd79c38bf72c63bf7ff57f66ab581136d8e88fbd5dfdf8215c409d901bf3cf8a819bd6e9b20381707ca995577a3279f6279f88453ac273d4aa5add6dcaaebbc899eec1cc175153983463db648b24f156c10605914f6c722064a60d6987619de8a4eefbba329c20b93d337acd636c1d13c841dd83a4b0359525adbba13a5d798454bd428a86a6f93af8627455d0b2399eb7dd501728dab513a3246e9815957a8bfd3301dd171651fc99a20bca427b92f32595311008cd2baa2d8d74a7dd44c2b9222932ce61363ebf4614fb2138bb1d0a6d4b472c6f71ae7383dbcaf0c906c6d8ce7b8b27894a10ced0df3a0d506e9799419352fef8e425f6fe587e9efd945e0fc36f1c4e263fe7b20a2588eb973352d7a3757f9d62841375f01a2ec4e871a6c2c14c2f6fa87d2e2c56e662b32500855eacc6dba32dd0535e261a73fc8f3435aa527bf9695630a9c9432a60ad3578075edfdcc01dca2685b3fc8b2cffd39563fe81b2f6e34ff239f6f2c28ac0c92b6be8716b8471ca4a164de48c3c2fedc0dcccd845ed587d9dc7666c6d96b5a1691ae1eb114fc73decbd25edac2e61fda8fd598da8a6371f545ec961f908b02b865e2839d6e3965138a6c48bde360f6802266174d5d6e019d2d36e570db34f681168008ad6ee9fd0ae068ed86a6317758c5ddf40e1faf9ee91cf6b92b4392eaaad1aed0fae645bb24cde8d04a1b626b744e486426860c10bad4e0c64acd84088487fdb83ceaa65839b140206359e9fbbcd016f37e0b8987388fa0912785ca8e35b79dcb75b610204ec159aec4233266c14b405af95f11257adfab183cb708351a601bf84c7f18211550d4bd51617620c5e37bad731f2968ef515fe60eb820daaf2a87d31919b532242d17b7727f15e7116d125e59d61f2b6cefa19904e50de769a2e4c09297cd76df730e0e669ba04ffa16789bbba81f4302fc8b57a9203b326fdcb9fe7c1761270c21045b518b98fb971100adb96cb7c8c0c1330b83897886e75efdae507d484394e0e091fa617f6ca01bc19a01eae44516dc2b29f2b6cf5db84991f617e744a09c19d505edeb0c8603ac4f2514849801fdf7055e0b4b14026ac2379af374f8ee6d8b61f91feab8447f79a1fa3953c6f3990c0105fe82d53257940b3eb2440508c49d08111567ed4e8c002721d6825488ed158b375f7aab21c7ff7baa338a4b42c49dea0084f6475e2212c9fcc7189156dcdfc23693004db1d9f11ad8636ba93879375b0cbbd4b1227ef966b1ca5e12e7171c870e48c802d056b888ccb054d5fa0eb03dae49cd9e07ec21c16d8f1d63c42e4c2aeb74af19d2a5dbe637801ba721176a4663e4915e50f2699ff9967be015cbd3a9a360a4b6c89f3f50b71963db380629b88481916f4f765b1ecfa1b0fb754288594f966a381dee2d0716188c143085ffef31a21b4bb1cc3779cdd476b6c9930944e522714fec0fdc67d4fc039b1acb72e37e1a6dd498f0de605e04d9ab2039efed16b3d8899f4e148559e6e72c826f6f747ed97c7cff49614921e8a4ee72057dcc9a55cd69b1602a4cb2fd546dd56fd8862994a46f286ac7fc1f819ec953954dfb0d66f612773a4f785f4e7dfa08f344737fb1b9b79ae6de20e84b1eb69fab3c87b3df04b702c75dca99ebb0e08f64e59f787d1f76a04a936f96e842052eefb0652d0cf2fc05db1e6b808a0be2fd9c26746e7b023ae1c3ff4a69297941266caa27417b8c3f6d78c13cc97e6638b275e8a1245f943a2ea94fc8093a6b490f3b4392b6088f6de8e71b4c70e528e666ddb9443af95f13620b2631d0e9b4e8dc49796881448e9f445dea65664e64d03e070d1f64a7ababa9f8bab792dbaafd704d2ff90e360aa36c704d6eff5069e0f74d9a6e7da19412b6488031c79360dcfa04b2fc3c5f20677acddb98ccea036a4ed1c4bfd8288ee84002661f253e00458474939646381165f546226532e90507982d1298323e2d5ec3ee7723c7fe5ac46cefe2564e08a6490d7f2aa6704f1a3e6f62a647f30f4279ee4ff1e8ed0f2971f942efdf4ee96780eea1c7b51df3f48865aad388141eeab1ddb6afb42849e064413cc2d765c4fd7083092a4db346704b703236ac12af74d3dc64905fbf6f4164a8f69c7dd7f435a23639593af351b23d17c73bdfd8822def4f9912cd497742e2d87bf28c7583e753cbcd419101dbb6d563c5689e61c375567e1c6d335ac7db277916f95840b0d4000a997d4af6de1a65f8b3f5d57f4b588d3e6179a7405a0a07af0d84f277e5804e2275447364a3653bdf66835c73bfff99dd5613e785aedb2e28760762c165bbc96b9030fbf364a592f9b8e1429f4b2690a168623080997e3ee8eb38a601a889e0e27190b499372c19b51e9a8dd01ebe7b6dbc351d1c4b8a0c4b9e6268e99dc0b9115825560d37f7c4eacb2c5ca2466ac14de8d1785c7edda12da4ff75ef2c6da9fa7b76aa8bf48539edab812d36bfb5104fa196105aa498a75670de665cf7bae91efdbea6c5c5cc2961106daf6f638616ebd4805456bebecbea1cd2d772a15c85fc4aba308996899c9c83d5e7e3977a15e88e24fa6e705eccc279508d80f71c9d63e1b088cd70084ac94a53a88580fdba06134fd16eb5876e1987e8b976c98f63bbb5c0d75ac9c3725352f377a96f5157edf890699614fa69344c63583c15b5a9d18769e210cb489a532ec993459f8936e7a9224556b83b64b08e9083591fff6f3c9a3d69305906dee413262cb52098f9a4ed2db3bb9906476fd0d299a6bc1cd4b63c2c2d9be3d310d3ae66b44d59ce52476b096db39346c5beb938ea7fafa26859a70b1b390e56e3a621bfcf571fb9b72b96b97e2dc06fa7c8a53b36fbf8b30a3e6e793e7d742d496ea19688594928b339fb21cc3328a3740a9a0bba891f162065fc9a1a066730a1fb4f9d5f0121bee6bcc49fe3e2beb6c15a95af84d568b7592166d127ccd3740795ad2ec9654317c142bae4f0602d4225d633feb3a18779a92c63014d2ca76ae7387aeca6e06d80ecc19dd54ec315c506ba0741e37f1df202ef0a5ec52ed2ef87ac374221a11b52452d9bac6f13d8567fc47a5827bf3020be57548871a9d08cca46f7bea2c7a63824ad6dbd3251968f143244b24b83bfed56898729a371809ccf7c5cc50e631ffd999a583fdc46fab8d2e9d210ab22a075c1ae5395462284d86e4f7eee164a8104b841d645498171e9883d9d492467ee3437e22fa9192710953622c9cdc0764ea465380a0a3c10db18bc4576533ce3984796f20c2c931dd4dde44b612d12ea20ec2e159402503965b1b1b91f577cf1bc0e88c7ec6291d509b008d02315aee70345672d1a2462fefa3a5aaa3c684365ccdaec9511108da29f79b32982cafd5467ebd15733bfd34632cdaa44d5e99d4c4773398fce25fc585078bf2bfb874dbb282eae868e2cb61f42507e5a035938263af3e50d4b46a3d7afde885e42cc33048c61fd327b32e1f3d6223a4533269beee9ad6b8dd490e2b049c0a474098ec7bd448a35d84ba33fd8eeff3c962a942c2aae8eb2bf58774c69d69c8c461e1819d78c2096cf9fe18bca0a4590e791835563c2a99d07e94646dccaa32fc38d40a15629b4c1cc1753bbfbd112e8f367e03baa98d1f922a67955b01f1ccde7073421aa090507c99b26d4939150f25c107aed84122ba682dcd961de2c8c3c84141009f8c3d01e0a93fa955ef2b47b42441cd2249f5ffba6378fd8d948caacaccb3839202e905baf6abe2a32f99a947b738c2de38f6e7b65fa0ecae575772548777f3dad2580ac54be54c66c555b5effdfc84cea5edbe071c828b4ea5d86d14f58c7c0cba4e65cb77d6f076ab8068ab78a8937bae05434675c84434ec40eb8d7918fdc189b8c2ee61142925d4490cf4f5554f2e5c208f01619b24811c65ef7702fec9637577594b086b0cbadb01087b367130ff2f10f7d37e1a01832160bb515e2da6538588917f3cce4ab15dd3222e0f4c851dd4ccebe85cc80265f692b04307f4400a893200bba8496227cfb762dad755e277e2b093f899e169d5f4c14d5b4a5b0420eb1ca5792ae8c5349c2e8ce7a27ce91c1f7bda7d43f79b17b1f3d2d0d3860081a48b6ee70c0e07692983878aa0e5b998e06213b25fc1771654014ffaee635af888079e65e8073c44e74c432c0070870e5a086eba2dfee677efbd5c9c4b64a8979402f79723c984d5174dd089a48a54936b68879abce9dcb7430f1aa9bd3abc0b936aa78d2ea06e444b4801149930d3e7357d04e609ada12feab095400577f70834caea7cdeabd8e7cbe02ffdb2092c3b48c743ca283e4eb12b2fbb172ac72e404112d9d92661c1132404676202ace53c4899a14688a953562c91843f1c2e111a81347ec6b576c2d72fa6d3337b77b2924afa4d4850926e94346cdb72917084886dbcefa757f072f647f62e5211399d2e2e8424b20887ed21ce912854659b04797291af50343ee8300a361226fa7ed5622c3b66b941438a20e349198e80550c7b0fbce914cc17e34d3dac6bdf0108168dc30d31bcce85d7645f7a307d00f25b8d2bc560e7cd95c33a39091c8570db5e5c8725163687fae551772938f655380cfc1e0b36b80ed08f4eb4609dfe5d058601f536e0d5e90aff7fba3ad693f72a8cdef6ffb975f4938980e64ecec157c0bd6b01f33c2c114b4825b4ed80b0831547de431adaad132e902654ccf74b1311ba1a5b988b069ba7841055707f0a2327011a7c834c7497d3d9eb4ad865ec9b1a11350c3fa9cfce0128dffe3c7672af0dc1cec37ff897efcff85fdeb04daf6c4a4508ab51bd711f0843f879f667637136bd8ad27921742e547be8cb6184e7981eaf341cba5c75d590e601320fb9df9b5eab42383290c458d985bfc6f45815f3059385491fc5a9957f23830e6a243d9a1a4e07d61c545faa2a8b475c0bfd1c3fafe3b7609c915c501bea3582ed7097b5437ac235f92fcb2b15fa83711b90016bea53fb0fbe8c94a9f5052abd18a4374106842c910e84ad1bcfe650db20126f26009fb3c23a525c3a7b47eef21a4467e423450d0769b9f84aaa5d18524ebe0d117f6c52efe4285129ac8e60e251f96dc705bb74fb094ed578793351317f2471e6b035caafe2a8c6ef0ed6eaaaf6397eb1470ebaf0c6b1fc761188ad28ec814edb3888f7428350c355d1534787cfb1bc29d9175a347f92918fa14696c10be6e70da97b4602fe095799cb36b1dae5f53bb2788cc59787e9c00d3be1f3bf6ac61a34a50758cf0202599ff8e7cf64629a57a5479436e8d2c053e4dcd30a219cb40f7c65cfeb506049c9acc145e27db6a0b45498261cea5030f60ba26dd22a52c76c3ff412d018d564e760f68ed448f06ed07a1fba09979e5c5d8070b179f5f7ebd6c3dd0408cfab0aa27e75e27200d74946388c20e814ec2832b23f2b00d87378eaf846c9d56c6adabf7bda5a6f2ad9d41a11b5456beaf91e9d22199d685a82ae1d3a56da1bfe0306369f4cba0f708d7b27f6df2cb1ff9273371013413a37c1dfdcba497ef66ae3c04e57cc7d22aa49cab1ff9498decc64284f787a8d2e0cc4151b191f1a2bfbfd71fa80503f1aa0208f1d20f7f7da6ce5189a4292fb0927cc0a002a49507ca63ae750d9c82ace49ad8d1bb8a7f60f3844c6994af03c48cc5221736f8a92e8a45e0f0709fd67a5baef9712d12a2fc0b2105367178c3744392f4388d1bc909c95f9f4070d09f6634a090eaf533b0579d46c80a1af6447440362687369236150df5d14034bd6f49be0e1684c339f70997d3d9c402e9e6bd6033ba091daf4627823a83bda571d999ee210920af23dcc21c1fe02e9faa931ee937418fe88b68803430bf17268c8665533e0821b0ede8731b5c1dbe705686fcd1235cbc24efa316e8abcd0036beff968aaf534046de146abf6357b0c7e9adc7e82550836821ff7e52d690057569734f2182bcd7ac0608f58bec2e11dbf2bda35f366888794795d716bb06ef610d0fd0801a13f1be2adfbeaff6d7b262fdfd6492519c5d9e3a7bd25a0561578f6c165aa402650d56827a50faa8f24c490e40ac38d461cc55acdda0d445050e8e9dc25213e409d250cb73d08f9e764b0df1813031ebd5407ff13d392583b7e92ed4e1ed2429fb6c97e337f7058959e919ad244751e3163cf86651c8541af7175db65438000a48e9b94257fd45ae569a281bc936a08fcba9b5e85cd67c6c2905a487a70c65796d1f2eb861f846caf588ca9b59bedd2184b1a6bb89a40357728b1bd851af447ae9d925dcf06cb9d88717b6960d0e0d0635bcc2f77d417150bcb1d9a8ed5b9c6f182df53bfd9d655bd82935b265ad5f5de4b616c87832ad4857b0330a37391d9861fafddd933f2ef1a43dc18b09f02c8ccd5400186237bb009bcd0de2f65293f8905debfc194591c798c5dd12534487d0f5956667a3f1121ecbbe9eef881543029d8d1e2b783bd09754d68d9a6b9d65a4ee43c4aecb311b93314ff6b0a7bc1ad5bc27147899af0c15b0de0a73e1b7c0a8a133d48583181172633d126eb7e4be7a04285c86f1a1c466d6daccc424d567995aa495662c7779b253e80b54003eba9efbc9fcebbdd2bf2780807d2231961bd6baed57b3fe78018a24917313e5431cd5a9714b83ac157f68c41f0195a64d953d245fbe8856815c3898839e790d503329d1e4313046d4288e2fa83d9236dac237c76f561056cdfee8c1f806aa700fa8e6fb987d5a5c5a13724dffe7f6f41aea40d1f1daed6d273732015cf4a5826193c99e9133dbe760a30aec248e575cfa2e5b9aacf9ad259ad781c2377e95b564aba616c8dc77833498abfa1cd4b7ccc20b62b54f02be66cfab448e73157a42cd067726d615376282e3b85afdabc65ec96eca42ffde91307ff837f9281ee020e464afe090f2932365c5dfd5202cfdeb486c0268317060f355a213b5c82d812290defaa81e2f0db00f27a314e9ed3e10aba3e5806da9e2831b397fa2fdb5db374a5d6d16a625f555118ac4ea273ddb9cf9fc4b81fd7b85927e2d769a675b5e982a2922100f07e5b0fdad5d45aea051dec8acbda1ace255b95efd4b6c9d0fa92c53ce25cdf2db2eea50302eb07ef83ee7c3460dc090ee0b3404cf2046fa57415e4026179aa15a5255d32ffa07ed74a611e1d2ff5a33bf21be1b1bec265dc05fb54d28c0354dda68aa29c3a909aadeab61b63b260e1c5fd85bc63b0f115a16ecee16c4b6464df6047c1563f08427f995547af12e0af242db737ecbd97bbfee74ccb35549318301467761e0093608792f6cc80a7cfc58742e8f3a20ede438fd02686d1eeee0594698b725c0fdfa188e28c067d966f3c1e39785ebba089a7b3cf167fe957833352196c6f68d03c813f74a3349addd0881ed0ec1aaba3b5a62fcb898b14f6557d8cf025f1485d422d57ea3b3a74bc289a4f6e860225c8191b54027e08bc8400efc0a01286ac907373322b3dbf2a62fd26947331c80500b48d6a4f6b2e90cabc95bf5c0e4473d8697fd9a1748ddd27811ba26689f55e05cef4534ed967890ca484ade0b34757709181cbc905a3a6811ef8ed56f47d5b6b5452a7441a843dca57d07b8d698e5b79ece0624e0a380744aedfaf6b1199ff0edd9a90de16da2ef0ceff9a669b5bb03b0366021fb3ee23f531d61c00ff12789c36ab3c99f74c62ef908b5e12d1b51ba1bf3a0732bda1011a4174beaa7786cbb4602913018f6b0b77e9b8548ecdeb508bdf3a5a15644a79e857ec8284b9876c20f588870d7a895f117397a60d3e4fc6229e12fb0ddee2cba876938594f6d7f6348800de0ba2a0b2f467b447079cec87742636829ec8c6497a262ab28863d759262c5c9b4431a0f07e7197530e532846181bd04586a380a85e3471bc5013b8c29d9e642cb2def7e9e7ffbba69eeb22c20534ed3ab9e89d511eab8620286d0416771b9d0c019bedb8e97d5b46ae19083211d7a417e30d3e3ada0d2ee5a15d0f91f059a523dae88c4f5338a2006386a7c3e01f283431081331ae2cbd0af342664b80bd515ee62f855d26c5d4d143c7e8ffed0a6fb296575c282c021b7eb237df516e188574e5633bee817bfdd408b853aedbf85a2027066ef3b06328905b89820c8fdfef86f6e7e36c411ef3fa09b993a1bbb3f2b0798dd13351da683cc1507d34f5eac041c0ef48ea6c8e999223864fc928f4761ec15dd288ccc436e503516b645102bdf759966d67816a9f669cd4717df03c4f135401e5dc9cabd981e0b6ac1f712c048fd9e8917356e75e2b8073168525ab61c2cb1a5a10a6f0f3af21d2659f35f3080d767410b06d8203a6d27afe9f42e110f41eda463ef73458441968a53caaf64fa88e9aa1a65b9f9c15d5d763f0b4ce1ea746f669d687d39aa61468489d29f0f70dc03976dfdbd96beb478b9651f883db07985ce23985b87519f1192ffa9d06f79521e08c5381e7d3900555dbf88f73dc1177e9f4040b364f8ef49f3416298e7c081028a7e5a233c2cb81b020360017450ba7ebfb0f1b00de3ce7d3400e96c9e54430371dc9e3eb49c15b47e41c7f084a7e3cf8afe3eff7c57e2511975b4a07cce079ba68143a08acbd3d0e24a21ad49ec5d21415707704b5d488b6c7f72360c09a60b61545efa0d3b0ea6290974bb660c8113f55bade2653397fb288e67ed17e3d6c26262061e3955248cf9b9d13a19f8ae69c31bec2338653edb2f807b6f3a73ef9a31599defad394f58aab49ccd57bdf3ed7357e64e8581d4531cc50b2e3ddc4a4ecc542cdb904e120a65a509447bed96f5e85190339b27ae11ae5d1ee9d5edfbcccc74f29d31f64368cf8d3eb6e5627e7d392e4adbdefcc7a5cc33381a7cbd04951a1222396d82987ad69441eeb7c323036776803368d4a9f89388210a1b04fdccc609f5b9d89819640c45b7e43d463113ad9a6dcb6996f8de5a48cd7ef08c8cbde08e7cc7d5a0612354baad915e073af84c45ed890aa21220d6a24000652f22e8debd7322ceec8e06b8347a9e03da8c58340e3187bd27aff65c45295e37fcbcf058db7323fc0d5b13c7ff8f9c254153efccb20a9476b9e3220d6c3e740f8421a8a3bc2f0e69369ef4f8fec962168910c1abdbeea066c43bda8299f9a7e88a7b8bbe869c9df18cbddc2e6eebf2c0a9bdce2fc342aa46d6040d15bb912a149a3615836d62badda55b3724cce978942c006909e04df05db7153c9d708a5e5a534c4c17d020e29b4de30d99b009154182b5a2c382f2bc836faa136ba6fec4e63fc71f46e72fb80e4def7b10b83ec759eba84fabbded6007124e74af5b17872b1957371501fa0ad9f163be32fc65fa3078efc4f966b3feb144dc192100bd6789606d89acee77cf1f301c9748525259fd72edcfac487dc9e4e43d31e97ef3eec4bfa64a59b8cd324237c7d6d667eae403b0bf7e45f5bbdfd02cc52e96cd24adde10ac7e2a94616acff4ba2458c32e80b1be5aec8598a8f72c672dc917b5fa0b2555267b5382efc1cb6cc1c69e40548e30a8466118e58aeba92b4cc2576769e2daf034adabc4d99b57c9f0e57ae429be2f1c5c831cd8f9f6b0f78f38222e17c8b5940f119cbde83d9ae32421985b315ecbcd2d2447803569b7c2cb91291b48c6b0965587627123ae4c843f7c4f7bc828c57f22022451301673426f255d0ff17d16716fd84f05be14938806681bd420078d8957a320f5fc2537ae601570a769f9c432b0b9b699b33f11b1ff7a4fea430ed7f06cffcca98cbfe67db618d48637cfcf0158f9708615543270dc393c5631e1098426b66b2b08a970994acc866feaffe88fa6d14af3b4df5c1960c5b2fd8bea1f33d0bba64439037d9024091d0d2a42917bee610f70fed4e61e8d73eec933a74e762c834971672eb2226c87967bb9455e44c4493fdd37986eed237368becb21adbea478827778cc5900d7935f4f50921ed43dd0a85cc2b14b71846d94f8eed3e785c7c87c2896d521f7358bd196d1e30d4b183542426d4d35702d80b5fc3b58245c1547aa2b94e7875dd464def89463dc264c8f4bb89c5544e051c9fbc2ddcbee8a1c15cccc518482826888256736707d5afc5a7fc56cfb527ee35edaf8c6e2d1382b142bf10e36680196674008aacf578e6e294d4c095b4b9112caebe89c62a532c600a31ff1c7d9363df4656bd9c7c38b75403248845187b6445df47448f6cf1dba3c3747f80469d1f6a066046b0bc13367c38848090f094356b86e137f6530693b35dca74ba8d2dce1d8b400b5c76ee5b5c54bb49f8a02e0eadf722b9c985a9176ae5a550633a101d81dd07724d8eed09017c4112eccc7da9296d4f1921dad018d6ec10f5cdb217d2a2a2f1f509141a7b39ae24c40e019b100733539a7cfdfdf01b07d138deadf64b2b0e45413a6d7b0eaf61eec65d3b67c3e28a63033d7832438f5544cbf8928b7afc334eb131543f7b8437b86b02edb09cd9146a8a5d01c20d840e0ba474d03a810c75c11c052b559cd84394858d49a3d6270dd142b2e78f431f91a3511824d3cc258f03464eff521287a496557f6b88f06b69ab82b88a81b90bf1cb359aeefddb90031e086816365eb76a75e2b5936644639ba97d21dc43b097c875180d7a4faaf091c61f3e9b306d8ac5dc5668404d41118deff9f4905666f2aa1d3f272980e7eb245e2a1caffdeb2ab973708cd40938a0fe27e45d4c58033663dab9b9680a7b5e29f1d25c46e2e5afb9ebf805fdfdec8ca42b0f5d369cb2551f928511ce05affc096ca6f1101dae4185ba7326a619b2fe04a20bbf79949c2ffbe1b8cfdc8e914dd436d8c1b44920052b52943fd3469a829804f239463e27fc1bfed2b9ff15b22fac4a12643476a316e0660cd63ec14ba81c5982d61757fb488d47b8f1f2e44e912e164d9ef7c48c25b1345ed905aa134b4107371e8fffcc0c0e612cfdf627c1b4cd1f075e0362247a120dad2e6d0bfa1391d72405589911d92b39d7e6ca7099518138b50a4de3252eb55a93481595da269e170de2a142d7bb550dc35f8ed66175d13bfbbb8cae157d4df9980223433bfa6c2da4276b2e968c5ebdd8878b245014f239730183166200cb682aabbdbb31da113ea52dc81c15045902ad963a09f16b570199c29ffbf9bb6234d2f00950b28dcb7fd25766f640f397ee81bc23100626aa8b2965c920a60685f8ec021587dd8f40db0f459a7976e78a0aefad4ce67306fb65c69fca98439d6109032851f64e382941ed11d817b40ad1e08e928adbd6ee44807172d929211ed381c735b0fad88c21a3fab2bc208f593ad9e0ecb27efa19432e3e5ebba8e2d3ea5887ccbdc08e4a68edeb18f1e2d70ad31f35dd1afa1d39918c59706e69181bc37305157ec10d237c7947efad22f71d1b16929ef391f567c8b70c625b0dc0f1f2f1168352683ea86537b6c0cb93255d234e14af25b2c53d1baca1e8a866da83fe47c69a9aa5f02cc80d801e3fc4de4ec1619e2ae16a150bfdc9d41aa6855a25a25a4e5c41cb185d79eac818883a4754640214077c62f1e4073c1fb26cd6b7f417185f4ce3245eb05f02a5b1852bea1fa464699266a92058f0dacf56e6acd11b3ad291e40e039e9a09d3b2399c9c750b7e0c06e59e563c668e5ed5fe9ea3a56f9ae1dd244007cdb1db4aa8eedcc46f34c3de598b3fb335495da6d5094a08a085693fa13cf22a2739131eedaf30250eb25c7a25f163781f095316fe0ee35d891c87a3f009006f06c191e98d27963b0542e55fd0ffbab842554ab20bfff3fa87132da0389b054594fd3fc8068b845351bed5f50cf38d17c281b3f82ad96e6d01d11fd399779a20eabe996454d62a71da125be13473c9883a47e25d1bc8a8af0a0c2460a8b3d4017c2994804a18a1421f20e79ba7195d2a07857d02f549680dc042016c8178dd3831bd902ef8d91376d9d04bcdf5c1fcfae7f844033fb2be53765e420188dbbeff15a9848accbdf587f2a3469f3d7d994620ff76252f34f9d913a69aa6e1f0d831526e72e596466094f6351807aeb5b96854a12765f79a252f96f55a23c23dadcd3eaf67c41f7b662ee05cde37ca9bec5585ffbe47a422f93a31a45e5d3fbb076f4b03d4b2e67dfb26fdf9c92139348b2538a0d790ebe64f7ac9c18edb2166a0fd0903f1b609cee2c7f437f9fa72203db4e37734192bc0b597ef26e1f8113a448668a5c1e12e821f96c2ebb8e8a0de74a480ef30d4a8de4edfd418530d20f2daf5e861bca6e683d92009b5539c9755b597aa537d610af755a737c1a8226508345054ba862363dece9f57c919d7fbe4088bc744a8fc2f9b5854857a3f00bd0c6c3cd838e16d96b0ed040c026d9a7ad9ec3aa910a15cc46ea6de4bfe919c9bd83eaf1c9864fefff78cb05b6ac884e08122a5b522db74f7ead8ae51b006b113ecb697c3848d115f2eee6e0d227f2cb1c863429448d5e5693253c56074c22c7a3becfb7efadae3e2dec5c192beda2f4522632ea15d3e826a7a4cea95cd87f54d30f98d3d52aad32cf3594dcef3e94f2dc9153fe8ab351071b599cbace787194afb69e2dac67ef7cac77e1bf16f1b5baf96bda33a8c5e60e7c96a6d4a4a2e2bdd1e5a02c2cdea5de1f37455ff57da11344b06cd3a81261d3535b4cccfc75371240be410d1c2969e6f1d70d208832482da5d6480e2b9bfa2f7b488e88c64ab5c682478f957ff3dfd202294d11d6f4fa1a889d717895515b5bd69d7f7392b2f86aec4eb666d5517d92ce31b5da1d3734a63d43dcdf89742cd2b65b89b3a9da6cd40b85b3385a4c017ff2b9f0a6e6c01285c57f89d456174b62248156a501204d36c37af07fbafccb2a1eb6c80e46de2dcd2dc52062bc826838af45b64b6e4eec8c359a7efd5b4192aa26fb2be24b20f628810a468e9e8ac5e24687108b3ac326399bc596f4931c983d47ecb5b347eb33c5b547b9d57e8cea82253a5532eb094302676f8c14dc554f6f2a20cb1e00e377a0b042e510f68afdb02484262a8bc2754be85a3d1beaacfbbd6f41c520330fa950336ab295efdb1b31c7b76599598346043f2720a3175418d5cc10771a8ce1bc9edeb3e15c6b08d3bd3060de21207a2ac1c1fd045c43a7e7dd7dcb2287ff0910fb893933f835d03c91808c62da1f900998990bd39d66e4e6629a28e8f3eab148c5899ca35f40decb0380ad4b3dbb87435342586ede0b2bdeee582aea41ad2cc649672fdf19a41ec46a4f4892ab743d44c837e24dda03003b234e166146d447e4ba6598fb9a252ef4205ad6a7d6f872a8c928d152a9b8f149fd8f18046314b2836ae681fe5f4f022b7d90d3ab1e9fce54bf647036c60b5d8d96c260ba2e6a68fe427c8b0f3eabef9a14c4794ba4df09fe90dd4f20909d31953c6c1645628654bc8950be983cf16bb71584b9c5398dabf2b39bcd91b09b5663e7134bbd50318e21d20fd9fbe96035149d981938f537a0d2b8dd852c34d2081fcbbc15db8290245a421bfd03eea328af3758e7ace5de3ba5bb642ce38138a6014fe095b7864966f6c03cfd7b1ba71d411ade22b88de6a81c02e707afc09f79ad9df8f908cf1a9997d8fbd10d09a24f8c2e4b8ba59362a509e5e88bc915be896486196b6d76d1b914204f89e86dfea22cb0e19f3d48498e978b90129d215049b938f300ad8ebba39b0562e8a65e91bca9177aecdb1265b09a42caa879ff3ef510f4526f6634efa5e4b5b486da8df5612c0094838829ec1f88f981d3763ac1e2960ec59862a1348598eca490805e38b87b472f93a2e59e80bb884b0cce0867e3b3cb9c024da1b76a90c16da594518b1bce75a02ea913afdc162c9f9beddb9b17b4476101caa032fb935e1e2d61e68461151d252c5ee0c190b37f3b5386d2ee0828731d4dda044a752d937ba4ee214979d6809c80f26d1b4c7c45565723bdb57bc6d5c6c3d77f1be794493bc8d22da274a37ec439808c9aa4150b72e2c6627271c0531d941da72718c0834ac9f2083dbd6b28b8f9ef74ea4af92ffa8df2f7544356734d04711a7f0056f7ea9b8ebdce84e43576888d61ff46ddca17c2c7b576cb58b38f26b6f4e4c26d39cbe3a4387a3644cedfe57d8aed8ac177629112c4776973025b692e15e1b9177793311790717f3adfefaac63ecc76e761247e450534fd3302c8ad2b1d951ef9afe69410de7e642da4c31eb402a61daaec51a6a230b48a3375e387d7ff4e945ff0d7970b2281d14ddddabcdcc73e7c4b40acb4af4b174e38c13fce031245f7949c73cf4d7220447cfd68cb5e2c121f10614e98fa53f57bd135b42df8e986efeeb3d1c33b9f1d36c7a7531eb0b11ea8adc1dc47acf5e8d54a16ad722505b8713218fa119a6dda907a2836e086e9932744b9a854db7fe3664177550f1cdfbdf22ae0810b517e6475b5260e75d3e2a9fa9c3beb6232223e4b09b39c02b0ee4eef1e352b69115a40b134dbad27d305362fc71bdd5097141a863eb486b4caa4422fd5dfc0eec30b64e68c342ce1dcc39cdcc8e053f67b9750acc88147451d9a0b16766be2d89fc974e98bad38bfbaff4d4b9738c9d1dab99cad8d12f9cd7dafd8062f2ffa3606c97bb7a0f1e415b125e9fc5fb27e8e12f48c8638ac157eda0433bb24ca8f75116c6c84415420f2b92c583834cc80853599116f5a7d5fc7873405d180f1a4b6969cf1bef1e4284ba04a18a1995e0623d488ea26f9a2ca1b3bfe4ecd38f7ceb579bded255f486a86cfb05723dc6bde8f3bcef2dd8996a0c13987c143d56770128af6c0d798c021822eec1d7a137899c79d48b261ff2439825707d6f822684a9fab4805874ef68b31757cf3b9e22453c38e8a4c9bc6a70c8845916781456907e56df3cc8bf5a267678478fa5d97a5de60eb3df81eb058d9c67d0ece557dc9c6c6ebb957333b256822c7de99552a076ef1b042513546c7bad12a75dfbd00d87414bafd51d5cbdc5aafff7c70dad76853549d6e9d5bc7f60537798f547e6094018248aba681d57454f6daafb9dfe3a259eb5736ea0c8cb4e9b4debe3c4ecee9486cb7435fbe792ea7a6c3490fa581a9f9a74e05d82debb12fb6395e2fec6a0014869b771e3de5285b37b58d7a7fdc1dc5828df1e7f2c42be6cc51c0c82a6552b79559d603868ead184f14b4f79df849ea29762053c0d21b42ae31733bc180ee92a8e966efcedff04c7650a56290ddb1c6a69e9ca71eec7b2c8de21deed22a100090914a41481df6cad6bcd309aa1aa1c64284652f587219f17be9c4bf7322694f0eba48e9d00b2696c12526b64c515e1dcaf0845f3808e1f7832944e4b5cf967b91281167f90749092e65b60342f0270860513a2107890f722c71250a867be2bb4a58f794c94102c33477fb32d446544b88d970d5df0f318906e9043f9440658f5c4b72f54d0ec496f04046a214b5b33ae6a16cebd36391752d272714e8a9b6b5c444b3c1a3b989c323cdec8d662c20a7651e649461a153dd916d8a419b363fe9c3f70b994a0046f6d8584909c06033174924844de3907379731e9b5cd37b11fafaf5b3deab816b5f570b203842bacab5ac9ddd10dce6d6b79462768cf4595a3ace58e6fe21205a6a2f5637e697444127c442ca3b62e0902807095518f31d8fe5bd5866b5da07df072e4331f1738b39fcc65d1805ccf545934d938ba66858323b41df9592e376f770a67aa3ca9eedcc021f34314399244c98d96eac12a6cdd7b280d3489465f6c1c8a333a7689403cb41163703e505c8e248e3dda22af135c7e7d4053a1cc6419928028fd33813ffc3d62280460ef4fc160d67367edf6afdf96ce249569a06a09e541f3c6683fd53da34f4507d5eface7907f25dd24d4879b68d75575866febc1abe08446e08d437353e5d67e6ce646654cd02eb78da52295000389c844ba9831f8194c91cb05fc15430373105f11283bf39145528350a8415fe1df85ae4359f860bd16a7ff096a905940d566d9f714cec92bd638d86c544540fb3a2d7fe43d034d3429d92cf113d3805486d0820e6401715989211c81d1ade04d7705bf89c7442fce70203ce95d4b333d797087451583c29baed9bdfe774c8cdf8dbd5fa3346ab7ea14aac10cc8d6115298f60e91d3e6db8086328c2f3a5b33847d08ca29bb17ed56ba2f144b9162d7d6b572101ab4ec6fdfc5c523518114931bab31f62e4ba6903a9616b4f58e643189f828f2c534086ab7437b6d65d2cc811c5d491ebaf6f885c4d051866e170d8153e616a656280f812e471339a5e8cc4c2f404a74551df848ebe715e76437ccfd7ac85d13106703560a4e3d1f5e4cb213c8b6beefd9ad6b8a781715a141c6f0f7f1230063a6aa781f1dfece24860128f5a6ef44d9e24e4c7c4af5f22deeb7b3df1ea24da26d2bfc37f18f5430a675c77ee0f3d7f368b17e38d7c898a3883ba8de9fa51f03bb592d08021fc2dadb6b7e9551c7aecd05e9eb306c6b099502e095fe8e6abdbdf0a3b5d3c9b241332221c618399ca67b0b7157baf761ddc0b32a549b4b81121114f1ff5800555bf37fe3cf8e4ce5d80dde7b5afd68a08c04da1f7e0213c91a112487dc53129824283d717571ec1c84a3ef601c6308257d67006fcf087121f05872ea4c502a800732551d1267e7f7f68013d8293af84df58d64ad169aa27a251f66b656f2cf01498a37e5df6400ce6234e1dcbb1be2053e7cd06edbc37afb6219e9cb869132e5c6bf0ac65fbd2956502f863d659f585fb53d184b51ffde106245484d25335b0ae2e1088fa09492e70f87ae3e11081c71c8da1de37e9ac4c540d5fce526b09ecad814f921f804266eed2bfcf9cbc9ae9792de19491c79c0b0a9454dcaa5fda3f34d7b99f3d5eeb672fae352aed48527eb853ac52912865cfeb66fb7c1816c455e258b3b8c26fea46569252c8d9a22d46177c2a7c0eef4e04212fe692d07012921931a4564b8060a69e5a0f9e33f3841b272907798139f8c9dbc0086d02642655be06b8d57e1702d58d36a54646bd17a747c807fc85d04562e448d4caa9691416dd818406ebf89797720b68b79e37b2a4d3c206df861cc8ddee264a648269d19ca49dd794c719cccda6d3407a29d3b1b044ea4b1300f38173308e48bc49c193ef75c169af004d7ba5e12a0d5fed2ab8736f2123b9c22bc0afe005db98f6e029f9ee326b2490050c2c24fcd8be74472ab16ba637cc7b24ad9d2bbbe684e33a6ab992bd14cce6017c2d38bba6afcc28a29add12f296355e4c57a82c91864a54196fe31451103e12f6d5f96a7ab5a79087bf4dc52c328ded3d63ce14edfd21a64bf03496ed2a58978802faf8d9e43b73560e6bd627f7a976aa5bfc1f2111cf27c15c749a40577ff845788d1ac0cb7e4b3b60688254e082a557d477a454b8c65ad8854e68ab52d86fdc2eb925b0893268143eef3cc648a0e79b35c385005c8d08afe7f4b5bf05d70a8a09a770d6240284134d432a179860cea9423f02f851be9bc3ba862f43d0e101a36e22094802b74cac40356894bdd27a82d189c7c097bf1fe0a22976e97afcd3c6710450d9cb322ae0cc7e4a03def8d268f7b7b659f49a68aaf3fd53a91a41de800ca9edde74914b3816e9bd20cec1cc694d75f92fa3838a8e47053469265f38489e7934a43ac0267538c107d9e95ac39b9a66fdcaee461a59f62ad50ec2c8f680b16ee42f0dfe977549b8914e024845e294858d94d783f3c40f258f5cccff1da05092e27e425e0fbe6db59d8f38b2dde5e3f13e7ef29027dade29701a775d907375df6e084574949187264a069f4f0132a93d112837911b668a330843c958468511a9a74a05774513a4e7e3668949c00a5bef787b41fbabc12d6b3d6a82b6f5559930f5690799dd1158eac21430f54b3617445d65ed368e20d270b34d04c1f011dbc2a01f5419b88fe6d63985143f549b9feaa9c3323111548cd2d1397e70a41c8708eec51a78922dc2bef67bc00599617f399be0e184c24d9497a317714e1fbacb38f8d13f4a7403945f47771b8db3a7dadfad4437610343c06f6efc42238aab8c4d160f64ee0b102489e855306297eccbf9e71979dd84083a6bfc71520f4ee50a758e00e4a3acab7b6a0401efdc61795f06a64039360de9f8778086bf0a9d70e9a0485408fe29924752d19a7c4a0e51761c121974c8cba075ecf0388fb021f48b672345f795424cb68f58951cb5b2f713e0606313a03453f3bcd6392a73fc5a3f766b8ab96ca386db1e69c82b5bfd29cd118ffe118c309e9f4a40228274c678952e3ad86ded1ab8d622ed4435a1fb77f00c9625abe3693239a6e37fd6258aedfa77d976dbd762050f265233546eff147eaade9e3e2cfc3984a7a5c2659c213802c8fddc543f908e6195b71ad95e29a9efd2be9f456b5a229944c509cebf77acd02453efb42f4eda340386111a7686a237613350ec9111ea0fb10df8b7722504df427ce3614946d051a9436e3e91eed24569cfc61e9da0ac75e708ae8abb23104be87f209795d9310d5644ee48707f7869f6793c2d1d9a12aef854c53d02fabc5e841d94e3a62a1deff41ef509e27977a9949668ec52944c08ce5bfe59a084bf291b76b9e95bef244d9e47de0adca01475c6b8e302c31f4ccf45b6ae62d66f906c524af076f4c89b0a0c3ead94aced56cd40cc639781be13b76c508fc5ca80175ce4220224463d4b699215465ca9617a0c320ed8d57e757aa058601a7b3f60a3a6a2a7af9b42584187c732ab983e189161ccd2ec583211315fd18c2cef6419ffca0cdabf14c35f2365511003a5099bd379ee9de20d7a326e34191b1a79f39e5213caae73d7f7bd3c47aa0e73e5856b99f5ebaf556a44a7fd149bacd91519d0977e03a57acca2b312462b7e5c641f86fc56db43b37353ae22d87090c045ebbea31d8f08363d5738238864182fdaaba0e656c41e4516f5c3168ef477398a8e9082193425e8df693f48e3cc42bef1c212e241d0adcda941963ed52bd63345a084046eaa123285fe69041de3d89a3ed3e845f8adf83df231c423f9d76c038980dfd355cf68c55d4136f3b17c7e00199b8a49f72b67f518400f1772f85d341c79371f6a35d31b116b15eb99a00bc0560317b76a4679b2d012a843d7ebfa875cce0b857120bbbbd14007a805d8fb88d595c7bf9649b6258ced4b3c70b7e5fde5662e3ddce310f9132c2d269695095c56a1b8d20c62292b0e30fa12559bafe522a6a9cffacf02faf2fe4f8cfeabec5ff2e532fc0f8bd2dc2ee115597e4451743f27487b7b7d31f3e93320768224051cae50ee0affa51b179c19481201ea08a4cecfca9017334aa51449118d6b96115e873bfc6032c452fa8de3facbaf197d1e2bc7c19006d327504a759e51921da04a4fc05bbfdee04bd1024feae73c2064ac5591c92e5a492d8d311029fadd3638fad7315885f9c8a25273dcb6c06aa5e81d84e3273168d0a595a0ba2ed1599f9a5a3949816ece64cc4f89f491967fb4eddb9f51a44c39c9993cec57bcdca73500fa1ae15cfa82167bbe0338b7882a4aa6bb5fcacd14d37b03099b788cce40bac757b7ec165d14d7ff58930b1c1f8fcc1f0c5c2c69e08fada0d4c42b2ccb8b54d0c4e9aebc6a279bd7efc11a98695cb33a8eec07eea6e7eb95c2a2a2eb4b5ac0acc0371f9408343fe77d861588bff7462723699917a21e150b12171adb3f90d61e0813b35a2402079c1c402b989e1eb1cc46a018f2861a4e505a1fe4da36d1399e1878c4c50da0d5aa286a7141673433aa26f0533e090cdde11022660f24a5e123d6c848d3316b69669f33002d214abbcebd103d2f4543c301d171b1923d96cd1f26be53517c61a105964403df009335d24c112b335d6a3431bff6f92be5ab05b286c2312ee2769fce6a756c1127b1a4d7b9501d2cd8e5fa22a039606fd615223e7f27259ac10fce96d9d8a1fac2dd4fc12af6fd541e1a9245d9d7137de4b866d058335df664374793e5107b6dbb76f53d3ae6b0faea2b7d04f8a492333a544621a4b7383b162a56ca549255b554364252cc136c759aac56f4f5b01d9aa7b377607476204c38c55e92a2f3a6eb59577988efbd9a7b92a7c3b7173ede67e73ac3a115ddfd6016534b9f299f33fad9838a50f83b0f3aca2fe7b24823aeca8465fa9f2b5d073e854ff0cc526d62eaf00ca21b13c4e707f2931de62aa0c069440a46494d9792772c00da8db089a8a3c462fb5fb81fd9fbce0e0bf0c1c6a00d1bb67e3934cfce3557f18639ade4e099f4fba314be704e5fb7b18af6058601606cd205254ec5cf966ed03ab0077692eb1b863a01a8ed6f13e2c9d6a18c9143139ce7a90dec5f42f2ab901c56c46d86ca3c81d0f1c83517d0b9b464ae6a6bd79d3b2a27acc0cdfaf81ce08a4f83d528ec769b71d88b675a1e2c55789401b4d6596ce67b34a607c5464e4b309ae5baa9b49557d1a1d00fb1ed01d9731d0ee932be2949be9d93aea958b88c7fdc0570fecc979aadf3d2cdf8148919b5b01e599cf06aa6b3b145b1f2a0cc69fc9b10f61123e9a68409d9f632c134a28e620da2fa984762bc5684b4017ca698fa1f256cd8a11f02724e93ab7dc7d20c36a649ec9df2259bdb8e486f1324a6f064d93b3f8dc77c8ce3e26a40d032f407b87f0b8867c23e4ec007ed218e998dd4a2edd8e60d8f921eb8621d2c96bd2b845a7362260ebf32cf27768fb89af9183cb7dd5dcb4fd089e5cc6abb0d2c0d3b50c3322347ce42078c3a873bc08a03717a98b33eba62f67d06c8eea2b52a7ea1c2f7848e04676edc917e657a0f5d823252a7e4c64021db26d8d9c5adf29624383ed54f6fc1cef58ec891ac4e08e4348d94612e4fe8ffe5d6785f6f70c846eafcfc1ac885438a7f8f34588e89c3fb5b158d01016e9d030677ca87d047174aef4886e2fc3c1bf345d458643987ba4c19005a7c381a6d9dcc6ad6c67d1e75273c1caa59f1d7dde787102cb8e9bad5adf47909ec9cc323dba252ebac92d3e5b493e97bc950fb5556e65c959026a0b236db3af1a8f56e808b476a45fcf5c61d512883e5ce7cb2770b9a50d84dacf48ef83e1d9af7b1d58aaa018354c4915e2f5c518bd25ac254c900be8dfa241b60f517c264019adb1a1d9a557ca99ddeaacb0d19827cbed8f8976ffd852431db092751072fddac6b280cb61c4e51094b2e415756837c298c6a41c7a12fb69442842fa6958cf835ff7565f4e15a26c9a0d65711c486a1e147d273ca359c88265e4fe68cd32087accbe3a15c1a31db392b2df3b8b9dfc111c632888b2325c8afffdb4cb457ed0c8a2c2543a1195e8132c39a16d401cec85ea005d69da75d0432d93565c1b61f1ff0a323716973e783d8096cbb5798fe4ec63de6562f39aaa871f789e2ef4df03f80314dc9d52e563873d27ee855c5298be4ef6d50c936be3f95720e6c8e2874020af3799301fa8f404bb3ed6664923a62f6951ebe482ea1e9e268c509bb94e2e367f3b953616e37907fe52547b050f1b81f5103fa2fb6d051ffd968a40b247badf39e0a3ce718806163c3c65788ed6aa6cd5ded3dd6755b1e2c86da3fb6847cdc66b4dfead348db6d6004b95ea78914a92078d96035503beb13f61205b6b16f804a13d86045110efc35ec496fb5c5f34fae2a973b4633b8a8ec9a0a20cc95c1ba57ca5401baed8df697c5be355bd528098abf99c3bee9778d8e45d9f31cd3b09ee1f7bc7394903025450a89bc8fe34345c696f4b91f032c6e1f1e72e13b97b2bc1d00f361a4cf3aa94cfe1afe660573b57ad22ac24d605cbf31d4bca6ac2f2e32d9e661078e13b617bdfb2580db0230d6d08e15942300a9beb80e38e3fcb7fa78a0be4e4aa98320160ff1e955dca9163e8e4b776f3da770173fd2c3f149eb6da126b1a0fd59ee3fbf1054e93b6ac32d28ffac2dcbb893111e0b0d5b0fae3d5aaf7280fecfd3168028470c2138e6aa3ae36e01c83f61fe27ea08f74bf0e220c6dda56296afead9c8e951b24961f7748aca6e0c52320bafd1cb241cf3ce65526775ef378b9b108f8c5e05b913de69ab36c6198667d994bca0f84adbb517aebfb6d10ceb412fb1f06cc9579d0b2247ff229a7c850ed74a2a9ba67d366d39a77be875f3dc8d2f739b629e50bd9dc29788ff9d821358b9d278d6749e392b918480d448b69c6b9950b3efc9521f1b6a16489bc8a226515b5ce5a45a2a9e3b4ad6a1391648a1f959eba7e76dded3c3346273d5a7e456baa9085e59d3caea1fa8ce15effe5bb46672bcc909369f57e7ca1e0d5880a03ab4cd0e2298ad37e411e773b256d8a26f2e7722fef1e90f1173d711eebdd8fe1d2eabee1182497078c6baa1fbd1c69f90ef3f0bad4feda14bbde188ccab05df96ff923b6b3203c35a20128874f6ddac5fe9de6fb8904fbc78dbaf0a128de816b034459bb629bf6a79f46fcb25063538cb899f75181f8b02864d43f6cccd981f2b912a6bc5fb2925fa5add1d6aa3751980800979c552e82e1ba3ebdee5ee9a418f0ea7e0a9a10408b5d00ce8e8ef8a4a9ab52c88e7592c49ffec3b8b8e025644302ab114de39e45eecf8b1acc207aa34552e7e41b808ba309158107b42bfed651c543080ecf6f2ab3d8056c9a875322745ae8424888bb5695ac88b4988912fa45ed778403f17097867c3c86deaaff09edef507c0199dc579e1b8ce248ba71d7db36c759f707d43b25039085a08a460ae1361142897eb4b77b4d5299d03a78512863d7b5c32289c944a6c48b5c1a738f341a25e9368f0aa0f6e969d12e163032855d178796195565d09dd4860ef1216330a8cdb351b0d7508033e5a61459120f318c543e66e5c5d9edb3744c397efe18a42cad3e34d0cd141606859e0a6526be867f4edd03baeff824ebff90f20d9ba93893e52cb0dee3b256de60def80c417ed3469fe4dc93eeb335a83c0885b40879ae4f20c325be550b206de3eaaf032832154234292ec329f8b78056a84764b036e8a3ed93a1d7f815cc548772882634bb45fbca434702aebfcd6846778f7cdcb20e0fe34e9f9fe2c95bda98e97725ec860af113aefa4481d0551adeb4ccbd75feb562e461a3147f676eac30fde49bf3862d385a443c36a9ec1b92cfb0827cf8929e0343f5c6780bd9bb86aa207eb35ef1d7005373531680167b08a5aedf9702e167460f41ffafac2f7ee9cc4ab2580e107368773f6e15dc62d2a966f699be205f4befcba76d4f5a3a525b334e75b2a4b66cefce7cedd2924e2c11c5b4d839d9e3a79666a6d0845bf4461228f57519124d2aaaa0177a7592d4324af47bf3583343e9e1c354f15291ce418d738dd9761f981284dcb92f8a34dfa021013fa04d5b9d2766c95b96ce31377859cea8df637e669ab62622d48e01a8d3636e21cd3cb8239314b1363da4413fa17b49fb6b565460329050f8282f6bc1f7ba837cb2ace35374d66621821a3e393387e1a4bd6c7dbb85ebb9f6802ae5c9e48a29e63129f6849c247514cd3661ba6119a572819d9b922c223fdea0113a2875e666d61e0f1fba16a2c30ba20f727cc62d47238e12d718e356f813d40e1b8d552c2a319a4517b9d796fa0edf31676ef1443fe1c9f6d52f622dfc6afa4277788fec6bd0ae08b3c110d7bddf63205bf07b918542a8fe91703951613212b52d03ff013d57cf8cb6a57259f7bb3516a64eca9f46abc1a23eb7214eb89d930a8f96916d49aac5f2095ee6d99dcbe35377bd0e369fe793fa53c621925441c03da5ca95debabf796fcc75886df269e8c59f9a00bf4a1f643b0b79cc007d7b6dc0c0d9a4903bddada099c81d7d9e3dca26b10b15c448f5db17a0008472222796ea586696ac3fffc004f422c890826abe7564f646bebae28cbf0d0b0066badbaec5bf6442ca4c88e7bc354792730710ff6eb0e3dcfd6e495fe9ad682abddb23266b99826b821ce9ca08d71eff88bc5aaa0ed100544abf85cad71d85d90b4812218599c596e0ac67284cab6e1c8926d45e100010b5326a02a3feac1dcb3bd6cbf8b93368cbd88e9c39d2cff0d1cb0c43d88a7f936b149aec7210b1d67020c4ca5f9debd63eec78fb97df5fe6ce6b38945d042671897745e582f333f0c5194802fc1584703d037169f798806a27330225d12d90867166579e00e1b79a35c92f03aac1687fcb4f8c768384aad2334176718320e56a95a3387557345444ed4e20958cbd29f3cc3a8f9e8f8d58912400c2f4364d67b72c93193c6b09c332789c337ffd75b69f6c281bcd95b5794c3200fe45c007d60d7198e97e6c7b239c73bbc2efed41d512a1cbc8cadf244c8159307cb1d5ec7f886337c12faad8aa3d0fb408919fefe26f35e058b04ab4a1b6a2a2958b7301b73e01ab04c59b192f9cdc2d40694ae84b66ebb4280462e111c0f7c9a84138fe0f17308d90b821cdc1c40bde467cd31af91213dbc413970fd7930c08c6ea23da0eba94ca646769208b4e60881f7e207208c5a19d738e7068e23b69bf8bd28160bf9788251af0320837eebb62ead701790c1174dc758083ae90d4a57769b3f0bf28f6feea1dc3b1790c31ff6c770f3a8379f696c16e6cc95aaa48034b2a05f23bff4b40a18f3c4f1db45e2ea2e6e6f5b10ea99469cbd4014c949be46bb4ebada0920b4ef6958f647659cd910be7cc87ed48694a04b87e3ccdd1f9c8129ae30dfaf2e0706bea26996537291136ac024a724616df0233885805734203bf5e2ad8cf219201d7d874994a218a4ca82983ee14d5a97eead6cc039a75c3327b201a47a320cf5babac4fabb4abd24f31a96eec18b4bef659ff606b30880315bdd2a6980ba56e71aa3ae913e2b047b3cf7f691eabe506bea030d75debd27888029b5a0569832957d57b4529072456b9b9326474941a28f5f8f4ed1836a45f0d423cbbd0db01b4498af7bbff431316b0a35ead88102a3bbb2e1dba8382944619145a6f24b46fb262020836677ccb537fd3a34a9e5ea2f8c526b291eded0668fad85817a1ec39fc289200081b1874b785560d88bd505e60ce0120440a313f40e3f245f09b3ba7a38727f5d5d81b7c717fc386b03b3b489ee00045e0d0fcb34e85fe55bf170b9a37581d4600b4f2a46dc75f5c57a4431a26de29dca91ffa75ecbbf606b815b69054be0e0ca430eab6b855a58636fded17e89313ba02b98cf9a87041da0ca1486ffa22586bc517824d2f6c64f392ba183540c89d9f44f4c29e77d925529dbb27a23c18c0c31358474ca22e82c48740e855c60eacb6537a9a8d045fd5394e211d25bdc4f98b55d665fd0c36341cb98164c5dcda5316a33efe05a763310f4ab050ffc381fbb39ded86a93d4deba964c1d66f5e40fd44ab55fdf438f3ea98cb161a5a1b64329cc27e3db403205894719d1f98ff5da73e64aa4f1357acbfc57dea6eccffccea2bc0ade6f352d967edaf33badbb76efcd735b3ba32efba8192e6499ecfd49b124716b360ece936a059a4d1cd61afd42eb11b3696e18399cfbbf2b8e16d391818a0816c46b993f9859b35c8f7fda8169259afb00fc1a6dbeb2e0eae98b2384479f29deecf31b2aa1f186a56b18cec1556c768589dd44f68bb9724b56368f02a8f601d9aa273e55ae9e867b4f08aa6827a374da49782c3435ac8b6deaea144c97766e62accf334fd74882a92abc315173ed1be732b5f6737d152b791b9456f4ae1d68f7c278931a3f4e3565a437e75a0f28e9820d4c1807f14f78f9f95d8518483e14b8ffd36d032d2b73f0554e2cadbd5db71cf3f638bb3a3ab6cc26580a5707c1c75f050a335324a42456e94feeca69b1d208b5df61e41ec92de61a3a33288310812a913507fe09702fc97a635d7af66af8f1ce440a172c1aab380e56ca198b093dd878c645498fd8e0e93cf6bd627516189fee9cb97e9b95eb57e2c0bbfb20e5db7ebffe4713c455d1cf03505c690f7762df76b32b694a10f3ade4a0e90930f178711cdc423fd5dc75ca974aa52be9d34c04739a24d722f4d36cda2133777162bfd487d28efabb41010ac70b266b4eb8a368409d9fa215f7b5288e7dd1bb730164259109af70d3bb5c700a5de23ffa3aff84b703921ebe7eb0543432c135d3df415210dd95d77066ed4e357946fac37dbfc1fa0aeeedf20a7c947bbbeb83ea3b96f1f9032bb1a4117ba2c61cb8c6d096d303f956a27d49520aaccc42aa0e33fc3abb16456291130a094ded572c8b58284380c7f25fce586fb1f3c457ea71fdc5cfb55f80419b971c36e8afeee8c0a27bcc5a494e557f5174e2706b2b0ee6a36a0c47a75fc7ae23ebb9618f7c15625018dbacfa926b7ca3fdbcd69425a3ba9f353e6e4c48f0470163680b9487e73054ad920311227e2ab61696116dff42a2f61e4f80fb94939bb835aba6fe67f12da306ea01f432fb03f851f71e04a8e79abd8e42cb14edf7592e97c94717e110b22adce78395d16d7f92cd2a90ee77e55822e83013073cb32e5b1881ff9d2aacf440caff21b5c7528c17369effbf83d1d3222747c482688bbe8bc17361a1b682d489bebbfa4228cb0feb3e3aa53040d766fd9ae5d71dda1643e51ca96a93f9b51c0a91957ddbd350fa6f186e8cd9f1d07ea43a4abbcf6037ebdce90233bccdd9808f9ba56d995d288ce882490dbfc9bd102d59e8fe0b33a7bbee038aba311f7f7595d4a923bc62a08620338f20ee5eca50e63493fb4dc910ef47a8f814bb6ce13d576ec71994ef2cf64dd20d214f245f9c221732e8d32e387c0ef22efaa20b5f90711a4c9ff0ff8153be405651c62b9eb485e36478a13918c397493e5f37386ab6bda910cebd2f98d94ad840e4cc7415b60e1af5937e25352e9b72c62eea5d8d369e2e0525406158ba63375b713a848e844fca94317c2013e4e90faa712640e1e8a69d0b58ab02c22c1c00511cad261f75a83b547ec96bbdeb8998ec9e63c02c86a4e893ae49456197cbd2a2def584406c48c5d404f7b8571d14cb0d918a099b120db7db34c52e7109cbbb408e63677f8b636fa7038d240d898d3db5f504b220fb3715e1a89f1089346b1c4b5d7e2038c7f00b1ede5ad97e791793ceaead6b8ae033c5bb9314c9c6be1339351cebe1994ace2245d5f05c1ab1a3ddbc447944e3db90fe218d41ca2f43bd3a2f0578d0471fc8f84d1a755d156fba91efe400918f9bcfdc5903a1d54fee8faa6a5d9887ccfc0f7adb628b30271435c2978e9f5adf57e2820029cbde56aa3345b7b8401646f3972e9b7b89a05851a1d093e28de1ee62a3bcb9f75c02ad7b94dd3da09bf0b4fd671ea04c75b31bbe77ab0aa7075ed39a9892023de00e644fd0344507c3d84acb69a6205d496f15506c66ed42c7f3e18998d944774540ce40c78263acda2f1ca4660358f5d07136fe1711783945d4a3f42daeb855ce4f1492f8ab5db55f29e0878936e28fe33a7c4b6d9617458f3620096a4d5e76d67b6b832f98769d293b179406fce42706e1a1bf797a46ea685fbc98304fd50fd4823bd3b444b95e0f6e984784e689d44c822ff842d51fdf0e5378640f115821c96f8eb67e0b091ac5f05bf4884edc3b2c96400806a022c3279631fdf230965cb69cd70abf5a6ea7a679ef8bb69f6a3f57e27b13d1ae992807c0eb58e9fbb31de7e4e50bdfda8fef7b3a0e4956aeeb200015ddf5051b5dc93fddd87443e2f44812f35360c082fffe1abe42119be03d39d1e0f9ba4dc2aa75d0879c1e65d71d64fab813b02748a9bdd51dceea0279ccad193515a322d5f2299582f64cb4072bca5fbe8a7d6ed3b0a8498cf0ae574d65b1f5564399f8d84c35da0b64f983892e1d8e9f6cf243f07a0aa184bb083ad787b6832e8227d095e4470f8d541c6b3ff49836a19ac036af4054d97e5f47245c908ce3531fae82feb6b5e29974ec11642044f29a27c70d58bdfc545d252d0924724b1463a6d87b19fe5b049742521c58b2bc1fc58ac110df508b4e1517bbaddf41de766efda7f971282ea782b3866ac0e48661de0d21f72f0d1f15392bfc5361f7fbcb888eadcd33d261e530999d2898428413dfb5d6b030dbdd8487e3bb2112f3df9813acd461533dcdee1b4c45a6873e744642b0100df974f091c82a6a8a942e2e12c2595251e29ec187c29cf63b8c7a3fa1ea735a826e23c46f4b15553cf882f0fe44f1e44a996727c9b377dbb2434e9442c6fc7cffcd17fa427daa796327cc0f799582ebdee81ed955ce6602bc6edc73b7c9f42324eb15d6ad483fbe1744a5368f488963e2170f423318d596d9c46075096493d3769a53248090f73c142bb55e1e04b2187b480ffac71de19994794eac1d9905933880298678ab866b931183de3fb51000d269218ed45c629d28930ccfc9d2f3ceffa4b808c1811cb861496d99829973f6984aab147157dff6a0ab29ee04bbe2daf6f5e503c7db7503c27e9b9e3e4131705884e1be3279577c7f1b33446409e1741984b97d29d4e6b6d583024776d92f0683eb3b58ab46aac2dfb970d84e7061ab845e43118f02c96b668443930d8af4148c39999de216084a02dde57bb867d6d379dd4204bdbde5d3d6f6f2b836432f3e2930ca46b35be3bbb7a48266374ca894aedbbaa05713794e3859ccca6615b6d23066e9b4ea34a7c014bc3e4c143331c1eb83cd8e571996606ab4b900921c9e522abb60fc5b6ebe9fb206bac6955ad9b18329fb8ba68b5cfb2163206144fbc84157866364443189628dde631857f39d48f27db3f31842e0b8a9e981a71521257ae252a44490820c2b318499f8b17850f966b5cf612f942d7d8963f460bc9324d7380f6958ad9d35e145e34370d4450b71086956f1ce1ede53a01ae97e06c446ea4889d12e73bc8f210ed153455914488f80373dae6a2a11b8ab1c301a730cb78004d9f07377ca0a9cdcbff973e146bb4f9ac81ff745b06d4a2f3d4be8ba732d8f590cbe231dec2e17439d8c9c20bd69e35453cd74b5cabb413c79b46cb8624c14f0c3cc10e5d045ec2aa7a1b5d93acfb2b3c03dd74a5640b217cb05a2b05b1ec39998db96d629e595a19bdaadca9b6ab06327764ae897e923105b686946979897b1c9de2a83e64c06a5c5de78ffbc47acbe5a330d9db89fbe3fa6fdb8e7211fd459af0d66c736d22f246d835dbf971e1c3aff7883dafcab762a7ca2f5a8097ad9c317be9707126554d907e3b020c63009d40fed1120d832c6bd12713f72a18f314ee24df27d60bfa942d70df74cbc2a09c7e13fb59fe2a225cb8ed332dcc1e76fde508be24f3c2e7f0081f9fdef11bcc737fcdfb7498cae80e9bb9a9a760eac01f153172506556a1dc0feb12a145c0f652ef9e512e5f243761db852b679bbe44437f6727bd95ba24e8f9354d43bf66d13f1736e6400cde1056db5031d39f8013a55979a486340138602b8469bed2900587044f3906acb8a0708b4f2d3d44e2cbd70171bbb69df45cfb71f732f6c7d994defc6c2f881bd489821fd23faa244f894ce92e17d8cd83877fb98352ec596cba4f412c2ebfb8060252377e12cc26a6d80c5ebdf027bff2a7ed5a097862b3f935884c9316a076a25d21c0f8f1030d970d15c6755c1903d8ab504944a85e89fb1568f20c79cb618ac1932c2db10e2315ffd309ae0fb124a9d38acf67f86f1d8590c6edd686faf649e9c68ee31000d8fd75d74adada6571ab7c9cac90eb091d3d09494cb2cc5f18e7c7f61e90f708b4034c8f62fc148915d85f72d543180a35289d46373d991cae60e77099c8693027e2e958334853d4490c5ad76c0b71dcc4798e600560528907e58b729d932a73aef8f2ff7199be895432719d26149dd60ff67e828ddb51b912da46142a08cb929bcbfcc23e20ed9467eb5ad9d39f2a22cc5b731fdf80f6fe62c83d7a6278235a4a59ef0b88e0552da885718864d2b2d39c0e34bf6fd978a6d05eae03f2cbe91e7e82759089cad2b72ed31a7b104b3ab99fe95d67d774a9772603feaa95c1117431a9d44c51183bba5241d97889d5e90643b610b20ca05bf210a0992b49a7ada9c0d4adaf5e79b4bbd81acd8410dadffaf2220295b9000426961908550e023b93a23fe6e55a4479dbd11a728fef05dc5fd90cfd5284e642bb22360dedf4042190e9d07623ef567fdc583d019566461d83f9eee7b803b05614272d8a42b1de3691e0f4d07e51d4017e940e06f2ce54536d3797bab73349284450291a365333b002ee0c50ac3b1c17fd6580ca5c365b14ed18aa36984907f0b9537ded165d119df1291a7965576900596a320eebcaf062f01ab634aa152b2633ea74ad75fb668087de1921359805b304696750984f38d571751ea23ca256d3e8fb1a9fe1c527909f4ac8aa5555884762627c6dd2ac9f21e7c911cb19ad3dbee303063f3555963bb9a54b799cd695c47969f33beb26e738cdfbf68caa7aa13681b87d4008fb155ba5774abc051009bd14e99107752869f72556ecb370c2dd9e51a2bf4a1db6019d42689b36c321dce1df58d115ad7b5e81e7e74bb1db780caec3a05d69dde4aae41aaa3b198af71793ed6aaa50ab757758f13fc2a5d92c75e0ab7646e3e9a9a80cc0b6362389a9bf39534eb7eec0748492eaec107f7a1edf9ed49db227302c864b618165481a946f1eba162d2eb23cf31422f73dd6f7ddadd155fdc0b8211d137239e899e5b2ba9a29ef5c90cd6df9ce09bba33f5d015b94cd608c0c4a5bd6911fd9967aa8b487ac5222940a62bd58ffc4db110fd4580757a8dea75426abe117846722db0687bbf7578fc61868aea1dd4e697ad90ad857704d6a6eac021e13f8254e1ee5300cad48aef36556a387732add59733a52b3a2bdbf735f8466315683f77bf0528c487bebf45dfd4e4b2eab957e4f68f00c0f63536837f953258562502ac432800015399a5fc8d2f9dc0620193874bea5ed4a0c0c28724e09f99e9a883a57dc483698b3d0e9495eeee8aceaff5e0e25604cba6c503e09cca5358c61a56456cb1d100052827d2e6b04374b4bfbdd594d3cbfc6ac795ea617c540910bfd85fb3163dd35ef921abc40bfea3dca93fc891cd39b824eae62510eee364c203c81a8a85a8d9745560319706073e6ea3c987d7eb64d9afec176850572a024341732c28ca5ce33cab62791f6a5682b26dcd5d522180a18b06f43d0c3d1e0799c1fe6d2dba9604be176c4d4c03eb451142468c62cb3a405febf57dba7e551f184116cb4c63375a9aca01f91af9f4ed23b8258e4cf2bc668d8fae0b3e140594cae20d13dafd7d391e04e992c316d4762a939c95267e0f5d2ca9ed05140b5fa217088e1c3cebdfcda8a9faf932ce2948c4def5b63ff239654fc4ffe4efa179e00de101d47fd576c9408efe02442996c8e466b7a2cd5bf1e810634ffb3807adf52928b0c75f8e6bca55afcf54fe88a7adfa651e4aa93e55da57a028361edf7f146630f50da4fb181d8478a53e47a2d78df0fe95b058ccf97c56c06051b9f60a0e0e392ca6af4b44b2d2c90520e0c9a82344137d04aa2524446931638d312d69094079e2e4e8ebd86930da702b3e63852e91e06818264d7dc603d202fe091e03fe67ba2cbb2f27f9e2073f7aa4f347ef04b947824e9923c9f3abf5a591840dc2617cb439f45359e7ac5d9ee835c18ad4d18d59874a0a446ec9002004b3ea38a0efa422eedd8f73e0f428c61bb7346535db029937793669b831a8fd9fd4b68984b8636e788716bde53cf380835678a844b890c7ba9057fc1a4bc0360600387cd04ae09784df3c90f7c8128eaa0eed2e192a3fcee44479d3f889323ede255dc5644f649b3d592b551398633fd95a439b30872b0837633b4eb63b3d5f4ac90f1ab00b706cc9fbff977f0395518f6e7f6e0f6c8455bb659321eae3604d5cfcde5ba96ac77e646fb6bd91989a514e0286d7d910f3bfa57cde71032573f671edfe7df492e3f8f176eaf2bbf84509adb806de9edf4dce90237b0e82c6701d6a0027f72bf393762ea8a8d55ac01b171098e73faa93b928e0f66acd7a378b43df5a272413d6d0ed0e70368c5863816b3817650fafd145c930d546366a693a14d0d2cc730dab3113ecf18aed7798f0db75e141845b98a237189efced0c22e25807f63ea7c1f089575861cb08ec4e32ebdb8efa6d08132cbe5f469d5badda7b1897f26836b1ada1fa34e33ba4db0293fe9a5a022e0d846a65709d8a343b2cd52398a1f603a21c72ca74711b95889a853010ff989f1d672e4c029f492292a5e0154f1d5cb3f2854e61f02eb38588f0a2279057cfd6416a6a14d7fa55ee553be9fcca2e762ac689180ce1c11fed51d0c1c09dacd011587b25f7d2abb5e62f896aa7c9dd3d8b9107138b71761dbc653544ca1eb9877239fc073d4eb027e6fc934ed15fa3f1ab4a2bd09e9b2a1f51b0766a64a1be0f75ccd7e6069d2034ec28335ebb4c9df1780e5b73d442a9cef97a2e591cc83d5dc385e3ed21b895f699071df48c4cab51ab8f5337e6b227aa758628e05e3f14152472f0df221ff7c4924a197fb5aa0fceb5c056576938f1c23a71308bd5305c5b31d3aebee7633e3ae51c8288998ab83dbf522c1b6441f63a55ef72518e07f830cdd380d9f697155812564d0dae961adeb3732b6f554c33e4813a5b1ecce813f232cee7efe3809cb3f45d423094cc5252c78dae870d996aadcfd1b891fb0d37f008943e96f543bde58c5ab5c6b59d5e3852c629267961f86460f38e80aa23e9794c1c3f47760d6aa8505ca92107c0dd7bb5514662cf6f06bcf567b0a0f5c5f221e6a71b7acb6df83c0ed3e7e648ea597c9387fc3fe8d24d0f30649b2722d96499fe9932465294b786b65f200e5c0b68e81fb8b195c4a8e69cbd3465402dcdb79c23f0e3f90af96c00735d70ee53f4e00013d227ef5797ea1d188b553775ba0ea0b66759b3d858030665c6a554811e93e8b0984abcf6df62b5774d3dd1266082a12c1ee43e9d47aa95fc658565bc6290bca7b3836726e895f0e8d7dded7031c2f7cd0b9e2782efbf804c8963975b1333cc295a0bd6656ef64cd0f0548df9ea4c2a6bdf8196e21d7221c45dfe936493a9cb4755e6395168f490e1e7152a2f00003608f0fcb9a633e3a9228fb793c75fd20997b3833cce10240199e8e613a9aabdcf6efbdf4a2299fde5916b448052671b85a36effab1b0c0e5bf5c950ceb3651bf2d44fa415b87e20f319e0b2b3bb5799762fabd74257bd557214e8d1b8b2553ee15981312c6f7ff0c63825c33910fd15a5f30a4cb450515981d7c195c4458a3bd0d0bdc9b9a629bc4cf4b0ba46680e02fd287fb0bed068f8a939019a93eeb3dc0049d87aad27ecb58237cf9e0ae0c0713ed9c79bb46f9a54d43994526a287bf1c60c4fc07c9f74c73b04dc21fd264606b23efefd8188e051c242cee1f1733c57b45a7540a07056a56c1deb9a0cb57525f620ad55abde956ac0c97c340cea61d5f18aca4a9e96544bfbcf06a018006cd2fb225faaa20dd21b4c2196eea7a5235df00d928c6f17dc5806fc620b73ca34de1291607bc79fbef357a55b2e04e3cce455c36e29728076e749f16807f9f7cf3f424ae282bc0220e66100b6a257b018af84052135e1dcc508480bf404159f4e55f53e6b8ba79813b5926bb167d3b86d120c64cdfde59c1dcfb34eb62f0d8f635cbc13f8fc1cf2771d7a887655d0c3e73b2861170717901a1eba538263972d325e95125e96a93c38137efa2ed7e29c170f00e410ac901371be4dce09de2b76f89c7e85b517614f9f08ad7ab909e7871d9b5522742c6c974ecdb412fb7bed6b4d84604ea43168c56ce62b3f79e7362cbb0222b83286316b581009c1ee538677fb8029166ab36ac2419145b4a7b91b20acee55fd3c897d67fcc1f5cc4e81090147fee40c0d3cd290aea3eaf87e0efc044ffeda45ca9d9b0fb13a99ecc530d296f7906570fc47e79c93783093538ac96f624c55f5a098a35d06b23a1daa5c321165d7f4af6c5beea1446f28119f984a8c530ffc9c54c8dcb9ffb7a0570666bca33bd2fde1ec8a489bf6eef358d0b7d8dfacf402a7314565652ea7e63f08385775f8d5bad2e5d3e42d2b1411766d66fef09d6a2d169a9c2903e57a690c278356432ce12496e82ce4b6dea2bb7343e2c5ff6d4a7ba76e624c959bf8fbf2e79ed01596501428277638ee1ac98367eac103f18d0b9bb95e43a842aaa5b4c21942db808a1e8f2e0ec541affbada0cd7cdbbcdf31965d38f456c1352a776bd6f76e6007789b6d936230340a6b3d2905342300463c1ba689e50489655ab2c4c7af2c8dae518d5b0ce40e015645b30c526aad1aae7c6ea7e0138c7e45b13ab46e6942f828ffb939903de14b49e99b4479952186c2205d37dcbe051da4509a58efeb4895847fede8fa0aec7a7a48b800d362a5052e810578aef71d514e24d981b0d93bcf9e971a9b2baacfe33b8d8a6eb92c9811402dfa3ebff1c076e8dc13e369adbe529d099777c8a7b8aab381a791331541b617f21f4b5e689965048c8b002d4ebdc6d0f6925a82fed2ec2c3cfa066ccd4a720d16e39ada4e299c72073d63c9c5349fe5c93b0a04d03ceea1a5bd8efbf79102291f3d998a6100b7bfe2fcd990e8aaf837eba81e224e8cbadfa72a2d171c938dca57336ceee4d44f6bd84db1c309d29d781f086a15d30db6d2ffa115a7dd9ea419e8b95728994855610ef9b93981c4cca0cccff7253a94959df6b605c2f2d668535fa22155c37cc5bb9195776585aaa17165b1e83f63adabefe5e0aec603bb3b3755012c7791cc7841379e9e46b2a29e9f16c7673f2240b60fc4647a8d049391d85852075aac80b4bd900b5b0dd2f4bac251db8ed6dc1d503621859ad243114a8fe74f6d99ed4077065d720960a0070fe42efb320bc2342bc969311867948e34c44e1c58bda4eb52c08a035381b68ac29d895d9a51e5024cd03aef170db22c83f8533ee16f6c3115cb8368f5542d6cede526582854666258af784d1a910b4c54655ab94f25ff226a04128f97fa8a72c7920b058b2ea23d8d31ab70b44748f47c41b1847b152472ce75e3bedfc7782195bb56331d78983f7545e73837f6899ccc3f4fbb6596adcd523c3b2199306f289a5cf1a2474de4fdf5225b3525a30540cde25e22fe9227b8f8171349177a3e9188a94b615e6e11684b60a331bf713e0e2195f7ee221af801b1fa82ff4e8ba000be6db3edb0c0e8a50e6d879bba5d69d6622db948993dbfa6a9e73748c52dbe83f63c11abd9e2259423d5cad35defba38fb76b6b031a728a242e88b62218bfe8bb295e9444a77f0d43365121a69cc1f4e0f1e720e366c2311134bb4b5c39da1b4f68d2348ac0a104356c937c4494c7e801255b9f65205180b1992327ef950e69db29f6c5452620a833dae25ea7cdc5ec6823a5e0435c0e9cae32495d1b56222545eb22518297b8601495c434fb32ee0c2520946d09e5317ff03f6b1cd057bec8047a321bb7ba2cc0057cfd5339ac6ce9b434026260f4dde137124bfc53c7d3a27c57562c4af8a5f0f78c62412682bb2d314ebf665175c2a0eb30a23889d16e627a7ef1569b32a674cc5a91bc4b66c69d8a7de4e50003126da5f47e161cb594f4d65ed7ec14bd9b90e30640ba58e2971eec3e148f2e26a365cd88b7c3accb03748b3acfa3652a88e757f0412e2b927b7eb7db8c38dc760db3a53c66f62915f0a4a0b99bfb0433d1671fd201948b3724e68203541dff6660e77daf01d870f07549d598da3ff017155567064886eb533f2310253d7838a508afeee8548efc412a88cc906a04dfe370e38889cd9839fec7aec9310e8a3896adb8557bc3ff1471b501fae27e0dfd0c255e92dc5996927fbd104f5f0cd5c801bcd9dfe776e632fc864a9bb7577f5671bd00d3df90db63f37b9403615489a9bb41379a70b471e3f9841b5b0d88403d54de977eb8c90b483b6ef50f599b9fd8af9b8285c6aa3c1b11e79b3d909b64130bbddd3fbbc2fd2abfb621172afe0309d89519fb0e746c2cf115b03c5b00af042bd344e6399a8a9556f22147d08a8995ab2cba5d4a44d9b24c72ae191689c7b4a9130629dbd0065d9b39a70c47494656d72042fae0213262999f0cdef915c328d398c4308b80211716a742afb8038abf34dc8ca9a749faca79cfcf511c4410c80525c43cf74f59653f880478c074160c852f502c1af4a36bfefb1533e6b1ea59541569acbc480f5e36d45db6f48494dcde2311fd5611760de0adcfff09023ca235c2ad317f1a436ca12f8c93ba4098edd23320316e7df4f5a67b49e62dc68ceed893e164d6f00616eeca1494a628f4580563e5af067f7ca64ebe33df457be353b4351e8fe9b59e09ed9376a291d7be02944fe207687678801aff611a4c3909596a107c1aa36722b0a67adc37acd4ce46bdaa908468a9dd33ea71553553b5f4d3ca2a5650093e33e64f8905cf18d85cb8fb8c30becc1a8b8313ae82d0c79b896726e8d3367e972da21ab1c35e6d1d8b48686dcb8325fcbf3174cf3d37ee5dab7f7e1fd91ba711f9f71a759716c2efa766c5e5a20c82345234a9e83bebfbf02b4ec76ba28e5095b9cc48aa573e707d2493517100b6e4a0da0d9ba796cdc2ee0067d39865f0dd54dbbb7c764ca3d239b7803ff7b00f0a222337c3bd98bcf5fbbc93f0c15455fdd55b4abd78b810e7dd212a30a2ce5bb9273ef590ab080633ec2cf4bd1d57116844dfd68d7afb9d46968c7369ef31f48ef517160db0636f622403d5edc5ad73ee0bd4a60116291238aaa9dc9fa8c0faf5bb35380b5234d134d1e326ade1d3cbf306e5fe851664f2bc82c37d8a3fcba8fc0a6fe7b4afd7ffe364e46c7ae25d93e0f60e3eed6723a78f5ed39d3d592799e2b39c6407dacfb6d82fd06961116e4d55f3ebb85cee4dba705652ea399f142248b69a9ce257ae0e7a1fcec87091a33c7b361bfd4dc5cb63704056248bf484d5da5b211977c12d9a5e1b1509e51803949e00c5aaa0ed88a11d1a3528c5560f54b090cfcd666761664edb990b8a9c5bc4faf55af3811fd1d27aea9b2c40ab80051d0ab9ce9e2d78748b60c08082dc7941c54f6b6b6efa7c0ff2a96beca0947626fe51eab94326c42f194947ee98bf997831591417dcfc147a58cd9b2caba78fb036881b604809d759fad09139819266597372dbd38f0f6c364c67c4b77fa930c88c9f21a168ca4a7b06474f8d73312035e00a421f6642c4470c2f602b02b7802546a0ef8f443e3d94c6dcd424cb1d85d8a41e0a2f25921f930de782a42776cd88f67bef43eea997fcecc4fca48b86570df7b4df06ec8deb23adeba41ecd4c334717dce6725578e14390b07ee9a3ab2b0a95457436aeb21b4ac850a423dc59bbbc0209ce4ec2c0446a49dde21ad7c67cbcbbea4a99ca526513cea47ea092302f56eebbc364ef3c39dca41d45c12e053095d104dc3d5a5c61b0c9e75d09b3574efa6b2a2f3c9506aa03cc15c35101ef97aaadb6717cb0dff461c485d03964b26ebcb7e7090ceace0b871999bd4f4dc2061c1175f6a57ee8419d6a0c79e1b201d6128916b82b393e44c1d8d77846e648b4a545b5b6bcf5efab6a7b8efe0415a9ad631bd25b16acbe2a3fffef51a38c72c868e3943eda8380ed6fe599cab7d7c1c5b5946336f9557940f71623d56b106c8c00643bed37fc3e04614676c275b0045777c1676a8aaeff70e125ec435198c6d12253a4d2d8f0216d215e6cf3b54e0116502a62b7af9a583beba078d189e8ad151b96b019fd8cb3d1762053b7fb5316872696ef41251a03c8721cfcab892b6eec895d7a3342cfe9f1ea95d7d9c669c716ae0aa2afa3fd961f2966c922a0f094dd0296beaf941729f7b2d4a78dbf1b7d6d3e892acbfb7c77bccd3dcb12c278ea065b561ec0bbb863f8ce6688ed7a4bd54bffb2e30aa92be2b844fb0d3eabaaec222c91d203209b0eb35e52708bd85a0a209bac26ebf6c6a97ce5694b73b59dc1a98781ef80174979807d50d318bbdb55e41b65de827f2077cdfcfc44aed73d3dcc10c16d98b621330e0d9101099999375466eb3010e6cc5011ddc1faca4f2ed3ef6b7570d8cb200f79c72e0f501b90f0d17c649bd84d9cdf7ff07f41d5cdd3b84d7b62b2ce546d2fc335a4153e8afbfa95a0ea479ecf89d3030f53daaa18ad990baf199c3a0eb14c0271f4f70fca7734e0beb57fb644446427fab2380c6ac7b42cd0fd8a34c50cefd121a53619c5a5f55a98f74bad0269fe3df32a39486d4a1a382e0fad81dc52a45f9652c596586d64681c6a9a0a6cbae0efcf612719dc38d02c03d8ed53b8b323863f17b4596021414111be9a4074c81f959c79787e8353deb05d08c3aa5b776a373a474ca02a285b7c4b1cb607eb8f1d243186b3ae58373a42693be27b958af5219e143b0b2123bc1aa97cf663dc0a26c35bca3f8a74aacc57b61e87cb822a0c491d3d2d76ca0a742096a062e7c70302588fd9b9ee5cd98beed5b5c61109c4efe0da777dec7446a90fae0153a6a7710b7bcc5940b8cff5dd490c49ec5bdfe388251a4a4eafbec1bbb31dd055f0fc3461d7ac516cf6ae85d502f3e61a5314fa8705f897481c38611e729af4668ca0b6cdb20d6e29178cd4b545ab24d72655bd4f8ea61804d01f24cf06ede11768340f99529bc579e4939e4b290f68a61a4bcddb481c708bcf7373f1cb42dc45384108ae8d40c4dbdf5c8f3b81b13062eca2a9a9fd6bcb657c4f85779c06e161d56e021683e38fc777cddbd960fb3cec6c3f7df13b93fc3f1d34b37f69bbd0e7e655e07b9cb84c3832ebc3cf3740a3cb12c5c143784e0f40d3f8dce92761709c1c0a5b9d249c4728d5db238e93b642549be0b0852965ccc67803771daf29bcf468ade9da28f20649b55eddada7048a85dcfcb8d423cff694ca4df40ae85ef69c31fad57d6a7db892bacbfbbf530ebce2986e1f9201cd61e4349112fea038e35e7469d9e7a58108686f53e3bec402d2425df76b22e4998720d46d1693729c808426ccd0b7adf9a6cc159b233becb1d039eca5e4b5e5dcd211da6dfe1cb5dec067f0fe3d07a01f361f8aaf0cf1f1bbde1986f0ca024a63fbed150c0873d11194100765c9e1ca80ca4deba61e0a46229e5db9208f354bc48b91a91568334c0cf84413dd77efb1ad254b59f35f8a725a16f856470d5641322eb653a753ee1eaa61d9ef8807c793fcb3639f3f61c9a7ceea2e709d7c8c3b111b90b8acc27507eded9664f1dc223c8ebfa43c59a7d7a20d54da3b039c15ae0c03f7e1824ae11c1e10c83490cd469af2017a53032a23869ff23146e4dc5f9c5f6bf39390de6634a5c176667c5f2809db97bc09780577c62409da55e7e2eff2de26e512e8c685483b8bec8cfd5ab0160b70deac77b1693c3fa1b64d692dd8301d745f7fafb40db413ccd00f1653a6a698a2f363d662a44523aeafdf16356d75787047c963c263309f3faf5956e9e8f901ef5877c2625fffb64b8d5e0eccae5bdd25c14acd914a8c46d80b435b5966b697952757d2ecc8c67b6633a81e81581da852ac9eb8d26b71449de78be04db1ffab0e390985079cafe514c47125fa36e2474d24286ba534352b6897978367fda9df2c27a5de39e23206235a1d9292ced02b163a382fc361a860f5019f370f1567aecce6904bd7177be5b3ef12d5b96b72bb12449ff2c91a5c4616dd21bb39b40307d89e3e46ca41606961f9f721abffcf9b7c933a0a43a48e0860d7285ec56c6a9f1c2919b2d8db9dabd2bd1e6ab1e775e73d4dab902215f6301944d56325ae5a61fe8c6d46865d72c8a1314b0285f36b2adad921c18ad57073a7a9bfd31c694f6301c6362833d02bcc39e5680cf6472130f7f82b982cab95db42721ebedbfe0a3ba244b3a878594c6806df2ccf4c685f2676ad55ee006ecfd39e208d1498479e359cfc3786e96ebcce8ffd76b4d4e020f5506f54aa83eca66bced9e68d8be1cb9e849199dae6ddeb83aa11201c06b8f97bc408bac29ef9d3fc81409dec11dcb0c07b4b4ae186a4abb41b5be91d70e92d4568c0cd6e5a45ccff199c1fc8258f970e1b5159a17b69d33d770c67b27b23fcea705baa68471c56f1daab0d468a8362eb0ce6e479de7e1417015305b2bcabd7f07384d89f18c6e66032f7b3287be4d8a63f7cfbf138b5ce03ede3d5246fe9db598c641b488447a034e051bc8df920150d72a5f155d52547ef11497092ca466d5c81ccef2003ce39c3971c9e98c1ef79a95095496dd07e9ed758d0925127305e168ea3cc1c137f8e66274fe763db127344088786eab5e6179f7f4b58f3b9f93722aa6f1af0922cd01aab2619166c514a8cfddc838e1dd168fbb3c74f85877c224b701071f063c92c7cb904d77dcd15df0cc8c13b340f5bc78bd347c07aec40aab3a782819e7c93a7bf20c728c5701b344c2f79e95fc76ef084e207804d529d93d0feec88724f993fe29f6e2d8da9734503b31c38eaf4e626f331d26a1d0aa5af5685493693cbbc2a72b42114419d15a75b264466d9c31013a99062d8846b1eb67fb68a0628a3d048242c04ed5bee75f921b822512920531a0345e0624fe8116216674223bec2dd019a431c0f178041dc9ec8ede21922b1c3bb51e06be1584bd18b42969c00ca7c9e0cf4f90473c2f7e7dd0e8f3496edcacb3bef3db8d7033f19b0752e4fc65155a8a1639bf76731cb98f9e8c9889babe751b6555fc370abf31623eba171d5ab10aa99ae5c1ddf82f40dd4f3ca06ef11a932919f2e0b0cae107571cf344220a086e6ce762da5f4a859b853f7c9070e1eb50b1fe21f0105e7a090e4bc991fa84836779079ef99ba274e4c46612ab87fca7016277906c6727b5644f2743be416e2de15827a5ca7ffa9aec5412a0008387b9e13d91921b869144bcb2ec7e11e8e666d61f100a33cfebd34b5cc2d6b0f25c2b657fcab05a08b87d04f32f66542d17cfd6950e6c556201e5bed8346b83fbb6ceebde93025795a9b37018760a1017966be9209e0bdeceec7bfffda4e325af46e89a10e38b7c51c5861c33bc50f9d7d45e4c2226c73812f7f12abcdc789a03babbf79a7168856b900beaac18d91073f964f51c076f6c49bf81a26b6e8ce85446ea673d733ec1df84c630e7aefcb614d57e5e3cf76485569cd030d44df9d6eb28738f911b5401e0617d7bccde71d7b40536e40cd9e98eb29f78b1d229e454165d66c3d387161bc46ee51c6ece499d3a446801466d13bb3e77d2d13b2a9cf428a6a2b7c76cffe9544c18aed62e0c3068fe6c0964b6a841326ceac4fa2804527a2f04596bfe4e4bcc9e398a33f7ff7fb930a0cffc74951d3ae5a847ee38554a23c58f42674c53f3515b949a0060e3ab3e47f272c92cfc19190ac03619488a29251cee5184036f30df51319c3678d12f26ecd1165b7f59c2ffd4da9c2893304ac0b5828a6b24f95eb30c515cf6153fa11568ac58fdfd62eb23178449c6276c24eca30c6f4913114ddf175b3555724dba67228355d82fc2fc2a20913851ab1786017c370785bc44ca16459d3f8e7873c018e66d3e31e4dbfbc5b0aca34c64a5e7cd96e41a3effe2f1efb8acbd014a75d36ca08f2145c517cd8e0ba6e92d51ebcd1541a8cf220f5ac2190d7abec87cf7c084ddaa617cd20d0114a6080cf89d3b37f6dc40bfcf8823d84634a60844cf12c7a0c2be0dae8c418c8d1ac5acf9867100aade4e68c73628867e3133b86764c6807a5888591438e17c7c5207672f7be552506b7e4caae6ad4144aa856cad529bc32e343c7463bad329cdfdd6085b345b321d081f2dedb6558d261c8119421737bb2e2c11f089def0fe6d9d1c9b04381be03b6c49bf79867281c766daa63d81335e244481d596346e33c082e9a1095ab21ceb1b032b168d9a9b918e5e5c54461bff07d12d53a200bc049e5646a1c65e4645508bf6760b82a5b2bb5f3f7cd16482813797f9dc702f626fe1da99eb244df9b09689113dfc9c69417c7860c5a9b66bd527b7eceadbeb20a8d3bf0db0ae2de775e33523a5f27530b70ffef424d78e93a3bb4a74acedea45184a4e2326ead246c5e2df52ee6c0edb30120da92c0c66346c7f7ba98c08fb35bc07296c89dc0b0c72c1ba860f08f558cf4d6ba210700496a643e710817e3af5abc648ccdb2bb78de874aec41d257581412af8596ec2d882a1a72e4e68d361cf9ed0fa39300e409dd74c68a40084b9897fb7978a17435a59c0c138cae69da09a48b3ed0ec4b8b7b5dd6c7a3532baac59286b11cabb8cd0c64bb4df3a306d49819bcbd85041c8acff561d1b1e2bc3efff18be3269c9de07157d53c20d3ac3713728c7bc65f1adece84359d77ef489212721f689b8d84dc5a3c7aab541c48bb60302fdba26530e1caa4cbd0941a964fde67b853a59283f184a3628294820d306dfc538cc007c8cf764a0416aa056024188499a5062213815066aa5e6541e03712b8e64a2827f127055e6da6db936302a07a521f4739ad6aaff7948175b9855a4efbf714228f3278d4c2facd125e8cdfdb99eabdcad3e47e480e62c93fe857c83675019e400c382bca9f0a52f45d461c6c5919b378d4201eec242e7bb43a5aeae06250e42ed35d28b9d5bd607d48f945adcc5a749b3f8584018862b7b647a6b45f853f28b635f20f1f1bd24a23d1b3ed721bdd8ea64c2787217463f605ed61aaa8bbe5ff2535c306e375d8288b0aa4966fab843a01b67d224f16a0a43a7f13ef4af7ebb39e0cc3a2001852d24b8a803915aff0be773ab5b6da22b2ffd2b7814152ed4f8b24c5c32c417eb54cc3c1576bee128ad384d7562352d1efc108a11cc416934d270f88191ecfb7b47e6d0553f63c7d603b69a316cee7fd15f04ff7d9c7b5df3fae5a7cd988359eaf8f26bbe3258023eba8d6b848416a9237b9caba0df620d026c138a190f3b7e78475f50b1fefa8c60064d4de61357cf427f2dae8006558a2a250eb4e80c8408924853546a102ba7437463235411a582548d46505ba501faa43035e2853f5dc6815edc5cdaa6428b8f077f4b661c8a98f7eee498bf2a3e033f6a8f3c983a64b4f5cf741fe9afaa949dd0cc41380db7d5f36f1c747f137c3f65d97b27ec02b0d090e513590221397acf8550d5dbb14acb609694cc253853b4e166b65a2e53993f27af6ca5a9e0c44fbc4c535136314149d3d20681b3d81a307782b3b23ed52f55fd80472cb69118d3525774f6c7c82d4e27762f0d998274db8abfc7ec27ea44349d42e5cc630363840f23875d8041e6eb02654c8e3ddd34b271ba9824bce84c1096f1f772ada703006dc5f6ed0aaf1a8d8ec9602897fb7801936296da12b8ed567f095718107beabada6adcbf87b6317c4970ceaabe04b9fbaa5017ce071764a97c2ed8f583170639d947983117d335f2cdb3e7188cd495a75e9bef55eb89e4917aa227287bbb2bbd3d7ac4f1f8f94d257c469234b705ef1f4367f02fad777804e4ab3fc92b7fbc1f92eb3e2fd4f643e54f620eee459d595c5ec5bd4389f8be81964398b5b2a550d90f23c9cf122995afeb22fd14622d3168452e268fe2f60e0df4ed8039cc14f607cb63e91bed9841c4f43ad6ddcf99fdf9d58c1f23d19c2d20b13a393733f41220e5029f923e67d3c0349ece31b8898ae76502094312b5be801bfc1b6ad32c934c973cf35bc16144241737a4563103a9fd8534067ec33a22084cd40b39ae5747a3723765ef85f281b0426d79461aa04b20f570ba8017b263f136fe83fd8ec995d4609604efceb633601a8b4800178c5f06c47c5c7ccff51bdf6108993791581428c269c30d1fa1a31923f882e1dad329c9a36d3b6b46bf23dfb312ddd5d70c46a3b7816594969ecf242830f14ba9405a53f2f71a12937cee10e32858fe4329bd19042a43f1f6461149b1fe3bd6b10ac3f00e1cd1c27cd1e3c5309604deb6b4f7bab7ca1b919f61c1568abcf38a48a8579f3e1991e380ad1242977ca667f580062b3c4ff2deed520309702357dccc35010dbdad28d47aae04f18d25da1795eab42751fcee61021623c12dbd023978dec377bcf42f9f01fa3043e4d3f1bee6904a4aed755e542c284a8bbb82bc491702d70e5dfc95b4936bfbe2d6988a93d02d5c1aeb1de43c1e87538ea440a442dde795eda74e6bed231da2070a6451273608194407fbb321b566191803fab7fd202944d78ac4c62232b7fa96422557c31dcc7b6f0aeed4c990f8bfd0e6a21781563e237d81f223ff38eab1e32085839c492723f1500891709239eb0588ea696e985b91dd4eb68bca3e8b4c6979c62a92014a177d166f159bedbe0b4dc1c5f35c3030d0724aeddac96e406b0c37c152437f0413e4a12de868af2d1582452ddb06c820dd09b1c346a455bda435bb727906495ecabc2c3f2d6cf5f713481958935af0598875b62395d38d77ac5d295bb85a4b885d7c6b74d4d89878cb6b1a9d33d2efb763f1afb41403cae19fe4b0ff4d201999a248e27795369d5dd29941ff70f24402a4f58aab7ebdf71f30a806d618054ac3036aa3fa0c129e1859d66b8da113a92086e53a0e000facd3077d58c67d155fb47ded6cc0bef2dd814c952ffa85778fd74bd67040d849c8b65092c10aec4d5a66a7121e0dfb50a6eebdf848240846a71dd5bea8624d2b255514513cd1c3b88262525a64e516d590e3c7e1d845269007b4fa2e5430420e0d7f655ba8a8386d48457b3b4e62d148a3aaf6b062b05c4c8e750e9a7b125d5cae92860adc0f5c11e7a3087636da25f9ea2631800000a940c52c7f22556b96818aad12889b7f895b4110e06aed1670ded150d9da59f7fa3392fcbd0436325b7d217dc76de878de35a42cc2012257c68038e3df47d7490e9c4f810972cf623e7af1ae69849fe08810f76f1faea18ab126ef96ce8fa0b2fc96c4197bcf61f024d96f7f9f927055620a6cf1f90d4c12239fabd6b98030ed70196f2813e0323083c8d2a1bc906fd5e8d9694f7f3d0e3e231685d70c006f5434e32ac4a16683eca043483d9ec713576919f34de3e60fa12cdb1aeea4c1ba52dd9d100fafcfad395e83043d31e4db066a599846c4653fc52d011c85925af0ca04e49aefdbc2588407735d17259dd74613346d8ab4d2697098a5c943f967dca87cc7fc11993648d598876edab25619c3282b5a6dfcdd221d1584b48837c2baca58a91c7442403af9b4333913a28482f1cb48ba4957e2f8897b4ca9ed0edf95dc8f565e190466a6ebfb33d0a5f931055a5329bb634416c9479f3c4dc2d013cd9821a0ade0f4485c596f9e9a2a340ac55d765ed98275ee995c6b4c1a5cea0a6f12f80a738cabc99e698d551c8e5dc5748d777534f741b0d98fce0552dd907d91a82b554df59f89b4261a9bcd5ca28b41ecef53c6801e1195a3b67ccfe31940f162008c29ff1b9c1920883a9ffe1dc73cb8d216f48ad8d1c68c8e8bd1072aa4d2e052a1d509551799d8a43a79fc305652fefed6874c1dfd28763bcf56297ecf6fdb2df51b3d527f28917b29acb8afaf6b56864a8ef25f68ac9ee804d2df2260feaa8d1b05b7b8c9579e4c2e0ab7df6e516157fd31968ec14c36d71c4e1e29dc6f1b09c3419ce658b3a4f71123e94147bf61ae957e5bc889c5a77c19d7a36ec86f9980bf000e34e31cfb68d303413d9fb76a1c8e7fbd9d0b6e8a03a88e58029e759b9743f69c6e14fd8ebb43fbf57264477371b8292af248472794f5086cba18db24cf99d1bb25fbd6c453d93eefa4e0bf357a7a5ab0a6c169e508588799701a8a2c67f9e3033a7caf00c1be55c6a9315e73da8f5d97d4f64f29871e485cc276e05818a779e3766a6f60586756e16df88a307ac32c8cbe0cd85e2a6be17a4e85048b3506bd39cd3e95896e1e22f91b1957e088efb75e2c12fa21fbac03468c84e08d447768cff8dd5484f0b0b09aef119f95b1bddabe6c98102aa5f9fb7e400e74953638d52c4a0bc465ea1a1eb6d823c227554067fb5b02c3425ec02bcc63b7687cdd3dbfc129d0b78e9419b3592ddbd21a3c93ca3992e8b73750e9d792d3f13fba9836ea7b6c92e12aa99222066c7779f0381c8121c8cf9ee5f67c2d56c80521d36b148ea5d46f47165e04e2d28f7a9c3199c17f59b033d74398ac2c66d2e54b5f8c3a717a27b822c8503d6f366700980dfd284fcac150d3b831a2b08f21578ffbdbc9c639a227013cd92317907ba58e904a6141eb159b4836b9e25c350d6fb132d70e9aeb714b656a9cd6f74419f1967c1287350296dc8dd01ce0427590d1c1013a21c1cb3114aefba0c073aff56d8c0a865438b8f3a49135889c4434ebb72f7e925b6c52cbc34f623dfee757201f5c12bd06c0c85e10393c584c07dde9017b818c84b6f9cd03cfcad527cb13047a25b5a9f5109748defc0ded472fb074355c5594ea76c2613b5d1da47c75392f5ef764069c20ece5fa68113b2e9768d93fcc268440cfba2ed703564831e275a3cbc360c1c07072e37fd7e1ae7c51f307dc0914d19d2ec5e55585162d7d9a68783cb2eacc2af216709355bebdca90ed48fce29f2b983437d6f5dfb604ec5efd6500eff6b4cd96dea7096d42a71a2d7a0662be24674f33b2856455267f7adfe41b46ef5d60b65c5290a77328d28086bad612f1ded59d9a01a12de8f4bf499405309934ccc374d74854e19956a529c853a13c342b5e1a8dff70322bdd84434a03b67a43101249ed9ce2e9553d7d5da7c42eecc04ab36bc871314e7f1a17cb9d8f05073fc6f098278e99bbef8d01983bea5160ab901cb723712078bbe88222bcd42178f821142ed4ae1a45c3eebf29129c7bbcf35054308ad6c48430835d2f93ce0c7dacaaf8cc4ca59c05b1d25de496e73bae44dca82619fa6abed34eeb537786b1c3d93c5f9a04f36d8cab02b22bcf4bb908d3ce3a98337e406414fc703e0d9df5ec9204b84fde681138c789c80d5db46cdf091d68e1a7ad3a2ae4effe620b6d73b70420cb13766f1135dde5e538133cb325e49d5c447ff616cdf096ef6be4d948af22875c852114a53fdac8638a2a3e860e1226a607d56a8e3aa714db2bab527fdc04b695ee3111ad845649a75ac2fd820aa0f5d54e91cf9cd4203db95a7bb4136ce1c42a86e802185cde1da56baa3ded667c325a49361321b55091ffa3eea3809022cc4d86d2b5aa4d04e01f7d119f4f2fda21322fcc30d44d373cfb671d18f5b5b65e690eae6d41dc97e25dda487d5f613e48a46177461c96d133017aee19925c02536d08f49920349298400fef3139da6015873712bab83538f711717bb35f7d171493a5440c91c6d770646f0a7da56ac8215fef8fe58d410a941da9df930e8e562ba17a30398a278e81f32ff7ccd150ab3fad27bbc3ce6e36f0e8a519cc5139783f27e27a2258d154493e919193818c23292c7729aeda4eae898515f60331d302da754a364c3a5ff1db4a7c6a0cbe4159df0b37519b329d6bb156aa7f46e02e5142b3bf3a586f890a364e96cb30fef43b41f4953b08838b6caa096131a755af773e8ecf1b2c9047641c39bdfa398ad26c642e2ce29ff96b4e2b9828a5a55ffdd4268c4050106c966a87c3e8462bf740234048d70021afe32ef958e259414a289934d227dfd4894cb67b673301aac38fec2c04a9a962e69ff7518c8fcba0ab26bbdd11c1bb891127701d1b7e28f06574afc803c4d527ddbce2c0f619dd45204e4d26173811dfe41767baa47c29434520e9272acbfadeefa61ce80eb7c62c510a6727ffc4cc81ebe60e4f74edccbfca39125232c0a158478d088958dff20b53eb6a314e0c79d5134a0bfe198a593e292418a2b2fbd30ada0e71296b7ecfdde5c4503f5c574855caf0a9044c1fdb61abb0181827559fbe456d4b95a1bc314442d3374d3a79cfc04bf0bfe4305439a1e31675c5d217577ba89d43b2e6253d53eb01835b245c4396e79528f5006f86439b9e1fe51274fac91892dd27d70e9330cd31e95051ae9854987dbf9569f7b3fde14fe35df1ad6305da4d6112748300e7761bb6a01d25aa708d53d56ee963dd37eb2724307dc0053200f4e5725e741d3ad92bc04a5edd4671b546d1dfced721f97b52ac15e36a97e8258f6a007b8925499e29621d57bff237f7795690d4e025c12e0c6bf7ff74c88aa5b44d2fe5eaca53aa441488ec594eb4c651d1a74483871d745b61cc58f82e757f036066e98014363ac67b8bd363bcb8350eaa284e0bb3022c4d0331af2a421ad6d2bf2cc51c5d11a2712ab03ad79f43c14b79b15ca05468347da0753a332824d06ff3bd8b3ece927f77e6fc4844d6614be7a899f1119c695e611162682b4365630371a9b170315b9fcdc048f1b2cf31ac8a6f6769ac94cd0e5dba2498cdffbe68653a4a11cc8e10bfb96462e6ee2d55ca6ab272db0a3a9694bd48e4e6a991878a0faa6225da11d204fd00b28f90c648fd583d06b2f403563c5bf127867569b023880826a704ff261df1232d379e8d51e5f70b7e5191949070b6a855710e81598fcfd70ec4c341130615c9a292eb741bd75425a897ee21932e9ad771ed77602fea65723e599407acf5886030b677b11c7fd142a2b880d3f305b32f9cc8e07e22067aac142fabb766e9ddd22b28d11957d7d7add214c05c1d3d920b6c7eb43af53f98f8921a02e3a77b6b1750609054d89c02e4aa2a3e0d91fb25e85347a055b6b41c897023701c15abd91a2eef8b974ade49d73d8eda9c1b4eac2fef1d6f825deb8abfb02dcbebde3185008b3d39ed5724d31a8070f534f4d380576bb5d1c1261a2574d8787199f2043ec25348ba8a638429a2926d9ec4ec6fb496333616e806da6db7c0448387ccff723488d46bca40edcf55ac48a222d0a0606941523d902d37d377ce464a3c0026453154f62cc85629e11b4b912cef062314ad64e7c0e77274c528debdb4dae881399f4f460fdd1d48aae77d5e2324c262dcea6be49b857501a8179c41419e7f4978badba71538959ba83fdf795426ede17c6a6a6a448d160613e3a386c7e3cd2804110b0790dce9e24840cb8016f3b6aa3f77a444147bb0885eb76bc57d2173a18a4a9d12c5853a70b194672d50cadc294f00acecb2efd1366ff1f30a4e0611bcc25e14027a6f4fc39796cbcaa05b4e0baeb3360082a26f3faf96d017d70de74113dc4e146589d32835daa7f391fbffd5d33cdf108107ee9c54001b93845c780377800b56a1f2116bc28dac2328bc069047d15e10eb830a3dd65be58fe78e9b0e11b5879199b966fc931af84984ce4841396957271190db3e2c227831626ed13e7d84643e23b058d80cfab9e3e40a2ae0662573b9de006853ff80fce7704812be5f2f3f94ce9010857a577fd4875c8d08edf52b912234187c364df412a75caeb244ec29664ceca24928ac6639ab22345875e504a4f725f89a4bc08319c29783ab3f12151f1e63118ac8998653bf3f3bd5da19b86749dc032c5eb8511279627f3aaad33294ef5cb0d649b316456dd685e46ab505f1e501e6cb111e5e60d81551f23434b63d30c494c677d5427c9321e4515e060a812dd52ad2ca25e1f00d6e4234599fc5f35a0ec57d55a28f8304cfe1604ba2aa6c11b23dd6ad59c9100b103f18677f1d45d72eb25a1175cc001dc86c6b2b0938835608c80251867cc42c5a621fd83ea36a630cb106841ef4300736ad737e364b31b4d24ffa75020b34ba57c267af33b7603aea27abb3e4a018433fb7fb96e6a0cd40e63ebbc8480219e7bd9b89fcb7d68eb43548d08abe95bce80fd71dcae8e5c3160b316beaed623e1cd27da8e96d614725e8373d8ed62ed7222153be8e9a5d7981b7f80ef403005b782d2d47ca852ab2386c534741bc39eafeb8beb5c211bedf91d95290ad0b5c811d6965a553985fb3154b4f2036c9ec75100532d5061692e84b3e41ead55b689f48d7787f42ca045c954b1bca5e260cd4656c88f45e1c9a374d6039586823f254ce33709a93c90a029f55127a310e9e14fbf889c49e478bdc39951be144adcf2ca517ae0ef4a04591992f4abbd6d36cd723a0f7bd8bcf69cdfcc8d41bc22c7f5c24a25faa1121870c94daa3a3e6ff2f71be85b59f244d755962320b861f72c87ab8ef7ac2fbd7335bbf12628bc26da3fb314cbcd2bf2eee871a8917c9bf339b6ce71bc98e3a31830ab2fc14ad03faa92b167878214eab846acadc21574556cbf462f5bf2795647b03524649b81e917295995cc5b7bf056c20538b4b0161f165dcc72058f188b5ad77746c140182be3fc40fbf7a489d3feed5f30a9173c567d98102d2518154a505a902c8e02901a2e5a629897040331c60b0d554b5d82a298b05e9eb1779dc141c62d866def80e173365025f06b39e735513f43912f10b3beb649b72a0385c06ec9e351a56b915261751f924c2e48a24f8b856e7a1bbe91cc54a814ef87b6f1b70e6bf452de7c668f28985451c66a956c89affba93d1736526bfad4b77c7c4564274aa2bdf44128db42146ed5d1efd591d5664b9be7c401be356144f7e241cea852ead747fe420cd8f5420e8a49abe7123b01db2234a0e5452c6028ceeb8f62734aa5a55bbc85fdd44018da3cf1c18be66e0c9bbda7bfd9379ecada86dc95f7348527baac8033f55af34f77bea3fe87e93ed2b216ec1a6bb11bdfd4c3f407b72407804fef5dee9e0e172105226316a3faf756da193b12a09daf338288fd9aaa4223d8aae9256f06b5bd7adcf604e32a46e4274facd22387ec39b891ef9236f5408a313008a3ac1b9ab168b58190e77c7c871c512b7848772d30604ccf8736eed7375328e5c307ad71ea0c3caf7be0de7d4a4ee0cb45166046c285f075670e67d87f2672862a40117130f74db94b7db724e575aff93d3f6c2c7136d84f2c48518c74e58bbd9de496df2516276c14abb1a7fdf43421099f05f6dc3ef7502dc7c5a3103f4187e6a22fb9ab5bc237e27a9dfad13b0e4631b4f7060b5dca77f0b83b723eadf9c844dac0bde893386e96f9b74999f3f86933d3ea55313fabf175c0552e86380c884769f0e36f60ba90955f2c1872a53e5a22c669d6eb142235a1e5ef66c1b8380c9b67cf58942fada261cfb2185ea4950f5d75cd9acc1377f3da6ef95636494de98763757c89f39747adb8375327c9506af9be31ab53449602ecd9149352fe22818a0fe09ade518115dd1d79b4e4c55c457decea1da010ef684324c159fedf63dc673a0bfd77eebfe12c72d269d10ea4f8bee189f7e2eca0557dd5ffb71d03d3f2785f9421ea2793bc37d759d13f8505bac5484aa847607f2dab063a3ede5f7acaa7b859adc8ae699c25ba88f7ad1d854b5d0559e3c33e3f8896d6b978fa3e08bf5f9e89c5730e032d07c46ccb20c4ac6ecd66052ad9af1d6074fb9440b7e68c856818e623b16775d146d9acfac3c590d6ea36294224dcbc6642357624fdba52b38ab7d520f782249122a673dc9ffa926f8fd4a5abaefc823e4485739923cd8d19249c4db70bfe10168ecc6e8eb727aa2b001447dfdb4f2e2f56130dc76577c40a13728a9fc3f15c576564ee16ffe4a73e66a5cf387daa4267bc60de56ef2f534606ce59417a30fbbfaaedad69906356fc5f44d32e90f35017834b08f40864be9ce54588cc3277b7f44801a9bfde227233fe8fc52301d74dcf8f001706eb316224344a79a842afae43286ffbee3a34d757d2d9bf1f9b5c111bc38eb03fa74e0314bcf8475ec137dcab43292027c45288f1740cdbbcd5548d6d0d9105cb99a7f2958c5a7a2dd9955e7575890b487d4110152eb78498a16137260134475431c6af042a9ded295a3da208e4fb0aa58337fce1335c4b962f2807769efe7d07535030a00425880140954f004ac6f411fb0c281331f32909faeefb7ca8ef867d72bbb2144442e35d9eb0c54eade62b40d5c7a7d590afb98b77dbf07b5a3a56f507acf3cd6e035eb8caf907dc518f9b6ff007210a012870c3c5815cb9c264d44362050a5a8df66952eea690047d8423e01c8f51bdaf1f3398c54b8f5fb8bd30615ca74e544f67cc7e16945b9ccdad3520892e3f9295067dcbb84af788a0ed495f8d563aa832286dccbcdebb10172d12f5921cb212a4f4eeb140b84774651c5882ac2c60f4300c47ff0fc0cfba1c4f78798cd9b6b5f9ad68695be0cd3a55e821b4deaab350b403f963e275bb2fbe36ed0743227f8edf1577388771327ad30df81b1cc433a8dc947807b0c1c1245c16f36a09fd379fbf061cb7436658f2d63a9be040c383fcd3977305b373d3fc46c349400047c193be35cf676d382ba1d211e9cb90df7392a5bf78c4134485612fc7b1588c7947073803c99fcebce2956b1322c4ac29b7241b09ce9e62e7a09f006e6abee0cd07e9117458a1c9fbc957f120cfdd0af72d7cf3311348b878e85690cb5d17d43b9d4f44f9a4fd29beea8045c66532e492650152cfb21e99fb390d1cb058eb8acf069769ca0a5d44542ebf39bad6ab46c39b62d7868f727b360d0b15a72fff8d4ac305fa695e7b68c4b95699dde659365d5bb27ab31644ac2a7b3ed7885e1cd105d136b0f10561f12755d5d6fe6452637b2b4334860554c1f5bd65de8d3f547e50177fc50a3807b1c6cf244a2a6f8abaea6ac5191ad1451a205b7aa7b9786538f78b72764fb8a904d8c482446d63a92e32437743909516d884b76edc2f3858518a0ffe07afad18492f8ff19daa2ca244dc1d95d77eb63786dc1d0fd930f13befdef45302e82f493483b2390b433523a4193c9a07470e2c7919a184b893b442d7453b6455111cb69654981123c17d42a352751419d278c9fed3b427577761a79a05f6636ac45e5d38318238c7c790bfe0f43e5935ac4e21b0aed9322a374214b204942c4c55fe413a692a90ed23c894e06760421624050dd7dd3ae7ae46deb88348fa34060703cdb0e435d2f348fa3140696f530322dbb5ff2b3d67b5d007e0999a4b9bc61a933a6e617257a92255d7f08a5c8cb93b727de515a6fb1cff339a7811cd6f8de1668f9fb90b044c64b220f11d306cd45e52e0f1f521623018d5354c690811337915fb080ad4ec4baa05d693ce1274e4ff4d96129edd9062a7dc1a72600275870ffbb31685ed18d9ce6c182cd9d411bbab36390c1006268b7c761d0c7e8a6341d91d2dc3f7ad516d1baf93e9ac844760a0f5552786aee383372dba98dee8fdfa1220cb62efa67b1b08a6b45543682323da9b62c57e442bfd458940b51a30a80da9d7134ff2170aef2c8022996e69cf06334bad81037cfa7f3b53dad80ec4a83b1db390cb9e096dc98de2520ec4e3480ac1c1993dadc4009324b587e75f6133bef3669bbab3bf98878abe2bb90211f3f9ad17d3b4733b508a6ba6fc0e9db6bf313a7897b1dc12289a786116b5dff36ee3886dfd870c48881ba74aee6609a16a16b0aee317c8a297406dd29c6ab0268d3ed3b7c214bea2d0886f85d6ca2864d1d0381486bfbf62680d321bf748685be7eea937d1cb1c5c5fe8556122965f639b1b735832fefdb84bd91a5b653388bd0fe3a26b43de286397bc56bc3d89caf60ce3ac13218a8dd69b6fdd47ebfdf23dbb437fe78b78d63794baa31e9577d351eacb83e0257f492b2c029783ed0d8c06c3a9f019ac7f1a61b7cb1d109d444cad7b354aeee77757fb6d33dcb13148373dea6c37a5fc55cddcc65970cd1baef9b933aa9caee1cca388c4e60a10ace2f790123bcd5ba72c3a7f9af159899ff461c17fb8dca594a9fde041d9cb049dc38ae964f17932abc250f925493836ebb642d7cb117c0513cfa44a1569314747ef41aabab963141260434bd85ad31482f4071dbb04cd360f4d5abe7e55c19d0440ce716086c91eec80e57413bdaab3bef71a1c0081f5116bc0a8e80495e0e1e7f0ccffa43a96e6d1836e067744dbf8c2ceadba45f92c16b9d7ae4bebddee4afc807b35e08d59012f30cb027eb8690765963e93d947dbe64ca75002f2b4f18b74ee7914d67c75b2560c6ff1de622cf7116dfee2be74792e09c047bed08ed6373d3b70c6c87da724cc85a3977940a0a5055d6580d553dd653b7aeba35782384bcc04473bbf96fdb3268ec4c779cab6d958fdf342301daee8180e480934a3f47be38f8139e5d684e9f3da69e499b040e5992bd130d2c76dc89299cb19777cfc2f4a23087ba3296ea6befa34a1c1128c3b5102ff464a0ef27a28ff1fc010eed7b88bfb677b77e309a0344be4bccff5467e50dff76f2828734ceb1e2d108d42c6c37dae47a88beb9c6716bcb6b0afc9a62229ddf5e08a836065d0631f15fa3f7407b927568b035901c13d9b4d0687cf6844ed8bc046f8de6b2bc545561fae2dbd6cb52f4056720718fcb833d8da2c6cce2affb15377cdbcc03fa1f5a78be298984084628b9b1f5574edb936f99a5e940321410c2f759a093d2942b7c3daf85c0d419a450896b083a3679900de1053b9906c98c106e9a336ea70573168b3ecc8dd1202714d73df3652a3a6872258f2762cfaeac3dec3aa9a2afbbfe8507c2e42e37174c1db061d0f21f203ec441652ce7e1095c712fead1c913d34cc1e220152eab9748b210ad901dd820e45669a192e811bbf2aa709d6c27be2faf027eafa5df3fd9c9d71268df234f97e03651f737dece0c2c2edef436f50e7ca2b764ac2790036187a64d711af062870310038af27aab9feee7a2b68f71423d6fdc4dfeec19a7556f7dc96195c7cfb34434f62a5afc5dd38cddaa04311630c45b7f18474fa9082d3577e19d7367b16624188615bdde34a8c7c3e1754863a5e09f472b0ce5bf594add7bf171d0a7b40d1d069b63818618cd58efdbc1c99db03a6eebd1cd91122e58a52ffd18061fc337f89b2044f3af09b9471d883a089b81b1840d28ac2750a0760720b6270f6bb70965599593f5dc86429bffcce58ad366223087f8a88320e17b0f0c08a99507140a1a865374b941fd67e150c2af7e1dcf8ec1d3f79a20e47c7ef3f47c86a120c0325e0e652d5acd2e1be3e82956975273d945e0be2a83e70e79bf37a607dceecb14db4501a8fcb459c00f652143b032ae9c9c06a31123adfc3fd3796d469831916c6ff66009800bff3565f219857942d30e4f774399e8c479df3e2944e3024417a78a71154f8997a3f26a48b054b54b7287ad5877e2ce9b83c101f3b22b9626e28cadd30ae92c306ecbc334090fbd0e8f71a6f8d0cc6ab6c21685c2500f7d7d23fab07653b91d04b2d097658e064be61ef540e8e9cb338e3b788e4c2bddaea90192bad79439ef9be95eabf5a9db2dcc7283b5852a3857de776e5cecc8ffde7898cf4da733e058b79c5acc3988773e9d1a8e5457173a024ca20cad84ce3cb9726a4a308c3aec5093fbaa3f8003dd2a82210bae57dd3952169a019508b34b0d8455f827b280548959ac343321e7324abb2a3dc48ef6335fa0b896e1cc9cbead8960623bf06d6f061e6b4734b7dfea510d108f819ac487f537c07e9ef8581bfe0ec23372af854a61aa5fa658cbd585cf976ac085be156a11f2f2ceae0ee9fdeb178026f95ec5ee42d629d71921ba8c64e7bdc2114492ed0779d1c6218fdcc5c59f9ba6f33afdeef2e45e69a41455e9597d8bc37f85635fa7780f558af5084f083b9df82a656babd6442a5d8ebd0aa8b773ea27c7cc55a75d375fef8cad9e6047c8cc1a0ff6643f4f6aa045093b78421adaf19110a574595dc58c4a30b0b75a728e29516e5d7c7481096f434cfe475384ef72e1bb7a4f577668515a41edc6f0c5642a18ce04df44f8875ae7ffe45d4ca967438ffb1a7484f827aca8bfbc25dfe9a36bc677d01c66f04e0fa166c83beadf49f1d3843bffc6bc84da79f85f5cccef2845b18b8172003917f71521938a4edff83c32995bb741fd0dd790a614f7e7b0db752c60427725e1974bd975cfe5408063cf04917aed02d482a2c2e6d8d95f4e5efa34a015ac58e996bba07059164f37f1c45ff5a5b0e8e33cf55e68a01cc8d82d81be67d75f812d05506c5c1aeecfebddd6e9ed5d1f43ce1bb69a5dbfdb43d1d6ddd051c42c246376c594401e9b6ca9abbf9346ce4ae4a56d890b8bb0defb720d256a2a7c5bf9d820c0c28580805685d2d21d60da8b3cfdd28622738dd07454ca6ec0f771595d12ccb47d3aa62914e407a75be1e1469f7746c80b8d1fda6de14138bcffce1912a5d73f7e30d895ae92bfea8d60c77f5cc2a9e9cade2b14e437db714cf8a574212e29c4d5822ea4e5ac837cf2d0c70cd6b819c7365ffa932a1219463a6432a73f492a17ad88c503c3745c0d739631d111dc03f117e0bc04faf4a1fd15262514e2cbc7f704a1459885392f7720ebf3bb17e745c90bb1098d104747dbd3315496bd251e080acca447ae180fa660e4cb15c7b8fa4a6a6d84af099da4436fe5fb9ce226d98630fb9ff2820c870349ba322943bed42c8978e08540089416b427d5693fe826939988eb25056cbc46d89a333d7573fdab669188e5e083ccf203e896f1b1c5c9c91e4362d67473a48499bc026273a2288410519b723ebbda97bc5897846ca8ad2635a7b1fea31eb4680b2541ebf40ccb462f56eb551c32dc8734652970c340280629f5ec33d7c30e37b09a96a2c70c31ff92126b1698c9522f5cd9db2780731678e551b6930deca74337b6ac29969d5bd2c51c1be384436d0ede7548b3df8ecc2321e82d77fbb28d2fe060f2429d2e348d95f4469e3065ae54959a77fcd8a60a6b8a4e15d38c3c954470a31f270a2c61e590979a18672d20408a0cd2031885d5fc6910f76ab1ee97f778974f6fe309a95af88dd207a948e0f3553e45045654d69d5ff12807257b900c3fad839626dc7bd90441b6432b3e64b6b8f94a8b9eff7a681b2a8b7dd5756d39e055210cc72448585a632d3a14bc230e6cb3ce776cc2083e13c09ae09a9b8f64e68d33558b25ab0bbc73e97e621a1f07bf2a36588f76653eb5999ede124d2bfe715210a036d05c35c97d7a65a88fc50312e7cd9e4898df23ddd985953a01736b678254fa0769f3cc2a6aafbfc20787bf3fa2667f99cd6d5ae4f4bfbe3b4a40d36933e96d4ec7a3663da8a889d818ff52cb9f2e0eb05c3847ddbcf277dcdf265fd1a436f81d484482df7b14d039cf0e9154a2045d24a3516f45b0a1acaa5313b322fcec7354a8ce1fcb906a183160aa1efed6f8d2e54c7a5275ea24bae3946412a039f7f8f7e6fd5e8e0cb54682e77c0d2aae3073c6af5962c4b6e86963c1f9893100e383f1e07704c7b8955f0b8512eb0b7c310651d499dc2ba9c94fb424c89a10c23c93be6d1dbde69fe6e33e3296e12ffbccdcc9f6701a5414131c1407687f3fe7164f39a0f2add0d7b0efe058caac23fededbd2923f6257c08cf98979b6b3c55ec1fd8ed21c673f9ea8351987fdf9cf7d98d8165feec7f035dafd2bcaf151511b9625d93ca0506a90bda86eac89562856f30622c6a0dca577d27aa98dd1380ae2345694be608a7506d8631ac39e2e3b0feb84c757b0f682dd0404655bbd1a2b4f8937594b7b9afd3aaa02fc9febab25a3af4ef9984991d7139db9fff6cebd0a55a8c1ddd0a6c6c343027daf0aa6f7cb15e6f6e2f32457f514258ac542ac62fb57b4d41c503de33aedd9d40e8d0da4cb1d6403c1a362dc536c1202cc02a6ff04081776e5ab4ffe7fc8992bafdd977eb773f6b1d3d4a9effa7860545fb74a464d9c5b5004c6ffd09b717ad2bec6d10ef84025bd4a2644c4fc4c3c9cd0131ae0a51e443e078ed816e2acabbd21791cde6d4e3120e320b23a4abbaf1cfa929499130216d9c0c8023a04c327df5dc895f29a059f4462fd8e7d9636e728d63aa7cb26192dad26a21b4f485ffc276d8604126337827c230965e463c23314e0821f76909e2861a7cec66f94f88d389dd879310cf5c1491525a0c2a07e3cc10304cdb0c685b164dc8659c2e9a758fd5625fcf1581324a9316eb3877f84d5ea02834807adadfe1e4fde8e0b2cac1ea1ece43c12e5491f320e7265def3780dc461378e089d5aed53b55a8964cc5d3fc4e5c55def308c2957db41f24239dcb430cfc6ba3478c8e907fdfde73a101d65884b9d08d609226dc4551fda097f4e8cfb7b6976dd94973a9abab4d95fd8f523cf50367e143ae1d146f7f0568a98c09aafd862192deab9c75b6eee47c3b09fe8473af6ab88645763658bfa3f248ab13d3f5001736017672e5378b55d5210795a537cd9ceae8a0b94e34a1908b1da9839c9bce3b452cfdd026c49412df47f1959d715f5a9bfb0758a5e0e58b5e0445251b29faab65f864b284a3266ca25c09d626efe5d351ee2a63879b091a474add8fbc9360afac18f5490aa0ea494d06e80a165d0e052b75efb959aaed7b1753fb5b08a7be0e7d418526779c377dbfb00d1680d2b576213f460a7721d705fa09ce7fa8e9e8673a8f6bf31d9714233cd72657d19258ded26daaffec91d82951612b3c2e52ff42761c5e689ae1bbfd420037a56edbb9b0d1ff0bf26b8ec54fd858f55dcb4a8924677bdc2816c643edd38210c34014a4fae34a59f6d36875e212c74503f8b6b88d8e3b725dd40a000939e8a5abba2208e5453e78d04313ea878bc7c7fd03db75bc46c7da20326902d67c73e7985b6f93fd75733c8f817a06cecade994739a936b7ebf8f5b867f6658171d073f937505b52a3b83fd3dfd3e14a1ba7715cc28427066b882896b7a4b2a2d403c31a2e9f8ae8d9fca6e4c42f4aa884261cc47e4c542cf6819d554b1a618e95a890b19a58e61d56b3dbddccf6dbae914137ee8484c3e344bf756e983062c1334c26c564e2493a371f631750a78275949dac3b2fc31bc7b2f197ced5684fd507ec540cd89df4e1ebee3e894c0cc47261bf1a03fe424efc0db8244bb130f76969cd2240914fb6d37e0c9a144e3e6abee1cb883a8d1698181aa0ede1e4cfa59123d6ddd24aa3cb56437325ecc7cae7c8edd22c78814d321aa6b71ccf96664056e97d12b4e852fec7614a60a602d9e48a56348fb72d0f06564c704e4e1b337e1927c0b95ae49d1000a1f0b1b5ea0fc1875ce44a729b0483d11d45f786f597f806a0dddb17312e23f6d2bf44812755187dd96d9ed61c38ca3dd083d0d897964bd45521369a045f73e5c2697bb7d652f68f19c1a338337cb6ecb94ee2443fc7493441786c71855a6abac2bd8549a09e55610b1e4e8e82c05ffa48c752bee23d82be3d857aee2676c41af53367e87870b0c8accaca27f6f3fe4ea6bccdc015a6e2dcd0928aba32aef8de714364898bc2df94152b60c8d2aaa05000bb948372b608356f8d40248e18d76d76c347fc406e6811947109221d6ba6d4b634022d7f9a2684c0a12a68fdd45b98f32ed37a1e8cdc1281b18406f2f6124249427bdb1ffdebe2c970d264f047083c4cbef4aa9690e661cad5231d0341aaabe1e83b187775a452594d492293a401b5a797f9ad3d10ed0b892db868e76d8646f1b1ac91a40cfce8c2108e0db58d92b12f43c37c43a403cbf1cdb9b17397826949acfaabd13409dc1cfa0c3799ac156a8065694c401693dd9f5843d004ff91fa1aed7a1cfe7d0d41258a69c661ea12270cc74cb48b4740b22149b7506e9a5db0da81e8368f745bef96f0db01cd91db8a807b229df9bd3ee6d4979b92c161aa8729e3cfc696c68d120cc2065c8b65b8a214582d71dc1789e50b75c0db01b22f8b58def46d974f2be63fa9490176ce99fe59def938c82db21d15e8630526c069e1a0feebbb6fb508544350b13fe82e10f70b8b44ab49d2866aca4f8fd92eeed8586e4de51d2bbbd4c6737e8240a1977ba22050f33cf35dd3bafb015bb6c71e8ebf511b4d6cfe18253ebb74137cf324ba951ece98c94d18dd4b99c2e630aab94cbf385e27c73044a00acf3e7269f0b893a172279f210a5f48c30119c3049769e4d8d547564e5c0721d9f024ec75644e4ecb73015f2f3302b8c4ba0909254e26426943158197017e6ce4d83b5ffe27bbc9de7ee3e57580d941e5f09c647fced01fcdc59c855fbda8775a3d2f447b61c57abcbb0d1ccc82e750da29917e9fe10a44608896ce980fae9f670724684fad97ad9da3df78bc74a279ca587a198ea1e5a013132594c8880a06aae96f11d7878567696693ecc062ce5b5a4b5ef162c9aa88d57d045f14e3805de226623b709762f35b8887ba704bb9b313dcb8e6b150a4a92b072772a0837702d3ee06d4e2d0668091e0006eb435e06f98115bf74c3e2cc9f9e4a90889e808ac66efc1418f28c6a699e451a041e05c4495d05efda811115824d4b4c3a7550441af2e1422bae7787efd0871762a1824eb57a0ac6b510452207b51c8440bfe8678a91abaf953c1e87b3e604e4b26744fae5314ff6d367bf024285489859493c779b2bbfb5bb424bd680c2e6cdbcc04e985a9fc4a562f593207d38b6c262b2bced00a56f7292a63babb718d269059e870623486f4ce0e1ada16e1d4d017db990ed72d30c87d53c143ae493f90acdac9d24e86fbcd6e38075d311c44eb139adcec49568b3dd6d03a1466b5dc06620b66d84b7d38f7f3ef0a3db05e7872049ee218ab7bb679e9e8e662cebb1b27220438041a95a66fbd523e8669dedc5368e39653d2851bb13bdb2c61eb6c09e67f14468265fd10a37157521c9f513132cef8c8c991582f3da867c33728f78c48097df6a96287c9885aad3797f643d057762c6f1b3d48e19966df55c223899bcb3a2a78a2e52f59b16ed07a9f0e04a89e93b66ba44e845027cff676c4f757c3414d89a5d30bc8ad0ad9957b0e123fa82966bc68157ee96008b589c280852e1da2bc3d9fa7779cfa77e4b4b884a97697e38435c20694019ae2662b480c6ffa205aa646d901d207866001e435442970a45f47add3f7e6b721580b80876a446a0176322524a6156fda901de6abc13391fbd550b6329c4bb9b709f117553ba0d5fdc52d0e4914985294f960eadb4cc98b9012a4c940f7e8d1d520c83ffa413ce11f7938cda1192936370e8221cd34d29d6ae7cbb85d215b475e9ad9f9fa6a34bc46134274c2c6349ea4349714eff2627ccfe4c03e1d3a78f12202159df55226b4afe988078ca5ba0aac1ecfde0dcdd50c54ee3d8ad8384ecf723a79535f424cc1fcdcf5d81eb1255f7899c88df07ea2c276da75a457866997e62a4cc5acb7ebb0f247c93a645a558aea81638e78362fa82bccb65875b78c054a87ecc0e1f6f7923b0a1b04d6cef62f503f08bb0110cd554a83ac1d76ba2c6ba6e8351c44262092a5a98fa4dd734779908c2c8601208f03ada237297be3ba1bedd4f1d08a52bc561b305bb9f2270df0944214f5470efe42276eb009442e049cd007fcec7e0645add9a364a9990e8e0c6fc000acb77183fe7beaf0ec9a443bcf2aa603e4dfa835d10ecbad10ab93c6381548f1efafbdd1d02660577d8fece470cc20ece95830e7ce4ca4171e6360e6f646baac7c814fdb77a82f76c1301c04d7d5e9db9ce49c6cda6f43bb594aa3f4fa5c5086ca8b1ebbd98273478fc28cc25f5bc4ec24ff27d0a3f61da9f60bcb37f661f238124d645cfb611aaab79efaadf2a0dec2484edfde7a259adde027276975c45c41d2b4338acfc3a299cf9939b2d92cc0e8c235e6bcbe9f6f45c301b044d47daa80a1ee19a6b80b98ef08bc59ef6d03207eebdc16673f70d8fc68beffb5c8687da2203f54e400e58bf631241e6512636866d6cb1baac6d495215156624aeb910cac28ceadbc1dde631ed31931672b505f7a30d45095754ca2a208dd36911612120c6f1fe23101c4221e5703d2aeaeec32057a85aac0d5ce14ee45147d83729bb223692e6d6307accfa2abf894e20632266524ec6708856e4d5ff533c87e2b039eaf666a611e9636c09c72402f557ddace20f99af9f3295b59550f6748d55ef4fae71b6fecfd75670617d4c0200b1d6eb1de0e36cbcc6a4aa160511284c7b8b853b33f576220d901c4a12115964131d38d75f5d6a8b784ceb35ab986309a3352a4009829623370cfe6c5339bc31a1f8c51bc27f4beddc3f843d7783889536caa491112a044a08396da38bf4827ff60f15d10d640ce9d7a0aec76cc28b930b0b0b8c51fbac62690244114807ce90f6e4261b2a240a518101901c2cc7f83847e434d163263ef74125815b0976e01f2a18e5081c54426de9403796d4368d72a52c91d36ad7d94fc24d68c665e293876ae60bbb902c7a28cc5b0996a7a75f72a604e6845c21ec990ac13a15c505a682bd739ce5e2422eb772413ca4bd4d75dba8efcf6f9708497c66fe20fca4ad7dd0cbd2d50797970a3951b200f01d7151a74a3a5d8177c6252ca3f75c7c56b3c0d1622e6a41d4ee2f45f637ac430570f2b4f2fb7febbf57e02bb22a021e100aed6c7b42aaf8e8f152a7a8e3a549b02df57b2181f2039e3d9feb0b683be4fe80df5912f8c7cc03fa626c2756e443e53f1bda8b48cb69faf8af5aa794d8a27f2bc46a7c40280abac009547a7a43dce7dcc1f91ead5d74597a09d44aae08b039fc108393f092e5c6823f90127ef4f3ce0b4260b7a038cd90e479abc117b960c43e0eab3d4d2aa4868bc7be3f120f22430170a63b5a01b726939d84f230533a93a1635cb99f32454ae6e3ce2965dad43731fd8ad7566a6dd18db95582e081d84a5ccd391195c8997a57993f35966d60fd73812926dd31e601104016322b580d7db01605fdf959551f86e45c4f6f40c4703b7546bf1f1c31201441da9f268fa4b93377fc7eb8b3d92d41b6a3230c737fca80ff5844f015ce28d0dabf06c9e4bd142095ea2448782dd720991840dbbe92fab7a213573b0ab932db4766c5ec234ae19bb51c2d9639e5b4053c85864f424a423d22bf7724b2663ab94e1f2030c64acf3856fceb9c0e031e1a1c6c8c8d7fe4a124fe56188e366ecf6fccee1b896e53a50e775e90741360bd08f3b7aa9cc5dc7a08b55950d01722725e879df15d5faf02cf1248174bfc3d23a65e90198edf5c962fea47ac20666ae277942f2c12db8b5f6d607c817596438c41a45c89457b3a7a8b17ecf35bb33d18ecee8ee16feebf910179bb8349cbd00f169c05d8cd769d77e89d388c192a9c5d3af23379114717780c5baf8e1c3578b1c838788a0c68f3bb737c3b3d92adff5b92c8f846f5e24b2f0c329f30204c3dbe27aa7d15c31ca92881514ca1b1a91776813c05d9d1cc8c3093e8e66ddf33c868ccb073246d438edf7e2c255ac6a1d6e1e0e60f6a929bdb1d15d84d0fa47122e8375a16ab48dcce36763b81cf892703b03947af6f7ffafa534895fd72f2682cc28995f10ac5cb781d16a15b54476733bca1ee3aca69ec4065db45392d41b0be9088015ea7946c430f594c44d2fbe20dc0c5fb6042e2164c20fb57ee2e18af76f8a961e6ec95674475b555f3227ea1d6ca484ad3120ef3ec50f2eaedcf5345ad5b3fa10cb29d7d8f8990e18d3850547928a01437cf02be55b16a190a683d5047ceec3e6064a1f9516d4f5662e841168c47c9a5952a60ab6795b374d6bc6bccf634f2dfc9d9f7e987a95104522485a049da2e748f14eb4927e4c612a65b464fab57a97bffe3b9247782ee086da2d8129ee1aec52cbea33e91f340219da155e19654988846fae7b4cf13a1e49863061790160105a51cbee0fe32bc9f08fe529855cebb062690e275ca55f19aaf92bdc8917422880561f0c27b2a5f424c63f0ace1eaeed208a43cf9e7cffcc03a54e0b7b6cc4870367d8575ec298301402440208d35ec7cc719cbc0e4707e41b438519c1190bd216df5dc2cfd472e29d1bbc305dfa2dbe0dfae896ef8848821f6771666c77da584d1b3326547b114ad487998613ba77269761af5585d27c5a2aecf851f8ac46ab377cca073fb7697f68a1b1abb8820ec744fee943d30f1018e305928819e8c6fa73bfb3a6d1d6c97a13b47506d62c886d8f22f3ddaa8692de2425c16c2acfe4e116b93535e9fc15211601343e89cbb2177b882f70188f14aee3b646f11fa885af78e7972368e075579ef73933f685c0a4126761d7c8f361a6968056fc1c6f6421816cfd9739087bb864393801482139c38492244af75f886e4fbf4c5a28a95288fc4aabf9eaa5e45083d17d49778ea8ddaf0ad906716cc1d637c26d079756402739c4aff2575b766e2248c35e381f406148f85a12751d6c1f3982980d8828eeb9c56d1cb71dc7451c3f8ec24efe0000ca98eee2eb97250fb50693b4dcbecfe961019155cbf80a2c11690273d3f32a15b22311c4b9875d603b7c5bc3510c628ceff75086b2cba7c8c3426e533e53ba7979a21db99448bef92f6484889677a161730dea5209926217976a6c66c6db1d21b0b17cae265c5c9dc45f883e6c97d3e921f1eda7f590a7a8fa7750a910f702f02f203ffe246074d972fd69edf4fb21f644fd70352d4c37791c15e6282119ce7c5fda3cd73b973baf323fd1e6c6b30f3c992ded7fa51b026a557f594e3d44f63499e5b58e1beb4c7eeccee276eecfee3136854d5c10117e49025e5e159bc1555477ab482cd94e2e103ba469583950d25e490bae1a4e63f2c1b61e7f6d1efb9321380876b6ae132b3af79675bab714b78ad46e5a2aaa7c66d153dcd4bf9b5ede225c29bb4404679e962209d63295d9e9bca05fb66f665a04f26a56dfa8a06c64ba74842d079dbb3eb655977b697458bc532a9401774aff8afb8d8c73cb617f00990ca4306f5e902adf5787ff6b86f4be2dfefbce6d659022efaceba3f99ebe9fe2e317676fdf4998d27d3945b316959f2cd2e3a935a4dd9c048180f889c171780bd92d8127ed3a20d7abe9a635225ee71d61348a5504e042cc69359e8529af1347e43995fb6aa119e9348db08cf831e7d43d8f02f17b03c9e6d6ce07591d572ac9a2a3ad74e4ab5ac3c7e3012189aef85aa321b09925a7f60dc0063b19acc3fc339f74dca65c0f4dbdd256d4b2c19cf63d3444956a83a995d1f2151406e230d58b2706298ddf3ae5bec64c3fb0a35922e30bd4ccaa835b06bca4924f05f148627364b4a9e918688c64d71efb5bf534e167f3232d67dc1b4ca8a7afc6ee978f225124ab29af90778dd1cef36c6ee6c08dcd7198d32cfe79bd4bce769ca1fb961f486d83b3dec097b0bbf72cd881efee196656d67af9869e6c6e55e6d47f92030f76b29485b71a29c62ec7a27c59b432d8efca5302599be9ce8836c68ae42d7866cf88188a1b0e9ab44ac51481a68593e94ceb7a7f2c20b5e96b772504faf7cd8ff81df6153d18ba4b2613e4d750a9e629d80b0b8d705cf4563bb028013acab5bb198c3b2d8f5b8939b3db05c12b14031ae4c333a0fcee8d037c9f7f6ad0280789bb46a95472e64896b84f4427b64b75ff273b201d4bc2bef508107c540e23233e23be248e6e6b8e1c008ef7dcf9a08ee61024fa72322f0a797afcf9a36520e436e7e28b1662fd4cfbe963229944cbe23e47c2d3dec7cf10c76b7d809fbcb8152637a3e38b7171ebc30cfd07cff07dd013c14471e54550da7263897b0fbbc0209602225516dc0fd25ba827c6824a0681804eaa838bb775cd9f06910a6381f43f4db9384631dfc3d9f8845b53d156b8ee6487487e282b8a9049cada4a44d9e2f0f806de96b079addef416ac81a58762c8520c9d42e0163b23e278830c3caa33d64a9a724c1794b1b2b96fd21d6caed87fd31bf78a2eb02f74670c56b03c03ffebc80c1b22ce16af9df44c054afec462ca3604bdb8d6ece7141b7887677fc6914ffc608f5ac63ca74cf99dc97d0b9e7c0fc73e8b3449095597d0564e34728e9bbdb1a3343021c617b4a14850de90e3244afef604c076a4f984a09a35dd3d42026f5e25fce7a51dce4516692d4df893ea8b0fa694e3cd450a97808d8a0d936c5094bb686af303a506a3bb7634fda9bc0b5fb4c2f12458c44ac1d0fdb01635a300fff806ce323852f67c547fb63229440539cc60348d89effb335e8101988094276291fb721c46a7dc2e58be1afa2eb9f750bf42756b9f28adf851179224e8bbbee2659c5cdde65b3c09e2318c892b27db6a2df12ea50a06b2176bed95f6e9f2680f51e96c4444424686d6e547152f3e559f96927497d3e4b73f591d24533f70be5099e9145764d064e0fe4fb76386cb71637c9c9f0a51c8f8f0e7b22166b091ca2523d41e4a0f1cf3bc1e7f5e6f5b6a6805da5fa1d7907cbc651c19fcc51d883efb4a9d6f6cc82e291b51894a298dbaf3c59b27818c55ee714e1da30beb35f84ce4748cf9eaf771df7e54dc2aef54acac69591ca2d7362c00fa9876cb7f97ef50fadbfe4f18f64852271deb58f2090d491643e03ee029aa802be51f560f4562e8ec6773f1727ea7e9bab9ab96b4ef093b486f66153212f13e1869b048c61a92ef1db37c24cba4edd6d8b670e4873aa002ef1b449625700b74b64cd61b36e9918b99cb9da3dec685e0c4c7c4732c5757fa3cd6a9db189102f81fe646687265ba5cdfcbc14d01dda8977d5c7ec0af91be4d3c06e7b0830e55d6bba30e3eb6f77d426401ea6c6594b4a992f346864f6b7ff8ea6957e9fdd7a3424420e43cb51e840bdf8cf33554c89fb7ba680468306bde304b046b21f36a25f5f07520ee9de7a8ea13ff6485e2d5b5bfaf144d769b48858465f75caf925b006569b31d139aa1360506efabd72cf8e73cc38727aa66559b658fd52385b540f5623ba2a8ca0d571470068d25a4c050dafdc129d925164f483fd1d7a534648d27fcad2ea20a4d42139ec49650adbf815a604a6e804723290b0e4e975149a3da2a10fb8e96134152abca0d942da996f436ba4684ff770105a8535473acd5655e2e51b0e75daf4d27db7f4833ebab1910310c814c41291b654e1c29b288c41d81cf864b5461c4d36f7ea5605eb0dec81db8ae1677d85562a5ff67bc1e24f0af07d0e53ea2c81167e4f3a7e44bcaad0a5a3d6f78cdd94366f6d5aaac0e35fed99ca49e791255335250404e933eea09b200e5838b48369e94547e4a4468a4cc41061d0e40803da274757cb56a8080bdfc1d439479f66a06d7a7c6e6f57bc32fefa39040071bf10381c4ec60c9160975fe92ded269588c44f6fddf1cfd17996ce8d26aab3e4269c863a03b5b9a45d10fe077cb02091a31041528b288696bc091b3061eb8601c71bf658f089a0f87d8d24dfcbb16fe8e15329691649ecf2f74ec5ce099b19d9afd555d2bd4648791712095d662ac46c9f91a7396c39fc8f0f16c2607d0067e46b6aaaab2f95abbbc811c09fbc11c1b5304f316d478061b505194a59ef90fe92e0163c9611e85cbaaaf33c8ff99e1d05e40901c5430eb874c1d0732e4ef23099f2678ecbe7cc4ba55701076ade24f6906b49159d2ee89c0a75837b02cf32ee6ed166f639d0b7b85ec125205b4dcb64deab4ff7d18a0988995cf6061b3a8421ee38721d348ee081bcb6930baec57769d2149032bfe018d1ba9977a3e58645c320c300d5fe2c5348b12bbb6f7692f80c421ef0cfe604b70387400924100c6bf3bcf3f6a29e28a8197460ae734e44d42468607424812d4cc22d95fbaab0b7253051e4a53da3e773cdded0866bbff9486393a40c548d4f2d026d2a547017d62fb4382c7cd1350a20df3897508480c8129ff2d0e49882675f1ef0f9b177fd5074af0059533324f1b11a29bcbb6834af6eaaa29776b4e725ed75c1b2c99f72c7a36be6a852a68c4ea3b731158b3dd4e62376a08fc64ed8d2e23af75bde885aa5735ae141fe866b3f671c1c923ed9aa1a26e035b6f227d88f6f3610e0f79d2045f37f81f0a40ccac252d730d1613a6bcd39deb45e7ef4f6667348dceda66cae8cbf729bf72d951979429cc8927ead98836763da9d3216096de854d5cb30f2dca0d91b9cb6e66e852fc89f5254815718b867cd158fe0a1ff5c18914a1cf9334f2f7e152078f1604cf855795ca25ea8b92a66e9252660986e02c6862591db22142993559e1dd0fb918da2b984028f9cc3aa48feee7d994d79546c334165264ef986f91cf1f1abbc1dc9905edea8499affdf366c2b240a8f6cee47efbdaba8665e9961b3bfa8b9d070eeccec137c13fc0023c0c4df423d54a2daeabc9b632398d5cdf2de3d627629a6be3d00a9d87bb56764bfef81c8fedf31ddc3e11431374412bf31b20d4a0f948cd8cf09f699e516f146e78913f5df0f4e9dfce23e80ca649906109b5ed603d8ca7ebcf286ec5e7e69c23f0b829f0f86c19015cf24b9d7e1f28f5c2c85bc5ca4321a2341bfc833799dccae508eb78401167dd9a9df6a845961d3717327e7ccda269f029cd217a01277f8efa833154eedb9d0a25cf35ab25863b305c8fc85f0fda444e224edba2df467682bb58c8c05dab75682182b798502f5b17b38192aa1042f3702dfbfb0dad91ede6d2cb4deb4154029b3f9f8d93f1ae594dccdf0997d7c22c2e20f6e97c77a53f48aabec991e0a02e6dab47c9d9d7bf12e5f512c030659c2ba8fdcaa2f1a6d153ac8ea5f4f897b8b5c20c5c63d32c3ba7869e0a152d7a8c3332543cb164b365c595a10cc566539de04cf19c276f64eabe9c89fbf51f39f9b132eab10735644df26a182e32befe4ddd486c0f35ed931f74a3535e6f8bbf1147d9c5cce6c6318420d47a9bf3c030e99fe5e731974e3fcde5d1a0f1512d42dcc7ff52f738e7477286b4d3f27960aa6650dd4c725a73c211d543cf30535dd35e7141a61c8f86d861f6eb56f49e9131df730397c9d5617470e6e9f0ddff2d195bb1652b7ecc967dd04806fe889f90962e7a0c10690cb3c236d016178f8424bea078a96d104eca1a81374a4583f86e8ac123dfc50e636b78aea17d911cbc664984b45620d9990d3d23908462012b1cda391d88bd57441924b2999f0ff1b4c76545901af74f4da37f3374714bd1ece36d0b0a7148003c145fafefd454bc90fa8380cbdb51887db6461a7176d37b0c4bdb6d9057deae0c757fdd059cac7d14b7498bd70a4edf8683c3afadf22fa471c6f9cc27262808f329d54362111fef4c6e69a449afb8195e07da0047c4b409c5f1df004900c3e943413b52916e42420395b6e283348c01402837b9c5a3a29af1a8455f081f932a29a3fe1cd76e882b5e62dd9a22a1dade5bac5324fe2a60ef4c7af2641f3b1e7325f0cb8ca7a489a37404a5eb8467ed537877301e9b6ab3ddb4415d2d2085423e684c9b2a0c36b0a9706601874dc12b686d0d66ec8441017ce89ace15e6d1accbc7d08e3beec87f3f5006da4e81ee02ebefb57ecc40c9476e53307d43a867aca3ead805dddc70c643351a5f4153da6765eb209ceb9693d34396d2a9b2f91243abba49cfeda4f375ea378f5ce57f16ba1dcecc9d64031b54dcc80f7f439b79a6e8fee702d924d4d396cbe701f8677cca627af3cee3f178c8e936a3a7c4b1d6cafb5abd37690a23772d2ea7fcf1f019f270d7144df02deebc99cea49a9c0677f48c7b6c18dcad104c83d0ea399a5ce2a50769b4926c5af826b4d824aa318c6c297a4e5867fa9afc800a0a28eb35622d12823479ebe2791e8e5bb07c015ba5115145885e91a9ee83d7bf07b330a291f775e164bfaae7558da89d9ae3611f419cfe6a551e51fb83da8621a82b864909200ca30150bacfd92671648acc00c0dc7a176724a883097558d5d4d57c12f50227f48b675b8a8329c2605a189161bfeb7ab972e9f77fe607a08ca39cc0ddf53d26ffbadf0903cb868cc57e7d68665d13ab9ef58e04216c44adbb90c41b48ce5a1b4ac00cc430ddae2fc74f0047ffa4cc4a208f332849656fb8550041bf4b125b9b2cece4e4800e0276608168d143e5a9be85108c8384932109dea2035b6588bb5910c4e6f5bfa42c361e94b202b652f135b0838fa982d2a3f2715bb1a069676f3af7ad007e42fac99184f148245b8100aa11368a323f7b995d760cf4b48f5dd2f8e6e4021ffa08ef20def0e7d43b0912fc1be4e735ea4d6bbff7ef316663f559d7abe25f7efaf3fcea7bbd6dee158712f7046d660a7eaa59fdbbadf3059a31fd16d56ee9b708feb7ad5154b75aa9cb823bce96b9e302e248e899fcde100b4a1bdc9f49e634e2fa7089c407d98a817c42c247d36dc4a5db2279f32a302335525cc9fecb6cda5dc37818caf54ff3a8622078266153a05f59659b072899892049ca4e0d4d275793524606261153b5cfdca612fff1b66a80134c85909f7448f22c12b489784fec148b084179e664034791c7f5faeb22d5c75112ef05c3ff48de8971ad3cc90620cbe4716d0289c043ef5fcee756f83f99adc30bdcccdbc75f7b183f8a517f96ade5147d688206fedb776d31a0f1c0314da20d556e59922848d870039ca6304b8dc259f058f951df66bc9eedfc5908d1efd806e8dd300dea57cff60e34d14f77e0a80fd141a8d73318c900bdd69c9ceda4bee07dd0a48a753e5db80d458a800b31f3124c3c2647742e156663ae70ac0293a967a86aa6f443273d1278a1eb1010cb455647d5138d285974686797aa42cb9f2426c0debe6c91558a9211ddcef2349b5948d62ace6c0b45f0e118f4fd2f5a45a2371711c920cf3ac136ab5468837d16372b94e3bd2340d9e223d52050b135c09c63a6173bd568dff4ff68c2d216badbfd378300b70f9c34b7f2da3d981af60af7009f932337ae0eec89cf6d0ba190a350acfeb3e9d23ea15aa8bf9e1c15f1d44861883c8c8d23cf6a6f4f7358e3f8bbf57b2576c6c64958d1cfdf25968bb7978caf40f1b7dcd54de60185325f35621a72d95ce2a7afe023cf1cfdc0d72ce5e859326d58e04e73cda9b8a429afeafb2084cad8f45ca9e79f1221f7067a0f57ff91747610432c982abe290d6188985b4668cf32dc1e2e453a54e2e889b15b9806e8f37513736364404a6eb82c3f9b738d71c76529660f3190d93243396dfe25b519a85429d74e0a090c2f780d7f962dfbe405da20cf110a50242a54b3aae5180b9f888da30c5e4e2bde0c3d106811af0d39242c0e680caf62750060a12e9a2fabeacb3892b6906474a21f9beafe94d06d880fb8f857ec763463645282c93c16d1edb65349269365cc5c6869c22056951b046ce26b698607070ae4941aba2016f4b474c598a91fff723108edd704b9b0838b9d59086bbb8f9bdc62677b37ada92b3cac7b3abee6585d067643d76fe7671d30b36f025cd33806a6640b18c22b2d311a03a0619f2e3732de95966bda247f5c0eca62da1f7b2ba21f2468597bdbec5a287bd20b5c873a1be189c8c76b66021bd3c4f895b01175cb94470b920199162d8512ef615932e5cde32d2ee0e0fbb8a609359b5982c21c2cf957856631079c57de3968ab41d931e0ade8d79916636eda30f9ad91ddedbc9920753d342bc53562f7d69347b203ea7cb7343255409eeb05fcfbc26f116902934c92eb6ec27b24a34c6a9c1fc2a0f5ee648678909afe4b0365f3710ffb72bc134735039785c428734399c182539f9f9a21a2073cf7bc495596a9ee9158a7e95ecead6423026599523b36d889a7cecb86daf9e6d02c8b0d1bcdaeb715cd1c1001bd2f66977258e2babb2db4c19eb684c71b0e46f1e2cc0bd99ad25e7f5c33a7af0783496ba60dab5444b2b99c4edbf1799176e9dec1ab114a4fc86051cf0c9042db96cfe9ee8cb747b0642ca5b542f858a988f70ab6bb3d56ff8e889985c2630ed44aa3a7768cddf212e514ac1e423e3c73069b3dfcd1d2b313656d7649b1cfbe0dd3fcfc7e4b880fb6476fe3c80b1650e2576245f206f9db66b6451dd8b474a5e6e2db9a38bf8c0926ea4b107e792ea7feda21f19041c3a2de447ed909326dcfaf4b7e4d614464bdd38d431fc664b8e4776d267dd85f83e71f85f1c10d50fed976bc17a916d3b2ac7a20ea1b70bbdb9a908ef9192b01605c30376d03fa64bcdfc826f77f4cb9b3f7e5df840dfc31d4994a85366c85ea2594fc54e5cc6112b76eb3d36d9ad7fc89e6964f716c358270b5c5ed66ced9b5320d303c658dbd14bb32db9089fa258b7b4e12de4f1f73380d14c592dd85b8a44962654f35036e6edf605679bb31ffc4eb420128741573ff13994a13810a950eadfd56e3951dae3243442b704f81e136d2f6f17404799a3f58365232cf7677d3f5e9233b9a68701d2c0a2f74f83b3b4c1706de339a9ef474032562767f43315bd5b58f04d9429303b8d0f5bc791c2d27d4967a75510733dada695f9fc6a802806f21ac9b25ef448980a39f353c5f803d4074c64b34ceaef613bf5543b5521dd220fe0d8e2b0e0957308d773512c1df3a8f1218fa2a2cc83af7a03c6ef66a608f96ce535444e7e697efe1542ef7f567bf860da5c427acbeb4cd710d8b04df822305feac2ba32be2c64aa14a952bd945fb27f3b1a4758ae62836420245b6e4a09d4f2a5a8d6c12bb081b1a28d64a5b5f6715ac6929e11fe8f9ac5aa0d41c45fb5e8ace1d858fc3eef184b206e39bfd284246d0379af7041d61ad8cf16794fc41e2fefe0c06f87def530e675771c6f1c608838dfc9e2e293449d9540c33857a89030e1af9c27c5e17b1199a555e568a56863fe8d4c06ce959489e7c248dbd7675c3a643d77a3f6564ff521e7310c6355bf9f46a9ab2802c781391f122841f3743383bfeb952bf32d71a3dafc4c12f97132682928da2d09323a2e40384175992d1de688407a953b3615f9118981ab311bffcb168934e7b8f6bd1f4c10fa76d4d7aa4be5a919e1c2e2db8ef61e21fbc7dc97d5da01937eac81019acd38600f63d84091f6fec25c16b764ee686e2e472a37fbcb37a635ecc38b21ffbf179cae4dd01ce811c0f62097a6ee7c877e9c79ad5e7c4822301e8756b0488e6baff9c0164ba355d946e831c96ea576b76a0362cd56c0febcb03d23ff180dcc78db35713784f156aaadde45854db586f68274070085916dd27c314e20e9bf995198b6b7859a7536fdd74ca2cfed4f1a202f069da1e6efba295c67b38af3da269563012da6e982863989510a2b5ab752913878a828b0f69242520bf47cea0153e3a9345e68dc87bb4bff1deffc6a3136cc5b31919e9509f2b8a074df595869f4abf3c4430b66d72c5d599b1d39bea567ee6bb7e23239a69ff5e62af0afe78e5fe396c4135006e6927adeb55e4808ca0e59ef345300aa4cfca9fabd945085cb230f56a32c021e0394e242f538364eb32b4733e8a19507e2d08ac98077e589bd9de42bc982845a66bce3e1d223a1cc5e73294c1d2b8424396e754bdcdb2ce3dad25784b165d49603be66a711cd08ffc84caaf4aafdc28d12d5b50be2ace404804526781acdaf40c513a647a5e678cb63f2562fe7bc7ab74cfae63399fc5e77b6e5e0749d6bd7181e838fd6a78c0f3314bfe6b66d0162ed0fab7d0518f667382261eb34ee19e305b44f58cbb3dd19de2885b63b8f9f8272bcd98b50986e0a90e81d627ea48febb5aef835026a0f68080e0cacc4d7abb434574ac7054993811a40769c083ec5b7aaa146d61c2b7d3f9fa4ceca2293bb7f545bf6f1d565e233793a7e097083bd867da84afae552c710036fcb341ac52e69c13a2b2e6c964f9729a526c96a310b1beae9fd0d09d45bf24146efe31b89a2b8e997b5391d8acb2c20704b06884d2fd232274299432995169c5371532fb97356d7ea3dcb5906c957fe8ca1d059581ad3138d2e7a117642270d9f2f93ef7ee4005bac39a17ef569a482b16556e02b773057b5d04cb69e5bf13cdf72978984d7c2b2ab5545db8f8d558ca95a1e86523ce4f1ddb2e4c5e50af24f814e1752159f5a3e82649380dd253a727962ef91dccfc46219f8386211fb30e0440278a8edc11b7544de848c6e4a45b5fb89362eec996c81020855eb150ab1a4e60fe4981e6bee629d5c30e60970fb738c06a0ad5696bd87e4ea6bf2a594e16bd459edad58f51c70ee75e60bc906713d08c227150dc6d5c8a471344a1f753514495d9cb9e10cb557ea64413d9bcac1cabaf35660dc624cefaa5f8326c91e692125bef1f887bd0a6445fcb8e92c4dbe6eaf9b6444f8edd2d816773beb4d78180e0af24af560ce2f9547aa0732f4f4f77d2c426a21e364d30a5cadf642bc22bb497f41535e5fc8f39d0023920f563fd9f56489daad0d235d5a976f6995cebc4c2dfd53439e8509f0c42503555611175a1a0165d2f69576d915f5189cd01447ebadb7bf941615c7b82a2ece21781bd5bcd35cc28bf70e4ef5b3eb1a2d8fe51e5e2eb48dd3c27df8d127198ca93124c3d50d79157a0e8f26864a4db7c1efcab308d9a99f01ed2ef4418a003c574593ed1a784cf2def50d9b02fbe0f7008e6de800c57faaf04dd41cb6e8fe1a47eec9f54a2084f81bd7b780dfccf5131b59e7408f9e987c0967e8949d7b595d62af7ccf8496d54de32548b6c8bea95d40110d836e4a4f92938f5fc09fad2d280483777a2edef60970120b0d874c9cda60e6ee86a6c267acc44bcc00ae8d95f8024bf4a9307ba1589cf11a46ccd0c07d8c40380e13022a7b1c39921b74c546c9f49cd2537f12f5046d24a4e04c2f4e07dd56fbd66afa76481caa709b6f5a62d41d1d19c7192648204204b12d45c4f762d1f688365c7375cbaee801d11e1e93babdaa0e48dcd1ed4026b9be9212237468c5d85856754967792b91bf6f7743f25371e20107e2083174c58bb10ebe7061d5f65d663672db3174887be62fa6d71774fa8f483a2a602c8bcd9ce9c6ada2e885502dd6c4913cc306bff1709466128ef48b99ed7fc6dbc7a50be1114c8145af210fafc5d54235e8f09d90c830ba9003bcce9bc3d0dcd6e36d7f1dd517d2947913ce36c2d8316fb77e85986b359af0fb71cd43a13a8846f1ace6b2613aecd9ec854488c8f50b23b10317e46728d596296360920d5e4acda0a9f3072450c6b7d164f537238681095e7f4db82f6e66bb8ff6387396f32f7b4aec6c960c25476fd7529e48e460f4cd0a87bc38558474d8d18d1a608d38877a3db21bed9f44fc589b335187eb9ed0ab93ef381b28bd8dc4c5dd2aa2970d52fe64928dcb85c115a5114215ab29bd9b37ead5cddac3f88e586071dc315f637b7e099411ab0b50f7f26b7436cbf8b5190ebea616e829798a773b4bb392d78ba909f028a36da6f0a077ac83125b5b1e18996c203010e5c22fc0104fd2c5bfebba22ffba08e8526751e61de3fdb88884ea3ae17a7c4a9a2c24ae8d9c5f265ca54a8dc3dc2233db2418f2cc9358402d17f9ec5bddbdb4b8ba8191714fb9343cce9e71129270d2202075cf0befc19949cfeda7d7698f5ac020e761467cf749422e68083efd7e3e5a2a4966e963b0c8ebfc8181be5f3d2e5773395c3b1c725483162e9abcd9034d1a3f0af2e7b1d40fb3a4751a47bcbdf23aa9acafb7737d5e788e4a1a17e8c6a75dca1c7396d87230d2afca64bcffdd27cea4a28c4cbb9df62278d5962aa4ed431b6b2707cca16250ec01ac1e67193e39d24b0337d87ec08eaf07da68bf68e35e2bfcdf4c0e5b87559b1cab5d7bb5abf32e7f5530170bcc978425c06862d1cfc469a44c475511afb3dcd3415ee826000c96fe89f6bd35924f9baeec2ec4be93b7a25534ead3a474630e76c291448d4992293bd835fb0677da9c5aa5696e50e62bdb0b143e50b0509bc25c6ab4a4540b4fb8fa2685045c4c1119cfeb45b877ae72adab07e82675320cde0ebdc175601a87efec640e014592b6c643b5798ce1a01c7621b61c8af95faffc79409704041e03493d405c9cb18328374e68053ea8d11621735b5da69466249d1e63e2f569d78ef98bb2f624408ddf3983801e7828d185c45cba4118ff2b1e4cbc2fc47136441a34d2b1e3ac97267c532608c72d1ca03915109739be80174400364496993a36409322e57d3a77a0a65d13aad423bfa9d2401d22375c6bb7e22f9642db85d1925f61616897099a1317a1d6da39b98ef6b88691b5074839aada31ac5f9397c289618a11fe76f8548334ae184286e98253c60dc7a17e4131bb5f385411ce9eb33d9e69f191eaf24dd866d14243953e7e1369ff1b13e36124c49f8db27bb383fc6d60be4b99555e0ec26b8200bacb484cd42c4e9e20947ed57a4c4f58df52f6a1cfa06d05afc82945cb9c75a18c50bb4602c9bdf456ad288cdf496a2d6c35a6462bf1f3bf4609d188029ba48ccf7f98a78eda84f9c8c9db610c935df73551f0ecbd9a9d2ec084de391cf7093ac8203c474f6868270a228ae19abec1610f0f96913c94611c63706e0b7934f988232ce5177ea30dfc8cc6129dbcf995e9ba6a31331d43dfa69d67cb984b77680a82b135fc694fb47b5ef0aad19575e582328cfbded9c7fb94c688c6f499b2cc3f42682404eae7c47f78f066061875566bbfd10b92440ddbfc0078010e62bc762fe7f5e1b71508f4616268bc6c35fd139db58de74e2e16b36f8c6b70732453274b9b3af2aba7d98e0263da4d98eff1650e4b2bed827579a330f0764f19bdf62643ae9e7cd8a5ac8ca53011d286aa0cae9bdf0d67740486c0646c9a576463faa852cc7b94d9fd7799253dbca4209b5c4c6c6abaabc0908121fde8b23e26bbe8f8dca7ae23504d4461b65e65d4cc53974bf8225b3f86422dd0927f994792e1aedaf0f06f21c897944bff9749797b26d7d81ae929039daa60062fb19fd234bb45e5c5fa730214fb6a05560ff97deb55ef6d3ea1c5fe0a34a801272214714f04b0fffce8f7d7c5461f76a4a9d9e19594e6e46a78f303e900ca99ecb6c2222f518ea320630d61920a070a93b4d00c7572d4cfddc7a4b78acebe65f7bd6d7f476251e1b2a5627e927a162056d1f6b4a364dc02a193dcb816a67092a5b33caa5a56946620ad42706962fd0cfd76fc175df0f74247c653fe980ed3c9b61c1d6dad68d5bed9f6f5dc5ee9f71a8602db19ceef93d029cb7743f10ec12ff5c052a8c96f22ad528284022f33e1efa2c241ab2fe0f26dc1e2742f288b84cf3470ec093533d25d5a8df0790460eeafa90574c169b8ba3327753b5735267531e9aae669d9cea1c4ee42bc2cab19ced845ab63d23a53d63bc9f2570028d9a1038247bfcf55226a71ef3772edab9e6d6504f33869e3840043c391cd987dd70fb0f746baed3d8809da52089b5cf47454fa812b06607b76a8ace4c186442fc31a0a099b3fd2038c9b933bafe9b15abb534100cbd7f957102106360b86edf9c643fcda93e2fe89d58625c87041d3ab222e809f3655fd72b333d019cb7ec6d8d51d27321317f8b59597cdd2fb9e4c30f5a4debcd9fcd77502e9d1e702e77a4d34f1a0c1ef8df25fa9f412186facffa5ebd553ca9d330ab639b5f2c6625211fdc473c72e345db9dc2b264426a22e7111135cd995245025ecdfc46737a7c59e63440d35a8fac71ba7dfa1fec4ecf620de16473991ba66dc4b9fb8ea4f45b6c9149bdc1ca4a4e6e921ea14595457a40e1a5304b7c262c98281387d7c36f24ce256b0c35834eb5ad075fa7d3950b0a3120ec7f830a34c3e34fa793fad5479839fec53a878a3e9564684dce9c8ee71dbf7c122fba75aa3cde32cb28533096dcea64d5b74697257836d067a355df615372a9fb753016607658e078a78b0d0513c892f10bfc2013e4f7784109ddb364698475f15f7d38bcef69867ba6789bb5a5855461d23abc8dadd31b63843361676a6ed884f9493135f9c0293bc259564a96ca8ba983523f5bbc706378133e4020ea00a9c7754145e81c543b1ea130e8941754abafa6c682aa3d54310ec804be0839cc67738db5d3517ad780fd5fe90a554fb95fc9787d2850b28e7c0fd09bc77d742ed615428fcb2ae30e47d576399f99c5c802474122ba70134935339399ad6be2f9c185a00b944b528c4b36e044ea18d73257853bfcce576118d081ef3c6243dc8d650c7d02151359c5af6a6cb36460d71cee4fb49597b715acbc7ada5db0331e28ee0a6a10813094defa0bc329df56300a5deecaf4fd8e2aaf4fcd7f72b17426b7b72e030094a48d2b7788c37a6273929b23cba275796d02b2bff0f748e3824d8b4df1f012d3cbb23624f70db1285017f6bba24ce5ae70ccf577d2a943a29dea64de467ec5c69ef91bbfa9b005e1c160f56ef0461a953a698fb1f7d97122dbfe30bd923396a3e94c39eb33c236e465ac5390203fb220cbba6801b18d4010e271788d56e3c4b572e4e69dc14cfdf499d06d6b0573395ee52d274e04e6ff0a994ef44091dcdba88fd798f94c4952121071202fd4af1584bf7d7656b286110e9a8ba8f96362e73d002e8d3fd444a270d5e0337b0ad6121b54139a3793f38deaf5fa77ece9af55d0ed3c788bd139f6ef4b3f26987cc521cc1e93dfa930ad03876621e46d50c27e9a8222737302d969a87db5257cdc88e1e25922ed54f79d0c109dc169fe69195c7c292eb6c48ec73008b31c3af8f088697a447f9c07327c333e1134fc391f5736a46f86e4b28302b92bdece348b5a77e3ed598d78b8750c2465230cea20946c4813e610bc74d42311ee2f014a630c866764992ab96d490ed47a4392b2d8379c3bf3abb093ffb3cabe32c638fd9d7a5cc8516e6b0af48ce39205622c6ce13e76bf8fdb8273f6b138a89347212b32727af8f32e9aa9c87a1cb1c7f600890b5a82a554e8186211f567f97e6fd3a6d071bcf3385d2ef1b31acdc0f3936c3b3b3a0fad70b916121a132771769d006c0849d196f5829f81ace827f72e004751383667e19f30cf0c892f15d5d5d122c7f25937f1e811025853c473d5b17c21770b58ddb0a2ad55950c6ec9634958b289eaf551c4022de144a18ddbb1e095459cd79e88b5858a115f99a4baffe480e0e3d276cc3f85fbf9a620faaab30dccb17f6d4addead824a81bbf6846e15cd588554db2b8959d487aebc7c1a9202160fea88d1994139a6c3f7791adc114efecb326eaf75bb95e88a97b1558b4a499da756d7976fda07915351bcf14236ef999e0c5d533bda54d2269299b9b48368ea5f88c4a00e7d1b01b6d4b5cd7197a5c26743ce8cdd6fc950bac8c162eed8f3a6ef503675148b3d5c9985924ec94871410caffa9a38b6a76318b0b2e05c8ae9f965eb98e434baa765aa8f6a23ffb10a7ff800f2c0c6cef213c35f4daa451a7645a2e88189ef7427b321528b61889e301ff47f6724568a598b935251183c41cbcc5521c66db73214f4c59d3149ba610324b69d62e47db311a83feb34db57056d8442023aa37a5fd646481b16dec2753e9228d248007fcce3e6bbf787ba4cc7913deba609d31f64cd40bc8947fd4d61b31b9313da3ab16b3a085e06781e90a2a4787b8b25bbb1965cf511744e1d5fe8ab416baaec913c64594d221ad99b33d10b201c0fb9dc4dceab8105ce4baabda0ad4d5b774d878c611d5203738196f49c01bcf776b5d9847a71c3e7c17535c56797d962ba67f8b27c2b4d5864e9b1e485c06937b7a9a174fb0ac491a73aab13e0935912bef725d4e5deb03ab23084edbbb6344c491fae457bbe54588454750c42b7fd8cda92859923c432899e44b0286496f118aa4fe67dd6c8af59956dcdbf283ebb68a8fc2c19a9112492f3d4f1c3a3fd86b45e45760802c074ff37db188ac4c260e1603d8a50418a33dc48ee12c17045e2b3ad3482b8602b1ceb7ded5020b00a310b35fff261b056883506f3fa0d24324e3ae4feaa396ca28e899e2a394cc1f91bd7dbe2dfb3cea271c4fe3a96ff5af17f411a6cc22657d6dc16ea9e0496371c8255cf64e412e0ee2dbd355f16ca1665ba79dcc7a8f614fd4834f07d6732925720cf011ff8763eaae4bc75cb05f0e7fdfa22cbbe0cd09635a1a1561fc80b6fe02180bb84cf3f64568e73946c4a449f1ecb2840e7050bcb7259b820c1f9dd284db7b4935fbfbd9a0edbf6bc4c5822a45380250b35a9a7127a1c25b84e71e800ba796c0c5a805742b2e20432e96f889674a38d0d59d9c0cb4ab160bd90fc9761ff5b650f0c92da4f01ff99247e97078659eec673641af6dd4bffcdf9b6d8c4ca0d0569e4efea1b1e02ecd5cbddce7a3b2a70b402a36278a76d4a09a4c54e0a2f7309bde6a9e8c2daaae8d9441920612769c713ca9d1b43f39ab6ece79b2d7c6803cf5ad7e6bfaac33fa57bc117dfae820e3cb5079adab69047012573c5a279ea48ae4b582d4b9fd97902951d72bdf9917473d5b4412892637d72f094799856950a212e2f8e2470fce6d20f0feec398911a12adfc8a64d60814ab726476a348913b030e6227d55b2b5f82b025cca6360210b8a6a71dbdf2569da3437116e469764edd6ccb9b247350f5473b82dd24af39c0bc654a9a2401da0ada3b98ddd8296b553ddfe2d38feaea8083d79382a048369bf9e1f25665b323d9d65f306adc2174fb2c27566fe9da54bdf528b5b7ae08fe17cc0ad66e6c7ccb6f40a9bf32667bfb1772c346b82aff90dfad79d86888ea0f8f58099c6bcedfc5eaea224cd21b11c85767e6b6b013c0ba94b218816eaac019298a1b21fcb836a6e3ad0a1fc45dd64d1f750e613c3e1bde753dc39132a2796090d51a7f4a38d9b70d740b6dcfa7093548575e6969f8f8bcd920378266ccb05d5ddb7a822e02beafd7e77111d33e628e440fd9a087a3dfd1220fb003d9562437d17b4e04aa5e0200c7471eb279fff61260ed790a98523c794ff6c3e28a31609717e501928d47136ef9f96844ca939dbd81cd487b73af381f1a0fb6ed9454b41b6cccc0ea41c39787f7f3bed60503bdc1968f970b154b114c3f745b2d0651f8b4ce6566e51309b5c7650d2774f41933223665b03517421d51007228c449721bcb86c5182ca625348a43d7deadf77416094cd1170f79d0bbb8ec66b8b0a9e00085b7b8684cf7a123e6f3f07454f0525027bad7c04ff8dcfc3bdc1fb5d79bb8437097218712fad528a98781e775f9814aa9e53fe0d62779e7465bf30f012e22240e3ae72de5cf3dd50f95643b0f435ba93aa1d4520d952ed19058f7c02a4ca124a8f26ddf83defcc4bd552d2b2ebf6fb83432532be3968768a6629a2df794be66001d13232b6543093996803cb24aa4aae5cda6a7e1a70c923622d9d6ea237538c46dd3ba1514969ed91991268f8e587e997650566d8506bced07ca0475e551dd069a9577d82aa3fe4a927856a2bde519079d1c321e86b2ea8ae515afe30cc631277604c37cf62e1ba878ee6266d2a022dd30598697a77c691b13a35ecbfab2c3b0e32e8f11d33d5f6a15f822e571cefe529d3139b8454000cfe169b215fd2cd49553abf01bdafb746a9c9913097fc3d4e085f47fd9f5f9f97296bc5a441262c66d36caffb1493f0ccec0c2baca8ba08cf89602f04e8290f4fa44537a166953ef027f205e7a5781b3860ae338de346462094cd666bb22ed3bc568d8ca9e37f83d7aac1df129555358794453f6a577d7e9f28f771119ca72fa5ea844f8ee9440e42f03fcf20518b69d8c1961a6d765f0c47d05e5f983fbcbebf208b96dcd237654adb0717036a6e196a56c96789478d74f7210cd5ab6a87df259e4914f61cff7d9692e288b221e289a5a5a0544e3b8467906473fc702888ca303bd7d88bca8a2fe7fbe565f7b611f1cd5d1175fb15b6b7348f9598f455fa0a0cda85ed22d52da8dc60313bb761c6e0d1aa162f873ac5fee7bd5c7039a8b6033330735741f2ab1d39c7f1218e934bf50328b5c694f2f20c7bbc08be78c43f507deceb75868002ad651cee4feabf97aae45e6028825e7701796ac28fba64fd2e4576f53eab89647302aeea7180b36512e10fba78dbef0c89a0e93b3646a0d2d762424240ea13c1c2a99770e24fc4371e5e1b62cec3eed109f42e78d3d477b16e0c139ebf64000de13091053bbfa68606a6359f52f2430ddead103ace7631b3f3b15ea5016e944c361d830c1a257e5cdf9d2aed679341d53720566a4989f5c207e2ea0e483d87b40efee40b3d0f57a8c585e4556c3b694394f411d75007e810a49bb238212426d146beab3b3f0524b8f9e142ce9aa52f8b6b13fc1256dee1a5f4468f811af7bdbfdff090fc028c1d1a9fef1ac2b0ebc27404c5eb8029b0b132cf9fc932446bb54c75b051ce34b273d2fcead14cb611c9db978dd0dbd5433b589d667c32be8d7fdc8dba541359c41802fbade7f55be93ba633c9301f2566d3de6dd707376a43e9452b68e38ab34b30211efd9c3e39e27dd057490122304f93b6a30a80d7b35b15a9120bb355adc043ae8762063c5df5a53f58c9317537e82baece5716e682cb18662b456c1f5fffae710f8116b94207cc2ec626382ad1f940df9b3479a665b0085ae4b02fc62fb8691afb7ba751e37b12a40b5bc6191509b9ebe2ffa458b55a9d6bc04e94425d7620e9f70b30fcf1309228da7cf040cefef97c2d336bf169527273351c7cdaf9396a6bd282cc675d26dbfd498bc0414ebb3f7dc7de74f4e55bc1c913a413303f35a4091fbf326d004a3de6cc00e5fc1471ebb611f1e331f2df790f8293974acd5a5a5a87b593c62be74859f57f363090d0512b9d1c3c70be4a08b9aff5284f4c86c65c1e0b10614441ffcbf31df494bf072fe5e307cfff6487f49a71e20ec8ec7737206525c742a2d2e49bdb0af7d143efce036a67fb6b0f7752b4342572b816d2214f24d821d67226e38a2ee63363669dac031f69ee122f84774706a94f174af166333a2ec52d54a51ce1d0cb9193a5b159615c5b84ec7c929b609bf444180d1958a5d4f2d67478d921e02ccb5cffe7bca6fae1127be6b9639a641c5405e6dd86b15ca1b7018240d8500282652fd05bad76b1db2a872fdcec99d56b2c3b5b25f6e594312d9f241d3ea09fe896cb6a4fb12fc8fa24dcf786f996c4c154388b6210a0bcdd88e7bd1dbd6e539ea83cb77ca18dde78530536cd3397d5cb1be75a7d3b0f4b7a06477f7439fd247e67b80b860c683eeb5e1c36e0cc96465f3ab8cd53121993e9c5753bc2e057cea12e2e591201654c22933dbdd2730445a62407711dc89a828245654d66e25d74168a2cac2b83dc4ebdb6d90c85d5d6113d17f7c484a35a495ab8ffa7be74422ad342645724e8807f7ef5db5eb93b85aa491d13354c73554bd58e4d5817b9f977f2fb6cb4eb698de090374cdbbceaa39d92f66178650a0835a7bb2e22a3831fbf49060015bb5d91f19fe38bbacb31f8e01c22c577e2c8eb7ad70748a7b744832461deb9c243e08fdd422535f200f3a2d85f37278aad1ffdc9cb1b5134bfeb5086dd5836838325407835b7625f428656328691ac3a9ae2cbbf81d04f4e8fa0bc7f37fabebce38e0f48c6ffd89bbb15536e34d1701e337dcaa67aac533e92c7ec90ef8e6f4bd0e008e223498489239467b3be2afe2a898bc04eb848ae5b31cd227a36ca00a3c6efad09824af3e424843a9080fa71e92106d0d977692fbf20fd1e48389b7faf32ccbaa4818ee67798c0c18ca3de4088a41cc44409b985bf8038f2e3e1a09745356178ee61e18e603763bad7629db0e00bf24622024fc1cbf6ee9c227543244fd4e14e580348677b4806a044c33ff25ec74d9d53ab80e99fb7f8b175a1b5bea783fee41100cf708f4ecad7bb4278a6be5b50315af6ed37ac915d98f72d84ac3b507f18102be295ac0913b75b657364ea51b566487c9aabe07691c5c21b6fe7f71bd44a84e73157eecef1568b55d82a285218e55b1c3255b44f9b2b737253128e7d5c77cdc11d63c305a848c445574724de01d4fbaec505ab140dd4313134ffeedf1eb1117505b7f9123bb0610c732732c1d9b002727c2c269aa9741ce92fdb961b9dfb480773ce4533ca87a05dc09893f660950714f28ea26705a1122508eebad3fa7476d15563f1971bf6bf59698fab359edb9b2d9b72796048bdce9c937fa17911b46bc3c277485f8a9b2c2896625f389d10bc6ab630e18f9c351df3dcee105feacc492c708ae208b629e531ea5cf465d0c18d3a78dd2ad4c6d6a09465aa4238fad1ea5c5af19662e9f341c98f946dbdc13387d2576cd6622b524780311ac8ae696ba19f618c4d4f533cad57a83d2d37109976fe945fb760da8f296c83e51d3031362b1cfd739ba5ecf9cec511d84bb704ff6d3bf1d0a8019141d0fdccb6d9afbdd3eca99e88083b73dc0ce4c62e448e3addf43f57d0bdaaea959356a2b5b4789ab35ab88b892d7cc616bb480a37ab6bff95803c477cb2af98cbf3957c3a4e1ae70c5721295e9062bf4fc274ef6d342bb55eb0579d8bf81e15b0995b8acd7be703f1c201bda4b1a857b50f2edbba5331ff2b4bc147b4450da2c2d47b0d09bab88152d1a5e04de7200d00e8274bb89aa75daed6640866533d33c0ffdaa2c8abc701bee4405ac716a6729b3ae59e876c0d6bf274f6c3b6c0808c9aa00ce445f9f6b3594f7a4b40e7fb67734fc444f767afbbe3f9f41300b30d6fcca70ab353759e44d38c1bae9e120baf3600b00061a7472e20be5535e652695ffa22e0318c7e46b55c2b977b75f961b660c18b79dc7533142818c38353be03bc38970ff05bf62e8fda2b3887097cf429e4f830726d9209aa1f62a855af513a2772af282a3f4e6a7540d59c319c88494722a13bbfb5ab7ba0a95de36399ecfb0c6756650a76dbc8f25e70dbec091bbcec8a17449504176bb2ed5eada8749ed2ab866c92b5af22ea3d2c7732db335db167e04188579f419fdd4f69dcbfa3894e1333b25984e0d91fe47f2fcb70e8470ff69200e54a261bce846b28a01f1ed97bd8d6b09a0247fa0670b5e0179f832881de63a6973be265f58cd64f83103d1da478abcf2c8e5ce97d01946de948c562cf6cdda596e2724bcca7bb0ccf019400c717457e76e027ebea9b3222d5792975f1becf2dbbc7d46f2dfe9c0d29a65ba2b617d157cc82608a81b21dd320530a22eb10df9c014eef081db078e1c1a56d70eff807aa1dae05b8b5663bae727b7d062dccbcc74b3e449b044b414ad666e80a0f84d44049b1d2f3d425f49e3c2d7b7556044de186bd7dba60078ad8d755da48d1dba3fac0c9b8c517c293136017667a6be22df46a8e85db23badb7f926d04d1f6102b2b5016f340d986e945705c00c43ee3e74bea316eae2a15cad8a77848500bcd45a43fbdcc4ba528baa123dc2f573e7f3a941cd16aeffd50608528936cda2db739dc86faf7b7db8c36b74e713532cb35986fb7fdfe22cc08859429739c531975526f56239d8734b7cdd7739648005c7968f08dc76c719ea495fce98c1b30c09767936fdcadb1684bcf487658ed07889d2df9abdfe5c8ca0cf9f23fec92e4d5fcf71f84541090592bc427554ffebb49e583b7dc3d90494086ad99fee89b51a98da067f44c4bcfdb32ec7478cf1a21989dc337b367189867effcf8eb3f4b32868693140034449687fba6caab07c6fcc6042c3174302533b57b8d65649acbae966c085a96f79aee584670cd72a175d4d7797455af1acb306a88e15d354e8e97c6696bff8ae137be119990c6cbdeca268f9024603e9ba05ab4ccf206fffd1a62ee2e18537446d2655406eb6097c7bc02a89b9fe64df7faf09e6223552ef422e920e35c215bfd55d35b8bf167e6a8aa9823da9f4f9d6a3aae65c34cf92b8738c1305aba6da46e4ae32efd263cb8d08f545f825976e28b96aec3d84a986f4d6f93703ea4ab756281ee4c2df111c001f87b0a107898e0859064a60f358eaa87284516d3b61868a5e10b1c38d71cfdceeb3c0ca9b48d9e48ed942ceb484fcc3ea0e16109eec379081bfecc3ba8701fc566e88a03956f72ffd9cd2ec4058dec5be109add8656d2a61f0e9fa2cd976f4bfe29a55403479e72d29c0d177dc14abbd49d2eb6714a70ee7eae1e0b8ed5f2802e50eb95c6bd0318857afa2cbe3cb6c0e89a62ca0a2151b95da8cb75d05073c5b868c5f8ef5e0c0e63296ceb3559c8b9ae6fffd04681cb75a9d8cfa0a23fb936d22b04595cedcae05f6de2d0ee01bdb20b62502a231a56eca9cc75455e310aa9db880c8b0db18c6b2058e08ade0cf7c2a9201e06472c23c5d2dd194d57ae5407ad0fc4d539bc50610c062c7dd8057a0d96642fba9d3a84e6b99e9da83f09b40d2e9bd0c3e445f7ba7813fe4c1381c34111e597ea37f4b95c45d6da5d73bfee9baf0cc1e6eac5a8f3aa94fae371f2419895c61730ec01e4a7fec74625ea037b3fbece53d2dc9522aa3e723112ad38fe86a8bf5858d4ff2ac378127e528ac26b5a493b0ac62cd84b82bc687d451a23fd8a8dee175c3fa26c349be52c198593eb68f517b4937b0452f7b2a4d5e9f9932c60e4262eb22e49a131ea63daaf46180044310f2ce878bb248b73e32a7e722126dcac616019a5c38bfce62b8207314d30b5688240b0602c8ac62816a525ae8d7f3e863d50244226b1e48cc2272bb2e3e0ba7566c19ca663533aaaa330398edd4d23751f54c8f582320bab56995539e4b4bc80c9e46ba8abf4f0b72c5ca44f60c4bb076e332cbb515f29f2f1916d1e63f87a1c11d7c14ceedd8551cd44f0bc4a05b4a26875cccd993862a289ddde8edd6e5ee51037597dd2dcc012b7745d6f1f16f7816a8142e8720c1aa3d9784247364f8c006d150df5d5718bea481b25c8efad410499156ab3af4c45be7b1fd6e435a3f8b3c55b7666f8da403c20f076e1ad723d6b8ec213e6de5d5f94ff0713070e089dbb83facd6c18241594b620ce1636a87832b04a5af76cd7e3f388b81d8011f7579c634ffbc1475edd85f9736ac9518b6a150978fd018337f37f2f28c0140e62920625046db7d09461d374096154d79ee31960d0571370155bb216c31ef4780a86d92a62ec08d3506387908097d0ae1bf06f25817b3a463934020042fe2ad7d4dc5856943d9d6248db98529abac837598c772750e7c954bd0fefafde5749e473798d81d29725b84e68a6a0d5f8ab941bea929e739cf02ca396ff700d5f13cbdaa5be65350043b1df7387a9d4e47d89c351d5c3a671031937c4f1a67dc18190a743bc3f5e54736bece4ee9e9678e571e99ee800e048c20cc3aac3c2a4453b021eb01661da4059efcdba72a9a05af27359f13d0421fd7368d6b6ea84388725fdde5fd1572f5493aa9478c8893044b3ed230b164c7b1e3c12ee1ce41bce95ecd750d08d8811433c91acfd17864a020da3b4b9a769c88414ccacd0d76185cf07ce815fe920cce0733a0cbc8490b1ae53c2f944cd6705df62e70ae8f378cdce25423be6dfae453b0dd1561cb2377285bec923e5eecb9cdb59b14d718e13568644882514a8e37c2900f30e143b7114ecb11b2d73d36d548611156f93a19df9e36578378071d74418286e819e81e8d436e135af74771621874c934b06764d003e84119ee9d98fde6600770cf9d48b73aceca27f79648c3c243300cfe0acd4b6da92e8bf0bed940aa06ffad61808c1d4a32ec93d477ebd791e05c0f079e304c73931986b590bf6faa0867ee76bdff56b3e7ad06649b9acc0b2a5935b3abe585471a2b0cd7dde7cc18b6c6260945d29eeedccb76b63e9d5c043b2e1194fb4f4f4ae956953bfcea7673e53256878ef4d51ba62032267a95340bf73a0206c65527c71e67be7efc25689eec4f8c63207daac723d6b1f983a6f294004cc6ddf9b48b2419dd9a14dd53cfc17b8b821fe2aaf248a05155df6dff0e7e12780ff7ed01337eecac86f0b859c09ffd5367d1d760163e95f22f7e99f860bcce60c3944587a56e0553e122652301ac4ae8765d6074d1bb8e77255d25cd13d23aab8ab9a1ade2699fdb89a43ea5d0c5823788e9d2ed9b8e40c9166d72007f79458af4fe1b702defe8175948735f143953c2021952a7d90def2f3d0b296d650cbc7b466f8e12f819bce6065b1d7a20c074a8f6bcc62b5873fd1af22e1e1a1ff86bf0d4485707f07e72209e8daccf59d6dc5e114fbaaaa6df264f9866fe257ffe39013bc7f981bfdaed27b327ae1c1656ff4c0128af0ab70b1fe91578d3da97f10100648a72f751850f07022ccfef6277111f3976fc84162a21a5c60c05fb441be9da2f16f443cf3c316a54973678c0516450aaa8c08737feb51a5621e02e6e3881809102c4fd309dbf64b0cfe7d84cde9f285a686f1e4dea65693c5d7679a04694093c14b40bc069b55ed12da762b7795ae4a10593bb79672df0aeaa7f84904602b5fcbc5451d2c505cce667da113d3a5a0ea09fce6e4ffc006e604d58989c84c6a4ca486b919891fd4baea27823edf9ae8f5be0ec96a18f6fa851a6eba613e7b41d96cbecc0bde1eadceb9f18be31f494e72afa5bf6bdaaf18e2ef66c0945f8f3069e51f9d89bbedb0241a5d219e3fc3ac483abd3180481589941fd1cf5fdb7f111e0aad669d895410e0bee11adaff10ffe0a3e962357cf720039e37d7a228368c8362ef826ab1813f3aecd404ab65daf95be23b28e3b1836b9e83214a0c425894b91f54c343a60341de96424b0738c79bc5b0340e0ed95044736f73e53f50d5273a68a3343ec238de6c5a6146ede71424546eea7ac182e2eefbb7f50a33259c4bb1bda73fd2e448f929c0dbce5a97e6f03f7d39b5f60ff4602be03c25da820233a298e870fcfae2a693fbf198d4b77808c6feae969eea63bfaa61609914c375367aa8b4a87cfa0e34ace5780aceda19fee8a6fc6a3dab0e7bbb28026f72650366c8f15c457c79dba236db4d920205f7f9f711020416a2b5ee99cd8c80f1034580b95f6b96bea9451a4bea2b4ef47f5828c3cc1248de0d9699c977d9f9f50dd9f9408a568c7974cd253a80fd2d1ed644382f226221612b56bd5cc0c283bb9cca36e70b14efc8943e22985877f2b3372aa0228445a9207c08866bc227020cc0262291225fa71e4b6b0682ddc762d51dee630557e6de1e7649970ecfb693fa2a2e4ec2d5377946b161f1e5f010a8c2ddad2fa295db7a587e161950e6465f3490035adedbb5b01cc92f033d31171712d2b0499beab7397432de7c2d468f33dca3519b2c7224f1e8e2b360d9e3032e14d31777a5b2d921915209697c4af6f7ca8d931d2b9ce8ceb43789f8e361dcc6dd6f07a87bee1e9c9c434e9efcfec05438c149ab490a53e33fb86426f5aeaf000e7ae9a7d00a8cfa6294ab079827fbd3b7e04dedc88fcb4d70093e772d39829e79a489c8c31e14826c12fe28150ea2343e2794c329e8952856389e46f596c19c047ef07c31f1d20bd49ba36e6faeb3ab5177d2f6bf8ad84fa472d2d8829885866e1641f5f7e4c9048f87be2a96a50423d58eb2be0c1a02f591fea2edba714e19db26a5a9964c6bbbb39816aff342637b4cd55fdd7dd4986fc738f91678a7339b0251f3b215674953ddebe62ea8d1710bfff6a68ce7560edd5353c7cda0d524fd800cd06e3f3abf1c60c287a899743bb382263647a0f421c435b56bbc6952b2ef90dec25fffc3d3eeefbea8a4a673e8298b0c34605fe77d52276f5d1fd0f427873474393ed6688350f9d6994d63a98b24ad03dd992e6d317ebe0edbc056cf2642f773fd55363fff92bd2655b67cb72414e7fda4454f3334e6b763aa27f1d370d4d164cdbe9e13149bae8e90d22d644875fe5e0fdf7dfe5a2512c267f22f9dc7e26ea424589903dbfee94ea360e75afe4b7ae2a6c1dbc6b42e90c7c926a083c69def083da1d10192058939c9162c45ef98374eeb73614c2b7abff4974ca663eb3db30f384c0857229c11cb9789119c3da3ec6a57b98559f42304e2596737fd1af010c54227769d49983f492089f282960625ad2d2cb87c34b585b5ef419dda23c824f850ddcb01a588877c4a2a506057b9f65729386d45c4cf891a3cfeafdecf787a0bc9cbc7882ccfd5ba0f3827cec044c5c2c510ace9757c606a5fb21240383364c125195afb0df491d5b4f8eefa36d49df2af425f96c9f0dfdfeb385dd5545a0c778bfc21a000998f40278992e83a7be09d85d043cb049b745d7fd521f91feae3cb226f296b2dd2a54096075353fa93ef1fc8e16a3061e6164a8abc4461cfd2fb2f2364872743124d592b024ac0ef629d5062c324b7e8a09b707937d188216ec592af35753e169a0f0c93c18bb9f307dc68db63f8bd4918862c81d7a3ce8a79192b0e80ca68c43c5feb2845f121ed72e79624f5c8f816aa2bd53518097669318eef0d6d2b097623434bbad4312b83b4ad2b6458362d99bad3bc7a225963a45780755e103a16b26b497c3718794dec14d56ec0ee9993d0df76c7d93a3890c1d2dcd56a94f9430a1f49057e2cdd4ebca8d7172bff731e55a7c7739655b3a6e6631de4414f7b566059284a4bcff2055aeb028a4bfdbb8879c3778538177dff41678b59edc4f94105a7502cf983afb36aeb539a39be2d4202abcf0a0814dffac2b80ac7f3fb59572ed3c893b21aa1f5aea3ec216791d8be97730bfe472915ec216f2e0b21b413b79ec0f6aa5bee3cfae4ddd2f7ac264a2cd69856fedaa4560360fd9a2deb69bb135d4102b54386252b63d77a4b6f8a427dc1e32d0b4be7e896ba19d53d9b4d622ae4323523934226d739e219cdf663fbf351de56990d9a3b41fb291a363699c8f7b7301bfe910aa08b3b3b5aa9c0be0543a8759de39972cbf43c0ececa4c9d731a1caa54555bd28291035d5762d705dbafc435957d8171ce5e45a18a9dd1073fc94e8b141a886220ee2bb403fde56168c291796434c5f55220ead008c8655bddf84f4f91976a752f0cca19863b83555a1b503e770f0e0927c99e7c0b77b48e05ab42fa006342846ed367eb8a0c388afdda75be85518998e72698a3c8225bcc4731d0cceb24d61ca9019d729489d3f1ecd751577ea58eb3b2a2fce104837b980a937e03131b1269aa88566bd679bedf7146f946325ee4881d07ecc508ab04ccbb4c3d22e8060c1ead2844f24b2e6cb680b251299a401dbb65940e721d55a6c568b7a0c47edd45ae5d7f247feb91d764f46cb4d47ddf49d2a2da2402173f67347e82514a8cc1d460af03224b713d10e18130730f7b497c7cafb5b905d8f353e88ec66274090950959215d7513398e603eff49db89c54bdfb29d0ce63d718965a7871e48057996afe79126874d10b3eab9c2f6ce9a0ce8852767cbfca1c9af9acaeb4550fe78c726998a79a39e6307ccf9e4c652248ff27699a5ca4481378cb0a5e32adfb2eaf3dbd642eaabfd70954d2e01427571a7c63cc16f1168e87dad3c6c3fd60093e3d446f0ead1cbff4ff8e469cffcca936af6676f668ea098f5cae98488380f0d04ffc70af343051da58bd469b0a0ccb5dff37145318e8a7b45e1a344f6e4a8000bbc2be2a34305c6b69cbd10f3f9ea5af926cdc9d711efcdafad5497c49cc0ab2d1fd83c9242fccbc8719a5b85cd4a9d714b60b04307c66198710d78fcced6901f9c7cce4f558d4c40994857f941d1d2151b24850bbb3f36ff45058a6c0c31918ff8f114f420fe3c3fae5c7f9a8507d389939f304a8bbc5981fc9ef38d5e3442daac3abb32c247b4a9885c03cec2ebc67ab7af3e87a01b08b2446e96b188652ec17649ec0d7cdce85e392f8c73d1e4e53fa45ba8d0e44eb825e865be27a28a746c224c2fc58656e88caa28838428a8c2da389268a94395e66d04e5c3e16dfac09a8e84d8db2234e23ff0f23ea0322ac3daa265c58f0476bd581cb954981dcb1fea61d276b77c653aed9b2b7e123be064602979a2c4fedea996a85898b745e39fc81cae0205973d891544c8216bbfdd03157e69cbbd73aded71d4ec35ca636d6eb23dab1ea0532d111818b1592a3ccf4baf2e145e6111c47518fdf0a994cb87e1707718fa3c6c3763739f723e234e306f2fa2b0fb1090af9731a2843dac69b3eaf01e7f0d3f872fd9565ea4ec169b2bae174571abd215673887e05a717ffc1767422d84e1be79fc18c7dc8074c3c39fdb57d73e547980d04e194a67fc6b3c77d07f9dab872f02bfdeddab21b38757e00d050d05ece6dd42e00280a24fbc5f2d3878ed4de793cdbdc3dc7af60825502cb4bfbe54210b4cd137068c9efd80d35b2ca60b61e0fa9e2fb9edf1856b686071ca108ded63e348176d2ac79f7691d75b0eba4bde08f6ba69805a0433362bdd9bde7484249ba9f319019f5cd2ea10d12419500342381eccee2eb443cde3fcd97006299ff2f44fd4bf453c90a1a7b51b16d9d793e4da67c8e68c62aca08c28798d7c60204249db5c574a9750f04e7bdfeab5330a80a673d0c89165b8e1883ffd42dba379df06f20aca85584a60704858ef00ef85792e202afdc8297b5a4d63dd3d9fb86f3c2a80af7296db86c2fc344b5a703bca58dd6a8f0269e5a8dc699c2777f638e6e7d4b39759e6bcbfff4f52667514257d32c2414ea0532b16c3e6bc4f8d027900ef85fc0a5e2501937aed02191e1a3a176245f4a52d5ec7708b8c7803388212bcb5394290dcfb0399aaaca35e5a8a01987f9ee4b748db3e508133f768fce7db2622b032f1fcca18e869bfd4bb3edf31209db93a0ba370d9af5e9feb232d0eb29bc056b842dedf97b7b76746670a29dc57e5c3ee05ace520ff32b75c0f27b05116978781c4a2a8db818c8824d956060e5924fbf29188a30b1e36ae1bd42ca6fa411576ab8018666d16aeace80089afe9bc5c81d9a09c92241a10f3d32c500fced8c7b0050daeb3fa4933a78a1d2ae7fc27aec949ca0096b3a4a6b85e3708362b975ea8706f71294a8e29cf922a4306c2deab8aaa4dd4f9a23b041b0e92a9a7db36ffc905126f428309dc856894cd0a088f0918866fc713d17e14f6aa94a6d3a56cdfb84de645c6992f6c0ab3611ee82db229bfd3fdd744cd9c7f668ec7c515ed685c02a41e2225eedd4d05710066d508df7a36bff88a0bf694441f18f3059c3b6bce1f3804ac04b1d8533285406bbc005d2029d2e5ad029ecd213c27c9c1ec0bc0e0f1e194828a20a8b33ae2a96ea24fdb1a6eaabd11fd4d4580b01d1dbb01f34c2a096f5553de05ed91b5607af340dd5952b28c887a04a8f120899a0e655c7f282d0ae663c2305f39e636fc419af704f27d287a052ae73c0ca10cb128efcf78fb7e0ec6237d11999618e1f9f9b0befc818bbf931b422a8ec10322705600f21ead4aa1c77e1343acec7fa0d3b2b019b72a70e9b14bdb9cafc5c58ef778f76ad02a5a2a2787c10bfe18b3a59e39f5c89e10ef93242e82a8486eba2c7bb8ed0237d3ecf132119044184a47b6375c12e8493c0b245defb0cb07231af385d866f29b261dbec744a1da376ef69e46239d1cdd960f13ce086165cd0c916a527989042d325564faa86e3c82a5c34d8af686aa5a8772b5aa98d09c047f6c16927ec2f378acdc7ed413d82d58a1ffcf066e90127ccd6b253b82b2201bdcf55c5c8fdda6090d5df10e9c4fcd775aed7079f2554fd4b336d1b436b9186b3f7dad3e7d685ebc3f1ec16bc3f1ce1e7dc1e26d28887323d588e936c26103621347a545a405522adb4701b6b50e06106090a12084fa31ffad955d1f189e729751778b3647e436a26108f6ea0c343904eec5c7bd506c663c8a3e34e591dd0e9b5bc6b1fa89905750bb394fd57113d988970a05a8847e08d32673e561456ce011602f7e0f34820bd985b78019fb9f764f69231fc729d70a77ad96b9c976e3fe24f3961ba05cdb266661cd830ba15a17a29d0ec71d915701f3c2c55e2ae092b984d6bcc95af18ce4c18e85d3b3e2908391f1d53f74535170bb67d1351a0b48fdacecae55aee32b4493fc83f4c4e59cd15810f0fc27815a796a2549424aab23fb242d51039cc39f99f56d4f028aa05b6f1f4a5da67f6b9ea231f77db72b0d104b0c2bb262a71ebab45d39cd642003c633062df7626dc9d449742362eac3a6b15303afe9a5b15547a6859071db544cec3054a6b31243ee99274ca8b6efd3de778bfc783f19300e2580e4e5a9458cad6de4a5ac849155dbad975d8bdb26310ae250b21606037ef49d23806ba5246db8cc167896138aa1e6d14794222773a955c56f28e9f4ef9f2112a37a1b8fa8211243db0b6b7eeb15d8780f32457d6c626128f19111d0edbdc30cbab5760bab61d6863ba584343ad6eeb3f86d4826532f5b25640ef1721ca2dd491a7b5409ea3cca9483bb81e9bd1df8d720d0c097bf38918d36a3dd7b00ef71d6f88a8565de78b5c81902f5a9b29ce57d315baf9d8cecdf5dbdd9c6c2ab2918a43756763e8c7ecdd2994418d3ddb3d090cd45a01d213473938cb653a06833fa94b13b0360b219fa5cdb11c8de7b1c8b1875c84b45450bb085211d0beb9f4767c3bff54b7ef611e39f04d7f062400ad10170a859d6c17d7fd6139c5d8aacd19d08a8d3840aad71390f4b162fd27838d907f8c77e07e55d193adb4c463756f0549cb320c2c472e807041c12ee27c6f5c743e612b7f6c17f560f789470a2d7f3eb777c47812947fd1a385eb0c3a3d74a2e63865b624abfdf09b3b7a404995ece1eb092bd4404f7eaa4158995c3e3ab9b43267eb69094cc3c86b2f88ab842bba17250c2a9e582b1316770e0dad93096159998178f632d766fd570809a4a6effdd7a084439eb557036b6677b5a08ef229f5f07f7248ff0fe140aa9c20fecd42800798041c1e1d7aa9309baa98d54e96261851395380ce3f0d8a64eeeb0fed488df37f283baa997ac5597ebf8a73edacd3dac11a326f2cac28f31d6e39e6c359f894c99c9987aa4d9ed615b05422c94b7b48f6f9682e5aeb081aa865879dbb844dee7653e739475e2b2acb29f3642d8468e6cfd3c4286f86c01735030135aa85290c8cea05aab6083ef28874885367bd032f5e74eb26b057336119cfb6839d1a5a2153d8354015da169843b04d005c34cab47166cb8b15535165c2cd534fee690d378852ef1b04fae751ee48aba838e5630dcfb2e842390a8145f3ed554f41beae7e841192289f1ab714484f7f76cea52bd7737e2d28a4da1e4b4766554d8c26d07883e1a352b113d870b4838a9894f83fc0410a4d1790312253da6980239e086f0c9798b53bca07fa28a15e68c6c3303d8ea931dcf4fed6da325abb5401d03d9dd8aa5a452dc51207057fd791c2d74f131d611967e63035a1a981a48c147b743b32a91912a0c5836a26032eae0e558ed8a555940ea0ba1c3b4db0f6bb38c8c8668b6e45eeb45919152986fd653f3c3da67a3eed6cd378b4eac993644a8f1a4cf84ac48fcce4eeede710f4a67f502ecca1f79a9aa1354578513810b9de44b027e2ac80df9d703ce2ae81d235842fc88e2624230dfa7808e32dc5e9e382955ec22792a5d70e5071ac1db010ff982417e99d9edf5b423a2c1d11a6fbfd25ef2f51ee80c7057f38dad15e4c977a8c2032c7a9d015cf990f972c139b2f71be0d076f014bc9d9747a30b956414822341f471f44ebe48a2291b07c344531b4401cdbb558543506b2d2fdbb2a65548fdc0318148a8f8a39f4c43d17ac40f255ef4f8fa8c798948be33d3b664c3bdc37ed7555d86242eef077bf9bb2875a5c1d1010736984964347fd177daed1b3bf4b7e6c7e230f9ff6bdaf2f1b551f696516bc8cf0659130ebd0889f54bdbbdf58467fc08d6145c3838cc179fe4a9c023422ce9e96b0639c11f3ba24c2a9fe09981605be51c5818d26ac29fc47b0440c55c9caa004282ea0aa6727cc5de09e3abbb9c1875e529cceee22f5ba9e36b843c9e62eba22bef334e5bd9ef5709b4d825bf218ab65815facdbe4b7a2dfc78110bab5cf8e0ea987f246c7527f62683389c6a9f10c1b0bfca50ed3eed8d34e13d5131fc32f9989d85e1de9f4ead45dabe939a4b50ddf3d1730ecc36d3caea62c09a24da13ffde6ca2d11f75a7fd6f55ddaf5bc71668e278ba06802cb0805a53d79cb475248af669c3c93bbb0c468c93fb3e251830440d08315103dd7e787a4588634d71ac2a0fb36edcd8791a44ca1cb795452aa87e0ee7035410130553c159f3d5e42cde13253845956fe0edd0a61bcd933af6d5aab1bbd003bf8046ce581c8d586e7d59f8317fd2e19afd280c461aaa0b6e367d1981ee23a1a9dc171894da3305c2abf97adac11594182611d9e7a5535982b0972c1c3ba1145bb1ee5dd9fa35c000c2005c2051a91721e596249f03de5110296a95a7bfbfdbda9b8d2bcdc1d3b1b15ebd6e057ded3b7562672bee50e6aa55a6645676516f832bf7d9539904622d6dd516ddc683ca330db2cb5bcb11edc5982680893af59638b3b41006b4f3b350051cc07738bab366fa165462a2ad5883dcab145179fbfab5aa839605be791f7e1b9c69b1d459eeb45da0e05649ae3703460b3aa08c35aebd7e9b7c379442bd981a2a7e58d95df1e77ef901db5ff6ceb2adc71317a56fc5bc1e7db228020a719a04ab48a82e22e38e14044dfe02fdb18733988b454ebaf129fe7b3a65048f107f63ed85e0df9232c8ced01f71781902391494f2bf76ac866c339d733b99faa97034d599fca022a45669e36d052446d0c48bfa19c5d169235fc00deb761c09c4d5f3316196833647c74fc5ffba3260ccba62aff945fc5c9dbf66f9f18db022595a30cea3f9d2ee0f371c8548dec1224d4c870631e933a806e9757f2f1a8a601b8f6ed6e5237b3ed58b90d836ba99c639755c9f024ababc0726d263c836a1531e04dcbee34c69e31ffbe057051616003611f5c3d34674158f28f5f0f1f9f871cbbc560028add8420b76e5f05f7cb5f94d11dc80ebb836ed0785c0ab912d92557a170337ed9a13811ddd6d66b160e4f971e7ef68b4fce89d8a3e9a64382c6be030f3b60c4fd6632db3a42a320da564339d11db511eaeeecdc4fd946d20469619eca3482c33deb33571e605d94d7fe66866a1c12177f244fd71a7f9ec09012f327670d9467a4b97315253c0fe168f4166e6d85b51afc17a7f691c962af886b2d0d11d1c9ba868a6db6c16dd00c69f51c1f44c038d0c71188db61a4c32544b5c97972cb102642936eff3dce86018759a2a655c84da0ea3513fdf8c5c610cf5b5514961e4e4d3272a95d5e50ae8c9815a2703194cf968f0373750ba76f3f6c81fa8193a6f5df175160bcab3c28cfe2f2f55f5dd1f4282fd4ea20cc310e0f282ab1afbc5b3304f805de2193e8f3cee0848548e76b5d5a7a3e6b4ca2310fa675acc8f7ef02b35e19b4d5dfa17e4baff119d94d335b6a605fc5b453dad6413f039910b9631f80a430f18105433d9aa583dcc3cf1428887ead5e6fad94d5229cc175e4c26bb4d36ffd0ee37d366f325f40e6d4862a5d602ab9b9e1cbf8e3dfb7419bfb7004085c24a2b3901ff06684a995cb8b41fa4c91ddd57491e6b8a4b602c5237457d16b4eadc2e5cc1b3af6a0a666c92ccbce265b12aa5042cd75b94d4e48bdd3251d94c5fbaa3466be94b2671b41915c8428c9bb3b100db50d484bbf0c634b95f864013ffe47ac69f34059cedbf7b3ea0f0da43a5b64c920d0013f9997ee2044e9c92e2f2449f9a5d228a10362dca163eecabe0b6cbe5be0591b069d2d5d3955c960db9ed6271186ac381a5482f7764114b5b852262cd842927a903bae66cf60dd0bec7276f78958e18547f51f7c32a3a9328d800c985f34be4d313e5676b4a81b9456e7644cf2af95a2d8427324ed34e2e78fc034f262d6c778e98eb7f87037909f5e5ba80038cb85d47703dd4d6937012ad56cb504c1b4332291401ac3b6c5d4a41d9cc530ee37a8cb42e0a64b470435b3e50f5eaeec4acab8f7590197d2b4ceadcef4b22d9730cf45b3c4ba5a4384643c8fc365e131ed6429e6f6680fd28834c3f356aef64eb4116c1d4c1d40eed6979f60ddac6e2b1b21bd1ea0c58e5f2aba576f7463011e8fd5edb12e4b17e0d75cd84103c77189d5540f9e7ce2600a2ecc1a130ac9088a6e6a80372e5589f9f6c771a0a3f6c136827d5c77649e090c0ccc2222937471f34bb188ee6d054c733d0cf97e9ae07c915855940d5093a8dd0b82ed1430a761a1547fff23bad1b436d2c5a8c1ed3137a47c17e43d9d213295b945e9ad8c4ceb3285dbde50b263a7dde99a7a044f9559a3cf952d9b8dd28f623f148b89a9a538cfe41319707c5dcd9b98aa614d62649da754fe6eb4a7fdab65ed2cbfbeadc8ab7de12d51aff6907bc9d59f798547fc0d787e3daea64f8ff71e32008b70ca5fe71039cf7b811e970f3c3789fd1b074274ed084097a80fab58e7a6f15384422b39819c1f7c0e86043fdd9f7d3a9db10258bc989b6f14bc9396537abef6848562ff5179e8bafd70cbe4fcf96819cbc8fa613244628bae552c357fd150b0646e458a65610aa444aaeca9aaa7ef61c8668811599bbccb0e3409087646a65f108742027c303cd76f6cdf38c8830c4b98638d3e9775e12c18af1bb4e87a0441bb754b67033e4fa2f7b3eb20236c2e4f7f7b3e57840d7b133dd0f0c34e456981b9d3037459b74626f9339a92c592128e15c214af1ce3128fee7868888c678936ba62b6f38cfc2647eddaac92684d9f7cf807da259c5c37e5b53f3777bbf5fd4d5c580eeb9bf95f9432e7f9a6a9c8741c4dd14f4a68484a22c73961a9a9682115610288e0e718f1471edfe50930ec1b411f298fe0a2f2ee2abac312165d0ff1659d856cf48503160088079b17d70264d0e225bfadd89433f48fe19cb972efe95c0578262377515b28c3f8598f48da52b7f7bf5972b97390cbcf4ffd7b80e1b104643f13318c55739d7ca4667c27ee855d21f5082da1ce8c355e5c627f3384dd14999e0ecf1afa72a15eb3eebc08fdf0418649ae49faa287d3a9e12690314d561863197e50a0cd1d592bdae5a7fa46467fceed45dc4c855df04e045b2a3eb6dc5fdaf0c6bb96c86408aa7bbbe589e6fd64bb35bddbd75e8d789708d746b24ac3493478672335093affb27a6806567ed3dfaf6b35a58a8bd18f525ba16bd504a1335046796aaecd20449ea6c24a77e6e6e72d4b88abe8b042c59109bf5cc989180420b27fd85cc0081bb8d47266fea159602c6494b6a52d34c9f56774d37d3fe873df512b2a7cdf069657efbf65c962875b785a582b3d9c201e054b2cebcc88e62b3f8b63be5b44c52fc84712ff6aa75884d1bfdef2336fa7fae7983bdf89fa3c1f225615e80f64d5452d3a0c461e069cef8f7a9c78deae987c01ce616b74a800841a4fc3468cac3a020eb3d43c60041232ef59962c1e6693dcc5beeff53d7fd9cbb9018c6f50d9b017f2f6bec659f7d5e5e82d0f035a860e334255de1810c59e69e468bb6c2d16db67c0c4814ff97f2403d20274fc38964c7650a1428b67644ee717b29cce57d4efdbd76d3e60ea74181f76757dc146aa603ca48e365292b0791967d9cb032f9f63878ca00f92e2cb3e957510bb7803476eed51c7884ebbba4427c04571d9a35c27514539c4455848c5f4e213dd2e10cf4bc3e5f4d011f4114f28e8a96174657848b11ba471b925a581d2a7af56543c5a18188e6da2dce25cb44519322a585a333ce9e0175aa695c16a926b3e195d58db75570013c17627b914b3d8ebe4969ba9b73b026d06af6c9e420b7d307465dfe51c3da88045de7b4f6a2c1086e5806ece140adaf4f48bea8ed06f64e398b8617c4c6da58b5afea50b815fd3e8704055cd3bd2ba4db02d3c560bb2539b3f455e8823aabbdc1d2a3fdce738a7af2e1afe6d22cebf8b2894b6fe8b933d2aca1177601c144aa0d3f4fb1639789ccfbe445a4a1b748444eb823e9f75f9d1645d83399f56dd625bb3849338b305e8db5a70f7f242835700fbf937e2f11406d416cafc129d63013bfd46234eefa3896d1b2c15e3162396ce1d82bae44cacdcece41c03efc84604467a64bd7dcceb3fd7d0e701a70555fade98e39be9e75f5faf8e26b61fb2ea2ea366adc8a92b3d8b8ceda7d1e935a9163832ff6f7d065548429856ec3cc0fb253f3d715b682e1437f31da401217b4963691785f1bae0a5862a64ee4ef2b7f036a22bfed4f141ad2642bd03d1efeef4228882276168f5e244482dd215a62e4b13881e393ff589ad6e135cc23e9dd789a2d207e715a5fe91fbc971768bfdbe3b401a921e0020cb387970c859f12ae896d3ca65b7d900338365de5b96eaef9dbfc3f34caf4bf9d58c2085e34c05d905bfb695a61efdc73e8b2bd5a9d9ac4e9985b749b55430166984e36e6c5b5de353673a5c9ab8a2282e2649d2947096ed3dcbcca35a0a64539b91c04d1f951be33796d94de3619d4f44b886dd6cca73784a6d708c458bc4d357989c00680a22504ff63807ef03e68f942370f7c999460815cf889409b2911bb919b8f68112cf70b94476ba80f5b95ecad5a94643b3d4f9e81fc8bc68e74307ef204ea70b12b12b8bb2721a547a3b4f6c354b06ebc15048ee7d2a742e555229a90d1011c15fa114184771ef2886ff8f49a738d8af185e9df16fc656ae268222cbfd16cd81af97238f3ffd39e2739c9db46478f4090f4052b32270868f78fb3f63f1363879d563a7e7d1c031f217fb83b58d3b7afac605a393369a6d7373163a1b7b62af34e0b8f60fddf3e1171b3ab449551523298289a657b6442ed9f18ac41421f1e38d4c63254ba16726aad482d309d5d47671829084a1e6fccef253fdd83e3cad2a67a651ec653b094c14de7ae1f20cfa62bf5b77ddf7741eb32d0bcab258527669e9f493af5ed7d0b01ab5ca109da17cd742c97b11ca1c3c53d15c58098d1b268bf256e76576a6ec0026b7c58d3c50ef35f259bb3227144ca0408813dfdbab8aa1a50b881e82c954afdb480c179f2f7e69bae57d66c7f9bc0ec2f73c76f538e2696988d60ae031bbdf1287b980c08ae64952e0f5e1750e62958eb4c125c00f7fc4e3ff76b9ac59afc37e01f980271fdbb5969771c8a5fb1170c9753c60880a600d2d43a94058383e816702b28b764ebf4326976a6a1ffd09b9bf4c32e94f793f8e4732993ef313c31d2d560f892c514fac1f1721c5626bf77a1f2ca4fd971ba3bcce1b1ad0609b34cca8829650a469f8759cd501bae24dafc43966272a6cac9c68c76cc2c137cfbd9822e630aabe9f8b925b74d4ca2ae679dcd444459cc5e8c664c4fb97e42ebeca21aa8458910538637c2e3f796fd3470d8004f124496531f4abd51b06754f2ee9dbf99a066ca80db38c3fad279d1d2a8e7ac532dcdf30c035d54975ed0df14eaa1a3c70a2650a04f3010b981ab1ed5ab0e46903dd617f2b655febcea17de4e6f5743837584c84687af190596323effbc19da9acbdba5bb3d6954c21c379af7dffa46f5a6387f9437147d3b12a156a77d15692d9af264f88a9b3caec16e627e52d56d52f1f6842af32b2de868f783f598f12ae319657279ab922402f173badc1e0b9e0cef6353b9f62e9193f1701a1c96dbd2a695e402dc142079d2fe69d88b6e75dfd61952675cc23294980d1e18db199f95e9b8cddef8953997a064e84a41104d0c6c36902a370088cd059c31d31a31fbc5412d44d6e042e9ce4dbe692ddc8b7f6ba8befb864876b76ae6fc9cc2c5a3f8ddaea37c05e454858d81dd4c22e8be39ef9b02d4d16e142d3080e8524413fcad89196a0bfb168703cfe775554ee1d3201ecaacd6f674f1faf808610b14076876fe76c9805f71fa1c93cff027e787e5bb5376396932162a2f87023b977b52751fac02eaa6ced6a7031a51eb06a49d4e6ae38baec7aa98f16e0f7584e387f0148889ab0e6cba145ccbf190bd02038ab1785ae0c05085e6ca5d7a42ce06ddf5e48b41ae26063a5d7743efb5e700781478a9a494b9a4ace0356616bc0bfd48dafeb69efbc3b8257fe44f16e7f93e18f1be04b27759c17571b03bf827bc62fa70afe55f8c44cc45ba785cf3d56cd818fb4e314218bbb4a6a0064a660e66bcacf0e4a649407de0c5561d7e1363f3fb553e50ce1c96de53ecc0dfca245f6dbc546ddaa4e02837c58200a70452d456ce319f04aea7c71205be6c4f01debfcf2492b3942813fa5045e0f1507d4bd49e6121eaddf39e9b7d1a66d07e02b58b02a6a918ad93cde4de054ea28cb24bfad466a1c285a574af8a6be584847fbf0b298c91de11bf0daea7d7483d5e6e152913eceb012946d114a0f73f44ea4cdeab732365765fd693b17d4a3e1208792153a8207924773a5b10343807860c296eab39aa910e6d6a3a7ebff97451837f27db54afcaf8e96ea4b358a01e84ff296447e4e5ad9c96ee6d9c2aa7575daa7cf6d5afd28e862e6c03e1dca21c31a234877fcd292177a6c9a4e91bddb02407a01a98361a419ba4097461643b6832dff3ec7bbb3763cb76a3564bb314f514ddc98964503cf0fb1c5d6bad183d88f80f11dfe34b205f6887fe000c3bd023651dfba186e238743e3fbab371b93872e1296d724cf52c48866111254d1129d5707755bcbeb3e96bb373dd0cdd89560ea24f223d5fba3dfb7eebcfec5ab31f8810b42ccfa858a9e5a4672a2fd89e9f2d498ddc9e7041edb076b8a367ac784af5f7ce3028c3868b2a075a6ad4301a7ce93c0aff588c3fb4b46e2ef76ac55b0bdfa421f4add5ffc3c68a59fb9651d3b17b38cc52cc9a1286e21ef2bd617bb02d8ce7602c0b045b13d919d0eb877ff98ae47e8716737f9dde1c739f17a7e802509b6551e6a3bbba29b4c347614c57be51ad2f88af40a966faf89225af01e737f16cb27b7809e04d75f8151cfdf2091613dc67059a904d25a1cdd29373f6c1b35e281f58a614e2fc98157e8b74909984594fe286518621b6aec4b464f8c8877b2f46f0df377252025ca6fc36a210066f40c3d585b3d400310fe269d31bf14e9f28387a0d10fbb543ff9ddc98d272cbbf5fae5a3f60e4c80790edab9fa6a4d582c3fcaa8c0812fbeb4170b0030b7ac67108c28d4243fca8a0d0adefa912450b6b239b73029efed2ec2fb0f47e5dd67b539588d19627e8710069d91cbd87b098f949e7d7d43ac32c96a5994b6440b38be50fc0275f5d87a82b694693fba299bfa5b10047663affc8064407a3acf49b4b663ad59228904e31e31f9749636d68249353750d4718efbb275db18dbaa01a2f05435938f3ca3c5d353200e92aea58b96f0b1c30f0ca59b25282881d58c2dadc20ffcc48a61e5a10ef1013b3315123a78013695d848a99f99562bcfc9a27bf8d4250b5a9a008692399e2b50d4c5f934767b6626694931a1efe457fd5e995ac9edf42e1446c1d017711ef62123f2ea18e900d196c1e1c89f9067d1f63f1ad485344e4cb352dab5630140c2aeb88564dbaed92c001cec52491d93e3661c82df5bbd59f2ac6a6b4ae6c5f078da772dcea25c5ee95643a4a3d9eca14c603d5d93361d8edc2542b728e7f677f789ac75470445131f2f6304770b183d2ac1faeb72c85dadfe95042a800423bbfe7960e8629519634abab3cb1384e388de67f222fad5bed5bb7507de5266125d5168974f0e8683c416ee6c7e8e338b56d3b7311cbfae6a3ae7005ce5a8cd241b07b7dd708334be21f6e871eceadaa8e4a3227a40fb2d3b5f9b4cca6f889f76f90803bf783de2752c441658a51ad021c5738377247bc35571e2778b46bce0d3fc79cbf847903a1d1877b6c7e02322b99b37569923fffc8fe74db06b287fd0736aa0691861b4468fda54a30eb776231bf9459e4eef767fba933bae99e13623078934a9aedd682e5bd1fddc456504d828b37c665810d4d9de4b5e85af3a8203e7625824f963a4829cb20bd8f3e58baf597d788b2dd27e032eb94550e23d67d1f014383731aabedf8a1706eaed7fc73441b342575edcb5edf97281ea1479391efee2f06dd0890269e0e672cfe8b99a95359754420b7441cda4a2f19bbfd2f914edb803b5793eff94e7ebb1fa97c963a6eca5854dd1a88b0d19e988f8064adb717a03e50482ed4f5254349c2fdbc83b8c8ecc584c08fae632f8134fd5a2e0888544d30237727bebe22b8f138848959f08279f190d424ba988c6e0dd36f5847e3d11d9d943fcc474bde129ffb1d8e50d1d5cb677b97d0b0cf970b597331a0bba0d934a3f6fc07eb1fa3f56000fa23b43bd138b85a21600ef655a466e4475fe4f5f90840b523966c8055ad1a2d4603347fb52ba3fe4dded341b973ba81e861c931965f74fed357a83ef6c969a2ece35b4ec531b55a385eee05527abe1b098d60bb82b2e69dd956caa437d4bb15a7e6efaba551cb29a52dabb9793ecbab35cca336da562dcbdf719eacf610ecbdd6439cd5a6fe918143a1ea8a96a6d6d8edb9104f2140847ec2ec75f3a764212028521e5c1bcad621bd9191be233c7e3e1fc9f660325516d0fd0320e38e3f416bba970e367a0d94fd3e9dfcdd6d8948e84581d53ec1ecd007e5cb28054631439f43f682b9689de9d0f30ed1f5c33695a917426513e058749bc03e2a4933d348de5b38be3e2816232a5d9391b9a2fe4d9ebdad60d50c73472b54985a2f293f710688a321d1cb3588ddba0251e442cf398724346d197f53d7219810400a2c1c3d55bbb008ceac75f86bb3064c9280977d5bebec4b529c257759ff700feea4b8756ecab7a084ee44f1ba12c24d164a3061326b16c77bf8804fe5523b9155d5b546f17f350bf590941f90d140cc2d263824b02b316bf845f242c91c748570bff39d77c2eeef767d8b52b8828819fdf7290baa08b9b420667c5b9865c8238b347327406eab88aee2e33432392fbdadfe8bd7d84aea99c5d16d1b50896fb1130dfe2974aa9d62cce08175c8e529bbde7c84402eaed58e43c4637e59281e6c083e8a4f0268701f3e4a232ff9b4b23176b453c97993a8f06335c2ef8df5bca616a3abe788b8d635bacc036a3ff17bf4fc520fd9373c473c59a864de08173988254d70d4929d8b4df52a6c7499a076e7a0252de215b812ffbd11cc54fbe87e6be5b5a9b14e87c787a9f3dad02b2df0fc47d94b1e1f448d1e4ca52eb76410a82bd928c34142eeebe28653d9f6797f1ce10d208aa96ac80fc6ea6056933d1b0818124a16e7f76eb600d5d864c7cd9d58ecba6f01778270f81e4f2130299ead344b47084e35bc102165e06ebc12e47517777800b984a8e9ea1dd37365ffec34df779c6d7e92a7157c26180969600c531ad30c46b9f1460cee39f0795bc0962638e96a9eb821931cfebad1bd19c7500c20e2b95e3a28e86b02c04957329dded7786803331094b5a82562a3a728c2ba2800135ead9bd2c9066c4e35655c1d1fc14de52ce108cdc54db4bc1d23b9842116a851c72737193f893b12a9287dcb0f04378eaf713dfc8cf71bde5d16a11f34393c26863176575b832f1ac1be1faf110623505223a89f0063ffd8e1878eea3d09cd4934f207af2b215e91c0dc2f4a5c8807feb14f302603982fc35f88e7f6aefc64d428c38ed03cbdb3ba2f2f3db02c4bdfee6f6a99d45238982f02b6366e109b315d246eaad0325956fa2cb7ab4f2c76d3a342f3228295199a4e17c95892b67aa79c85cbf3c3c927c909625f94f026a160c31cab891007405f6e44a91e3eb4d4db70ca534aa0c68ef849afc05816761086951950a0ba88ae4f5859fd307455753fc9965f17583ff9bed26e567aa00ace0a75c1b8a50f0ea1d716d9ba3ad0abff43fa7c032cf293c5e8e2c151704a4c224d55a40777457843e79ad23d72ca7aca57f4491a07eea5ebb2217791c787b91c0fe8fbe89d1b30af178a888b7a9ad2c66e01a78cadb07efbab9c38d778760b204117d6f7bd71331ac83f3384cdb097aeea875dc47c0fde247420f1e39b8b74c79cafa88c8b7eecd4733d01469c00e08237f7fa90b000f7068ec4d6c1f33751d08eb431cfb818ece8b6bb7cb205a50425f02de0412a57f17e3bd0d226b58e5f470436c2944fe649e3a3745a585ecf4417378fb539676b90173f0a1e288d0390029a9b3cf89d2e0579e128b60760b3a56113b7cae0120ea923a6893718c4602e06806ccf0bcea66f4bfb18b9e2bdda00fc612fbce97623f773eb1c63e80ba69f9a61faed60fddbb8723d84d7c9733ff4c35388762db2b1285a9eba1c87c7b45db6d945c849cf27728bcb250de048c9218437815d374adc61607682c2efdeac715d558078fa3acc804598b7680d20299e037cb49303a249e4a8ac57520ebc9ddc513b8bc15ce463de9070695c1680961c1acdb7235c60e18488c4d838e04a1959d9b06e039e3a0f4b996463d1416241ead09458377dfcee38f2a3d4f5f70700ffcc2210e444e638fc88c0cb89195a081a8427dd5783ed907cb1ed566643aeccc5919ec5955e8dfb803ecfc49d136e43c18af75718b6836d1d66be51b7b344c5763f25ecd5cd4e81392a1230bc8ad04507bfa95d0db74131d546685663e8b1808bc0043ac29b098190b57172a331a2102509d7538e35b8502c79530ce44036211eeb91e110a3fb73e8416338b7cec8ac11c574ca0596aea98c48b7dfafb487afb17284ef8f5660f4faf94673d27a2b2ab3cd465c81b09b15aa2de3482753a3d20ccaca46b04f316da7fd0c7dcdaf04ba53ce348cb11fdaea2590a1d42dcf6d20c1655f792a90e5677f235ea352f24edd8bb8a013c6ed3c1fed3290c7faf12b1e6f320cd2502556d1acb0d1c9b214a47bd9ff56c45db7d90143f57561b795546b3578b1ed36c853f82e5690cd8cbdf617940224027fb477125c8d9e4638a7db746407c53ee1c9b39c919e6e200872e50859db4e830c881797021ca11a1bdb15084e0657b05a9cba39de8be59b58096e2aa92643bd9fce2cd526c9195807f9616938881558a37d2a6605689855ab9c94192e617670e010aac4734987b01c1a95c01fd9bc072bc2ce5afabcad82be01ea43b13e8f87de6f8a9cab12139c4027277cd3bc50ef283940cfd8049cb10e6f16c6cb49dbbb62e26fe7dfe430acbd26ef16a6e0b516745771a09942a3e953e2c5242ec361e7b75ea498e50d1688818b837a33d186e97394126ff76764d91ab7420e90878c5b9e4f5446388e970285df73a0cb541cb78284f28db7b26c2c1e7facf1f246076229e70f4247da54b1fc58908001dfce697318f2309b74d161311756c4ecefbc5f32530787a7dbae1a72bcb53d080b7b400ecfdf87ac778bc68cc6a5326b93b7cb793618e9e01c289089fe8d62646e7c179a5b3360c6d3b328eec85472e2a663e7a7377148b8a2a15afdcf1af6059e43b3f8c1b8b797e4e08f9d82e32b3640835a8840b981c29083068a20a0d28ded3a73c017d7888957e5ac05c7d071ed5f54a8c7e69114cb1fe5a475a3c27cddc4264f37e5c25eefd14af413d7ce3990e41434fba0fcaf92b497b5d7299e30c3e574fbf973acb46d0cd7e945d9f653a510407b27f6a91d574608267c78d7a465c6ffee6d1056c2b328ab611f04fef0a6412de048ec91809d1357b489c429bfee9df966a71546ed00a0bc20718e3d2c6ea235f8705ad85f418873049e86d729793210aef1218f884a90b38952b9a946adc3606fd99313ceeee980ae374eee36f1eeef5ebe7b294cca2ff72720d0aa2823151cbd3294d9118a89bb828668dac2d03266d2ac7c9133a2d9f30fbc07982ebe802006b913fa95737588525391c5a6185344b84244bcc7c82d3fff65f741fec3f6041b16fec3e7319d303ccaadf86739cf675efff1ab769883bcc8ae05ec93de35b695dd550d800027cca1c2ca25a11e4e9e8950f99570bdb317790d64e79ea357f994306f4df62bfe5485d70150ade7648c41602d8747b0b5e7684653d4ff1fb9f17e4f22bb13f13b24a414ee47c8f3c595d845933b75e4dccb9ea1de5027e29ffc51a676ffa5de5c239f03d80afbfc93d845602f7882225e038e3c64ee8cca375ffa081f53cebd92347833616815de2685b77e9bd25a89a0fa15554f4ac7fb1a3c98bc993e39983cd2d098ea84a16de6c532b9e660d91573f405acf5fc0de22669bb458b17a82fa95e8022dca5301aee503fa6648dd606b8ae02a90625d2ddae095ee338ad5bb8500c816898e6e7d0e7ab908fcdc11ab372b4089edcbfe0d832e2540e5b6b30a410c6feb3d6ea4306d5018763b0be8bbde6ff5d314a64f702fbe0b8ecd97cb728801e5621c416a9bcb3cfe3f1c36a55cacf369c185ea3b3e6697438f82ad8fec679393539bce33f43f067816970f5e8a23373671afc1e1b9e67d63c57df027d5ddce11f7c09ffacdb0e5d7a73ebb695b2570240ca9227e2b9bf45309e034c8761fe8e62da128579b4f30152779d6725148ef2154c213c7eebb725284ed56b5e4ea5f049b0a7e5625bf1bc9f639fa7b4d0aa697516d4b653b6045cbcef96766d4362121a6aae9d14e1551d21e42838fe52b77a67c8265d19976c5164ea3124acd90726cf7363900924dc66be82eb4d47fb9ddeaef19ffecd5c9954b970e12019bf6070d7ab20086923906e0824029ddda766419f4fc964d9b92099768f123e276ab29090cd8b0aa206f17cc44987c50a1914576de6d91bd3f940b5eb52c75ab83ce92360f6ff68ccddae585a311007233393471693e68b60c3c9aa91868a21846035b9e536eed12809a99ef64a98eae45bda4995e4106f31e106fb333864e76356100e5b39e9244ef646c8ef05b011a78d8d88523325755dda7ee080496805c1d7ff880d59cd6e32cc8c64135803ad8be1075f679b00585024dc954498670a3d023ec64da32193bb964089449e0614e5b64a6b06456755e31e5bf600d27dda91ffeb572b10292379988ced272d165422d2543849a7b17315829352b5f53aae51a2e868e5242830242f536fc523ec3eaf3c30d6f5a9324eeba08c8a08f3d3454128d8d4e97344a895870bca8b573182fe8b7412540f436b8b92491045951ccc77b2890c6bcbf066fcb880d1e91474843476b3cac2935c412bd110cfc0b5242716f2400fac40dc8d316f19345241519e8547807eb3768491e0c153fd63b52f52ea26750ad79dcb6095a4667eb6e1e463d0fbe03a9cecf2835dbe0c385da5ec0b75a0fd6df46f6d1148b2ef98344d831a92173ede7773117eba2e6a7431593cf08cd667d25a74e103c619fba8cfb7742890cc60e9fceaf510b447f4f95e5833c0ec06586d845af32162a63bfac73182d53d1366b6102b443b8fca6253ee6be1cfc8f5177173c287acb30992a8c68ad981d4ea5a12454c58e941571d2dba053a083bfe38aa79088483e5ab70cd9ca714c76c3a3478ba7becc8b5e621d6540f650ef5842d6a48ffe352f904d5bbe77c928a7d76f338889a14fd78a5e315f2891a1a5e6661dc3582f8e6c3a03d2dc2ece62f4bf7893e5bcce6fee6914d2734dd4f95d4ef5381d601e1f7c62a68bcba14c9f0e97ee58cdd2f39cd8f6aa25ed7f4ebfa924d6b0309a2c219fa4cc49704e1965e21c2164edb54656bde19ea270b3959c60ccb2701163a76e108af2dd6231507ee36e7d569dc76c9e535bab627041d718b3905e99ee13094719116b89d6fc38f01c4cbe46ac616f05295b70efd24d171019a9b7ab4341d57c288d0c85e05ab34e6c7871d0904ca7eee8de67c6dc756edab2a6a2f243d6d28c1baae84b868b91f413326626c4771c406127f120f4ce85cd3cbf21ae5a8e6dc7011f91707e141730933bff02b683bb7b480e6c7618e78c57ed37b0bb0ddfdc703129705ca9f6fc92464d12ab6b74c87c16640add07642749b314d8d01f47457b090070aca642de1baad601ef88ea6b44e403fd2cec8a631512e6750aa96c8b02f9cd8c72e4024bf57edba6e5169f45a047017e431be3d1570023fa971bfea4aa0a9afa4cf454cd499c7206885cf57806963c68a4f51a5cade9bcb70ee0ef98917bc1ed218241d1bb18b75d0d4734b8f5b69a14c4e9b50f94e22a919a798f2b81c18423920d1c493884ed02db8a4a6ab21199f3c47f673481ced5e6479c989a7d793bb1b82228af7b30e43d49fe0c2b2dd4bc86548117929dd451bd2292b01eddf7858811926dcfd8e8d02e7028b5a94e0e782674e6b85445ede65c6454ecca36f47fa0145b08f4b36bf1853ebca76f40cc7c5a635820879612a838d4e87cea72f1e0cf590fed937419135de1e98fbddaf0833b39b5f648fb9065dadf20410f65306965dfd21c0bcdf3492f4864771fb4e4d2f674ad98be59afc07a0ec9e881b86354cfbdc074920c1b822c941b46080996056edbd2338783bb2a9c0befcb184004881f2cef97138810c9fef0bac4e0b2ad5f649ddfd54ed034d65b2a44ec9108475101668a4e78fb8bf6416438a6f7af8b59962c736da095bd12c201edb2fb6f613cef868df56c722992dedf3b22557771cd4ede0299156268468e34e68e16431feefa2d6ba6f81df38aedcf03732fa18472ad51ca4a30d2a6cb1c02f0babb07aac9607200c954f890edfb924c6113f3a9b03e6451c93aacaa607c550c3b9156564da3889a644f78af7c6915435b195c0e830d524016118fc41651c7a6bac4476db20de4cb4e31fd776a574c19929b0b57029292c5530039be65d0fa03519911255a39fe63b8cc369da17ddd505df73a69c59eab269ad2c29af9603b1cd7114824e8cbd42b3503ae58b7f268d9a91ef0d43319f1e812a890e889a53f33ed1121ef25c001d006db0909058d72822216151c295c835520091968aebb05ffbafd68d878cce3d7c3a728d5bd074f12fc1e50cec2b1190c438342b64ba270479e1e767aa6e855577f394d5242311717c11816fe64597be6b3cc97cceb552b50be1af2eb6fd64de829fb1426bc7a109aa5625de2744f485dbddea9062f880849a3b1ee5bc103e062a4a1fed40734871c49a30962eb66807bcb8e8d20af52a07bbcff4d2753d34c83bfa4f2732cd8bf46d827fffe3d4558ec8f6bad073296e43e8fea6ff035050b61a9604e53745ed606a99dd2e27485b4ca9d543c93df1f2f7f18853fd8ed5498d865503710779c090522f3224dedfb179dcb12b54891c2cc936a61ad0219956bf1c794a75380eeef7aada62ab3969b714084e4c69baae1ffa191425b0aa0cd88eff27e49005d64d72e50a52c265be63501deeafc05221f216e4cbe7c0f7f1053c17832f088edc23f0a27f4d4e8ddb57e75adc2ce5360d62d7cf494d0ca486cd340cd56d5e88704daddb0e78b37fad3d1250dba5a0694fd6f015291e3a1b924002ec8ca285fd74946a4d473b7fd90bec95ef08356eae54147d756e8f9418de0656a7266437fb0e2d7604550fd3d5e23c2c32540e12f77e422ceac9193701b324d8e5de7a01e6770ee604fb0a75a65465269aaf31fba006ff6fbb293d5379a315ace74ad728194297c6a42e92f954e43b853dc37734ba86677e05b59154217edf3cf27d3788325ab96f29a602a3e64988d8c578613ff72f2a155576a8ebd890dc56043e0a69aced3bba9c21702f7a7005a9c7c35a9041825ab054dedd85fd48fa45d6ddf2098a0260798160936ea0b19cf69c6113ff0a8d262b85c9a2cca3a9e1976cad12843726fb894e3dec889d7e62afc129c9595de6f2945850bbea03d70ef0927c5831398742cb3d17242641cc90849c38050b16cfbe9554301dc0c1dd01e643000a93e74e94a5dba35f4a992cdc32d52934708a2dda59ce6dab805814ee341f8157612dccabed90738ea335e1f8e6124eb4133d4e01e1283138e77cdcd743582cfc91e46dda4056506cf41fc895ace260b1c3aa08af6fd5ac1f1798d6ae1f711c0853af30c08043839fe23f58cbc671c05054f31d3772b9914a0b0f239183d04808c6d032886f7c134fc5730c31295587784b44f74095d9bbb4853cea441e3eea7761977e69f0e82e7b4a5d6da99e6c5bd4d8c4aee731cfcc33b1cb3f02e8d210204c9f59f335c40e4f4c714cde1f3725e8cfba8ec9b7630ab9564c98488b2d34ab49353b0a8509a34ecb99280367bf24c27e6e842a6d4e22eff4128b87c9e57626d28c6f092e4081383c57badeea129bc93475c5169867ea562fd3756f2d2aa1813aa31cda673512b35a67feb675bcae2320f08b80e58b7a76a0cdc4a6e4a6f33e704181c42fb3a39ecf11eaa1f9e4389c23a6f8c6ad6af913bfa60647a1b81be9f3040d5ab060efe9007c8ff183d93ea1600a807db5010104c16ff64eb0064b6143900561892ee2113eec6b7651423508eeb24e3de391b083009f73ff6187bf09141fdf887edbfe65123b67f2b786ba0c7976c939be8e13a01b5f376e3d636510462f08c8409f8166c2891c4d7e62a3b579ec043533aad8932b0aab576cd7acad9f8e64aadaa9a5c78597ce2fd931beb1c88f44684765fe9d4de9054ebf4b4f84fb38fdb8f06060b011d46b7d956363d4091c4fb3eb2c3d2a4e61eef5b96f7e73d514273c94bc9469ebbc7ad49dfb79fc3abab91cfcb9a90265a68ae497f21e3679faa356315a9e0d34eaa0d7393c43fae12a924d0320f93e0187715c906547d71011a04c9ea0ab6b634bc504aff560a1a62cbd7a8718cc49eb19bba6297230510109cc757b838ecda7f8592c867a66c59652265c292fa691050de8c72d5408384360f2651bba21093195a66b14864644087c39668123544983c7c5f292a4121ad240e02ce5c5fcf425f669bfcc341f1f503cb9664142673ccbd9d845efafe70bb5dd864226d8edeee023e26c01393b32ab57f37cf5b356a73ec3ca93ec2f2e41db6fd8fe92111480c33ba8a8ca49f90810d288c032483d44615baca5865dcd01accf30cfe7415cba7a180fd01251be291ed33bd4377e339b5cb26fe10cb31ff0f9432ee22e5240819b7a879e3ebccc1dcbb3f8f8581a8f6195e6369016dec00caac1be71d05a0dd8de42ad61e5e8938e8700384d2a036fc9bc81eaa9a639aec61bda12a32303e6ab3b9d5a5177ea123f62d4f5121b792ad77cd2bbec7523ba747bf45035a29686c165cd4b99e11d1666c486556415e5f7bfc50d49aba32e14429dc773476382966c87064b768678d29425e7fa35d3f36402c03d573d13f4dc66a8249331d1887b550c11eac6337b99b0af987db4a5a085d73d6ac597635773f1f8b6aa7ea4658fc56e3fabbfc07765f9d268aae94941df5a448aa093c5f0e79e57708910ffcc86d88fdac7bba16901129b81ece972e131e7730c6a831b42d0a6682c630c9dec958825b2f7d2d40671f7596042b93bd5c6f3a2721f77d84a01bd6d33ddad078659ce621697a70d38eceb0c2f2a3a0cf71d8482bdce8d0ec169f2566f4ef39158afbe8b5f1cd788a2a5c7ca9c2b00382c9c217d691ccc742ba28957af0b057f3b07d13169d815ff3b2a4f4e399d0085d4a71a433894f4efda448df78e60843f6392e6d873d8f41f277a85986fe9a28d0ba01fa38b8f6a71653a1c0f80aebc8f5dd653d2cd1d9f50c93fec15acb4509f86109a05203f40390315ab99d6a57dfffe452ca058119892d9c022336e9c480b23c6ec233adfde9aa00758ea3ceae021551d43d453060276c244568fc6d4cb4b0046bce23a5f2659314cf0f78ab207738dff63a7f3c7df48bf7cae8b1b199982457017d914dee4bf1ad9dbf25e5748fc2b398fafb2cf9b95ac66fd114f5670e5710fe0801bfc58008754987dfb2c0c727132bc94a88faeaa18f00d15b473927a75ee681d8ffa1a18d0515b6075f3728cdcfceee340fff2ae25b04b83a1fa142989436496e01cad828bfa6cde9108f913c4a2a3142c986364167ac079cc422228daabe6d7c23917b8dbd58ca7f2923ea8f400e0ebd48b00dc0bc85a0dc83c7401726c5a5aa060dda0c298be626887026f63101906fa5567afcb6ef51538944b1a3247f30608dbfb906091bd1e27b92798fcf69e409d1b73b3fbefbf1c56b549639abb3a2c696562c4225b3ee7509d84cb9695b79221c0c726be4bead08bb710f817332f8399e62f86c648712c97a41c78e61a5c9400e068af548cb4ebb3e8ca81ad0de75ba644480dde4829c7de7022f6a95b6f72043ac65704621b4aacda21510fd576adcc031b27f65112308202b68697c014347206948d8b18ae22211e7521c7520ff5e2d499639d18b7af3926f4686080932d28b7cd0faabfa74c43c060137797981ece9c7370ccf5d2989c0c19c2aeb2b792142ca42fbf631a709696c513e50e63e49f58d14b9903cbf23b878b928179d2f9def9166e03d8cf494cb37951b0df4090de2a99d906adcbd96731fb9b49e6daaefcfe147288e77c0f0830a09b5a547351b4b84b0c3ee8f4a106cb3e9bbece29b09621588f5dd0bdcfdbeac52eff08f10bb3bd7b63aae367353e0d5c4de58caecd226ed3974f49461286c38f35eb129e812ffb05e94693238294e36ef24ba46332dbcafa54f9decfbcb55f3297d4f5de9510e0295409820a2ce00da8225bfe3f7716f32d3387c743bc5ed6e70b6bbb6a1f874e3a4baf7ea4ba87e642ef93272355c61f6ae98e67f6dd4c43465d462354f5c2e446c8c55f8511dc0189d72796342a037b43a1e451920669bc5914958ebe10d80f22b7294c6d563e2f6805c009f5f8615c7b2b86fd5e7e14d126542536bb495745388c96316003207028b48022703a1f6afc05534f4985cc5ca487d60740781f491a0080c33ef3dd666320bc390e93f156a6bd550f676750840d9df8afbaf879000b93133ba841f5f255c6eb740b381c4512df836168438101d09b6320b3d3428bd6b9c6b28ee9e5384bc88c0670d37e06ba5c235db8a522f7f6b33f578907fdf302d9b10047c26e1b7b87d0d4bdd40dc3004c591304d5f9e6e77515fcf3eee82dc1c534ce155ce35b13bd0695f74465c4d02c287a7c460fc2a29361b0e5945359bfba5ba18bd37ccecb0a32ffc0d6949af1eac50c2d82791b9a9e3e9315582007ee2c20c4078e7edae2b251f3ceb137c6de01f9df9b907ea56016ef03b3c3c7a7f4297110a6d8ee2a76ace38d4ae46774b2be8919be909d9a8bd3836b21effbeac9e587ff03e62e2cb05900e3db4771f09a834e708f18066c878e3efa949528fa478d7418dd815c95151b32c18366570093d932c4414d9fc8a483b6ab6c6747290182cf149db5b0ad4c4dd986155ee6563b62e704e3b55f32f4d8835ea2f359aecc58b1d7c9cfdd5ab888f134a308de2dc16f6a6e7e4bcb20022282fdc40929bff4f59baa81de1febce13e560fca5880ef273ba6534988f40bd617fae75e5188eafec8cbc215ce7ca0de61b48abd4d4469193c87aa44cc47bb3b42e48329fdf20e836b8dd5771299f75c7429f303fcd128fd42ef45b73b4d7794ff6b905e2f363bea22f6602bda152c21d6c66ee0531f9cac8b16dafc535ddb6c48236be954b1abb6e50644b46643b58fdb9173f6661b0e64e1a7610f7c70c25cf1df8301911d4ffe2aa6ed7005f3331b91bd3f356a9879f9e85bcfe6893bec79c3b9c7485b2503ddfc0ab433d86d023422bd69cc90bb6bc4b122f89706dd9e1875b19e8c71d612eb7cf6de750c9a2a1dc5a2fa12f6182b6c8ac1f1ed6428e557c3a047989b8f0c6d1877b3cc50e73f97736f97c3c4eff930159dbae14304c62b2677979f9cd3a54a7e9c00c9c7045c387a4371b35f2156de40cce559245a3294dc63f0adc6214de8f3c71a3f971f0cf0621f4c9fde641e1f21bc15e87ecd8fd07009c6e6bf476ac3f8022b7d0b69c3d4b3bfa42621d324c29fae576cf225ae762e802fb3b2ba6e7e978cf222c7d43e15f39123f156a2a6e7228a1545924c6c04f3875fcc52364b90d277d2af868cca5c7650d4548edce6eff9914c415a6597690662633d27da8f4aef1d75d8383e8e77dddfde88a34e8f72a500b3177285a595a40ca0c75b9a99b217b80cd34546b69ba78437b8b86f8fd7aee4eee534e48df55fd8e7dd1e015e9a312e0d1280ab7442951e587716820d135843efd45f821415a8547e1c75809fa7b1e6538f0be787b6254ef2d35a756827889da5639f6a030130ba67c1540acc7db9531ecdd2462dd9c789b01aa588bab84022b72d8351c05dac84a5e46bd6c0c765647aae0d36f8f7071d2c4c2df728bba8175cbcc6ee7e47a2fa120ef4bbea5d81bfad71dcb7f17407014f9e39cab7b003c621d36f6b635d6c86aeab7251f4684f46186e1739586bc9799534fa100d25d484917b77e8eeaed466842baaea927a76de8fc2c323fcb0a9d2f6c015bbdded4a8e80be7b2a77ece07cd4ba529e9c26933220e1c9bfff8aa33cb7f529a9c5940ffd183fd82f6528944e2e656377d7e0122db812b106c9d0e96ad15632b05673e02eb5004812996521f9665bf6d2670893f69306f5ee5b53e8df6885d781b79ce1d9f9e5a41a6655f0f4ec71246fa7c4eadd29e57ad2473f87d43051cfc9eb29550629bc229d82a9dbc284b77c6f8b3983f6dd909e5f3ff6e85496e867889c26ecb6e1edebe82d65b479a622fbc9dbd1df817c62fe33959098541d2f4c2720ad77a3068bf6e95e5338c6ab706c7e2f67a8bc378f9dc20cb239644ca1b1fa6a40894124240827d18ace541b2a3e7cb7388f51268fba8a2df988afe541c6cf5e86b8bbe7b6d2572d708fad84e9528012d4e4f712ce59dd2dbd8e60bcb27e6d02991d3c8dd33d2a08c6f41c66f08ecff98d768745a8b7bdcb27fed779ab9d32458d6be1cfce9e3593b8c23e0a5d0e3f0d61e2cc4727902c60edffa96e2be954adf27dc75698c42abd3aee883684689d4b43f9505882e8e0e6274a2207e50201a8a0875c1df2ab489ca291b263f3f15bf05f74dcea578832296d4f47ff7675662889e1e7a3bceb746ee29103f8b61efcc5c2815ab0b3b0fd3869e1fe9cd9b9e60bf5a8a227dd4cb8f8ba7702585c6123d7cc59f726cd3e544eed703b1a870e9cc2dcd12e078186fc6d38e861ae2d921138e52f63eb279cfaf4ad30b13c90d52f5010f0624868d5e4a7c723645b9ece28e5484bb293875a8fca604c85bdc6a4f9024bdde4357bc5425921de9ec33089626b32571c60e1169359387a3419fcfcd389b2230f2fb3a14c1fa325ff6be7f92be4caa6b162e169ea43b059afd00054a533397b50f3feac17674539977ed5b3a48081298d8f8b015e7d9d4c3f6a9e1265042426d03f09a7a89d38ea9c5ca56ad1734dec26dd64904fe76871ff91f3923805975616a66ecad062a5d48818594b35913cd1fcddbb966aae3dbcc059ff96846a49d26cea3641e4cbb164c5d60f30decfcd27ecca19b141598aea1220a3483df6eb529f7e5712b26c257fecadb23edff91931e8d0eda9ac4a493b66c444fd616cb7274b6a961f6b6abbeb67ce7b47deed9a249d152dab3e8f46c7765de28c608022d8581c7c0777a46401e4b46fb20be4a597bf28ff1291996163333be833b6f40e7545ed86690fb03650e63cffd33a6dffe6b68aeb3213135985ffc96fa6755ccac0e4c02c773946e27e4644345fe7cf81c89d53932826b623bf432d8a21bb22ff355dd14203201199a5a72fa8c7677c62f602f8bfcf9203f1757a46d1dcc7ea5643bc0f12c1c940dbb3fc02259075d54aed1d7e5a8f48679761a77768105c710033d92d5dd3b189d7cb0060ff937d46259e700e10256388cc8c1ec4da8388d23da613ad1a6618ac92f977e499c458df7dc3aad190badb77e084ccc3ed93986e7e70e0addb11ec87a36e9d04583d7b19b25c1fc430d9785fdceb2e107ec701fb95181eb80c9318fa38d56e8be5c3b95fffdf87e958aaa69ea45f8e7b4246c3f3fbbac918216d61fd0aedb5134f912a9d34d94bb5f43669dab331cbc8f294fa573edd6014662bf20bb86eb6757fb509f3cb584650d019aa730aac53bc2b917cbdfb631465c61331513163c2d01ad1e6721e8efe4aae9b858fb2fb0352c006944e067192ef4e67fa0e2a3ab0fc49e200d3a3caa1c1a0c7d2f227a919c0d4c7248e98925ef3aa3fcb9556b6507b7ed41ddcfafb3959334170653abf8e1e2307653d1fc1b9e26fc95885f76ed232cd25948a911ad79016aae1d21d0eb3d0a4557ed2482e585632bc2b4616d7439dfd89e296374aefcaff3d0868e7b87b1dedd82732b0b73ede151c78b8713438ecb1d226340450080b7412a985966a8cb69aaf8f811e087355a4f76cb371129820e6afb3560329eebf0854cd70b31bf6e3202effd17866e966edc9778f4509001fcac4f4713bb895e6d0c7f16bd9cba68f4b6345334b89800bccbf19d723401a0ea03086085b766f106c0cf29cc9c9b87d00eb43a8b4feb4a2d588cfe48e3841fa734efeb9c8b1657fdc512003fab50c374a8ab16754beeb79f396ca14a76a905d032448f5e9a12138e649a55c582573fe1c9c68f782f4fcabb4e73cbb3abd82a42e0a724807887390419f471efd9e412c5cbabba0b75c4e6f04800933f5c9d489a1ac9edd20a0bc47feff3a660e96eaddaf2b90a7b3c6b77882102af489ffd8923a31c23a427429f9f800eeb26ba653f36c257f1d33aed12ed8cba45f9c3bf18443b63aaabbc15584f78cc6be12b6d399896a8a34179b23e1dff395bdcf8ee66865fe9a5e1c7d83f44a9839698144aea30f46e34f32caf92f44383f25453126de338b6a5f3e0dbc2d74f80bdc8799c240d88a83200f867bb431fab684f82f2360e4402efbc9e24e051ea847a5746f91214d48974183788ea329f9064a360a0636bfd95d6c308331432e1c39f5c1664f049a3169c88e09139a0af95f99603b25ef1a72b1a57d89fce76672c71be7ce2e4d9f2a183d352d6b74bdc95cf60d2caf6a4c0314efa64970b14d316a1036e39902fb7799d3dbd804bb06d2963e850561f4571ae9d27f34be28f95c3c5a8427c98a7f76509772a9d6828dd897e71ff0f00882e42024c36ecb8d1f929644baf3e85f1da02e637e2fe051c1ab0096d573b4ea304044f8cf5b239aa7225045dedafd16860410fc90106067bf723bf606572be0709c4c6d76834e2a401cb9fc17a220204bb5b76aec0501042d8208a3cd800875ebb914e50cb653cdf7a71d3990f1c38240760e993e4e0cb68aa55343e117dd392218cd2feb152cf1a57e82430d9568eeb64b857a757001720bab87c563a1dc57afd0ca63c4beb8f3f2ffe82f420133ed357539139e97e1d19985b83b569a01a3925b67ae52a549ba6fc82cc406eb161f812662be791fab1794d7ad58b9b121b8f9984d8008101e8db1303d5ae46100951e3c7c2721fa68ae5a5cac5e6ca0086c8bbe442039844867fbf6b313442e80f3635213032d5958f2341fef1af2541b88f3e0200ead9b7bc1f54cc93fc704a1a8731be8e516be244cbce54704bc23742713be9042c40f3aaff434ad99fa148f3ee18a793828703168212b8db46fe98f6d914610cc57894181d3c5d91bde98c4db26456db4147417f5fb191f04476213c52e0525d5e08268531e1c0e92f1f26f2897ac1f1d04fee176d43e65e9401122410ca281ae1d43574442698254cc1764fefd1a6acd85a8c4e58ac30ee1486c3eaa361431f756151539499ad79099d5a999a6d38a41f2b9394dec3044281e08461b1f4f07e255aa5b2c71e0194bfe7935d87cf767f14f977507a05b642b665004bbc01db3c544ba2feaf767595b9d62f77698119c1c9c87f1c03953b8af113af1d99033442787bf09f0f628d90b30fec2c2c1d3af7c4d0711e5b836a411073a8e349e69d2acf4dde441dcb4a6ba20db83d15a294757fa65d15893a8e2cf0ef24efd77217b22ffa0245cc741c7e5914d777770b77ef574a3b6be62d58b9adb85497e3d5890ac0dd504601962910156a4564f08a4b24fa17a1fc492dd53139c3c1af88527ea64eda32be9fab4251f642f158eb26c28aa63bbc7b42f55386ac4ccf946f52638ac48fd0e6350837bf12d088c6d9572b79a62a7f2f9578aedc76c56d05eb5a19b357b76b23d7155774ddbe9c3bf0a55c90b681e6eb2e003d36416bffbd2ae213dea6f2259ce0a57727f55efc5b43cffa1b3199930fe9f853b16a29b0888ad0e02f9e349554291c6acf80cc32dc473927de39682f9733ddf42af7e523358d0ccdce82fca955621ea7b66adfd692bcdf36c6117234758fd96b3327395b29d5d4955b0d224ded8b9c0c6be6d66f9d4301a3b07d90e8083785f8677be4f934aa52aa3255933fea4f1fe19ca3e25b46a3da689e4593913368a83c39abe5b209dc56d3a11d3d562539c3f884f9557a514e06052801ba0f8d75cf3ae8c831b91fb00a1b36e04edce6bc0731c17dfd0752187f7817ab7d9b2f856843a87ff876951ce1926297c79200ff8241530e490307c2ed8e30bf9a5c5429a0d818f40a084860084d67e2022d91e7eb2b8a570fe931dc524a810e4d92b0704baebb191a40f9984937d601f65e9dda3366b8022fa125e29aa2e40f8660f4ea9480363c455daa00188a7df3ea1b5484c093133555075aacabdec056161b442cb4ab133ebc10d1d7a488939a843b431fed28080294c7bbcd5157c9ba22ae725831de59ead6ea6dabc2716eaf32dc5ce29531cd8fce5f051fe0763308e37407f9e11d603f599899189056968bf728a13652b0fd7f0726e3f691a49acda2ab9aff64bb3196e6945f7ea2eee6ac70534b14cd59cbface1ded43a7276b8fa7bb36fd6805f03a2de56af247a058bbb15ce5f182aff2a1ac65809e81c11aed86c9671e1c96b6c41f519620aebd006c25a767d61d3ced6c7c8f7e15bc1fc9a139b74618491a4e3416876412ce6126f1226a58663f7696fd88e01482a14a5c1da3a71e28347efbe22965cd116f5f5f6dab7695e332cb0b76cc350b48eb6ee4f17bbe7e159d4a4ce1e6336bef54c9ef1881fa3dfe591c52f41a2b65d9f2c32c30d496877c001cb741ea69b0759fba7b728f6168d457418b763b3e888ea8776cefd6d75ecd10e129137f93512c8cdfc0beaf64ca9bbf7ded4dfc68b17bd7b7105811dc2397785fef1e9a4df1a935951b8ba0c4f90ac081a6095d906a36ccdb01d61e44b8815d344fccfb42b613b49cff4b49a691b3b549f5246c3a9e06994dce288825fea4caaaa9a9a187d77936acc21df66852fc24c7e4a09e70284d0a00916a1df4fee6b9c6495125920fdf76fa9392b102dc338d933b864a5389ec411d0ca89a40f19baa24b5732eb934dc06c94b8e8292cd18c119b569c5d2422b565009749dd0376331a7f7c8681ea9f5342fa6bd20938b1d655e18abd6a7a0901d1ed31d8946debd35cf3c918725120d2a748e91defa655f83697a4253e35b43c5efa2f604003fa400c8a56f88f675302d6109cd20b6f098891d4e1b8e5f3ecbf5d477f1d821f8ba9319d55579740ef215ce56226fa29234684b09eab50b9de50cfc36fc8ea68b78bc62d765d25a9f59e4d22d98b83caf561c2d0425808cebd3056a85c228ee429aa9c10008fe667188a49b95112ecbe79528f4aede7b00504452b692fe221d5c289250aeb0bcc65d58f9ded7a61708427c8a18ccd0e2ed4872cafda884ef11a719b6bfa61d362dc4cdfa9638f00b8ea653a107a9f9ae7224c711cf5f62467fe8eeb38309ab53e023a0548d6250f02ba0ed6ddee5f9047c3c3e1422c3914636ea76476b24b6ee059eeecbf6fa897750aa33211c2081fb8510c26efad931db2ab591e4a9c20e716b58606a0bc9583a606341dfb904db55c9641d7e875472d43c46a4e5421d4780d42ca686a9b36155c99b833f1af1c0136a06b088db82eeab8ba4301ba1165f81c800df1f1562f452edf7eb8b99a2b60be7d1e8ce614ed2c26f3324588a659b288b6d8c2824ecf6f81952fb134ad19408c34cf87e2c8e5725f34de1d5cabf19399a57bbf65ce955265a2e0e3ac44321d8b97553a1a18aa06db3de31e6fa6511aafba8695f59022773c2d19e152e2b58cc998683e83386e8f8c003707c1b9f9b1e40681c025d8716859e4b6da74373a944c8281fcf649526e8d65d40791d31defb61854e503669a7c0628b6f40f40f7b7a8715a6ea0c4e9362621abe3442dd3c359127c24cae017996ac04f03605008fb6765ff69e43cd1e0c4b7f6f14322ea6e4117bfc26393d1ef26e7bcd673d3ff744db8fcf2e836bb8e94424d7535fad79f42de0675ee4397170bc9f78bb70ae4a0e2b2a823b67b8c6587785ef105a481305de5e7ee0bddbee6b2c86d935b9e3146967f300f6e9894dd2416ee622f0dd774aab4f9560bcaaa2f731d3ef8f4caab271f7e3e00275026cc2c484738f403c3863eb7ce3ca2a9db7ba4c9a7d7a8c83af55c630c5092dff65a5f8518eb78e17718b2dd05ee8c3242f019e5f37410a4f4a87e3df90ba52a99000616a4af5eeac16aaeaff5d29363b6832ab36db466fb2139c08a051aea84876baa8a0eb73bebd2b679ca7dc7087d7d7551489daea12b48563ebfd041a2fd7d87bc18b210f49c47151cfd6fcf606ee9a1cbe13cb1e81a898b7abaa925f9b91c94f0fcb942d1627d94fc83ea62780ce00d6139ad5d25d8df30b49695fb3d114735cabf3ba630dd70aa79df6726308690b0fb075e90fac9966233182f30dd990717d90a8a46ad0b15f4c58d26f1d22875facfc0f41eb08799c2035baa9e5f03bb602f7802092fc340b2bfced370bd6bf9863a483545be3d9c8a6364163e9b0970ccd1a0d16838438b184088fc95a03f2e96a08be4d85ca97b6dd7ad3fdd1e665f48b7dc1f6c9cd68aae21fcc4fa2e7ce40b00e169c8632a0da2628d319dc75136fb9ee65ce7d694877065a40e1556e9d7a47cbbea30b6c84d83e2f554f28f75d04c497bffa2547b66f77d20112ba3009f22e98c3f4616c8d6e754b615d6dd9f48448838dddfb2559f4fa2a51fe864b6e39550cbd90449c9d517eca31159f720571e34100198dd8f19c0ec89154f2f185ab7c47e232fb91958a3ffec1665caf8da63d330a6f29120a4d4fd60c4f7e230b3ab5efa38623449dfad24fb317222f927231dea335ba1465694f106ca32e0e638d6932a7eef19cb0c37a9083fca482cacd464325b1b3163ff42026478a9679fb8d5cda119bb4b1ce856a925b6afd506fbba8d48334f26634392b9eee2f071ad95d4f6a7790e217028f829e3b90f4ba4a5409e745c7a5631d42b990ca97b5ca148026259df568a0d5ed91c6f3001a99916d1c886296b8554fda861c7bf576c7c56ccf1d213c119737a141a86009cae1c05b469f55476e233d72c309516c722492a8a3f4e30cea95b7a7b660fdec30cad68847abf3eec40c549177bbf73617d6b535b8052f9a7805c59451275341288a38098cb46769ecc9f4c0a0cb64842b18f530e44dfb39a6d0d387db83afd107399f21d1c536b74667a27cf576157dc6313e5bbf89120381b27801db108816e3ff8b4043d00e0cc19419ee5393ee4d1e574e564460f23f41c234c165956e0d730e9ed2acf8838a6c42c47d5cd25784280a02b4eb3d457bfcccf16b37ecf8ecaf4d9e803df3f53f70db3717b175013d14c5f406043a80b757529b7e32b79a8a1646a5b96f078796c13877a20b0b19a04c62909326d0881f7f7a5d126e31e88dfcf4a4463d7e2d6e2ac5fd78d10dd6fa0cc6b2ad25b37d8e372876f67f303a16e1d23e06c430d56c3ffea5e931c55d44bc1c54a1ee45ae695adff999f81d3feec5cf949e9e127a88793a7224443f18afd8c3199e7e7f6153bcda17608a3551a1643e3f08748a87ad6527ae3e3338daa83f76cd0b13b0ec89c086fe25c0cb645abf25aae9b9168d27b4e7c16ec9d6b04394d2e3dd1a20690b6ff874c0e1eb7ec57f642e8113ff1ed7215537f0417cfcc16e13771413ce21e35c033470fab983dcca6ed3480cbaf2d50215c4b0a732ed15f83d919a76d6b8baa7d7c8f936c12daee1753c9dbecc18a1ffc3a1bb8bd9bb953a21ed0fc78ba4e8b5367a290545a900e9b73a90e2f8c0686c074596cb14711cfdf8383621bbd896a2859fae22c8aea0d919b2442d090d468313cb5aadc904bfb13da74fa1a7642e6608c5b7300d807ba05582f2c566c7446ee3cdcd92d34fa94f1bc7b3c53a635b976ce18b0be31bb675b4be0b07c2362c9487a037015af60fb4e78a9cdce76e6d02039eb32ff7d28410dd09e48cd1ab86317abf94110c02bb6ed1b021d67368a79681d2d4a7663796f649894d08391ccd7b575ebd647f5bebd0262efe28f01ec65da2ef9f21f58cda27465505c1992a9ce8e28373d37021fcc248b8fc90dc51c1d13dc90e1b83b6fb4d59edcd132dd08c85d3099cbc9d5baf236cd05bd95ae6a1524e8f4f818604b9c42779741e557dc8855eec5f26a59b241002b79a132670afda70e7554f9bc73cc8acb76e41dcc656396e66b3192c7af4b36e1da701901d7fa7c852a4ee803b9f4fa660349d5b0d8407f0580d64f10f991436158342b3445ac14d6e1dd95188c37d4a898d3da48c28b56661d543de4e9543622f0616094641e32e080d442f813f47c0b5664590f9513488a3c1711ca0c68adf0c25f740080268aa686a98129aa3cb0b453a3e87c9479a2a0a42c30dbbc06d6e79ab911ca387a956e674cc9ac564de833bf693830362eb1d8a1eca8cb25bf0868e0f3e673eb2d0fade5c9b5b61d5ea0680a0d002029b3518dc1b5127697d83636bfb6ac652d115367943468182ab13b57090e4c6dcd3573884a204f170c17ab2db427c82879a11b7f6c6ea41b04f15d3abec81648126d0cea026f4830548c94966c11b7c84d29cb5e1198562334dd5a276c2bc06ffa6138a5889b5b55bd79588a71627c8a65cd41d18607edd40a1c1c9edeea11a5802de42b2d890503a8bf25d7d69edf104e8d13455c996b22fb0d27fcaff140e4b260452746c7a122dc8b7d95b98cb8733de85ddd2abe0d166776ec7aeb0817058f5361ac121ef56d22d2543dbdfa9054e5da76dd9bc1ad784f12ff0d761fe6807778e68f1097f1eb73f96628b3bda7e3d24845887f1f952ec0460daf4dbde0cee36ead67d9075aa70346997d3e1a615ea701d54e4761f7f03b308671795284fded767b3e1971c9ee541a8bc1670edd86ed5d1f9c4dd23e0969bf4759ee7d3de39a21d27ab05093a578e1796892ba444aa0ec2159dccbca97b9c6be70c032b54b4572618b353050c270b5944d60c52a93be7bc6aacf5594e25c77d1f1c5748e6205b4128b80c6510e4ade5ad5da823e5c3162eb3e4e820226444f5f3511221129edee554084612fa6548a668c305c6a2341b4a983075023bead6e965e85b19b2af6f5a3835dbf8ecf9404495e93ca3542ac08272b61441b7e6bf3896c67e964e7d239a8772c4340cd1c9dd6110b5b79d1fe3df5d7b08d4016db9dc45f1f3f823f83832875bdb027f680c3ef39b44b53e051ed3d6abcab811b5a1b43fbf8135dabe9e3e84e0191925f2c7c7446768c0d60df464a40687977ce291edc51e5e49677fdaa8d005790cd51d7096139d773b3b79e78821e89fdcef0ed33b121a0d5e224ecc214bf437b71a3820e859dd1e9c335792bdda61e698ec706fc590cf0e63c494d4274d9792405ea573f8cb860f5054ce7af2bd11666671af8b07ded9f2f19015cd3182f1543b03bd2554f54b5178f4aa59ebadc21293b9320590e528a744bdecb2246e772604fe341b68c8b8ef7fcb5cfa9f9f98e584c5da3a86e5a913a12b9dc34695175a469c8a2a8bd78c86e7deaa225ff7b7617c3312ee7119e12b532ad16c7d21055ed8601c2f374c9e133a270c3c3b387b1da074021385a92b33735b9a9e613488c724f811b4d7fa6ca404e6614286546f8d23f2cb0a3ef7d3e034cfa78a538c3945158bd277d2d611efef6ce20893edcc682e305b31ffb55fce4c90ab60f8266785f11d985a3523891c7ced6401c9456b4cda750abc6cab6faf700271e905c33713f9b2e52f84543fc405cfecf312999bdf2028665ca4adf2e28e93c31b7323e992a4719f6399a17888496af4c71ec98629fcccf99c085c4f770e1037299a927ba118aaaa928a6bcf9cb4c8d303bcafb286bb900c00306bf4a18a8ce746d49e06501ad94e14ef44002b33544f8c3535ecfe360e1462a519738c87d46b10a629fd14c67346b602eaebb8ce2715d55354bd8c646178dc15a6e04656b2ccb50a94a170f4af321346bb2c51c82272c54a61f4815024f3d500fd70af8184ed1231d7b69eeb0d6f3fe782326d8aac54fffde1e927bb1a73cee02cbb8203ed804cee95e2339663172dcd00d3bfb4861f93ab88e2236277a6995f711c3417a9b8c0eabf0d7517494b7b587885ece809bb067dedd5a5f6a0bf2a2b16d8af06b9639a25f44f1da5814223fd7c47d470c9a4bb2302785182f67b6758d53387c5f810c270e2e44c368d1d427abc0d23213d0f1b94b0fb8e5b6b81aa7ab118b21fbb2d16f8972a93e0af7b785d3710e1dd346d070da63e8aee1d1cc27ab1d16845b993e7a17ffb217cb3299bfc66cd6085358ae855f416c5b5dbcc4aa5fa4634dad9a95e60198556c32f783aaf267182171805f81f2ac837a0832c160c78bab256ba5f2eed77f91a20b70d51f981a85a751889414da6eb13f303106c9a6cf959664336b0f6291edeb4cf15374deb67852f1eae9bbae7e9e7440237368760c64a2237185d2774b12fa3d10f9d3368e45dc8dbc9d1ae3e2f424410486e669a6aeb61dc8e02f631a9cfd79db1ac3bdd496608944dd5a8611611037fd5a5b8b0335baacb7769dd13e3933d4defac5faa4eece7d7103a3c1be6e982871618931e3dc37f81947df5f43c5bf69bf43db8d009488f3426b8c6c9d41a5cd5197985953e01df344ee6703fabb320ca63b2cf128c4287859080464310acd2cc517918ebc97fa98517379c3ab789b163896c5677f635de4fb989e7c670875f87522bae6e5389db79403a70f750e9e91bc12af07fcd32f2f7fd4729db1fbcf3c3e50deb1994f6664a81b1ab051e68631db4ba8516173f678c9b4c5da5e68a1a5e9e7d26175683e189200378a2c9c35b22814f80876c43c827c0124c43baea67c5824dedfa48ed82c74fbf8e6c8893265cd7e90919aebbdb5d1806b0dd55eb3944e1a82335015340b44a46415fb6fbffa1b4ebb0af23746049c228e2846dca54a6f9c60e8156068b2ea21abdf9bcc56f18bccb84ffe8dccf39e1cf8c54977440b2173285c926e831a1fe0de933eaaa061ca68aeb834bcc2734defc9ec195944b770bfd92fbd2cba2266ec102f78cc9fc17827b2a07ba57fff44dd630fe479445527fe102de3c5435e2b045d6fffac7b5cfcf3f76433909992bb8ca53e66865a61104c7a8e8eb5ed3d383195207f1ba49b45a7ec810e03a72ddca7edf48c0559ad4806755859d47c4c03f773683dbc00976fcf5115eb6aff19bb7550c52d2fce8e1f8820d5df5fb15c9a1df432eb47c86a2c4c2c3ba9d37e64c0dbea067f96e2f4ed1bc4a747ef601724009cfece5cce6acbbdc95fbb997977aafceac8a27e9ea4d1aa8c2cc45b0015969e49d7ed7836b1acb5eb12024c3711ae09677503812d6e10b042675dd16f59aa5aa4b8467f90d235a131ca63bca4502d245688c0794d966918b24b595def39a64d997c375f7b6634c62826e8c3c82e732b6a48d996aa83f481c65ca11602f0b502478c34873c166ea9008cef73204c39730015d14a89ab7cefe6876e19515cf8acdff9ac5fc12d03ce68fae5123ac26f70a5019d584ece92bf40e7d62088adab45474df010db1b5e2f782c53bbcaae1e96fcca11e5008db5b75318b780d4e9b008ddee7e242a679b7cabd9082965a577f85995a37a577602ef5598cd75ce7739adb1a7661b66ae311f4cc7a79334ab7365b77704aa79e020246466b7b6738710deba016cc574654f3f306522426dda5c8855dd087ba256994a976743eb62041fbd6f47dcd9cd3214451d56c2fb2301b8bdea9922d1221d4c1e334420214125dc2be26d2c62c10b2345e6f4fdd01b72a6fcbcd7ecb53481990818ab53286df24b5243713bec832a72068250e7940e076c6cd3a92a2a4b7004b5f2fc8a9a73b50eb95c937a6211c5ba712db5545834da67a5482a346a339d4643e51f2693dd7d0f7f19267096a841471cde7360bc29fc1c82a5baccbf058bfabb64dcbbbfeb045e53f8a1229a142523b7cfe23495a3255d7be14a150b6065d03a2643a1e8f777773d3f4e58c08f414f14b886ab2653d1faeb93e5cdc4f01e3ea7a5ecab33992397baf96250bdf31de9901e1f2a0a5c42e093793137dd511bc8a42f1f527be5fb23d0d30a3a9c8717a85cc2a18a3e3d8281f714cedf44df7f2834128315637a54e762876d1e54815274d8ddc6bef5ba873649835bb62ac423f18a30ff1c7f2fa311a7a28767222ac4c24850ab775cd260910ae2a7b5bfc549be227f62461fc412577245cfe2ad498af53368e474423f81a1ed73185dd6953456af0ff199e36f2ebe95d928f71e20b11eb0b6349b360f1afbeb529dc45a2a6f38748891e71df40570d95c2a7fb0f5907199565ba1088fef13fe32df80377a7fdd2518a21243b46dbc2845c18aafda6dfd55c02b8e2f9b8c88189482d8708e25bbb5887b53ed0b30a019ded5470e003f0f71f7ddc6bc90a5623f38881909ee801fec19622347cfb5aceffeb6a8fa94504836c0ec2325031f2553baebbc967adbe3740fdcd5a559dffb3886f922397935f1ef76c8a5485963cc635406e51f00c95f0d3be77194e498b700121b5021f038997321c1878e516988100f87ece99e2c36c8aa7fc530112fed4b3d99c8a09be09e148ca0857e1adb81614aff9a61d1129fae0ee699477ba17efebe2c7ed3dcc87737a676d7fc2228c10173baf26d8fbfccfd4016ea7fe6a984166b610f7019ca29a696daba1126b77d8264434564f3fa173755cee928c57abde1cdcd411259ea762c3c40bf76456473f29f0d169cbc35866588ff03f4b3fbb021b0427e2677587ea931ed0842c51e8deaf22ff844d8966cc453f8bbac330003945c52e64e048ca514abfc84e8ac6b102f75aa81aea3a25ee3ddef7c59555cfe3c9f68d8c1e9814153b4c0c1aaeedabb9a94b9e1264daa4a664f4f244071ed29993922de3810bba941ec49ed30db3d7c7b9c228875f4a0b6c526f588ea8c4a975ef24081200ef198599e91bbebb6f4c759a29c84740c48007d77a400c8751c12c99a012fc8d679c12917aaeca20b91cc34106b61d9365d63e47a4dba6b7989572f8f50bb0b86bb88e6fb434660637d5859f092ca5bc5cab489c95daee3b17dac285a8dc341c26516b30abd5c151e4169ff8e5de61f42c40a0f56b957beb1c4c914e1213dd011c331661b22a5dfddd88b6ef82786eeabeb5f20e71e0e8c4cac9133ac3bc37e0a4c7390d339f4203357a485aae3e1a9b28248e85a1ff8eda85c31970b128335fa642c3c179a770565fa766ed8cae8335350936b1f9d0e1920d5ff1d618823680d7237de420c2813dc22f49f9eecef609c92278245892b317461c270161e70b58c55be26c4ec1c382fb996b2d5d402caf209e7004eeb9696b19a68c35b21b1336e92ac12072e767e22241b502d3873e5f23bef50212ab90e9a869f108d932e680af9a0ed21432647b600348d529453e9c5a6bc8d5d82008c50e58ddea5a75aa1a231be89a8df6fa2d240e0e8343c40a72f3d3fb55aafd2400c1fe16727ec937c5014f64c743fcd89ab7a7ab04cd65033a9b5bd2d69b94cb0660fd3447f41cba99acac0e20e5d72a0fc5c5f6d8d12c541d6583401a8ad5c2178088c26509009de96ddf1088b4f2615e3a927b1f371162643e3a4c9541f193be278f75209681a918eaabc7bb0a29e75065c9058f57e727a4838c14cd00e33c7ed2c6287c7599e45edd76bac9ae9227a8bc242c892cbdd8e66ba12e48f52afb3202c3d680ad5c99468d4bdf31cca4e84ea075dfc3f9d5f6bb557c17257569f3cf0c1c587bc2ef5492b73a7a493e931c7f978d73500aee43b32b4dcc4e14dacb2e8df490fb005e4f24c1a3eb69b9ac642167687398c491b47757d6f47a245db9e5ea6358bf3a9b7b2764c2556a12b297bef010b07d94a6e8893d67105653134bb84fb518c2449ccd2cabe0e4711c837112f1d825c0fa4aa7c9bdfb698cef01ac087130acb090c5776102d844f54bcb1f222a98f0c9d7c45ff9dbd89c0812094d3f582c4f0318d9484eecfb93db9b834a15c51961e95c2659215f1f8e4e10430c5efe8d7d8f5d757c18dc6ce7426c6b2d1ceeccb32c39236846de284397528e03a835eb1557016d795358edca9663f0acd07305a19761fdc99c96dbaf4c5d5db032e9b731d081831ac9954697df519d4ecf39430e38b69c397dbcdbed230879a1467dd548537aff1f8e03eadf1b8e3f8382b267a9f1ac5dbbedd5d375897cbca0060038255853ccf5feb2b826e670bacab2c09ae0a7d00c253b0233522641c69f786513a677fded34662aa4e0457df0a6cb8bdee304b74efcb25764505ad8d1a56d316dcad265235ece1687b091ff53eaea69d71e7bfbbb7d3184a2a89af46c84516247da014abe3190dae413ea4bd2b9cfa3fd1e32e6a54a7eafb0b3259fe05e443d71838b43a546d9ced846aacf4ee8a034bf152c297255ee6f4b6dfc4bd3fdad3c1b9dee6093d1acf34b33cbd2a82460638018723d5d5d9addcb6769c1c425b3973fbfc12772cd8e54945f24c86d2ab9a7a95be32d01586431d2d8ea91d95621420d2eb234d59e0f1c6fcd7aada3334419e94e8e2c28e1e993583ffb1f2f70f40f630e143430d23dd8780f009947532d440de99fe280b21c40fe4c7d54c0c2be8f8c589ab0e41a5929bf854d762a8e5b1aad35ea8d38958df75fa2f7a35960c5abb5c752560d68610acc45749c9e0c77f2e5b8fe3fe38cb28bbeeafe4eeee2019ec21cd38b214c8aaf0e3a84b54ea27d214458634d22c84310f3395c4f4ffc6ce690354ffbc359cb75ac2ff3ef65f6355a5bd1af04b677cf20908286b0b517db3b0db223df71cc3e15c3e172610591cedb3c3c85b026172915258d591ea00e4711ca9279bcf9be68a265d3e1c624572a4738706067b0e073cfc6c1949ac5da94461a87a6ad48bc9fdc69651520abaa1ea4146ab5c929265b3021af25abf32fc3ff1c8a385831974bdcf820b1c05e0a2c7802bf2d4a246b014d17e8ef9584c6b58a6ca46d0b23ab472f894146c32d044749d6040e09499262418497b9630406a840291845433318b04a928d2945b42b7ecab275239eb79340cdf08104176248e96a1e6bd8887a339671c33234ed5e5cdf0bddc4a21c1979173b48cb4c471fa70052072ae2e896c505f8dc24606e4a3fb5693316dce69da6e996cfbbc7b4d37de25dd6a494314d881bff521e918170c6fd0d4a8a3acf184bc7bad2ecd5c57e6db4d3c5158d31cdf0696e235b774170e23ad5efb6ca2a48f32c421c5f10e423797f69752fe28e04ae5afb2d9806a7f299511356fc53fab69fed386690c62100006aeab2a5c3bf454affabad0f7447fe63c911a6ccfadec3493452a23c7b3acc5f83bf927749c2869cf5a3191fcc28ec863dd8d7ba084ccacd6a6f8636aa6dd3edecbe91cde8eb88e327ab85f7a98b4dd47f4dba320a438b37ce535dec0767691e77b865406c93ca40a72afc5670b7787dfbc07581c125bc7b1f583164a65965649f687ee55b434ad22e472ec6836b31512f710d26a549ee6e9e125e083e7a8eb80e089b168f0b2cff1c9d4384e9b8d4d1c105d5bfbe210a78f85bcf991400e068cdd43f3c4fa1a8a70ab1b65b7a553a64d4a0226882e29d9d5a0b4c8c124e5d17ef3164fe3b704bfb5d20f95e2bf9def64b65c28f08fedd0a6e26b14e31f05402d08a4d489245beb968f057381e51cdf77a7e086bf7fa66215d67c93d3c4ff43dbeec158a58673f9f96acd628264ddfc4613ca72a25a29dcb00c96a87a904c0c726a3a2608ae87fab98f350e27f56640056686395ee9b13d7a01b9d444f2f75a8b424fe907e1613a7b7c4fd59b0cfe123b89202f3bd64b59cce63aae55b7f942fdb416609955a27a0a153062863142270ab23494a08cee71478bb4793889f48edbb7c6b7efc36d718cacc783dbb3c8647cdead61f7c638716e3878ace226ad3f73370fdde2dad12bbf7ba0901dc5f1e355e120bd8111ab3be06366ca1fcfb4e380f5f0a769b4f574a917170b962c2245eb72e96a7d7b43ca408a48c32e25e7ad345bddbe47e167d5ade0a94ade033caa25a5b0231fb245fa402cd94e3e58d8c76bf36ca36a1d9d5873921c931355007d44bc93f87aa00722908dd97da1880c948c1feb0c5fdb37af815d500265cf56977f369d5d3ee8dc042beb20232ce4ffa60724a41d5b3c333c2804f0583b2c97b926ddb665a7bb5a38de4103d3f052b3115477dad49e8877928d3d5c54f5417830826981d950c001372ca7ab08f6e5641dd973749564b501f85d44b95bf85c406750ef56656687b2de38045b5fa65406143492e56ec94589b8d27b056bcb9a954ac43284afbad62c5484d90b49fa07165d5663583aabfcd26a95a405e3b561ca3f5f24712e2ebcdba98ad8ed723639e8d5f27339f14d370d592abfe81e05b62916bd47e5f8e00b4aa2e50e07f0545a4b40929fe37f4efc52ecd4a2b371e637161c0ae1ee23a37e676e8fbb4039aed61802da771504467a8164e4b5e2832019a3a468b7618e65098c8f5fd7f89abe3ead24778dea8939356ea8466b044ce11c0040bf89a59608d080743f20272ce525b08519937ad71d1b5dc285084d08a1c348ddbad17233d311e52a48b2212c958a8f726ae4191f896ff343ab1bc81d325801876fa3979107103d4a455b3a7ba9afeb07012db3ce03b0c5f7d1d0a6af51233f932e83e71aa925163fbc07dbfa9af3fa29e0edd87d6f3abbf26493bee78975332dd1135a4d7c5805c08b7f61c53dfa2183464923173fd6b596399b56dbda755787136604bb0800026cf316eafa47146f4c582747e0b287f42583ae37921f8cf61ad8c04d32f90663c44dc54eb13cd50bc827a043167e1181ddfc01764fce078911b4a46104a8a25fbacf1f3c6d98ee85d898a97015821942f1b2722e800df40d1c5a9e6f489ae59f5b3cf01b5ff2fb53271954b97140666095342dca8631fce74e55d2fee0b0e3f215a6b0abd6430da946152762b81478a9ccff6db0705faf1a38c96c89f63b57de3ac3c7ee12ff699a960a1879a7c18f736934d21b72bba19c70685cf86ca2c388436feb627fa762bb434363c7a138c11534511247ea43fb6c6d61beb0059921fbc42ee1c7faee01c6e1a29b1760a9bf00116fd557a55bbe4b8148e21a7d48cdf951f01b03534db2db004729ed956c7b1d259807170eec520d7390e621c84078b7e4ee6aef14f0a37b5ef51976fcb84e3755f2d76eb564792bbf1fb3a7546b7f37c5c634989da899c2355fdceb8b44f380b5a6a532a4a7f9e8e86568e25b775a2f91bce3f2dc37605f67551c972dce0a32a1b98465899bdfa778a8cec2ebab746cdf10fff4f1c8fc82158918006da2bb737b281a2b87a1b7a0b01aec6c3deef9f34cebc704cb90716a79f20ac2588bf07df27eedb5b4fe103676410133606f5ca47459a6d5a6c8f966305bfb9a6a8d7c8d1de587e64c9ef149a0803e2a6857ecfefb061ca1feafb3f49f47b9e3c9be1ed05a6510596e393227c6687ddf8e9ba5dadd17aec37fac8c77e2354b0665d763690b22184555ae85e0e85b578a27592bee629e0da92694bd030b479f6a23de94e0a436e8b095d727cf70fbdc1e0c74a0da9c4a757c7b886c90c87477fea18b85c1cc70559e25d1801e9627082f795016d90e6d7340284a77796d3cbc91d868c29bea89e6c29380dcf94b70f4f30eea57e3ca390c1fb4a99d26a621d107543e1cb03ba9bccdc6dc211fd0b94c348e10a90cdddbb6a03e9ac469f42ae396527554a117e28147160922a3d1ad5993cdd0feb103928843d83549b2dcde3d4632a10013713befa9f511c98285acb66042b9d47ce7dfcb4a0d25ec7428301cecfc43a13e432aaf94021dad7491b4739f27482f08fa7085a4d434f565724095ecdf069e3432f15c6a19dd8c8a6f14809adb30385c22d4aa97cc7103261c236dc063b7561f1b57490a169fae689314714eaac1466a4a04f7edcafeca6c3be7273f16f86fa72b3ca56f5e2c55851d607129d255d803e62afcac15ef58af9fd920982ad5834680ef2c75f3d8868016e47a4a1721f6494d8e7d96bf5c946b84191773a88913936d2b22edfb631245cea217a10f0d527b8ceb87c76e38d920e08a6a226ac83bd2e18ad9924b8a601ab11e2fabbda38a7e810cf397b1697480d954a3be465ab348d659c63202e345bbaaa3eddeb3b4f4a14080ba0dd9787d2c4e12dd54a73efb422cbd7ee7eea95f297744bb1cbc67bdf555a29996cc081ee5fbb8cab3f9a383c09ff9fedf1dbaf8fc53908eed2d886314ed8d18cd31aaa9f548a748c97b9097ff7e089518005165f6992bd859b7848cfc188d092271001e4cd7ac7a96bc0bd4ad21bdc0ae9b2ddcbc4998761164dd6a55d1696af05dd28c45975e77c965a6bee2d6492030da73f02f03dc69498c3769431de9af374b117e5f21e858bbe308e3f9b00a5d3e4917bd9eee8a5b0906e92879599373e75f57263e34f04512f29efe2e57aef0f6df4d5048886c8d1d8f72da7ea38c52feb24c10369207d5213672ea09ebc94a456d8fbab64061bfcb721e675bd04c9ac99cee3d36ff746dcf434d58bbc0f163e9a825994845acbb38833d283f54c7652722951b3c239ac95e5a0dae5307194594f7a7896b9a7ac746532908fbc732ba00823feb5db2b31608603d176074c4da3b9cef49be92e9dfffe8c1441367479a89ae989df238f3a95c5e819e4e7de2a5a0fec4dbd9fd9eda1908f1dae4c9e650e1c267c78a2fad8cb6839a40756d01c791ae0f24d5975cafd294cb89464f289edb47943003ad277496ebe48d8fd8cbc618957337dafa1b06000184d1760c5bd11a3ee10d7680b851a6d9abdb9bcf9feb7c359851175f5f6513c854d59e5932175a1ac755681edf204dbf72710c92c2722c310f62f67e44cfd37b560fb37f4086a3563d276a35d7d1139f84a90a4af3e8644852562ec83effbece1ccc494488de0c31dadab2a56d5f56968093e3450d9e23924ccc4f830455c1136c8eb01a1a7395f23f2443a9edf65488f0bae02a800556fd9ca5c20cb4db361ccbc1db00c3697cb39764425b696589afdabdd79dba7a39f6a4d69b3a2a801d37431f9d4ad4259c84699718e4b562f36487a904f1eb8a34bd0fb219059b8c91e337fd78942d967f4381cb5684eeeced580679edf37b1df9e077af041e45eafbdfe3d9ec72e7eddeab8e5c1db8f168c5e2804c6d818fe86605bf6a58e4198a9ad0203a406c0d6a57a0044876174751a7fc5fdcf21569d237dbbedaf6f3fe93bef621fb18401511864844819994eec12fe770d33ef8c9b6e6f788408ee2203e233593ce2647ea77c4b13852a72ddab5ecb1feccda637d8e3b3b1712e7b291a93a6edfb646f14580af62a6c127a9d36737ee2b22a8a639750d91c8da92fd083dbc33ab7490ab443ba18b70dbca69b9cded3376bffff894260524d43778735e03b418f5d1dafcf41bb3df60710306c4592060cac93dfc1523d0a5c31b2d1dbac4da54987bcb9acc746ce2d5f8e41781c902f43fe7fab9d70d8c1da322e65b8557bc67a58411b7be651c5a857753229a1521cec68364b01e05d62982406d131837be2aa904602a3d4e0d85df7f0e9d2a84d60c6577001eb328308ef98a05e56d224d8cce24faf4701d4604062b5fe5747a8023bdd6d9564da04ee6fc0f79a8d22c78d624ad90379a01328870aeb4626ea4a2a36b1e539a53045bdf3e64eaf8060183026865f49e2abd428c5a11797551528f9fafde29fff015c8741778ef3458e0ccaba4371253dbe7839d05cb4d27bb947eeb24e9610558709d78c464c7d5dd86f19ce419f5332483641a73c6d43874966a0fad175ec524a6aae02eb6a4eec6dad538f71d08b4266ad4e522afc3c3aec615f9f3c8ae767dd0573db709bb05a2496fd1d95091d9cb65ddbb447701895f1e0e36e5cc3029f8577a5dba89de76d59cbf42084d95b4e28e2942ea57788073ccaf8152ca25dfa118e74370fce4ff8034ef04e3ff2d974d008202ceb4c399483e690396b59273541362a8a3b133d1fa70b24ae7fba2a676692cbe1fe6b1f6274ae95e945b08bf080e10b94367ffc3df2eb7467bbfd6e2cd3d86840917df645e35ef489f8324acc06ed58328a927e05bbd786a2ebad49cde5f225bad17dabeaca207faa95ea8fe4299d365b448623f179490e3c0071f733935615552ea2400ffbbd7ace61a77b35f41c3a5088e3eaac47d3ef6e62af2ac7678d78645cbbb31373d336230fb30773434571868ce01368e541a7ebc38e3754e90681ef0d1ecda5e379103f0a1192a2b7f33b18001613c124b28687a94701945c5cf90454d8c1c67f363eea7f10f69fdbe01331b2cc6911d874accecc2ec396265a8ef7ec7c85c3b3ab22ded407747361e4779b30c0baf32a62c5f19f35a17354d2ffc9127d0253e3d9c43458f9e2b571d69d3af6a5c1455a1827b4610a8a15dee9e9cd1b6af7751b04f2c3159c431f885365b6b796d0123458cf1e433b42f5358693130f148233db7e1b4167c38d4acfc91f408363aaf854b0585d5088836c0ff8c3b0b07b08541c3fd93a96b9656ee4575f08ee3d0e2b75eb09c8711d20c9cfeaa617975aa1820a952d8f7271aaa369aa5e9195a26a19fe6f367aeb24f264eb431de9fb826581bf998ac3ed3c50d24e50ab08b3ffd1cd6cc25214178a69de8966954e1a66049d9f8094103d4d74532866ee35c888dfe1d0eae4cc6b3a6d276c95cf91f7d42327c7f2da70f7018e2215e10574692763ff22b186cc1ea48c6f126b1205c58dee8021950d06bcf1184582290862658269da8f8052dd61909070f5d736492704f4727220d7476dcb0ac5f167cdd976c4e9b9b5cca16c27ac2930b6ac6753e38472bb547a3a6823c574d2f22d0e8286c5a5a29e7a5dee0ad3febe37d239f0dc0c200431deb7a8f06ac6c385356ef94d26442cdbc996733b299b9ae380db8cf5c5b5da9e5fe9c3302ae1de62a97b8eabf0836523218cd0e864527654b18765a7c005ac01bfa0a742f0f16b0dc12c3df3436c13542d2b5e671d179312d0b783db2c95bc9094016ccc00966fda76f7f75b665c77467f5fbf5af57cb290f482d20826bda126736a144e5a6cda7fdfd336c37fcdd3cc4818b7fc07a393d9a66a7165c203ff60cddff43f1d31029d8333c1ee4a86ffeedfe7a05009c5915aa25f2b08a162d3eabde92356b66ed75c6cc6c850448d1e1512a649d04cf763193c10d54b2f8d9e532158f01c7efae5f2f9e35b2039d4d1cf558d894ef31d5c3c828add6600e4843a62fd0eb935df93927ff113b4100abdd27fe8ad0dc13304ec57eadffb342a59514ade35357b61cc445a62819a5ae9b503ec10fe8d8495581ef28c17c87ecc3b4775dd62881d4598d44a662f143cebc6efe9abd7ad3296f6c7a22258e23c66bd430df7d627b15ca47e8cc00e2e7d9a26986b8a40c2ca6a3e574b62cbe4f8d04305ab0bb2e451258c3a14a905299b8d785981f354a3a2658887c17b7a71a814b3d82fc45d7bcf32571784a35627f299bc6fe232215b76c2f416f6866149fdabd6a715e23771c9bb78c901a28b617056f40f389d470e1a3559ca9a4623f39d96c51c489b8ba8598948b8480eb0966ea385dbf46247454a5ad73b03fa649ef8222a99bef16dd7c5d470f2d5614c53485d6cbfad32ab3d00e61ce69450dab2e0d046428fcd549178304a6d21364fc6f8dfe9db1c0eabb9e0639a09a7b641617dfb95546270ed5fcb0cc88ea8e52b201e37b6fc5e6bdb56381ecdc2723d4a8762a9b54da89c94b62456c6f028355c2151bb6b581ef3a54cabf1890dc626014b9a11996991e82b9a54762b70e4c489a7db8072f1165c3e2c2c780e10582f4a2163f4ad4672bde8a04309d176fd630977bd127e11120743043d2d1d27695fc72269f7f35ccc61ebb2e1f4f0ebdc9ca5231830818eadd7ba0add5a7c93b0d1d5523e91334f77815e373d23c8526ba2ff25157b48ab4842f3ac4d895cde87a0d2ebec1257d462c04124b1f896f2487e30111cd727ade7894632bf8834a205498a70339e2acd6f5906fb5a783cb4935b2e3d3229e3b98c42dfeef12bc5b5c763202df0d7e3ada6759b22c138371c1ddbae2432edddd2ddfad1e821c7a017f774c6cd5db3f30a5bf5aeefcabc3e7c72d750c9a88974f0c3ede86d8f4c40dff956b41006b4782312c19c5e8500c6609e19c43eee9985a79929d3a2625f01086c9486cc92f718b194491c1af93cb2f226cae7a665f2f4ccc4c4dd15d00751c10a9bb80818304c423f045388dd96cc4dcc7123947b88429c0de1f2c13758bc091496f7c1d5923318e89f5bcd68c13aa4abfe1483c2b9c83867356a3dfe2043877ccc92af5ec1b0f10181e1241d584966defff6af20398cd585afab100ce04cdd7d4ef50676d4cfef76fa814bfa8bfd46b197b4299e7c8adabb24ecb1d91b1452365541ae15f81022974f0d6771f47aca0f3b086b5584988ff59f8dd0d1be26c099d31249fb33ffd7f7c4ba5fa0810f3f0822ed9af88398b3b8aefda9091f32efdf7bb24085fc10722a87f636711f8794c0ddfe19642ec13cb380895c76d9fea6a21ba10563c2c07ace4886027094111d09ed5fce7881f27846fd646f0cc6b00d2b403241b756daca41c52e126123727971fe0e8cb39323e3834d90a30c8bc3fb91df8e119040f468f8c8141c2341cf740ebc89dee3480933e9a2aeebbd9d10e6d1edf615f8d2f7873a8751186028338e3700eef96f366fb3dd4b96439f4d91c9bbe0827afd5c9cd265dd880562095467b34ee2785de867759b780c5d3e743bbdf75e1f00b240c56e45b12268edda51be1bac92792eb71809ae457f723a4d640d82398d6903086619ed037045fe3a40abdd185672494cefbae0b1dd6c34d3354de1ffa17999f8bda391fac330dc308c9882f903f3af9fa52af4064272604d1895ccfde1f880d62d1eea980eb597e8bf7b87c3d07dea06954007783d79f4c4d448f936b66dda3ff73b3d21b2f216911fbb9c2fc83886acfa0e8b085233c7eab660035628ccf1855ad365591f834df75ee0b0e5734b3e922fa207d810667b2acf55363a9386e6d28fe54975a246b19c6ddf4aab6e1db286fe239ea0ab285ceeb1f2a63e56d6e276e8a29c10f4fc7bdb6d747a98df75ff8c2ba7ee7ac996ee892318a4b116f8a9dd9b1d146cabb7ccb4de2ece549fb713e84bcdc4a4f8f509b066372f7f2516a074f2443a55b6731e7dbb1be89c236095eb31165d0e75fac67cf4017e44503f11d39ab50a0349f7ef10e819b6f167533b5cf9b5ca662b09723406e91979c343a1b3cfa8cb05c22524424ae0a83ec6bce964cb6df57c548245847473e6ef11ce6422e5768d7003586b51c3936448394805f5fa6b664291cf2d2a812a9f752e70be101282772cf092257c660869c64f66f94738fdd675ec4641d63f5652813fb87df30dcfb5ab0ca206fe18b13e4d3dc034c9c32fab53202a7d0820c2fe07e45835dcc70171eed46e8b1f3949c029ad6894228a9b7b1a9e8b24d38b943f2444a2a4b6ebf746f8c18bd7048fa57db15c6719706eebc3bc9a306afe407c9c9670c8130a793a011add88304582755c049f14a8acbaeb4e7fbf383449c82dff4f29e5005f6a150f361aad67b349b4219abee611563a3dba1d2d35cec36a99acb6a340a94951741908f6bd285e937b7ab676ff66c2ca401c842bd6986302ab2cc4f7f9c0dc04fa6eb5f19bd9d992b49631c7e6efa93672de12b3a1e958f1d1039e2f567df423b411fd5825a0d7a12ca1582e5c8b0ee0b5a68d9043a404806354767278e7dceece074e5ad84d1958bb1dc1c1a766fdf3fd281837925812b7c42793ed2c5540f98b2b3a6f9660746b65558180892e418c1e4ebc3c4bedde54e77d21ada9afcf80d4cea936b4504553258661b3fe373ce02d374e0b31ff4e6737e9c5a63d99a0f78c9d09d5582c7c52ccf515c6b704e37c526b694ada6f1e4c3df95efb76d69be879ee9650ada267e38af5bd8f4fc901862ed718ad33eaee94b01f0d93b63ce2263e852a64eba7cd175b2f64d1b88474e513452d79cdf091ef3f439965b51909654937087ea9674ab16b592aaede4e273240ead5e1c550722de4882e4d4cb7ba596af2fff20ede02433ec8ba2ca55a5ae41691368e93809d01fa383b29701e5e10df5c17a093d72c496f5bf2c199ca299eaa0df5aa62f6b69dcc31bfc295ff20af3a0b774b5e138fc79ddf89732f849ccf72c78c6c5151413839b917b1deb3f1ffc45685cae12041be5585a8fcaa5d9ba604742a7d3b0e9f3bf5dc77c74bbc27699ad405b97ae1da6abd50f241420dca56870ebebc4b6e20d4ca3f53ae494cc03a4aa3ef13763ce88d15fe736d87295e7df7d9f64f51b7941876e5b108b86e15425beddb51ceacf7b4bc1e390ec47da26d237dc42a2d9a53a6c546c29dc7ac43a51829fb1ab63ee6fe2a2f73adb0add42cb55fe83806a0a32e3971876ecac92fd8a9f10fb7328c2d4394ef4e4e583f93c7c04b46d5648e5ecf4dfcf14aade665515ae7b6e123d81f3267c205c0efbb02722479f821d8d432f9e5fd8402508c091c7cc3cecbd0cfa419cf05c99d6919e7530faef71d3c5e6bfb195b7c01271cea8f21a630b3dc1fc03f6605c76a4360ef7d004d96f82d04bac130560839eb7a6dab17fe9cac7730290567d55ea0240356caa0acd0dd0aee6794facdb331b9eaf72dc7e526444d1021699923a97d7a232b4cb3dd16f02a585fb65d5dd30f7d62f5857580e7c67e2157de2379b67b709b2915f74ba77d9db97a5dcfa8c58eb2596794ec3161cb72b7356b68314febfd969f1560cb7f0a48a8ef9d2da15d1978fe9a51ca6f13a69fa1a1e5cff13ac09217af62d0a9c10f0da2fe667cad9b27e9d1c41f0a3ad33bee4fe865a8b8861c35fc84673b28fa2f51f58636de180cb752454da7ccb82bd8ab4c1fe0791b14aba946ee379fcaddc187252fc9b47f5fad00c5e25a6915427838ff916abd79acd90032a9bc707e49263b04ca1cd05a49847bb01e9c12ff711a5b9ff27045e92cac4d8b6c90f097009ff35d1b5682cc986883744ac686e61f793d75378fb8ccf46abdcf43dcb044cd19571aabc7d8ecdb3da10f6bb18467adc763c91bae49e67e26abbd393a491fb487abbec3f29b37a56b342457e3bbb669f38277c78c8a54d0c11b9a23317beeaee9afb15b63ef09e00e1dfabd7910c95de6958782048c69ef0d6db4557478763ac9569b18d08a1d30f8abe5f5539bf6e8e87e28bf54530084db0f7dcc301f75f3f81f2ccae7967de23773e282d385ef64e9448b1402724312d3b3bc2a57f58dc317f6944cf0c4772d41206b5ef684f939005a4a190f98c24b29c7b1d5b0c3da6db17dd8dd3b34a5327ca1cca08c9c203b4b05b0893ed2d9aad4fae08b0f8fdbacd72dd144f1597f36d9af10b687d4b023f0ede2e3980020dee2bb950c7336883bb7da86f19020a652a4edebbb87865984a7eaa27daf8205611b38a9fbb1deda447edc1108e03b47f920b179962b5d968f88f9847faeb111096606ac225ff2ed6fee61fba90cc322e6f321aba044d1b6c3369d6a1eb21b85930eeae1d9b1bcd9bf582fba625c0655bf9dc488e8e61263c45a395171a1fd5abe18e4d8ed39f2325e734d5a207d1a9de8a1043e043d5ac4f69d9caa05529609884fa7ed730cec3c80972f3bac937c4a55d0a6c27af1d62bbd44e249d61c7297dd21bcfd41f1c6ff0b00aea21e1900d548ab3954bf6d37a5237281403f62dabe8620269a06ae5c8fb57ecbb7cf7c51fc52399df965cfb6f8881d5c27f70cbfb78b5c68e09dfb36a62ef32b647341824417d892c30f83b2159e1d6517065dd1080d56e26fbe15c57ac32e6f72ad541ed0167644be811aef09c76f509351d1533a58ab5499f046c35033b080c42bdad011ca4c8e88d65cd2aeca823f3fee7b4e84a741ec9416c84e0038a8918f7a42a659599a63394a4eaca9f24b1314042e575e0401846d441a8e5939ed6f0a7314fa69c8af054d4618fd2b14afab55cd6f99d0b3fde8ac1faafe5698bfba04fc7db372b6939f505b6b912ea71c1227f3fb82e745015b0b1247b426011fadbf01945ea102242481001201d7aa593f122cbf08063a69d5686d0f6e4cd462926d2a4a9f8c865731d0d6a473ce7743d3b3e9e65ffcb8c9753d2db4ed5c61bfd5cc9a1a850783759372faedbabd332ce85c0e62e88f12e824945241475e0c37a43f54fcba208ba0ccdf8a54859debd704b301d244d39e408cd46f8dfb4dd7d0e21d3cd41d566b25259e1a398adb0a2a0ab3d816dd6ebd20996a67df314afe7465d76bbfb76f90a5ad0cd3e0641e9b23eeeb5127116b0f2e9a14a741882f2eb13545fdd080d274e34558c264fcd64cbc1785aed1fa2cd16284f01f689d7da40b7b196ca880770cd966cf0106a40116e7f0664b4c29e9dc4af04a47fd8e9e345f6c690e799e33ee6dbce6ac66bd8acee797465a2c79a48fb11b404b713eca3712eeed3b3a3e9f5694dc80d4cff2b6361c95347336548e84259a4c439821d0c7401ec575cce80c69b360914bb38a8ecd7dde5ab745401e5a314b44aaf1f0aecf154ab847c12c9d946bf98626fb97de4ca0fb25a93bec6784c422acbb80964ee6398c9ecd68ccf1b9026094d499976c79a42841f04e137ae6f97e3f433675eadf90d4908b1acfb0b75f74cacdc31ea77b8979437ceca7af76a70addc65a36ecb5482cde44c07de8b007959880708459d42a89caf5a2c8e3f319328a453a3cf73fe6ab092e0d69f4b8682f6423d3f4d656e6ef476dc622422fa4fc4b25743b55590b767a52170185b7b7dc3c7531f0e428df1a2bbf183e46bcc45dfb79644e3627aa63a0a1ee8c693d8f9dd7029216c531d9066c3b20dd7caf832aa61596961eab3d661dc2307aeb89b088a3073084974d3b85b8d127301eeaae71f264b9975333f551b24c07b8b78e56431cca3f89ad4f011ec7a85f538a72c8c6fa6310143a28cbe86e3423d5e88419235a44a1c6ef200c2a577f03d55aa15005704fe1a920ffa5cee7cd96011d7b902fe5d6c3a5f21384256ba112adccf04700b79488944457863d67e9672521e09f9c8f077f4f5094848f896c20ad4583c91f0b2593f65f89e711dd82bfd3b83c550c40ae0923cd5378a5150cb636053da34de65fe0f0735f786f0791900b1314dbb0018b70ca688bde49d82d359ca6cfbaba658c99bc7f88da1204903b86bdf115ba75c554d53dd8845bc3aba51d995c1199c782c89a794be6973dbf31eaf8cefa6a2771d01dd095c3712e07c8bb3639cb676a5ff2be05ae9519cd69ccd15f0c5a69972e72f929d20d1664993f3f79c90b507f7684e38d145cf1bdc1e2441fc97e3fdf610157ea492fbd9988df3a3bd6ee1386d6af3b55b3c0c12ad9d6ffae913e24d26fb65ca17c89af51bb1e1e8191ab212d9e0adb807655a53020aac9cf4b0db18922f9c71da255bb17bbb501c4f345b0c6adcc34a31e980a768ad9961d3ffdca08b90bb9990ceb2c53765bfcc17090444d8200b5ec006870a3a080210cfad2a663c9a4df1cfd51d1a57084035aebb33a3c4d9143b51691a5ad898283b4ee3241276eb65de1cad7cc87db385619464896e49e26d051c2f29ae7f7662459eda13f039d30b4acce7e4abafc7b8291042d57bff48165b9cdd5aac77015c9d5cf6ccde7c0abdbad5f286e9b951bf08f4db48a259e82ba4bdfb85c44831057a109b0c4dc3cd2eaf2bc2feb47514ae48148f41b8ca81a19a31fa114685ebb495983a622098d37c70f153e3dc411dcd81e63fd03597a85dd41e145f2efcd54c7c1d1ce21c253625f6690d7bf04823625902d48d78dabd1f990f0a9266c44571c8aed24caccfedb07062cc50534ef2b03dc447a46d87432ff301d06cf1db20a6a6a3e0cb354b0b09e7731bfba046e2dadb094075ebd3581618c8f1aa8a27a08b447fab41ac8ad5cf52180aa3600ecbc1acd49993ad8f6ece55a621f8b56bd92dfb0af2e54edc129201bfe1e6e9adfeb6a4bf1dd5446c89adde079ac88204c06dee8bbce83781071e32b823b481f5c200415464a901b7a7a162e77822df064a6863cd5ef7e10c2ef62c4dff928b8a945d4d33390ff59f8236e726e2b55232ed9ef92492b04ba318caf375d0a3d4c5d03908f83388a5154adf11f0b94a674eafc1f27abbd42c36f65101ffad22c7aa95071093ca084a26739e93ccbbd4cd0e5217540be362babe39e12954a27982f840d53c03a18ae7ef01a64e51ae6af32a1638d5b90e6644dfbf2913d49cc438517cf2aabc0b662f43f10bd5289c804d86777d7ac6552e7660f8350e07128020b23dbd06474553c238bf874e94d16f0cf287bead9127d0ab30a44c142f444ddbeb531b7ea138e4b328796e2d969c564ff9dd0b8fc4c38fd855665da360ad2f44bc8765c7006471a44cafba131b70e6c3c8ddf0be59350a24d1073f0a30f6ef4aa402f15eca986ccb23c7a06d8ade16acd2f57d723e78e77fc437bf268e88a3a713b8fb0c8697947cc426202d61f6c1adc1ce88271d8a48e59875d4b7bbd1f691421b87238a01ca57e773078f7a8eb0a38f076b8f3876e309c43ef99560abe6f3ba8697bd72f6ddb6e828605e64838f6a6a64f572f0a5a1ccf9f876c0401c224eff7d74046762c819978d2b7d739db1e0b9b2ffeb5101c2354569c0a0e4dd8b3d0e891519bd909afc35b3a2419c09c95e0b1dd80f76d6601a84c27f57af7b2fe15b41344c28f496232e38a382373baaf0d91941adbccfcbd226ec45bba98e70e15cbf4c55391797c7094d184440668f225206ac44a5efc97614faa77014f0dca85bee3f38eb837feaf5460361883d9c390edad03a4e44ff09bbc0623a65f144b95962bb7aff48d6fa1ac1d5a47aceee4e93bba2d5a5f13f8e2b7f583be3ba8d442799d0b446364ec23d0ab97cc8567535e87ed141cafc883751dffd0c09bcce763b9176bcd31cfd9df5b6b2402f8c9bc4e6bd225cd383692babd2cd2d6a2baf80f0f4f240868460162f2588378a2e198381e4861c10031985025c775f24b0a9317dad476a3c9df27b2158b41c0487d68acef9b2c775934162f8f2a8d4a0bb4836f3a03254fccf5e32d49bd09621b8c1925d48702339435429059967a0f52343c23059e55ffd6c29fe921ec7af0d9b60d16199c1bcd1025cfbc39fe82408b412db3a9f324ddf5358b0d17be1be37477475aa67e27252dfc6392512169168bbbba783b319473333fdf121af661fd18dab042968bd6e791858f301983d0de8374eeaeb51bd6d70f97294e9be7f35276eb0b6a9ab8ccea67d551fa3740cbdf4f296d66c2113237b6d9ded3844b0db3174044b210ab98c89a8ea513cdb9f83715839da814fb489be3b7d13115e5f4480bc35191a1f1da5a92f2abb3ccfcf565a34257825db9348de906ec8487b1be6ee69207e1936bf6407397109e457e095e7bfcdace5161f29468d5af72d582373e4ca54552b72c0175ee936f0f07ff744d03107e663245d66912a1668484b48b123a7d6312d86d8841c5d8abd8f9642d2a8797846a386e288beabeacebdc13c79631550a7e774d8712edba44170a93d8579053327cb8e3b47f6c47cfe90c82496d74e88aa6e8e13c6f1a3675d21caafb66734de17a9c821aaa773b41f8e98bb3aa1ec0074096293c2d3197aa525dbb29db0e4c70db29129bc00768c63f94538fb20591ccb0e9c3f8d4a45af753a0ea544cc80d34688dabef3caaae96b9b3c61a70446f774775bd66b236c76064b90ba939c00faa1c8c3560b3c78aab32f13cde6857585eb79b547a77093ad390344601e9e0e0defb3d7107df21b5b1d8bc43b61a04a2e6a25afdaf36384d40f676276f058939e6076e4943ea74ec762ffa0b8177cc7371ed913da2fe1a14a6b88c83b1d1c69892e8cb8ad0fcb75dea3ffea6e43c7c4611d5aed9bd44d1cf294da983542468148ce45759c67096905f40ac9304da9b121fd8f4cda04d3b93fe3587cfdf3c28cf2f3a605af1ddef1ac48fdbe9c85b9018cf50d3561e74172fc1bb013089290d2a38fed69921a75ffcef57fce664c8c194624490c215ea5b36efafb4f02304a23e50b3078c92d5f8a886e3ae75369ecb678930beabd49c620a92071f48454641790d4425c10073793b3c299bb774888e6b4de0a323e49c6d359566671457dd27bf44f912806167d31236dfe7b6e03c8dd29346f19da076e4854a3437f8c84578fd4d2733021a664c2b21c697b047fb14326b1711f2b81616ba1340e9a3c764ce4650b45b808093e255aeb1cc26bbb585e52ba03b796a368b16f31161b2312e26b9ca0241af3f9c346cd96663a32d578871186490fd6da0a9880763d70646005282469fda08c2c771966e072e2699f77b30ca4bae255defb1eb180b7cfcf904be0470ab068909a13d88bc1f9258c0285f59c3080c0309c560167db94d63019d06a30688a653cf7e4505189183881052e95700e3b0cd3c3359c8b291c4586655c7167ab746063b07badf492f6e808e6d4929f144b75043e22dc062b2dc24cfc6e7f5202c9901e925699fce5c81f39d43e035b5e71b795ce7e898f45fd4765c8ae37b4f9a8598332176f4af36e5947aa82e82cdd8dd26d45ac9ceac2f3a5c3dab192cae06f846e9bf30d55c4539a331975b77eaf10ebb64e9861ef02361ed9e6104fde8be1c22c388bc8dc89b522aa76d85071e39a48168b7cbf3f22c21d60d5471700c1c85cb9fe7d9d4053ca01637750300f64c2421364b4a5c02761b4612af9268872ce6f0e8b0b5592c269668a4626b7af96adf6e0f40af7cffa28a68f312cbc3f7e6940ef09d851cddc4aa676c8a0de5314d46c5aab5a7ba2d5a6133894e2efe6758bb66d6cc4408f3cb63b5da7354519fa831df12dbf7ffb1256091e8dd20f051dc2ba9011f06bce7a2149d0408770f58ea33c74ec3874c42ce876dd1e97c3c3b076e1f28ccdd1fb05c3a66a830905531e3c2e6cfc23636018cc1e6a398a6d022ffb0d4d11eddb167f32bcee760a152f81ea7bd648eccb7c6c9f606cf1e0cf66e35ed17ece94324851718ef4871664677c3cee9e4d627115bf966bc3d67bb42f35a12fc40f62a9423373434406370a621d17669afa77b117b47a4ff52ac229e7bc0474762f5da8967e580fe402602fc1496cd17c0e930f736249d96f1158c22f1f84b4923520c7f40ec32193584dae2e54549bb21b06384eb53179114dd316055f0709a99a3be8d786a9ae77ee43f61fcf33a03e25b22abc7a86d53f75af528329826adf3f765637ddc296e29507df66ee3125fbf618dcae4a2e10b0d4cbb2e73db751f8b4dbeeead14817fb2938565feadc871a4f430d8a6d477ef9cf15a7a833d9cc98799d4c96e231bd3fe168f4f1a82e8b74b0b75808f5058050c0ad97c61d6bd39fc4610fc09852a9d2f2f237908344b5ca4c2d3a81808956516e6afd11bd87295bd322d56c6f4a2f1b781f7b868a9062f460fd5507709aff3382352c6df785d5eef8f524e5a7dc360ef33281df606cc18ea8210b3aff3fb0614a4d512245c1b1bf43137e937933470ec02dcd4ff2dea72ab2ebd2f16a49fd5db0282e47b1130b611f68d4186eb991661cfadef5a1057c4254ba985f1f94d0a970bd1c29f25e7bbdd300f6b764a4044d6cd3d87ec8dfad14433c1de6044d93648a3c62bdaabcb34f3dc731bc713795994a72976246022f5c169123c8ed2cb0e598d652d67300a098a8972789d9d8866878f2d046b6ca26dd27d5d3242eca767b9034ba7c99a2e92ff9ae06dbab57cbe63cc749ba33ae82ebb585f4152113b057fee0e8314446da25a3cfebc6848a73eb672dd5cd34e9f0c4f1e275e91bb658bc2b8955314d6c244ec4d929d3ff6546895dd8cf63477a8fa637a1f0bd6619b10d8570e7235bca26f12cad2790f294053a4599cdeacc085f9a6a9964627fd3f29bd3b795003c5346b242ae25f1cdee4f681287baa84a8b2b8c9998f41170489bf7a72e3d9426915cfdb3cbf1ccaa1ee3a74bc1cff312f9087cb71125bd556bb318244c5f749b736851bcc9e59366748d9c74ebdec1f2eba1561fc03c3211760e0ed4f836c0f524099dba8fc746a80e75a99991ec680358d7c1aff6f973df3dd0621d76d16bb2d6455e92764b4ab80006513faf3ac0102b5e0cb2af93dd4a70f8f4851f43d2d6f54d1329c29ce799d446a8677091041d0c6cab5b9dfd7cc923009fb2ad13d353748265e8c1b18eb9ab0d02adf6b68d7cb2074f7542fa26377918161f840eefb3d11584c3975c8e71b66d19180c9e33a935f8f6aff62d100c876264c2709d14eb9d54824c71096bf284c65a76bfce65a787930fb41b557639778dd2e2430174a6aae045a469367facaab4e9afcb66c78a4cb096f0a51d2297f65b805139c83c59bd9e97c6525b21cdee3168f41f5bba0c6558e911ad029d518b0df84ef9366e6c7322295f15327ce122603585272b956f72e6516ee340720aa76459a16c70715f20f04890089949cceda4ebafdc8f77d8d0d1ea6d976df54537e9d6b76c9bb9872e19df43ba9215c09e97cc17393e66e1c3506bdc17f13a94dd4f9afa15f148d2d5edb89ea5c5fd706919ccb89a05bc7f6db8f59483179ac4a7285db7128b829008f024bd5c3e77bba89972a0f432fc2faca6247bd04271e4392ac879a1da0effd7f2da377c780e4a2b35064ef2a449a81d20ebe4cbe42e526cc03e0dc7413726c998bb5b5af2c7410f13bb6fa93299d6d5e7e62f8641b195645e2afc7f66d9fd6999ff3c6082fd1422a9f53fdb05f975cd810e7180326c9dc1edcfb476554f8504456edbb18691d3e6e9abdbf3a2fc42f9ec7a29f63eaf5eae75fa5118eaaf91deab183c60739ce7a5a53e10b410a548e1bc770be7590a059570575492a2a1cad05b441856c7afb0ec98988b83a636f197c7384b6e3ac7863b4ec1681ab2c6650cde811b48de39e3e993febe50240bf84045805ebfae51e1c8ad968ca45acceb32e40302519edb230b13b6bf92fa04c425fecf1193383b8d91bc8f684abd83e2d6b2b8543676c8564d05fb295b9d83290a5f80ffee5f552e5c64300ab1332445ba33448c807b63d2273262d3c7f724cac1a1cca0f1d4faba1699d7b3c4a5b78946b4d2524d76b1093ccc9bda365398f03e83d96a9d0f3a5f1b99726cce448d301e52abac61df7125c162c738ae992f316b92ec2ec3f91227a84b4619e7db014f3fe6d5064e0d937046c49956e7d83e8b5184203bf3f64b5f46d30dece236b323e274fbc92e075e820d7a2160a5066de4b4663ecdfa4eb1e5e5ef2ea36beacd20b0179e5db9b1d6ba52eee60ef294c331e0af5cca4faf1c24dde8028af3ef1aa6bba190153f1319130ae32bcc800719056795c1bbf72be18819e0e805c01e8d30c8b548594638fba17cea0eff5223ca35adba144ea605e934a61375a676dae1b29de067a2c83f19c2473936903b9326ebc8f8153ce0e7088ef22e17fbf63b97a5e1a834ddb72dc8872c4bf3a0b2d5cf9f4afcb66b44f41acfd0881f7db3495af51b2ab0e2f3b68c97a3dbe7ec7ebfa5caa3003697fe8942797236975ced4432d5962facab3a65fca1aa14fa5f9d2bf0d76b3d4d0133231db208deb61e5e4550d4c2044359bcf1cd0acff364160120ddb4d3627fb4f28f91d8ea72626628628a152b4f32bcfc58de03de7751e4d8110dc035681da24cbfe0b0c1dcb4ede30ca9a547af70403a1616a6ca4b2f587bf6d15df1cfb526eb5a711d1afdb2471b805f450c52fc38daab0162b5456f0ac0b40f8d89dcbe07a8543762fde08b202a7e8ac03dc919ad564ce992e332d071adf48a4daf2e72ad7cb4c42a355a8e144e9526eee1140ab5f6e2d2ee9a6f7a21610a8af01b7609da4625289cb087c13340f6ad0e4def5f5250de5256bef184bab36efb58c94f212003575e3367eb49e587f707e25b934048220d6278df9f32ff45ecc0da0d6280c71a3b9184eca1e59f73cce33c748b3351851d2497fa533bc2e4ce67f5496bfa6407658313a68acdebae9e4546883c8e0ed6d9f1ddcd2b8303ec16006f8fcae80744a0f3338426b86629acd716bdc0a33b733306588bf0efe2e754e73209882283527913290644e66a845a732355be27102159ab858ccb908b7f00d53c665885bc485a36dc63fefc6fc1323267d263239123cdbd3601786b6eb05fd73069533e2adccadb7ba0d55c1ac5017ea44e75d9db8629e30ece5d03905795a98e06f094ee544d59498432d9af7715ba7f2ed1fdb5a5c1f190f3070767a60882373e90ed2fbab22a44363f46170c73f576242d6158f34abfcb2400e2dd92acc0c7712dae85ecf1de6ffe64ed9ec95bb31cdb4967c58cfaaed1edca083139fb7c88b0ae81fea139dede71427565268eebef31186cd2b1f861695c484039944f536bfff8a8cc93035eb2f31f104a9ed0ec5431c8318549d1f27c55463adddbb4410a426c4ed18ed1d753b0e27375cc225835dd2bffec1f1d771610560973b4add9aa30f360513de2b91b9f8c003631b66c1212465a266012b3858dda516cfd24e0d5ef001bc09b47bcb60bf1994cf1cee9ffaa58ffa85e441aea677cdd23500c6909acc8f2cbd1269b58ae891a9ccb1cca1a17531e0c566b4d27aeb7a545cd02963ae4b655779fa6a8724bd94d5fd797e631a5bc2c66349baf3457b37cd2b2bdd187335ba655994addd51811064daad6277bfd8fe6b47afd950168e4226a1706b390853d2a8816ceb9c7aec0e3da0e0b7e8f22e9ebc3702eae235c318b53b7fa789d097960684f0c51aa76524752816e880927c15c0953c3d825a401a4846397ea2e2e83ce56c111b663f8ebf59fb8a5300f2acc922ebde836b06dfc50fa4241bdd7d8a5600702c8890e5dcc082184ad454d18dc7303962e2b66cfa3fbd7090615efbf464ac57881de9540644727cc1b4cac476b3bb81e9e329a84162139117e927bb084883acd1b2a889e1da160abcdfef5681094694c94a3b8cec96a712a8d13260330207d35511976f49947d7cc86d27d5b4ab1bd1cd0b7c129091f3c6a66fcb70480398369b9929eff9101cc269c392b53aa7b7b9e41ad5cc0b26bbff22061aa258d7a2648cb39e220f9ab86258a151a7a1fa298d1a2892bc5855b88c46927b4d675f1f10b55b7c79f25f6a0cf901f8df50062839ca5eb3f0a782c0294b3d5457f938a751a2b9584af6807fc9524e2d05aac3bfe2e119853a33d1763a70ddff4b94551b1e3e32d9507614fb006f3ed8ec082bde6933d31e5dea12419931dac541283c4bd5ddd7af8ff6732f8ffc3ae4ceac337b3e68b601b02d309d1a69848e940a3f533be92c0bc1d61642fb765b39ff9d405e516873e5cc651770347e3f95582d21f421977c85f6b0cf719290a380695569e8eca00950412eeb0acec9f1c998553cad6215da38a9be194143d4f870bbba063b06fbde404c2afe969d7cdb92f728e6c87790ab66c08e099552ccceb38d27fefcaa4ee06216225bbfd4bee5ed17d7d9d50c5e78cee08a1247c45da4d2a3fa4ee6e2d79be2a4e6251954643b7b73f2203b109dd1d7b5cec32b45cfb8e697d43002af04cb5d76664cb7bf700904b156c8b78945122bc6a8e00687338fe7ef223f433f700ed5fe748d97de7e2b3b94f9bb6e11e92c5441b9a89b2c98a148b9efcb10aad8654728d5890057b88286ca74a6c5741d989b115df7d4d18d38448769de0559d06a150f322a5c08e55f2b09c6f5fcbf4bfb382991c6a49a91af5f508edb843d7c19f99a4a65f19b8fcd4b6af15bda44fcd9cc4c60304f3a9bd1d36f8a3d8275f0c91af0f377bfad50f56eeeb51276874285d0ccb3d2b1a15a2e6f594e224592698969304202387d6bf371fa2b8dfb78e67b47d9c96e45543aeead93caa1c4a3fd8372576e540e373e915db6ed6e81302ea803f4454f89c7bea21f068ff6d84adb9389f07915a5a52f01303f7dc65b3e2b8314e7bc87474a6979fb0a1f26c9f8b902713f000b9d661fed5f1cc8749a18652d3ff673b552322f2e04108a376f87a272e292203b874722b877e784fd3adeef46a647c52173daa03a00783684d37c03065ea11fde8b676f110277f3a48c9d2c41d59fe1b435317ef9abd6df628fcd0cc69684bb2d798fe1296721bfc124facbb5338c137169d05e9bc63abb50228e159b45b83f8e72c8684778af9b45eaacebdaea1c6c1d60918850e4ea9e0b59c07cf4ed110154df118afa133dd4dea560250cb1e8c2877fe74a67202966da34c7547f86cd1ce33e54a5aa8f0a01d63f2cc132e782a05bc0de3a7c10ab1856e3e186736f38e6189dbf9f611a7a563158669441c6c518e3f8e3f713daeef80163a0f5ec85a6506b8dc66c1652cd2703a1c56e9c7a4c8d117dd3b8d64fd3dafe01903927b6d9fcbd7747e8727c002e396c312f9574f9cc39067955169c795280edfdf3615cc5e6358870cb70e88195eb55844e9cde2527d4c50b51a02bbca975e4b9d54479f198184df1831c313b4e40ff063bcbe81c8635f3f234c12ec91889dd41027124dc2073dccf22a166d4b7cb80249c4bbee32ef550a2f52c6d37e852bce975ddf54ab5a68349aa03e1a869310cae74813b8b5e3b27f721741198a8814a2a146d0242683f19c08738819c7e53db1c9b15ab88601ebe03013d37f8bb8137062e01b42ab3c4b4c1b07be9fef262c8b38c19dab93084f0dfdc589d481bd07f174bfa88b792c928b1c9860954e58ebaa1bf42207cb8bb657be98ad8848c27e74d60017340e9cd29a3b9d396e804aaf232e6ff0aa356a9f8970b8506e1f376137b933638fc66da1cbcb725c48b4040715773fb1b41efdc4aed30a0793556c4759cdef315d36f2940a24ef01c7d5f46e15f6c2d8d518b60dd0f1b05513bbe76d22383b1ae01cb02764d3ad8737f64ed3b6fb662027ebc806eec214afaef604a9d156ecae3f252e6de54e7a7092ee8811ae78762c53bf057c4958fe309f80731d9394c04b73b8f2ddd15f6b32da152511c1497740e827dff6beb4da69eccf8576a06ee3aa194de540ff8e1868cc2a3571cc86bea91f7a24e35d5963bab409c99684749322cb79e4310819a811065c83cb4e56a4ff2f3b6dfe5197e13d6a8064c577a35e7017002370f269bcc6c6cd417c13b341e53ff3a0c90451f5cbafb09bc9c9aeb81b1418b40e4d29e98468e5d02011fe535cf2b539654035da2985222ac5b90d24d5941b57b714c509809f8da04caea395974ef77749493c19826a45e166336d7294431a9bfbc74ddaffca16eb841522ab2db874f3499c91d4ea3bedd6c36f9583cfbc6472b3c52012ee3b1325ec299448e8209e397e9735eaa100f69e3aa34790bf9714d87702739ff41e24cd1f43c46a17d9693149e5116b74b4e3015012dd771c20c610bf00583eab17c462f033df1c9adc3b66db364eb7c4ae9abd2b332d35a1a8c3c14749f5af4576020cf5b13fcf4df934c844cd177e87543c37b8998c4d89bdd437dd59f72a05543295769db807a9853a27e52c7e6b30871c9df227f3bc5f451062352fdb764acf550c448dc5d81679911e33f69681abe84afe87c9b2629cac379607ed1a9872f0998ca179da843ede12c37b0db48d7904f7f7f46a27a0a2b65fa3466232e3000479df6560c47d729c4d45a10cefcb918afbf6f9cbd1bc57f5bcc33e9c0a1ccace7838156f5af184955873be673de9a90cb9db94cf2978a032f34d9e8c2a7b3e3b8a4ef5cc4f9ce23f0f1fc3b7e6956eac8015768d638a602afced8b8f2cc1ddebffc6f81cdc40bedc55d591957d3dbe41ce91117af7ecacea79b9ebcb258a7b93fc2c71db7880115ec48dbc5af91623af139b6977413c96abba0c50c509fecbb3c74d7615e43e5c125b1a50994b3a1288c81b52f90a4cab64e279476740813a333dd00cd752d586122a83055e9baa042cc94f88165a49dfba22ed611383af2f559aeed0eed2af7517c3a0bb5a76b19162e3b34dc84c810f84b5f3effed3ad9672cb0cf9d8a1123f23e02eb3166068eb0dc941466be36637edc28db033449b477da764563d0308073d7db98e98ff7aec40ba914ec33da45e348bdba39f0ef12b9ddabd22e487ae277c836a4db29ec68406a6c6774d515b4e2f1d18f1acb6daa4c398248043d22754d86db461a1524e8d8147c03d576621cca578c696d4af861a6cfecf32f7a1614694ce0d5428bb8a60090020bdb524565e5c723690d369f11499f55ca1aa421da648c885dd03e90fab8829bd381437d4cc5f75c62b8e8d20e174e869f20fb42637a22e761f644e89da992a8dae6d0f79199aceb4fde18d98150d6a2f05f66835a298137040c24fd18240adcb7e52281d315351fed79cb9d8d11643a2cb349c8ba298f7c90046f8e010d7f610449a14534bd2724c4475cd66437175497f63c9123df0395d2ae664d71941a304e89a4b21b24018105bde35e216c9dd58d1ef6ffb12cd068a50349322195f5cef047e4811570267f3b24608c263746b2b3ca99c9cf64cdafd59736c49d3075a965f25967e4b7f674412f2c9a3794e5b09ffd3254c4eee9e756f564ecd07f83a126d4a245e0d88742cdfbcc95811bedcc23068b3585aade0e1ffbf8a3324e29c176748e856761b6f68813654e9698f8bff9656b49383047ee92ccf2dd194e7573f830edbba2ee9ba95eda570dd5bb70d833399fafee722981ef4709133bfee2b75658ac2e61bb66aa0024fa743d7bcc92bd522f0c61e4eba50a19a8f543caac0bb9fab20cb92ee0d335c600de329dd6fb3056eaf9a0342ca933bb6f557d3873c7309be6365f6477bc1ae04f6574c7583b4a9dfe3923b153e7032b11eb3d21bf9aa507b5ccd4c77d4473408daedef9e844b84a4333e1429aa409616c7394b6dec0fec90a68584b81ed86d002606c0c702c77c4a59b387c971654b689f58b87cda22470d849f0565a3c938717efc1b8e5fdbed2fcc7c0b67a841b4d0ae5c67960fc42afb72a333ba729c9802fb080f5ffe7042c26ef9e9b1fffaa1154ac6a1ce1cfecc760b635b74a27d2327084ed7ea812a1e6a40b769b0aecc200bb3e6559acd33fccb9ada60b3900ad7ed892b5fc5802695ed0e0caec7f321a95b113ada7047946887d7147bf9e004690842c781e1ebaa6044b0efd6e1127a863f21bbf9efda5a8297367dca7bd65fc635738d4cc05c9cd4034e652af1cc277d6c09c1f146da37d933d9c7b8bcc6bf4919739c56b85e855521d9d0604e1c5e66769248032d1f08b108729fcea444519da6163eb4ecf4721c260347063aa5024c418afbe52ccc873516da3478c6eb6af8ebef242809797fd29eec4998eeb34fcb20ed12931f0eead4a5e19a0fb41e23109097ee165540327a3e521042c11efae69640d091e3bb46e955e16f35bd39e07118c48a5aa355c52f104c7a26b480f1cfc850f9646088eeb59125ba6f571db022473194cdc2e78aa81083de8f36419b3c4d2d3a5340822f15dfade1315d94250669f875101b9682b84b756eee947ea13793a954f7ce61ee086bd6c472ed9e297f08ecd6a784e66b6d47a9f3037ea6999ec6610a729cd6b3b9503f9c16472698355deadfee207a76393e263641b19b9f81749e5bf409c5a8e2c47ef9ccde6af595760be935d82953792e0e2a8991b329c6e176c5c6de8b3d23e60d765c008c809dbef7abcaf45fcd7e7c118c7dd33437020dba46dae533dba117bd75ed6c95432e4bd85a0f8c32add59851f99034eb30775b3521a27be5c778c04ff5903012bb3b5aa7bcdf9d2b4b39ccbf776ce85a3ea40c13c399a7a0a4f7a154b4442ed22e0d7d80cca85ebef30f251923b6a50398c0071715b90e3c3b1c1dbe6f0044f1ec7d2fb9760074f78687d3b95df3624d4f325e16cb7fbd2550b38dc9b142d1a0c6b63af5a68177a69fe26529eedee565d45777d373e6a7ff20489bb52273b01896ac3cbcccebd9928c36c3593659a1f9efe4760556aee38bf7ce8a0153c4d26a309d0f24b02573dc58d07f656c2494ad4927301b25378adf051f4b68d89e1b1d9d10267ddcbb18df0e2da1f58e9ac591b8c0c473ad36f8462078797f103dc3691ba445e89bfd8dee3aae7b224ba51351c2ae50c37d347187937f78b71cd1ad3e175995fde5fd52f42357929fb780663c082777179771af30f9fb81900ecdf6c5fa59022cf8700655bc65708dca63f14c5489647e6c6fbbc498e437ff3ca01ff32a9bdcff19a2080fe5b8fd737496eda7ed52982863327937eff56f9f6aba80739832350df32371214f7c0a08e70b20727c857d626abff7460df14f36b7c7e251865a758ac0340afe49d4af98b8c9a31e196b638f58ec87b8244dcc9998565a502e4dc2171c7e74c1e08173099b09daa19a5f531517d09b15df2c74f1de2a3c6982bf90b91d8fe184d822ffbcaf515ba4d58f268666034aa290fb7e4cf3cac71b8fd2f7aee155a3cab57bee003fb13ea24fee86fce516d192a62512f25297c8b7c9bd87d68ea04c39fbe0671cdf354e182bf588cee24ce1bc0384aa4679ad97e764645b25d2b6fb0830a6f0fffca25eda6efd06f5613644b7f0602f1b1116c37338ffbec31ccc7b23aa8eb9b1f68902ad5b63ef0d2dab2ba5170f75ca46ce3a2e458bd7831623784353bd79b7e4c510cf9b6bbba6f18b544cd498ad476f70419049a2d3faf65c8b19ac0b0d53473eeb9cdd336832cd7b47a6568b1eb3c54823a26566468184fe095d1da2237d2d4a79d6e2007b1bf27977150985840eb91f06576d12dfcca87a3447fda77782859ea32edc4c5a944e744980e43572a88af94bed156f9df28086c1bf169edbb18d056698fbb099b30b64933ec62b12823d1c25553e503ff5d3ba5b50c66955803204d555f733be8972ee1b8efb555cef4882273b6ba81e16b164468c52af406800a7a50f99595970ab461fda4fd5243a23fffc26756ae8f6963e936f12833208518f9a9c1226510b31c2a0341f8508f27d947a4d6f110c5d63afdc69ae46295e36732686eb7f9d10be348a57abaee59a055ed4d15a9f7d2e2a71779c819193ab9281e6e2b20ebce473cb2cdca9fe8733a6870b990c326aa948d62ae627f0e149c66867000b96a7366259697b28ee61b538734e47ac8e07271660a052d3cdbbbd6cdebd38dc86f4774e9d64f63864b4345b566f94b99ce7e628ce06148605d76bf636f1dda515f514f7fdcafa6b8ffa1abdbafdc29548b8e1d0f60ac90ac790609c0880483b2c52e29cbf89a0acf586b1766e4f4ca3b0252f707b1d5189f29d3f9907117c709c5e5b93a3af1ebdb76d5a49ae6bf43793601bd472a6131a19ba5fa94112fa1165fba73f16363a2bba029f9d7eafc2af3654d7469f9941f1071c1f7b8c17f3e46e3abafe963ebea2d18cb3adadc0f2a09ca968ce3e606ec7ed935b53e261f5b68f861ebc6dddcc3072d2644d56e362dc73f2d59d8e4bc0654b26d5213edbf4bdf6e01c8b1108b9f6bf93c8c98a0038c4e96848b03200a55f7de3d11ca3ff13e53dc963c28f8ffca021f5744ba8197eefff06de088c013199650e5813a9a1846574ed679737fa381c3950495f9cc6600cb58469364a7fa7e32ee5383110e7ea3ef3beac0537211ef29136f2800684747f9cd7dc792ec4d1a6ede1271e47c16a4e6d29585e2bd977b562e8cef809acc0dfa130c5f9c62f40aaaee985b440ba40050952dce4d66cdc6f97a14a9dedd1e3d9dc608ed49bab50ef5a4defcdc13d47d9c550c2b99ac2add961ef49afe207a472cfff2401a87f39432f3331cd90b17e1b850c100520a3f3bf3c5302e7b31361f1ee794a191d62f4394ccc3d76df6f96fbcdec2c298d563c64ff33dba1dd2e07132b3b7eda794e9868ddb67ebd4fb13211a369fe218ecdc7c51e8892418a666ca4b05d349551bf59c4bb7de957fb545d6d8d50262f138dc963537f0211f343d810156334c50e72dde4d352420711a6d9d2d32590ba7d75f7854371d3fec3c94b1545bafaf88ecc5ede6d909cdb2763bc36aa936c6edf4b1b604b7d8e8f171b53adc0467e1727cb2305c25c5679e7707fb277b550165279c805852a480077694891adcbdd1d2d31a832bf4cf79f784c5706e8a00bd1fce917ae0e99429141047c61cdd08be69bcebb515d1a337dacd5886f1c58ade78c3c072671091f5b10d6cd0a8520c84e0751ce08e0662ec1e8c04a1a3bb3dfd731af755ebbc27b101b83d229617c73166de02af23ce7e061c80431fa5bde50d18d8367bb17d57c5d3270ecb61623acdd11cc5dbd00f164a9111ca9c0d8b6c8aa111ec5edc8936be54e3b97d07eb30dd580c8c5459bd0333ea14f2fdfba6e17ab38cc4cdcbabe5b047c4d5a423c7fc7c1e0e380d88074b0f63534ae5dbd58d73ed9fbf6d6d0597c91317fed50d11b67a39204e0288c482e43c52d68dd65b10131f87ce1a58377331d68775c3d78e26a101cdf144e497a0384f2869784ce3d1b10e7a71f426b328d49ce9e5b06d0f3c4df62bfac2b699f7278377cae014196723f87b0846df98b7619184cf8bd1bb1dfd5e932ef689b33abfb6a18a0b3b80e35aaed27d3b79f8d6f6ea998e76fa4b870e80bb5c488deb4a24ea6e6960bd4137fcb245166dcec2e1d32a6fc2a6d098c9731af4808e4bfde863290fc1d238c6cff1812000838c3605c815b7767a7f9486f46e6482322fcf7d35ac177ae69337d6fadaa93f712998ea126c900707b67f2856e0623c50e87f33fbff76ff3ba33d062d9fc17f6d4cb692e7855bf05a838289b0a6d406501072e9d74b1fac94a847b49d7b0e898a8252a48d5cfaeefdbd41aca8142179998118548c66b955dca76764c5caae3239117ae8ec3d0a8f6d71e51d767279d07252d3dcd0cdafde85fb8355b76c004b86da20fb4f684430292e3b95e470c32072cf641c44dc4ef35919cd75b688085acbab2b341ab1f68d4f46a020ace9a0693da00adf3fce9e1a42fe894dc51c4fc37c77ab4c9ed2bd7926ec13cc7337b9543c24f71da2dd63949288a2a2df9048a782c15773def4d6051906c3ca490e5267a2cb0b21a1630455e92da31e6bef0cc89732a30c3596e98aa0b9d437a6c71dce89568b7521ab6f152a94576d7f57068e401e5e4e73da3dc6ef75ac265860a2a3aedcbeae6f435589d21c56874929d608e324de2533b620ae2d09b26cbb228ee4a65c6676dcfd5942672f7b502807c4655b9c28bc94d24eefbb5a15e3b7a4de8faad3786315e082baa51b3b515cf7b521ec9c065b36099e78168bc98904b66272b4c9f941d3cb429321f7fa8de32c685a4ea4b474069d2610631dff3e19792f141cf9860bbb72dc8c00a26ed706e56f4dd488ca30d23cd7ee4712d30d3f70eb7cac4f36c7c0c0c1e61bf8bf49fbe8fb9b39ee376a05efa3a5066d4e9ed65001101afa2f0343ce494aa655c2efeb85e5ccd10c178a32a965a05969207a3e7693273734f075229a7582f788a2a4048924d88ae0f057ba8cf58a89be1dda582aa72d7c1ae6c809f3d2190db7e273417673fb42745361b9626ec25664057ea7c2c80817a93a468c368fd962f1959894c76e50eb0b0c192c4174c65161084f70404ef0b2912187ebdfc3a6326f5d056ad4632002ae631113e046dbba69d9248d78fc56b82ef0bca2a12bc6863959e844612719356ed42363ecdc108544d2acd3ab083ad35a6d56c66b34bf66c4565c985102add7a1a0b0b261f6734b0fe18630fd706db7f2869fd4f856f662248e73b1d9978d007f74273598627b7b69345acd17bf6eaa42ed489f761c8f6ff8435b974c9a786c56659a26dc45624e93850571f22ea9768d29a369cc7d54f2a468f15f5c31b6390a4ab4f9f566f7af4f7b9c9e9465ae577983955c2a5fdf7f2352e0e97f7b534b612c16ee5138c88a9a963820be0f755e2179d98c2215f6a1494e29f96b2f920ae632d97dedcb77fe0e8f348b3e0eaa247f6fb06fb13bf8b7bdbdc932ff6e28890c18adc4dd4df21e8d6a30249d40be284abc5bde24f93f956f86d71b9d6d8cb3df5c6d08d0c1e21b4b9355254626d6c4a4570afa6a951a8d107e2085ad784031c9c3f6ae3a5cf857dd9894a9ebe2786585dae697389a8dd026df4e8357c5c9e7736df10d8b2fc4d49a83ca3e9d15b6face0e52e84abdbac0e5d09425b7296d7c9fedbdec82d0e0fc9d48668de038f2f8424c01b234c9114bd83134d43b25a42c71ce86384be53a37d241ec971f76bec310add5cfd6ca3ec24cd106f0856db4ea8ed030e77a71e1365aa67bf427d90710e69f0049eb82b1185e9aedd388c170062ec584c800281a7e513e958a3cb5c1e9f13d052d35febd3abec9ad8ab5fede7869221900940fd9cd7610eafc59cdaa037bd8807e428083bfe2d74b4d8c99899e0b54887f37941e10a02c5768728374214deb16ef98d8c245e7c5c635f99cf603e3c0000603f7eae561668a61a82d3dd9c7d8c086c01cc7b21822ab3bab701e189fc5bc4d70767a5436961c63e08e39ef878f99417ef9cd785e02b5594880646d6b219da348526ace8fe2d3008c8d9dbe181b7da27dbe56ef4b1073d9b99806df5b5ea12ecb1d7aa5b0d9c8db3f77039c0679ff1042a2c17cb3a505d371b0d2980801ee7d402cb185af0f577e6ebbf315ff342849d4fc24eb9ba3f661a748e99fcf6752c4b54caff918882d4d63d1762e48bee52c54401658704bac5c925f3263ca4c9dd6b9a39c8d9b15ff71ee700509a3fe5c37ba621aec2c87c9da298c1b7f175bc0f90442c56b13f3a344991f27c472f814444a6a0ddebcacde21620f9297e78582e26b520d2836dc3191ea6d20483fe61e98b1a6af26431707d47e0a77985192658a4030f8f59bf8e52826373e9e58483d6f39f89a8889dbcdf05ea88de1caa90ad0e4ca4dd8f138a7d259dddf1732be9fc5277405fc4f1e0ef178f2260c16b4c576909fa97c5f091bd71fd85e2dbcb03d7bf5815147c79ed751444bce06a9355c029267fd5f9006663dc0a60200292a6cb5188ca6d949ebe440037d71f7707022c901296ef3706ee5d98dc0d45fc910f6f9cd4c4d48ad15c0436722064be7e6786b622e285870ef9d817ed841e6544b0949fa9193d4d470941f8fa6240b09258114a4c8524c735f4b4cd13354a54bc882dc58e98f61d0f167e36d296a07460f5ed063af1d9c32b7a0a8158c2a687ea0b5bea90bdd9fa523eccfbf8717fc7d302b3479c7af51262d3fdada279fe465f6a9350b91f30b33924c1743df7a966d11ed4ad636d7f92b12a1c63cbac0876d2b2f14468826893d755f376c6ec7a70c1d2568c29eaf097baa6077c152d09ec4ca6e95f799d6dda76f7bfdecfc31c11e8369270957d4d6d0756a98d2123405bef9b653bc279b351252fa53b0ebe034ecd182e5a4978a25f589717d9870af391e7e83d8762aaea6bb49be4e6587808786c03f5cd15a755a37e85c166abdc4ef5bf11f5bd8ba31f834b4c75e4823440dd5938860aa424dc948fb48dfbc37d89d6a91256cd0e3054f671907d81d8ba16d7e5617a7db69c9badfde0588ce0c10aad187a27ad35f03c7c2b6c065149cc993fde4c14baaa8693a0f39a59635244510091d5f1056d9e1054d9e4e862cf7e11543bf9bb7759482530baf3f86d94b814907094c49a5d210837c0afa7d1b9e43f4aef672ab552548423fce45758fdd8d81acf910456b5e62a613430604439de43611310d6437cc2cf5bcec6f75f69548770510574544278cbecfdacae258df0effc5e0a2b22f9a9069ae833a2ae65106bae80bdbd329936f0297b9a60dc3dda4792925696f2c562d61a79862db8d9b81bb4ebdc532d9bdcf185413c58b18c9433840b71f044e8068e27f505f03c9ac7e7c34f8b7bdbac3a9df4490a48b84af44da66c05160c860aaca20cbfa4bd35a134dadccddd75a74e3c3bb0f4e310745e7e9776093fbc6f43fa7b16a0842b1d44b2b79e31dcd5eda4c6bb19ab9bb87215a9a2a09d2e370cba48440a691976b4fa446f6337e4fa7c5cb15ec23bdd339555021f573501d5d3fbc112c57af308fd5e48f30dd1807a668d0924cfad578d8fafde27c77d208c2fb3d34fb71e5933c708349989f66ea37a0dd1a2e65c77d4234539896d3bf560deab690b85274571f76695aba88c3c25d69133653087d3b8e3148b6bb1a3585a54eb36a15b6d5bd72dbe74ae0002bf74a66d722cfbf7354023fe4db280b2c97f963443c18bbe482adb04aa8d2c21fcad91c39fa2848e780a8f195e275adf10e63e12797171fef8ce54e066b50c5453cc1b03a83017fc7a8064ca8d9d83af2d190e6d87a255ae566955864862776823918ae17bb15085d15f04606d6dde4b4344467172b78d864b08cc5ffe9c125277da403bd69dd3b6d85f1e88bc78f636dbf17b8c5771fda791f83de5ab18adcfe7d0dc44abf309afd8a5a9ab0be1a50379dcc2efc1c0d8c42fcb15fe0dd36dd73ee9e274cd7b255be0d3008a756c5667cb182376c4d4ae83c685f9d3218f3a0c18c3d20f0c6749dbd92e0174e86297ae655b154dcfbef39f310ff479c937fee93a42d04094c33f7c9cea8c20eaf66b5906e39034b7f0b3c1038e7b9d38c9962e661c01c3cd729b99558de98aec77288bfe7f3386d428764aee30ec426bb1948da41dfffad42eca213d325fdd919e4ba9725cb2315995bff9d5d355ecc7c4fb95eafa0d5bac0c78f138ace55cbb33ced2be4f4ce8f44e1ae38e31f526ee67639a63fd2b3ae130379c5ea6c114a4639025863457c5ca73fe3e53afded6569279f4d486aeef7c38b012f283a81af8fc97f6f9a7e3daecbcc872492af9616174ab9d585a5fddded8aa5f621e0d05e13490eb50c1a071a7a303693183db52a9e9c25e2bfd0b3a5cd0540edb733835774790ffaf8edbeb5a0f9deec951eec6cefe4105efb1d7ccfdd673c11e6cb44be7d8c86c453806aee25b585ea572af1198d33aeaa935ae9c4212e996b68d5cff84399fcaabbf9c8724fccf9f0c64c5bb8792d8521caae27a747388919eec4397300a7a1385934507aa15a1728f7c43c2dd8e66d070971ade69aca92e128c0516efb4b4528144d88109e6e19344f0fc86d3aeb073eeb9f26dcd8e3b216e9a9122030fb0d8703e7d5a75543133247423f3b8769d4c1a16148734ee0a92d3db280f2782d087e8b2b44c0ec1431f637c3e7768eea1529864d3e2ab1aa1c10b50fa1ac9c97e61e605fc364db4f40011eff3ae7e1567f0e4746ea50ffe7ec0d77ca0712b0b6e1ebaad4ef3368d986cc8db204e11dbe595d7e3fa89dc2dfafbf5779109d7da5513b127ad2fec6b0b96f5b6388551d6f4fe7b716de3fdc193208ab669bdc699f17acb2aa44938f4e971b74c2eab8f8b8c7cb4d40460f9895be3e7398af57743f2b6ad0ca657378dd02f9bc6e0c063c4143c566135e64b3f029dce1e93a85abbf38aea6f4ef6360c1feacf5279d799b9b96322ceaf4cb7644684f584eccb78aa061f934c13fd3d4d8a032ba47df10c6851b5390dcfdbc2cda2141fe2fb594c960ddb0ce75cad4e86b48cfb13861dba3e174408dd2f2ca6d6b31f556486a5eaefc565835a9947d72d83c440a27ccdfe45951b476d109797f9ed07e7d57248a9d8275ae78431424e113f28167679b43d95d6951d36314005bb395dfa9f4cea3d36d2de50a3526c0cc19afe130674a65a69ce326dc31398cef12e356742dcbed92732009322a0b2175719b1f41cf500fe2ad87c11f818bd1e345b7e6797b0e1b6f4f90e1c5d95b4c68238817c7acc32665fcac28ad18c5913cb0e85b3645028438221c49e2f216c544344c33ab82427b1306f7306806b90f73ee7b1dcbd4d41d1919abdd7c6c6316aab50a040574632a0b76e5cf26e2ed7002d9e8f997cf98c6b74c61f2d0023ac1a797f7c60341d5c0197fc5589f42259b9cdca6efdda40a79377823ba7120fed1fceceb41fd0dafbcfcad587161a3f6db97129e829c7344fa9644651794f6be73cd68c94f85df49075adcc8ed5fe571da904b2dd0c190a5d08b763bee4f87d622674c61ffb3e77cda360d6a56381ab57f92a926734eb29e7228553ce57a18413f1b0ac5bb20b3ac5283950fc997cfe97975073881bdf2c0dcbd28f5db177f2f7e4a50af78c8620fd85534d37b90c7cfc741067d72603da041740838a1112d8cdd347836bb4dc6929495f191c415c0c18dd45882c72f17551a18ac3b827cde9e57802112454f1030875583261a844b260923367e77094f2f345c4729608f3361de7044dda7c1920d591bbadafb4fc1affd49822578647c4133b2d90122979a351f0ea0bb439f5bd65cd6bafac62d0cd8ee0cb633bf30c78f83bd4464a21c83bc816619b927815cea02f5142a3ead09d9ed6af5630d14c5166339e1cf7341f6c0c0ec108ba1dc1fc83203125ed76d7cd9f225398b19dc616deb0da0ab5fc6c6ce10a299e4a4756f6aa958b62860cb5247b45136a3b05dfd72788fdcd89d79e52ad6f5f8c2da02c911b913099537bb558d22c28cccdf5f8f7a4f057b845b0e65a517bbc9c9451fc1e8a44fa434119d00ddd4c4f74c993488285df23f92d46b890e8c2a0587af74ca4c516e0f2d7de97b2b5c1dd0e8b8d40bb5a0e2c25fc9de49f6f8c6458fa0ff5d44a50445f6185fd79c02e5735ee871448d13a25559c332da4b658a0bd3fb29e676271de28424958459c4f477ee1e1c8ca2a6795c2d59873501d8245281e1df86cef0e4d2c3b863f839ad1bf7cad0a2434a9328bf36eef714d757f54764aae24ae9511bf6a44b84d014056a42859720cc3329375213a790e51e8b022b2705ce9f76bcede96bf2c35da543199dbce16be65cc1c8af37f39036373dff0698cd03364f208876a0e5d9616e6798e9c99e6fba52ae5b67c4117b67f7e37aedee8c369fff7f18fcf9c886028d1890cf1e582c856c0db31e3a3ed316727750461f2a63634ef9a962aef85f2e8832e501579885671231ecf6a932aa41580fb52d47eedd8147da16a29f38042ec2bfc171686c4337d96cb1fa579ce375cc07624def8564800459bc39f7b7663d281bb4a813ef390e32b2b7cd0d53e78068d1d94f575f4eba51db40c5eb5ab40d504cc6bc2d1dfce6c255aed744c633fa769f0f753ce0e89b3a242cb624e5d50bb253b9e70a33d892fed4e31a5b5985d875e17dd3a1c2d779988d30ec3466f5f8da7c62214295cf05f5c4b1a4ffc3c4f1e2875c262ba5eaec8e5b35fc38b770733ba095d8bda5e62107358528e083cc2ab8f45a84cb833e771c177609a4a29b7bdcc5f462aa03978509bd3c64551745680dad15ebe74bd5a6fc9a70b41711af22ae095b4961eb59ea390e5d2fedd89b35305ae50d8efaf71ba25bafaeeaf82c3f12789d544b193d4588e5f4b2972a93035a3202a0696860f7fe72abce651e219b8c6e7d6c46fdc529e1193d289ab730c7bff7be412bdfca8f9bbf21101d42441d9cb2449e1d12ad45241df1f1dc021a54637a939da965948f04049493e6acb51ec4949cd8109b8b9242e799bfc7b8229045337674a47f479805e31084941db75909baac9fce00ba6cffadef79d85a668fdabb26799d22f985eb7a17d3195d6f9e00d943c4ca0d015dfbfce79114bc02a33dd7ba831e963c0ac992c19ab62d8f2f2995587cee0a6598dd2a8e13b2b071bcd636e9e74f9a7d65e136f60029aacfd614760b5b6ed1446606b8d453538bd86ae67d0567b6e9ca380d8250f749b87f2ee55217988de848fba19d6c082603a3e657e2cf4d37e44a793be32c9e03a0751610088bd87aaf9919949b3b4d5d6177ba5f486f0b41d4c6365507f332d271681c4f066f2e6b6448b63c299b1379c7d7501903f114832a33d4ff1f66389b146c497e1709fbe29f246ff353dd3b2bf4d05f925bc4fe54355e77e2e97c0f23589a3033b0e949872d8994b8fef442c695d598c0d4b77112943f83f77fe7d97518dd93d2f1ba91dfef92390f3703020022873995bb1f3a5a09f85035814129a00d6fb3a86ebe6693eb85f156768b7214739bcf45b052c09dd0cefcdf5009ba229b1894ce00759a9690c3fd487cc1de7c33888d92bf933b40bd93e46812619c0df7109748176a2318c328f3aa2537ffbc7050e0f2f97aceaa606c9bf4e4cc530b19efa1267321d71374489bf7e1d2a015a915759bba6f94f921d511518579cfc9f826f471bd7050f9090019d6cec3e33e9ea7385fc98fa6874b6f6521bca0bc0a813850b91eabe8d04e94fa62201dfa65c50490f56d6bb60c593c2fc93c790be5c75d2292447bbcdde6f2a21c20798bf3a613d1d79c19f5e0ce42d9679aa14394cfde7d642f54734b503f97c088e75d537eca7fd51417bca7944a65861214e0bc72db426fa814a323f2f6cfa2281e134cba86121572e7a3634ce5cfc6e9d31fe9732ad8ad0a6b18388633015f0daaff029d7645f2e50c44529472cda2c5787630b3093414937cf620fc8520c76a20119905dd393863f1509b161bd034a807c19b8f5a44faf4e4ee240dab7470e903851570bcc7432ef216f40e98e3c3d015243fc868fc15fa53384eca5f8063fb783d31103640fc401b57bb4f970bfa7aa0660a8cf6e5622517c40122bc5cb78554e88c2d4acf77bfdba96679d95df8ddca0b00d54624c18331a532c8f67ff07c3415b67413e227a1be269a940e0dab193682ba9e787d13a841a93b32b948d6cf85901e615d28f10304f40fdf0760ab2099b7b2ae22adeaecce7963895de915848883caa78fe64bb0c6293d15482e58f8424b5d6d46842f0350ee1074a53a8f461ce6a84ba5b12df1815854338832d9bb230487f8b912f700d04453f9f026c531518de09fa731898ad44d2ad7b215921edee2238c727966418a4b9eef49c2d2ba1b963689d187f2ede25f34bdc0e887cc5790c47984f737509a9724321a8d567c426d91e1c74ca41689a50a0e28f932ddacdf91e87ddaa4cfb7f680f37db6167daaea33e753f9d489badd66350aab35647a724a7c2e78803b37304421914e8d2a4f21bfcdc1da674d586088bd44ac1e9088c8f10b5ecd17d3ed9e08a7a90ae60eb25a3bf550affc85224d04a561d99a81f71384ed7b60defdc0a5cab15398e9d9d4a1572928ff0fb4b6164aff8af3c773befd38ca9d43171c70cc8b65c8f2acd0a050dc725889ca75eed0bbf4be26c6aa01bf203546891d22da51d21ba2651f990efdd166baf52dfe03fb579ebac29ceb86c70a28319a78def3d0205e10460d8b58aaf84a66de8b71f13329163e395fbf60007732a49b5ae55000bd935ab3340529ed599531a4e21b7f93dd75a0634d8cb2adb5d6c6ad60f2b7fa8603fcd30a16b3d7c14c0889d0124e4102b0347f390b34d304ef73358bb9049299cc0ae970f54f2a6809880824b319d25ab6e2fb1cd2ad782bd4d12f4a04e63772371ae9fa2501ab6d2cebeb38b5c1b0cdaac7c48dd55ba36535caaf9ff6b0eef861341ad83b229bd38e9a3c782e769156cecadd1ba25d325aa7c7b0399a277e05b15b670765d42402357cba8e8c8f88bb14dde635f05c1caa12ac2f1baf9943e1057e6c659e37e64f9f4290f40e63f0cb0198a889e6aedb066ba07adcf201eb2f7ffb733d9a211191c05d69dd5177c6ecd4d5eca7a38154c2caf0d02099b9207754bb82ac329c9783b17483044adcde75f495b07b577e9d89c296eaa4ee41604c485929ccc776b8817c9ac24d974122aaf8c1cf2c920e2f941c4a7401515e10964f0ffa823863f08b2158842d68ae72ef8a2ea05a7eb78575c1f48ff73d223d29060961f2b08ad8c2d3c7e2b12513e39b94f4608df007d062f1674df883690df322045dd960754c62c2dc92eaeb44109c7fec8aae7eeda725f0c510bf155ed62cb02c71241e0a4735690879e30b28faa81f020d1e2477f466afd83a2893fb65df444d5d5348f84bae5ba215581d85579907fb6947cd41e2bb0f976f439570bf88041ff7cf4b3f25ca5b3b9639eae8b9c44967064dabf970454fd4a451534b8c1a2ace9ee542e93d482fe48c01a21f28b8ed5bce640a91995e2f2503aa2e6ca321b856ec12caa45e6ad8c18baf617d0fa1b9b4589976b3a13b9bef74ea40eba7f2d315df4a57aa08b3349ecf864b0b8e4c76bba9493554ff305f21d32f09b5b1734d815107c2660278111f50e66ba2f31cdfd78d3ac00c6bf26b89bdc0ac47f0ed3f40f6c8c9df20650a37077e145cee25655bc6d673b3ec31781be85bd58b0762c2ee5d2cf308491028975aa340f8fdb332caa491093dae6a59e311fb5abe455b82f6a851072877df08d0bc145eec5a3c3ed04fce4aee00554c5d56945ba632a5717173c29feda042d2330d57242b6a5b1a028369bce0ce6c5a1fb2c63b422acd72b856ff5d073eada261383aa6e959e265f01578f9cbfdffb484df935bcb9954a3538393f82465b85b9985f24e7546e22183ad2c59e5771aa0d46150139e65b3defa3b5b154a81348062e5e700fc9d293cc3d880def8d973eaa5fd6283c46b99ee024efa5de484f98cd627e73be45b5b6a86cd2a58c3ab7e7c964cc817c89bead86bae40ebe17c2b52c0a5ef7e80255c1ab1387eb49b0b3a73dc6cbfb4e650abc60419f97215fe4dc0632098b0d5ac75cb816e65055e24c8928fa5ddba4a5e9735df483050562fcf7c3414587e8b670f3466cc12f8f7d58fd14fabbcdc80d2627de0cffc312c04bc921975a2aad834d7ead03a60bb8e8bd1e9b14eeac14636547c4aa9e03602f41c2b0607cca95c0bf3100b19902f55dc1b9b7e335da0e87baa04ae261875ce1bff43fb0d96365d62f0476a8d601d9ec9171b122f779bf69a7541996472a2205ab40e995ee3eb13237b9f9c63c19034eea0f93bc32b3cec23d47f205966b4ddb45dac71ae8ebe4baea0998cfe07d9a90d85fca114aeb5d6a1499182329792b24a463f83e61e6631c9f4b8766cabe856a2cc647f421dac52a5b87f5c4edc25a682cdeaf7c06afd16a523015b3b96fc749b87c84e30935deefc4d54f5b6c9f322602efc0cd43af4ea1469d368097c20911c0e38fef50898304a2c9b8ac03ddf6a1dbdf64f417c2bf58cd213fa42bb836743e83beb3ffde93a3e251d4f0e0b43e0439dda52449ad3d531891b829dd137a01b894e9b11f33cb971cabb4cde1da0643bf12adc0a81d32a13aa3ca6eaf0fafecc94d6aedbac0736f8b4e55dfd2e2a016c0f702864d7d2b7a9e4a2cb5e2c576621cd3034c56249dbaac2efb7c002327596083b029421cea2a62206e698a6400c84a20b8cd4ed62bbb40b5c2f7758d154fc92470d3b49c048a62444bfa454fcfe85282a3c69418abd18376758be728de02b4137b94e91da0755940f4219aad8faaf8fdb52d39f723fb40ba13c10b8aa62fd1aef3f55df4cd2a28cb233977781664a6d79aaec672348681e1b8a0783bdb21eadde11eae98f4ada640b02cec6f413c2683fdf27642a2634a7ff1835a8e1808e70293000ac74b4a74d340a669f75551078fa7f1035ec9e3006fb581f9127f11add4b027a00b2069690c46d4e1f7ec10d70c9e2e0f03ab730521ac5df950076d87af33243a3e0c6647f446da46d7048280e97f753d92314dea5d331a8a4b267c2c53450dae74306d46119be7bc5827b17112e3efbc0e1af8637eabe9db300c571e8ecb5b09ca96302306921c4f42592d90603234fdc33d6522661cc97c484d86280f7219a5408ca05614d20884ed8befb2a4a428ad0e3f61a25714036933794fc53d65828ab6ef081ac3c608e624e697c918120b546ca486772384825f667170ddfd0d292e99408ef0861fe0b572f021cdab0b4eef757a2dd06b0c1bc501eaeaca4c967f61fb79a5e1109b8ec4905be618e594dc985d9a0b7dcf8d87401890fe2d57fa76c9c395b20088dffd314df881c6266302dac5ef008fe93f9be3ec5a84e72ba6e68b279fd864aba0c3a2b488792311da148b1a4d2def4880b11ddc61c1afd2b03315a22a3e817f2f7b07c67da8ebcf5ded762f6dfe5b3e7968a41626c4457bf45a483bda74014a2101a6ab26d38c6be25da2d3bb3fbcbad977af531304a6de2d7ad196974e7cc8d3359afc7cd66cbd4206f05f23df7384881504c87e4e534c03e3ef6d1d65e74acb9134de6458ba1dc69268acae2c56677238546971b6260caffec969598061c1a0aa887c0c7ab9010f96879df35f06a98307d6dee2fdb5499794c77d582a0c9418a30fdef56bc48674e1c4445fde3f498901d9bbc1aa3415a82708cd2c65b208d5b08b79ac0f8842fbec732b3c78306a9b32d6a9d994f9422e1c2b63b2f6714077740144b6d2e1d5addcc3eef83c925256b837912aab2609fdedfd1edabd95b85fd60c9c9af56c00041b0862a174323d39b0ba9aa098d40c2adbff2e07a4f7aad10dd0ff20fe0bdc8cab27a87efa76347c895a438da1edb67aec244ed6e9d49d42d8cf6412db9c07ed08d94a73e4f34b96be4ea1f84e553ec981018caafa38533a1432032e64ae76c2911be4c67d6e2a6024364be5a5f88aaecb73fd2e271ccf65ce1a1ecea1b92cdaafbf50b0662ac05fa25db9cf25d5bb3962360be6345c22fc69ccd69fc511e4265bd9d6d175f6aa4fe37fce2032394f65cc2f4f83609975ad83402f9a5921b6f9024ebd11ac4d3a6640eb5bb3eac1ec83b1c9198e300426f7f4a39f441ce65da4cbae5a610a8b0584a6b9a31b2dec5bb94834c80cb9a04b5279e3df9dafa5ba93eb5ec39d9c089ad48dd5a8e657c1b1b0ba0ba07965b5e41d3bee721a0e2f83427bf4204acf86b6f9ea534e3ce56e534b4ce9bf422004e86e19d962a20b30fc855b3b55e99b747b3f9d89b6a8cc52eac945219f2b3b81e2bf51a4f9ca412384fac7f1755226f5964bdd71fdefa98585b0c1e211b0f173f94fca81e9b6e28634a5871ed457be80017d2fa6adf6d68805f5c9e90b2c146cdd428e68dc72c017caee1f120b254b2821740e6a617c9398026fe32d14ceb345c98464412e48a929917874275fee813f5b88541873dff4eab2f2f705652bc4918f89caa6948cb9d2e96c53d15f0c24723873a21920278e2546816cc785253043e6f1b06229ce744d2c06b80898e775bdd38faa972c8125ec050a2c53ec3fdabc0aac82b92b214d6c334bcf393e95d090cb84959e0178109ea0767ecee26746256d855765299e5b86557de29e39942d07f6a27844096ca1b8da7872d8eb0b47a3a4bedc9ceeafed50bf73e1306d34240b007fd2be1b30ea11606b6435b473dd198f8544553a7cb8845d9baecad4f050aa855af3913cc282a89ddd25edf3d462ab5c27d7e7d07dc7a53e50a53c2dedec4dff3c0394b15ab5c94930f44842b1d8be1cd97236925f7238daf293fc9e07210c8c093daecf7e7987c43601e01f775855ccbed36bdf568b5a09d2770cf1790d43c05f6abe2f25719db2527118a938f459b65a26d01d857eff4a5caac8a7cd2b3fce0e8de00af00d39f2a4ac226f3b123ab262150bf11f564ce6210efdade7642c7115d87a229073db797a8171cc086cac33fac54d3368e9a1623b66050423c2c3ebfcf33365b358cc4cbbae30ebba0d6c8b6dceb66c603c7ec1e741be16d34add120f1ec467296643864fdc684d5d99763eb6f7031007f6b9f59d91a9867caedd08b5984fb483e6b3965b3aef2c5fa1c423b519d37f91e83b49f7f58f13771348ee15684b4a7ec0f99d7185ca585f7aef83794a42f6a6158835491885fec0281d132e4f45be30d7ff648ace2ce6d5d500b4c5a0b1b8667a32e962933319852ad563362a5d27fb04313ddbc606f22e1cf664cbffa99d4ce5adecee075e42e6d8f898234b18473d6c5f0b078b22533afb9fda4f880b6f36c0788ade789f5a8a765b576910bb8bd6ed8a2f0bd4eb55ebf6f7aa4d12b2b5b8ec96e7fbcfea6acd9cd4df8e0fa84d0423b1f581c41bb37d6952f17af80b93907b13fcda49d4c51f5e9a80329bad60b84f54f033394629a38b23b1dbc494bbbcb1e9faf73e66aedcb1d00f880be166be022ccce121514003ab659d05d7c3cc10905668aebb5bbf773631b3111b1ad5a02490198af283ec558fdb938af23627263b5f31e909f2a5561c02173401190f0ef81f0443e71b2e763583a5bb675bdd05e029416c80913caf7f07655d68c0707a08b57b1043819b147977796b9e7a67846cdbe78b5b65fd50e8f8f0fd3bd8b387c51ff8574c4f36e9b4d6ba384b857ba41a2e7ddedbf170769b020d57b92430e809a441ad615e6b722e90ebf135a5ef1999396e747138c81a3b649b625e0accc76cc95b1b4d965b53d0cd1b1d59834b05ae18901790a0c50cf0ce726441eb1a21b0d4228a42d40c3fee0a2a0a0a2734ec455c373ba56a39b0068fed67627b3ca29fa6676776f01c9824e3eeef0247e4b59a26327c96ecd5385804e35b5bc660c530735fe721969dae27f2230b3f9dbf3f8c08020cdffb4dbda71b2f07e3cb96af630c6f9a76ec356ef12ce8a137da33ee442dba9500ddf9e276d70230b09c474575ad53ef9070fda6bbde8a273a82c73766ce7a05b6ed1ab9d248049094786a338ac5bbe87d73689143bb450da23b02a3e23d94dd88d5abb6dbe92c7090f5231ed631b19d06c51a08f37af5aa34b37191919f10d77e474d1340bd97085ff06fa51471d79b6fdd6a94d65952f102f71660dd433781476683e454f1f92f4eeb3b91c7671934e510db2ade92bb9d59f8a49074f041d2abd3bac88bcecd7566bb16397f0f7089fe9deb7319dc4a9881da7c81174c8dfa5ae2d907edf2f3c20fb48ec138f8e6f74de33e4cb2f8f37bf0fbc25772c45af8379222b340ce56f1e732fa54855f51668013aac857f886f80074eae9f97317d9538efddf1a4bfb7194d3e05594ca6e0bc12744bfddf962728aa4c5f077da9e6dd757e848817d9323c72f0d4a2aaab5e9533ca7cfe491537612cce4f9abf83249100413e98397e6f9a2850549fb23042f433f16249c6498e4eaf10356d72beeca47e7b998951b09ff4b33df236c5c951a042193c8b84d45bb5a70807b41b43674246b734087953dd4e8a33f1f6aded1a8078a080f9d7bacdf5a5c9df9a266f550b8b8bbc4d731227dff3f65606b43987e9390be8c8fcd59118b2d4cfe228d9d8f1ca56d838fe6033a7ad4fe8dfd64e817e944b53acc603bc2105278ab85afd66419a05cef4a3e35e044fdc72fb37d8107fd8f59ea8d278ecc1b2ee4eca43f675a7d28a0a4cde9989033a7d7cde656d52a92e70e601193f590f77c25bc10945413b329e7920f7cb203ec702a11971d13a09d784406d61593af4a3156f389725380b642226eb49333e3891e2495ba904f1d2da1534af279e2d81c6cb8809f304fabaff4cd5eebe60c8074b364c2c2bfc73fb0b2389283c8a6a3dc4d134796c2d75edeed3dbb488fa681f789f081ce8322ae4d3c12291175e6cad4f996ce049680c7e27dc51fc4dd536cec395b149d58b42ddda7b4ba59a326f2db4adc3f597c8519904a9a82266bdc635204ba238c2632eb34f8ae326d493e4f396593517353f719f0ae191377ae5e5add371bc40bf57f415708463ba81ac9ddd18988cffe67816b81b29df6a6b6a82d2e4d3e18d57a338311f34f977076b50a378e5772f817596cd3299829c7ec501188117e4e0fd3cbd3af6415f3d0b2d0eb7402a4d49241a3674332a2ab5792caf76856a6c9d4422a6820931736e2d08993bddb26ea2be3da7e53aaa05fe1ccb9ce3946bdccd99af3e14ceac6a91e5c8c6fb16e75f0ed6e466dac5562ba22da4319cd59ac5dec1b14312502bdb9c025899895b3da400e7ba1a03e34f678664ed2248cf3b9bf66fa2e9a94e31df61c60b4a5a69d7bf6b739b5d882ab7e4a85bcdeed12c79924b533296c763156876f4baffa95f4f6203cc09039c95272bfea11782f4b565d331e997b5b1e8da2b1951823d8e9a34ebd92b1ea4862a07c14d769d024250c3a76c168945e6515917148bc25d47d8374619faa320af932733739d28276495296f8c72d5e96a7c052975f92c3050de20beb84aecc6ad29f1cb7b38884edc6a619ef0b149590726da71ea1f42ab69c5df28f78bf712e6523a35beed2c51aa573a95f46ad9a077b23a6b4f2202fa2b3cc09653ddc6aa751bff2641f1b9857ac4305b24d0f0ef06a308754382a256880c7eee06303fc8109f3a4cc69b57dbd0fff4d942f3ccbbfae2093e39871d032596d98d2250766c688a4344c40297378a6eefa30f1512384315114d96cd06e56767dfeaf04d4023afcc1e1a8b17bf7f30ac185421f12aa7af198cb1832ea7f21461f682b9c659494d4d0b97f83bd1728c4d56ce9e3da34ced20efeb81ae468d1ead149b5906f91d7ef3a240ac96669d5e3a35c9b310bab7f62e7b38d6f7534af67b2d661c2c726c15c693ee0aed61f2e05ec197200f21cc54c9b20e2aaddacb0966c6c2c087c193ac2b24866464f7718603ef3703c64485f142b55c41c0d9c3642a4f2e8c673c18c2b4f1a24ad49866a2a3237fde2abf4ff2949246255c04e6ed12fcb5f7a94bd3f786a1c697a70019023884ec73a4ba1f39e995ba2d2ae97edde2703def69dad1012ff6ea498c357c1e96f5cb087a0c59c5ad94f5e1872c3856bac43d77046f76d0990e7b92e570cba8d20712736d1a000d6cb460857b7fec83079eb303dd46c843714528c55931a4189e9b3eadbe2b65f27d3401b5dd87147a85aebac01f4f4ed4e1f3ebc9516e833fee6ee6f6dacd69e0cfa2adad0c1867b73340dc49b5c1f28758918f917ee6a80669ec4cbf203adffa398a508ddf4835ce2e00908202799363c3a1dd5e493b5c75d3eb341bc5e7c14d0dfc9e3af10fc67cb3b5cf13603a824c93871f4c1eec5124ad4d67611cb2dd08594a90b1d4e03008f448f26a9493148c6b16a99d8c6ba34dbba70cb63b5c46140125c7c5c42d457f7c4a064f5dd10f08d4d15987a22cd6d2211df8dc96c2c3fa5a5d85969223ed17543d0f1c5cc2314a7d9cc8429cb11648767419be6413e08a7487e50cf7cbb43a17ca6d2636a4386248d3ba01a13b101dbacaf6f64743e287d63ce2e48bc97c7fc7e68d9f06daf055ca8e4365eb5b3128057805cef43bd557d474bfde3e0e8c1d7f3ef55a1e8949b32cffc411cd5989bda0dc9da4396de9cfb0ef4ab23c98c9ffb0274557a7f4d1866f2b0a807ab6f8eadab3c21bcfdfdafa7e724e98a2b1088fdb4ec0c782bc03c43a97bea6a60980f8750066a4b1e364d43301dc8ca2dbf1222d2880cd32c81cec252fc04e63398a2c331627979689697bf4b6738096bcc5a1ab1d926a5bf007ed0d8c9c556c01542af2e421596294f2590c983acf4102c5a8a62a368c3d26fd08657557f72b18a9225dc9848c2326e9f86d125ada866c3194417c7caa5eaf185279f2891430b64832250791b8b3ee3bef1ac1e30e73453e34efaf0e3dedacc9da790ae2a0df07a480daa8337ea3abb64fd07a1372d0a5bf2e67039923f3e8951d2b4d6ed021a9746ec04cba842fc62cc6ee5e34e5b8dd7d5b8f88a06dc42d1a01d770e9a1d1d4dbeeb3519b92b356a04f66389f6d1e8d13d9e1059347a7a3f84e4ac8dc15cd9eda6def668d741ce8c5067ede2f42328e1437aa4535d90b259ef767149d38edfef2b9e62fd66ace0bd701d9123abcbc4dec41a09c99cb2abd26df59b518949e16d0ee2f6a2c4635f57f528ff88ee8f6f828685ffa069120028397ac2beb6b5e2bf3bff600b4ae97dfe035471f812703545c864885a7a869b4a8cf828e80889fa3c1deb363692f19e4860e833d0afa1274ec9a0e95149828a160d53038ef22e78099f79fd4adf80912cf2bd6d1f5c30e1ed583d47481a237fab542ec0e3869cc875aa74d8cb55a9be0ddf7871ff2d924454049301f7f0402114019c1351af1ccf07bf7f60b6137c26886240cde5f8a29dd464167a490dbb8697a65b0ed974bbf2e9ee740d85b72495fa02e82f2815bf42309e5ce4376d0755d02513d34f1be4956b2fd9292d924fd25a9d56f982920bd35b81b2f4794cab648172c755b29d38131321cfa78358cf843c2604b45bf2c0a4747d40c851bc7744672228bade9035f5d595cd937d83974c7841a46a92b24157aa7c380c7a7911a1bff5808afe1be1a28260670b970674d011bcc2ada4027bfebbd24de4b636084bd7aea115983a72d3509676492cee0b77f426b3c8c5de8a476400f0b10ca9730efee2e6b67918d3d1b04e2c3c874cf71380888a31b553303c48fa6e88fa0367caea63d294294243bf0c425a5e534b26f2f8a49eeba7c439eb0448f47c8b641400cdd502d70f19755e2bdaceb18e69bb60a616d7f362ab59b18b34824efa582222b201942433e224b9e5e7bb3aa2b3f8ff9ff93ec690a7751b9548579082c76319b0e34373674c321ffec11e1592a3971375476d82975f7e1edf49c7d9dfc6af1ca61276e61e380433478fc02a23735e1dd1b87cb6ca8d2866906e5aff0695f016cc95d601416e3de1088ab67e43c120cb785fa9844fbf09a3257df80ec4715bbf4595f75d6cedd57436eadb9456de84a4bf73a06e0ded92fd1ac201089eec773982d19bf357ecafc424cdd7600fd1dcac4012755895da29e34ffb3d732d6065af598d341bee41e03be6261aa1d81099d96a9e6f972d2475be62c9442446bef9ca893fe235dd1020faa09bf3e0b24dc64672733c000a91a41d5daf6618ad16551c341567f031803df31c8d50864aacc081e6c43d6b8433c1b44d2c7d1e9cab08b2f55540ab5090cc6cd2e789dbd2dbb6a7aef5c44152e401ca817d37d39d1822f99c7a239c7d39eabd27b21179670025659bbe083b6fffb5ef6c44728c83041585059019d4fb56f34f014732e5d569026a15e9ced99061c31c59f02266e01b635f16ffa2b28a3d0effad4bfe2ebad8dc33b7aa762849a97a47a6080c3efb7af1449ed999711869e98a0ac7263010aa2bd2c7afd1dd5437adef9f1257be34fd2bcc99fa445f2c05aa8c66bc4c77ba55ac553bb6143e85221cc493fbe617b75ffb347c685a85a034b4fb542a0c58362bd8ef60652133f120240d3513826e05f3fbeb5c4bb2f8051097b910afacb21da88bd41d111baf12d22b98e59d6d30671a00265a4e4a87de8a2db57f18ffbeacf30e6c63b7dff7271e4d9221f3809c71941b44755b07e6fd4637a03b0810f008f4a2ef870203f5bd378ba77ffde3b15dd30e3509446165ef9c88cc0be2574fe8bd4d7c43047e45c25674edb8ee81140404d0cba77d6dee05b3450d7c2f0c6d5126471068c35f127895992b83849b2b1e6a3976af06d65d883618e866555f8d1afe3c55ad5fd9a8ac8b6b443ef2378c9ad7cb4b5dee20f8220e1a19211e5b26b149caa59a91d4c1a68b18161432e8385a74f7213916979fcd390e01a9867886d96ca7b5b3b93ec1869e26a28fe859dc4fd57bab9b5ba71e282370c9be83ca5e5161b6e7763568cfa669ffc34556ad0b33d60754f2acaee3ab0bd4f1de0da341df71b13dc80bf4947b5198a2349a2e9a05be24f0868f93b43e128878741ba4e4960f9e2595b53744f8259417f9483768811c2ab47b175c544af5f16bced318e912c1aae68ebf03db67acd7534049aa0f189cbb373899b5315d2e3f3af4ff34a3ed0ef415d2eccbe15d458946ed5d0bbcd2dd2819ad5f0f0e93b380dde022b937009af3ea42b809fca56dc78fbf2e27645622a1c4c298693e282e9946c7508a9c5ddda2e8ad394ec71aca40b16312a85731d0c72da78487639ba05ac7aedef948d130b681f3092e56b3a4c79354d312afaaef5a2d471060d283ca8a21231e91f87f0cd8c61f49a8a9796ebf441e5a0cfe0a301be1bace75fb717078c78b0072ccbd6dee88519962ce3cbfe7200cac81c1fb2adbc2882714bccb8e988708ec7124dbe19e22266788620d87f2dd785da2a29a3a5c58d8d43be79c19b24f5899add8727d08ea8483b6bd071c51bc32c684a94d17601ec680d1fc8923ed4cb88660cc7f603c74dfe45735956b5d82e9a78f4ef02037267f46df12ddf985458b10d7020701502916f36aefb3f9ed6e246e474a8c9b239ba505a67392a2f6dfa34945fd78cd9d4d5d76b167161f1e0498dba6b365f1e2ee3962ba012ca166c7a5480758cb12be6b4ad701a3e375c6a407e77e455d6cab47c77e1327a8742088e493a0a9f311a5855e47158740b6476a37e48f7cf9eab5f121b86ed10fdf6118a85fe712ee8d10237249c03813ee2b7012adc56995bed3f73875ade728630e3be574d670a950ca203c65e70c7c6b32cf0d10e8c9f67495dfccf542958967dd62e412fbc0446f2917c3abe4e375773adb9f5252f1dfcd83f49a8fa0e0958d5f7b98f9071ef8e3d02898ffae3ba993299eae2680f8f4ccff8c440275cd60ea0c4b739fc6e0cb26ea18e2ef0029fa84f72441b655f3fc0f87ab5ae53f1ca436fe45429e4631122a470525a2bf3ffdd8dbd0bc3ffd878313686d7927d2aaa6939b263710f506ca19946de3184610a300db5bde2747a80f9448c839674791e1afad4e10d02201f3f5a08b714ba5d46daef8066b487d2b3ce20face4e7597c5a920595932d5c2a2b787ca9d0b54ca51c9995a0234bb083c1dedf206d0313d1feb64ed8928ba61b098a101bd65fdd9b8315033d886d4dcf9fa16b81473e524b8b370e9a022c55c4934b997231e0f37824958f11ea8f41ebaf7a294ab067b5a0978c81c7eba9e3bdeb79f461a922b2c60df1d77d942af7b10a9d58a8dbbad07120adb865fbdd0864c6af966cc3dff3a4e2ad5abc6293d9239cd7098da13737dd3476d1cb75d9268eab8de08cef8a5d5a7cef3e39881ae8ac9d5523053d06f4964dadc7d3398c0236084d6df9ec680478715f59c1bdcbb32e9da4b39d43d5c79760c8b7ee180141c9adfe6afe3c4f83324c783b343670e9a8892165b7fbca14a460f341bee602a41e5e32bf0cf0ac76db3098e0a181ce169529e728ac29747af4dadd3135a4926e6665da60a07de7e456fcc25eb851db325ca19afbd623d45299707f62a688dad3b98658aff106c98a348fe124e0b3c1087ee399cfb9ec5c22d41f9676bab9e324d0ea79b9d5acd59291ee8fa66aac006c70f0dd6d4ae3dae31b932fd9b8b947874924e24659bc6ee5919e4fdd81b5e00a91c6d88706b82052d3c1367cae398127f28745c9adcb23b089153f61a0c8b66ee8c9edea75b7b313250d0276001a4aa134936e4d825bcaef22df9be0912fc8cdfa675f8093c44ed4b6c6883a0c243ea187c359ac5e4ad2c611ce043463c8cd23e0c2cd12e8f6127cf88ef6cc39aecf7a42dbdb4c6055cbeab1e0749574496a11087497a0576468272dc7d1899afeec63153a7f16cdf34bcb580884165870d1228e653114c23c399234c3b3bbdc20a702688714c6aecd0eff8bb181873962f1a697587d9ef065742354e358f7667be56384ba9a59c962972e7b41c49e75f846479f15bbb0d04e14f340b390f59a05ad621b9781083b956726ba5b3d8826f32579627f16856b3bd848f489842462b0c90aa0e77ea103667c46fea9474e3b0cf0ffa156c02d94199475aedbe7528701f66dd0950bf305303ada1e580e5aa045a5601d2afd56e580f6cf2141b60adba0e2a30271a3a084e7715f4fc0a028809162f1d0f8ef35f3c50b6ee74967bb90a8cce32b683ba9ab6a09227eac5720fec1f88fefb641a72ff55ed291dc13c151b3ea046d04e70460c5b96a30b1c80f559f3e6778ab5076862db5fa89643fd70a46c1514160e20def37bfd6037916dc493de6fc961f07515021d0354a06aa3430aac476e0d14ad092090314f63f598b0ce43cf42648cb2d15053e99e90d16513d0178870eb1134e70f32d9dc524e82930567e5348800fe5540d6b4eb7fabccb9a5738f70d35626787c7f860c6f4bdc4361e1195d1334d3388d3dc1459b934e05bceda76e5531ede35a42a3eb5e0416b325c80f72c520497e144b677356242bda6a6b555cfab3b68974a834edd7b0d47e8cf4c3a419080ec019150e6fe18929ebbf2589cea6aa46716e94e0e513df9a881fe57c6d97a126d660eb1a1de3c94757dcc03603a7a5e4343c0a5788b075bbe99f3412d4a6e653461d28a5516ba5b6baf444b0a3aa796c7e0ac38d901948631dd0f38b90a4409dff71c3ce183a64eb088cb2bf9744c3bfbc4ea0dc3ced265a90972039899daf1cb75e95ebaed8087bf75c1e3172685036d6b3e0ae93aed98f25a3078bd7c60f33eb6058ac8ec09da2e83685d9e00ecbe9db72cfe31e41d82b9cc955988cec571c3545e3c804de7d1bef8d7030389a52eced7cef01d55a24fdeea24daf9257eda428fd69268e962001f90850ce2e8080e531d43e08a6bae446dace8dd8dc8eb83e495d035de5c4625138f02f1e90b0a4b646627a2efba7e30aa24fb3ff373466862524908aa56a7cf020dcb73fb2490c88e2931ccc9ba7b05a1d8815a5009834332f0eb60f0dc4a3b9163363809700e856b4133b6b685a81367ab6de3b0a7b19e2206b1e5db07aedfe8eed45e60ffb65a5465b0219f45b86375a89c0af2b7e5f26b0a97109d310051744f678ba8b21cd1e02386ee45a932273cebabfacb0fc46d04d229b3c32562599e48ee93232330d5cb858f67eae1208d9fd746cd77fcb684c265f34874c74750165c0d28dd7b045fc0af815fb8d98c7b084cf4901efb16ff60a677821d2117c9304babbc51c5339d6fd5aae3e0b753ed5730894313d472db5ca3023d5e16d62aa831bd75bf5bf379268ba322cc43c85c7da07a5ddc782a98cf198606fba492667f772f6d2d30e930853e0865514ac3f7e23e426379480dbffd0ca25be3f1198c10a38788a624648bb1682f066b130b80941c60e8e6e17d257ad23c942728915522b5ff66f4c327d8a8e3b6844774c8d3d668e0c7eb9d8c58ffe425c867350b77500c911f6de78a24bd085dfa0980659db82ea5569eceb371893ad984f389f7ed4637eb4b67538f5d77b704501749f60b01855d98148069f38dd44b8fdf0822cdee057d56225f123080ed6afb41bce98287d9bf8b672aa91252e0b23add05c239d3ae659459df8cf05cbecaa6a3b0f2ca3ac5fc6e6912bd018878a9ccde84096f706da3f8c41330289f392e7a6dcff8563662940c2ba452424f6c1faea0b88d3e665116b0cac29682c7d7112bc9f4ea4f56fed368ff134464f9fcdab5314dc9dd333a795a4398b86eea4595984c07ca266a763640bec387d9f5565542517fc6f179ae29187417788d6aa76cc2a35268131090a59e3366675aba8ea28dd794cad4fe7934a5c1b7bded94fbeed7785b27aff3a52e8b06a6e62160cb58f5c172339668b64f729ef9d1ec6a087a6f71e3110b2023057a1fe1f73d50bfaa36f8b8c368a3219c96e657dd654e81d3232947d3ed20c554c84dc16ec71c9e54066dd66fc0d39da61f58bb9933272ea95149ef828b805c4c5945ea918c5d21e2115d5ff9e12164fa742da989fd72e5f0e5893c04b1bea19efb71ab0175cb210615ee0af8cbc04c83bc8fc7ca9929377106d1742266c1c34cc03ba5dfb93590b6916ccab3df0a219c65814232306a4cff6dc0b96e50b36077e6f91b05d4790d6b7e7607ddc806b1a0f5f892385a4eb54fd12d81e251a761b4a95a6c77f0322505529e4d51ea969496706d3666ebb94c3352fb31f9b46e2deb3bca878077059f5d0695787243f407c04cf92dac795c7fd97529fb6edd0b6a05fb48f8e6abcb8fdeb2374f116bed553b906976b94763e344bf01fd5c93c523315c2f51cdb28d43ef8041bc692027d4ebb293b74ad84562d41c543678bd6bd6bb6300ccb9c744e27f8fa58ff9b3bbf8026b62657cdd3fb083c2859ef5f0187822bd471f11cba82babde2f902a81fa08f01572bb5ddf415637567e1e8407cb0039a4daab7159cbbbcfb6714e0a3e5ef1ea7e6eb33675218f71510e601928a362f1d0f49dfb8f981f0f052364cc573176c9b9897d04ef883837dd429477f3d6c469351a2f49da18520b971e251b603cb91071da6777f2d71cd2938c0a5dfc48593ad920073e5cfc20196cd850cb7b63d7d195fd094c5dbe3b598e4f1639bf29fc11bc2b349407a7262732d0f348ca44bc45ed560466f443251c9fbb3185084545a108b872fda33be2470dba972c73c3b1ea6ddc2889c0b1aabfc0bcb18f59875fcc51a1e2dd51823763d6a7f32ded9f279184ac87e419a720f62b1e408f93543c6662e159fc43b26869af5687c821fbf8abb61947a3569450c8cb2f6d5718fa0b171e98b0c6281893a8c6b0e0d7627a0e1a0898121d258b213ce55debd19ed324727a9cd9f3b0463c7ef1d73c95e820d7a3301ba976999cc03e10388e76f15e8e092ca1e16ba857c5cac8631081583249545a54838ef98983f992fc64e9aee1991680eb234e7440c69c7e8d480aeabdf68aebddb1a80423ade2531b98c90c4bf8519422c3e23717d3beb0844aac771db1f7b85a8b097e5979d8d03923fe1e392ff059dd1f9ce1327019e01d77971f7ff2c5ac12bdbc1e04e12e2b31e1dd7b468f37238dc011c91b905b64e0928d8790d473460854d710bca5af750c2141fe7099b60ada23e89fe2cac68a140105c069da740f6497fd9f817ef5fca4a7e74629378fd30faf102be8bff7d42850b5258bd48cf37814e4a42bef4a9aba359f2a219d29d00f3f7bf4c33cf633723a50a6100d9d085e25590ed8c7f050adca52b96b7be1b0894e58b07e8aaa5ea60587d6cd46d9847ef27beb751fea098a76bd43dd349f8296fdb404947b64396c26ead47cf67a5bc9d407fa4eaecaad183e26ab990db8f24e495c49072c9fff5881aeede27803babf4e85cdb464395aeb1b285417c4a4be034a94e3c603833f14ab7890f4c5509fb791bd05552598cf13d938a801d1a9350d9bedd59bc75fbbb70afa311604c8345d39f7e1438e903b45b643a1a4d9f22d106b5ab79914246e3b1562697a7ae9633f40354cba3d9a95f5dcfc89f7368b3662c3114a54244e3efff3598a59936f9da3e210885a04f42df17589875279070b8b6f4e45e5b1349af8e9011e79abe8161ff1a9959dc6c898e31f4517567d9363ef3b3547a03c6bf0ba9adf250a2218690072aa3f4caaf7b9c255dade1abe3821a024067a54cb4ba47ffdfaf5e64fd8d77295c1594810f2fde79478e2ed450bb691fbc9b5c35446d040df7aa6397411a1aafac45aee40f7b4585a7f1c147ab81a675b33b12d657320baf63b1e1f311493a6ba5fe49a48d1b0546b2b9370dc591ecf021919d22b197b9257a0fa5934ba85e0b400c6d049d4d11d88ec259b82a821194203dde70dc44f64aa7dd035efc13505bf5705628b1ee959b5cacaee08abee56758dc2a4de75d924c35c39055fe0a5a3ae2477f85d350db47458cb5b7a24574f40b1eb76369e46dbcfd45d24d6bdea846e0eeac919375e2b1e95e51084339b4fa321e6b57a847a980821fe9c28c15e97300fb6f64c757393fe167673375b3eaed2dd22a3b36d7cdbfc9c8bfdd958cbf1f32db05a3f35e854d11de157882655910ecb5004cc441911dcea6605bad2f331913c2f235b3ff0047d99ce091080e564bd4cad9158c9b9c6955bef86cce95eb300aa807758fd8cf95f0873faccbeca57b580885000e175116cd0ab3aa334f57937ee6c9bc2832d1df74c301d4fa5e909ab2e6a3d3003041264777e4d63a35d144badbdf9e9c5fa4a036f6d49fe1d7a94322bfbbbeedd837e2cfffa7916fcd0a34230f1d9aff839d8d50ed270b73ee40f3d6be1422d87cef70a4e848a9b28bed7bf42eba05b4d32c31103ead36b925b8e8d9a71f8388e8563705313b7d9bc9ee2e691f9c3d00de66876963f91e130252ab295c36d6ff2f8be080129cb763a9cf589f91e31ed961efce0c5097b586f8c23e8c8f8219c68516b0d0b273c4e4d08c6f7d40d20ad0431f136d65db8b7f84b4cba9d8e79e903275d41a57a3bcfd281d15b953918feeb4cbd78aea23effe1d5efe23f4fae5a59b1f199066dc12141530db25170398584674e7290b10078c83ef4a96b592e9299ea1a1b3a68931e35f94cdcf887df256f2a6fd180aa6d8e66e44764edba410d7d3094155ee7a7b580f775f71250f210d4b0613a16eeea874daa5a6124ee1f69e9f27aa53b6d45b9f837907d40731829d0f58006ebc1ebafc13297f32c7bc0ccc9a0152ab13c5e657a87f75be4f224d1c814b157dbb2c18ff9638a0a41de83dcfd07d71c41f53df1e8e07f0c5ac47ad1154a211251a2d4adb8ae942155a8c8bf1c491c0b8a5d3dfa0ac27ea1f09a3f9d81bf52d3f252860a0a2588694d74d0bde7e8d59b79b48c0d537487cdb788a9ae9cffc0cf77af11d2b95270a88a5b94e0de74b1a266f6b803167fc14b49bb2797aa5cf56a1a4b34f36c5f8e699fc73b89cc3b97682e5dcd81d8aac20e6bed468e052a0e2c2c576a0827eabc564c3a790f9a5e48c191c476edb63075103d22a341a2a6d82c28c8563e7a35cb4aa9f7291022776c147a571a962131b3ca83a1eb6b2e45341a5bdcbdcee66a755c0c84cd8a7aa13507f163f18c2369dd863103e8993d198e5aec4e3a4b601e74f8641c1db86486ec171d690809f5dc3850b2b09b3af7f9a6ed7bc53352078c1a4b7d3eab3cbc29c18cdb251f61dee9feaadfd9c565400a501681a09c10986262992e6677684518af20f7508f880ac790b91e20d321cfb839adc6058e6b0dc4613902806211ffb2b058fe1253e51474369280ade43515a5186c57a3ff39bdb721b30ced1245f65c2b85ba492733ffcdf66809b802338bfc6deb54afee059a4c7eb241e9f3371b712be98e7ecef60fa4793b141936ef8ccbf79e3c433339c4fabed44e6ebeeaa6c6ca1870a3ccab0c69ad2a6706ffda7b30e807740cca87746f83bc7890712ed355f6639b53f14c334df60bb78f52774506facb055838deb872adf2959b486149dcd2acbbe08d4f5a97c2c7efc742b667b85e7287c0d2cf225b7bc0bc2fe73a2322fbab2a7168fe9a8806ebacfc4983676ac744257f72ec9743a1ac1fc1786938f81c5940a395a6505c5e682a7da3ae9c3dfd73ee4731d52461219c2ca1975d6f619e004bbd4be5c06f9402f364c8a92bd50de55c464d366681a26aed435e2e18323fe571d1e5e9eedd52e72e0658c4323925d567a4893f82def8c2c92a1ffea2db11a042a783ee285ee52d532e14b51a272df52b38daa5b7d3bd142107dfe8ef096399c5264870e2df8a19f1b89dcbac3d9207f8216aea0d517da505f60c6104cb3f4b4dee9aad70921564b6a98040e0060216608095170ac902facb2cbe39a16afd97c246eb267400a15312901495e5a028504fc0b906ae375893ed9c73f44310f2e5e5d9ed97a37b7984a2b637fec389bb4af0199130186c26163ad39f863d30809c50ce261df599718f6ba98832bc5fc7ee192e054b1d5e0dc7758704ec4d7f863e19fd393f0816a8121c2a915d083a761d92f581121cb784cc40229a9e656cf9d080a82a95fa8795bf46955e8cfc7103689705eaba909e2b34c63a00add6c914a66146b738c5595fba1cdb23cae37ac7c6eff9d4750623bf0df4f91fd048879e3f84496e87d55bc5235f3eeefcaef28a2cf438861a13b875b29480634048e910f7c3d4bbdd8e5c7f49d8ca8a6cb72e66fbe3da4a5b45b961fe0abe3d05ec756561a5ba6e6efef76a23859558c37b4dcd10a42b97aa97bd86cbd3f7c715733eb7939412c909edf67aa8746f7710c1a950cb59cbd1f73193a1a1d1688c116ff2bcdbd6751c2184cea5b162083b911bb68db2f02f434f30453b2a8890ae003efc570ab6cc7d9991cabc852b45d210b15a0b674cd30f62dcac941df7efbbdf70312ee4ccf1d98066e0b8fc8945370e4aadedf57f71362bfa78d7a2dc29042bc7510eb606b20b58837cecd5caa2ddf54dfb1b62b67031788079f06f5b60e35a6d7b575e595c042f7a2231249303a094c6862a15ecc2b09ae9023faf0aabb55e8e10ea44e7759f22880a0ff76b9c8c5caf96c15edbabd4f28872c152c723c63ed9106ef14aca78cd6ea5ae67c249e620421474f512664a27a2be3f0cac875b091f8c54ca75548ce306f11b30a86af3e2f82b26abef4b20635a9036e880f51d04e747e09849b6a9999030599be104cbb901077f42b399366266bd8b4cf33fbcd9c9e9874b0df8b18a221585e194e25cc78b2ec88e36146fb42337f2891ecee7502f7deb248c8c534a2847ab8bbba350f68631caf533ae408cc1b2988b0b525b79d35cdd165eb11376817a5b084fed56e05badbdbb0b9011e5d3cf4fb69606695d48e6835ab54c42396d9b87b2823cab2c726fd3d5d5c1bec2b9899c5ef9c1f1602712a93f8e594a6c1d85f57f9b5249cbabff8692ba4de9c509c1fc8a705d881e25519f61849e1ec0cdddc2dff90ba4b5612a8cd3d1eb6427b2bd396f7a69fb4e613518a6ab7e24a78a01548fed22e9e5ca3a458be638cad9fc645abb0474df20eb1fce448abd88b43aeb37eee27c411c62dfc0f43101c889b4c0bd4ed09c5b2f2c9421baee7eba6d7b56f2435fa6f81eadb7a1988741e8009ccc15f7c70976fa2ec18fb22a0ac6d4d2512a63cfd0255148e2717c94e0ee62ee72c9d577df1cba9e40967944203ce8da6d9378127a7324fdf3d2785617262ef993578590ffd3b89b2823df5d993316ad3db44407eaa54acd6cd563bebc8fd39a145e2b21d17a011f8f445e0cefdcbd5af83f1fa77083cc13b66c06cb6d5cfeec1b36426cd6309a8cdadc076a90ab41da07a21c41fa4ccfb9aa4474989e30a46fa4858f8de83e1cabf64216bc842a46159e939bc93e68d4588c8b0b2a412aa5be8eedbb7ddb3224cd96f2d1df7fcc338cebd361d5317d3c0160a2e6a9a9dd9372b307f329c6bdca344a94378a8e107df073c2c7cebef2d1c80bc72bfd84ca22fc737802a52d92f7519d4e58f8dc3b0036cfc1b543d0110add6e2e8b09fdff3083d1a413f3b02c6045bf8ca2710ea73631c3c17e5677ad1d35f38d04f8d451446ea88ccffc66e8e627fe21087634acd5ca9f5a255c7e2268bfc6517e4e9202e868deb958f146b71469272df494a41919be2914b8970a473e581238f89ab04fddc3207bcca89ae6455b488f121b0096895f731296729d9c25a0e1e9128b913c1c0415d91bcfa3399ab5b59b7e503607d341b0718dc7d97329edee360a9a6b56edb28ffd38628faf64f0f35d47a612abbe390088e9b03a4d5e8b7d5d9a3a1ab3d15dc4e59d8aabf115a9270119891389127efd5d65989077f86b234ecc22fc16a386c989574e02322c095cce111848a0739ad9aa378c146d06bb31f2a3c02e3d5282cfab323f03c2e0814d4f745434917ede7b14795a8ff3a1cec6be3c6ea342aae2fa3e2dd61c0be76c9fcdb8c20e6b5cd040d5ac26879d79ed8e249bf1e8663d9c72f34a5c2767f66c717232997b5aaea65fbf56d77c5910c6da6184b4c1e99b1c6f608a8fcde0f78f874af273cc3e81b94286f5a8a996b56ae34f0d5e5897eb1d9b66109deb2b680f4357e32a3855d6f19a87d1f76a034a76f3fba5d938df9c660bfd8d93fc29c9d338e5611498f323321de262f42413d90fc55429f1e400b89c106b2d5efeb5a90558407bccb4f64d2e07f7f2ae4b7ef7e6326d19d1409ac1d5c01f838439fb6688effead027425fa144edac009680548640d8e2793ecd9ba257df35fb53433fd46c4d3c6556b281adcb60adbd54b2f0263edba5c02d8953195c931b2c1c778a0136ec46c05f0cd3a8cbc0654c09c78ca9a2ae11e718a2b61130cb8359035ec04b8b3074a72d5b1683a7ff19880b3d6e61fface6bc8c207e21d2e8c7067fb551ac7c165709e9ab4c59fce9d7a8781d2f5f979da06b8ceb28b5432b7b868b48bb1490790636498edebe2434ee1c81ab226427b0003ba1687f45aa60c4a67d2f8f5d8237eb354e4aea92224d83c95050ee758f7882dbc60a3d594017f6ae10a38c5c0d5524206ecc5bbd057614ced4cdc9f51cf4099358303f14a4460d71e0d1647b53b1c77a284e681e8370f2d1a831000d929ddb01844b62f5293ac3381401fafb0fcfe03025d6dc2315419f56419d86857b2ca0509d93e755cc2c3e45a6114f1a61471d600480f76f36a8f91a6f046a978f50673a1830930bc2a64b381cc1449d28ca74dde633315e89bad6580d7c1d2faca9a033f05f567da25e8860b2a786b98fd443394c34cd637b3663b8c9bf96fab667cd2cfa3b2df6130a84a1d389836f3aa24e4a4a0dc3ad64cccebc263e941f157e10e40a73fd30e45fdb0aa5d63798eebfd727f04e0a8fadfe847d6644d9b4b85d685d372220e3231e95d2e07bcdbe4ef1e5496ef58bd7b1e6c777e5d9af83d46114ae5aa6a1a9192e52b17564508bdce8b09d227a1b0deb11809f333bf17ed6558d8d97da4ba082b238128226efd4b2bc333010967451da6346183e12446cd9e34a61e348db1e6e10456bc9255630a0fe30aaba64d258574b8b955b66029c9badccadfa3c4da28d055ea6bc40e9cbb26b25cd6c020ec1c861f6d412c352e619926e40b0526335bc0aee4f60ea29ac074127e144ace4a096197c0b72fad873d611f9b2b4b145392b3565c8ed665e4bc3530e31a348f315b244b60794ec9fb23b2d618be6a85c08701b69e350a8c0b0c9ff139ca23fb4d7c8a91637cc8a3e5ac9c7077d3794571a17d900e1693fdb725608b41d9e6be6011e2dff3681c2f6e406425f85caea517e37fbc931ef438f05ae0e4474a403a8a60e0efb5fa9b53b13fcfcdcb782c31bb18479281f7f1e848bd71cd897520d61bb7c6f3275af837d72d66686df5f3675584ff13199ac585e0f4a2cf09be53a09c57423c10227fcf3e9660c952af69768ec6761e6d43db0525afb8699c63482f45c07d193dc4070289aa1ff557a029e2a706f0f042abdf4ae3b46269eae7a53d8368bd7abc387cb35f94646ef09eec21496a9b2ad35581e9d41ade8120b03d8228985a0b24e9e4d2f7c19cfd9fa84b39979cde1ab7318364b9de95f37920801661a273ce9a31e54bd9e4ac02983109f87019decaaa744587df9b6d38ce144037049e6f2ac230a3acd9cae015e61ea80e906b30265dc8bd0a460d6e72d75239c04d1740704b95af19fa707141a9dbc43fadafbe02e2cdb5fdd8baaa7f3cf3dcf0f3ac7139749bc2f086805751e97cd79c48172c0aece096d6c183a05aef4aeb7256266a4c2f31db08e8bdca82caf9a7a59d21f226eae129b69bb13f13e544057473113a3045b319c53e2e278cc73caecfa3db23c174f9750fcd6423fa2e3fe7d623d8ab550ded3c1e2b8e740c17a7974e04cdd529d28368ef25f3f1ea53fd4c1b78cd085eaae4837f22aa8c40f4fdbdd96a87d379a0edfe458c9ad32ca9e74e391dfd01cf9f7c981cd461cdcf0d19aacdfcef58cc23c0871244439ef6ff8ba537750bddfa4e8246278395675baea0a124d0ba4ff19ef3cf2411c007ec4156ad3a94f5a7fb060ac768fff8b71f2d2f69aea8ccb15bf795beb500418315194286de1d7309d7bbc6e7d3c72693b6d081f6eac08bcbc4fc4d6c998d28936de1988cf1c3d7721ecda80aaaf69b7bc2e36e9080430413f7623e6cda46f7a946e1f143e791343fccf5589ad2b6510759cfa517277465ce04289e00f24df8c4dfe76fc346ab33b2bc79e341d779fbcd8162796a7476aaf1b9e66a2500a7ad481ae37fcacff94f9128e18bb09425d41246c4f3a7e481b075b56a84d9d0337d617c267335a4af752684b813b48d9258cfa89690de4d9cb1882a8cb0cc363ce204a7a599ded390f875cdb5609db39a43d836fcaa0b743088b75b43473045ca25ff6c86743f1f6fee0fee847c42af4b1fa4130f940090e4d62c21aceb80fee4b6173945aa168f3fcfbe7d9dfd9ed0efa8c374caca5e5c46325d5d507959db66204fce6bf500210ad9325e80da29ff9fd395b7b3fba92c1714e11f60ba14315f1680a6195f3aec3fe0a69261eac3bbc32b432347654c3042f4f0c8f1320ab20806eeed23ae49d24cdb59938cb65e4fc3fbe32eca649f99a7a23ca25b8f9d872d5438a8edf91a1582f162b6200241bc6b838a8501f1e7bd0a634d09cbe4db43477fe06cc15cf895eeb76b4e59a9c7ea8d32447ba78b469ca47511b2b430c0ba1ad9be3a74e94e9ad03d39efff92e12cf33b79fbb8269147b418dcb53a6073b49406912283964a011ab376fa77d990b7f8e75957b65686efac598c74aba09555e0b48dc7891338cb97e4cb4ce3978e034a55d8df8d2f68129481cda22546824bfc54cc1973fb48d95ca027a6c90f8bee866d39c92c85754babc4528d162c58ca9ff6e57e782bc50ce0d8a354bbf1b17aedaa58b9ef32ffacda95367ca7b89743c8d41e9a31994a5a613bb77a7ccbaa72b8b4214dd7fd0be4282792dfe09cdc13b39dc756219b79875cd05bab9c8bba030e8fadb91de897d9665d8a511385ccd5258f2b0b7fe688f23d6acf776be66445ece9e9221b5a25a1215e614677ef0d9aa95bcd74d40501ff8fda29641ce92b23a73632e23cfee2c07dd0939416cc6cf7040c8e1f24eeacbe8b2e70c5b3c1bc8a48867a689cdc63fa0a69b4172906ffdeb7297445b7fd0ee4ffeab25358732af4848dd26c224d87722d5e69a5dac4fd4b0fb35e77e5a7a94d8602684c647dca4aeaa63235b8aad578cb48903796e9960f3942a91eb1f48348ec923f534c1b6ae6b89edd171a5098bc5b4d25af1081c65fda962a47c90037dcedf7ae9acff1414895a7e9fd4ddedcc03fd01eafac82106421a55a5f258b03822bc1e7567309cec8fbc5c38a4f101416e2f6fe915645c9982f9290bea5f5565276e83e95a60795ee6ecee59bc458686c1cecdb5681606c560248570cffba7e2a5b5d6b90c209ce6cd32f474de2d041a616783c475407ad96b5d2444ab3f3ece308c687db79b5a8904cd8dda83620c9ccd3c9db1e67133f685ad622e2fba21eae9861702dd2ec334ee2dc7df29cbbd1cddf3bbbf064c511c82c338e891d465465d2763521823c5c5a69f17a4623938e55b61fcfa16bcf8799edf373542df33eaa327a44688c84546554573a2ae0907c9a4023015a3ae53928d6e70e1f02122d4726e2cbf1babe243b062b29626c1730936d09453d6ce4808decd6c466dea02471dd021d71bef7d95c6ff79e6324e4abbc3720e81c603f1909ce49ff6e7569a82dc406431fe8873e4cec99abe35ee4b21954c573f6d9ff8010403151a64aa56c63910afeb3c44b7df2dfc8af4bcefe6c0ddd438b3710f10be529934fa67bdddc19b019d2162c97f318a764f31ea0c9e9fac643f1faa055231abcf930e4ac506394adb50fc456f33266009a27401e35cd3f71bfd6f8d6d8735991368648f950e662d4a6368aaf5104a04fdb5822a4e8312de340958297d913adca301fba779188b61a7b6f35e1de9eda9c24bd08892eb54e28d09cf057b2e039555ec1b28cdf7a0ea4b103249703260603afed0a2cbeda9c1a9f63872a29bc248a1d490873776ea079b1bf50666d8f6bad90c5a0ab757282549199622a879086208c6c1d62d79b06e7051d5088be095f776302964a0c6dc6552f790aca006ea7a2634f46ace69d40af4d5f7aacbb2d76924f5bba67c383657afd67c859d9b43b18fce996ead8edab1cf8acbc37db98c5fcb10d3d4cfc67f237b9ea9e580edc6598f762aae7a956278de2a9d4f45ee58106c175392dbb3c46a4961a2a09cdc0375cbab579368dc027481c69abfa0abb2f3ab1b7648b3f7d4a13ce75e9899dff6f36ba6fe5ee94e2668b27465480c1a4e7fd57cf11b707da143ca83c994bf8c64b0196841a62dccfbd978123cb524b1cb442e7d689844216ef9396a91b0ad1ee8971204759ee63336261c718003a9f718dd3e41a0b9e219796705b6e0e10709f21121edf134e32bc337f83b4dbb6efd630dafbb23c2a437b4bdd3dec58d10a394f0e6eb3e570127be9a810d392035825ee58f4124ca66e02a10989d9da90fbd98777fa30e4f8996de652fd7bef04bf0bfdfa07a6786c9a79a8170e0ba00d178830505b7a7f39273a08438dde5624f698cdfe5300a1e1412b3a6d31756439c1c120d24933c176a296e3360d4f13c851c8531b9356f78a2d031422d69c0eaaaeccf6de37b0b45c8448a045e79764db74d09e049ff2f89f4ba2f37f8c5aaf30c9d9005095cfb3067139f8b70753bcfdd982114d752a1294ff1bcfa8252f05595a8b9f964054593cad607996b458aeeff368860b9c9d7c3fc670d5c4e4046b9e089e763319a459e0245fc3877e155b206680a1c3b18c99b7b6faa0cdf3aa5dd0fa1d159a6ed3ab304b988da71edd0826b6cfd971a26c4e0e9900ea6ab23a0208544bf2fe54777d7a6328b91bb6bdcf29197175adc630feab63d675f2d6858c40bcaa2a9f680252c38d0c0e415a9a23a66de535b91b7878e5e3482f312b814e07a1950ebf70336776760ded3fa9570f097956bd8db76b07fc4895276e3cdb4912484e2ff4795fa28c5fb7487c51a2449eecd93ebe07f1bb34decb0058d54f3c3552eff2050fb39a96e6a65a7f01b264aef580fa74964c558dcce308c56af82450767b3a61393cafedb88dfd29e2d13cee5b7c5a2e65fa2b198bab35465055a75f211cf4cb1e49ad703ef1f7f9897b57d219c73dd94bce2e53bbb445921268cb8551ac1c4b4e9205412866e9dad95c003365584ff192b2106b75ce0a8326fed63aa7703e971cedfd7641a55a2e1eb83a295960c744af175e114d7c65fc3aaa83db0b293eecd0420647afabb9f95b00bb4ec2a6ad6bce26e0d00b70243bdf4f45c3b1cf9c8df164be9dd784b594419323a32bf6a44a3f32a7883330826e347d73fb657555a70c3968c03c68b923f2b1f74a605210b37e158e065f8fc4c31aa76ec7f16c5a816577484f36c2dcc8f18522ee1f0829d02b4543a64220ceae10d6f6d37a6e92a03fa9c030c5e83700deed7887bc27945b887e9c0fcd5a9ad6b31642d9484485b0618a01a13dc5167850d7cac9fc3b8877568613e059d252a7474047e5236999fbb7e145eefcab92aad7150443890cddd6b0fe639407a22a439cdf2f65f9e99bcd5fecb057eadf3bb29ec69afeaaab2d40ea12b4f45883d6625ea75bc3f1b270de403bbad2ae4122bdcfbbe6926fc013ccee5cc8334e1520db0fa31f72302f14de9c9c62996424af13f68191c8d7422d5929f4bf97def7f0b86471187da3201a8513b75e673a1bb2fe95592fa37c5bf789116b63c0a906b87d3ac817fe244b81837b58f505025cf57fc92988f6af7d8668d1d17839a1b585fa6c05ce6d01297cc8ec5917675bcb2ceb1f1cf3261a69ef7b9d954bc3d58521894ce27e1f6e068a0c81e1e73592ef0f3082d33e2e8fc15a511aa03ffd4a90a8497d9597daac3edb8667f08f88617d70511d2f6c50acbb1912c1a5dabebb9ad197a650e8f9e90dca9169758fbb772e0acdd1ebc64968b6f80e0e0128c269a4aac224ef3efad417a1c353b410f98326d0f918395bd69599139d3a3cbb4252abd89a4cc2431419ec7ef5467a6e338ee64839633ddf7244887c48c213a15fa1cdb06b89c1d73f850763b379ab89d5c1e5bdb9b005bce7ce7d3bc9e4247d83f85aa9f69e2f46bb806e14241f226de5585269af2f2c0dcc771944a5164b2e758673ec40a0d6b32ff3b255dd8a98a1b9d8430aaf00bc7c72afa8d6f3149245e000d732d68805da51b8ef16a4d8889e234a777b2730a955527cd285975ba2e366f358eea2d15fb2fecf5178e677596cb389d7e1bb5b6fa389301d3c8a9956fd46664504155fb5c5d87936d75630a7083bfa57cfa8ac51359d37d51d66467883ed77e4669f570f1efd44d8e4554ce8318afb45b6b30c2d46d1ea01e10c0b2b4352030efb0f272e2e11ae9b7bd1ac1150712ded2c7d9fcce3c1d2869fdab165b6ac38e2f8e5c81e8b341f2364f3c92393763b25a28fa8c05eac66ad20d3a6f2984785891b98ff32775a273bf5c3c32b70d8e805e67fb9884a3f77c8e06ea7c3a0d5d2126d91b468dc3f9c89fa3438f7c2202f2f6dd6e14b65a18c43a738980f9b09c643666dd04bae80bf6184b4aa54d5e6b0c8b9b61beb525e156cf7144ebf1a60c77de380bb7d14779a711ef2118b7e065a0f3168c2777607bf469acb82390d60623c9ec7b6650eea588409f03639be95991da70b3e8ed6156065160bec3873e28c8fd8742490f8bf9d484688a11c5026864a4edc4d8ddc9278faaa85bede0bb5ec840bd3aa8a4b08dfd5ec4be83c666a24cdd642076b84fd2b1532d0bdc7599679c9f0fd44839414118bc4f0ce46009aed91bb10ec2e80796d2c3f872c4071c9859cd63520c9a1202770e55bcebe3a11c35194d629ac1af3a5be135dc0d8a149845e0f4c6266e5c6fe1648a2476b096e203e16055ded2abdc8e1a8d82833444a49317e410bfa214582f98ac58bc5cefad3cc77573a3bc896072d350531b631845454c0dbfb981b938cc989d50558ad493d3811d0288d30dc454e212b3d894a4e823d34b413514df4b4668e7fa6d4a5a477aa761955696a4b9e23a5c4b664e407b3d2cceea074c63e657afa9f1f093ebc74b778ddeb9f65923fa7c53802ffba17b5aa3e5c1d28cde1e185de96a7a07b8c9506ee5d7d430c23253b627ab9267cf3a1a5aa617fece5989835f49f39f9afdf2f300a919c0f78eda348837b4506457251d53a6410da7e70985e967c2f4be57adfb2732498a02ab3f0306effe479325e02a849c5856c7664ec804bf5841605f4c06fe056092b7a6d1bd7125351d98d86768e68383d1d92166fbb2293b30ff3049ef0970487c12b3843794c41e6313f26e21654f2195c687232edfb851265858f7cd159c83a72788140c5d0de212642407baacb219b2e9a1047d2af673a8181165eb73528fa0ced1f926c3c61fb8f1e4b2ff70ad84744852586988f0e881a9f796e94c450535fbb805ebc1be59f1988819602c531e24ee87994baaf8668e10f83f4ec92015f4c9e89ed67cecc6e9c9a352dab886753d429a21368035e9d154ee172a6dedadbfbb8906bff16cffc5f2a6b052cbc3f4164d1b071a6cb0edb8d8800f132292c9700309240f646a66484805370f2f0320989522a7f3f4e955e921d2bf84c98b6f0189e4d05335af880b6c6e650562aadada394b8612a40f267490124b315d1dea5626b142dd0af49c7c5cfdf9b9b0b530712f100085d0cc4deb51e6951459f513fd346fc3975f11faadf4f9fe78a39fbb0650bf148c5e40e1ba32e7e3b002c9c1525250f48a32767f2fde4c4c0584b075bba4538ff789c7afac1d79a7fdcd38aad2ee192a5c1b88bf54d53550bd1cdf385a045bdf7d5cf14bedc89f9e58ad88038c71d39489c68261f2a4f81ac68f667f4d66e472404b929842ae28d8e1e280ba26ca04e6af2914d2431c548719731c61b98203ed2b8f969972bee7368a98771e5154adc96b264e94c204721e130edda9c27c0e6c6583f373c5e1be2b5b3ae7e2b70bc4094d521ed51f5a61276424de9583f8c4f8a8ececc90309a7351fc88660d4d650723b459e1a57bdf7d063c26a6c80fa27723f448392c2993e4e04756b4349bd96b0e2fb67ec7bd4e355f7abea6207e6e078a4a22b9b3367ea04af7064ee7fbabafe74aae60d6769b3503cc2776ac174a5e35ce059b221db88cedb7f2eae86cdeb97762a517b93c36725c753afd0462afecbfd84326f77e9464f822e9170d1e858ff27a6e9b47b9e8833a442f720feceee51b0b902e5f031bd55e2a77a5ef4335b77c99188317614289256c20ecbd685bbe2e0dbec78cb751eded7761a2de32d78d879527f4ce3c6302639b42487e0bcc52da35cec0ce1ad016918bc6cda53526d3abffba1e44298355ad5ea8b6f01961f95cbedaf82a4ed6b9d1c0cbf75912b42726bb617bdcc28e0778a5023f1c0625ee9570894c01d084285ed13c0f60e52982d37f814c5a511076319853725222a29fc4c7abe3eb995c39f515c0936caf2a96f76df638c8491bc985602c78ef906cc58946f35b55ca071c2ea28509bdc4e6f982eede244ac16978140744334a930b6739140b2fb5e28ba75d36e3ef08093792a1fc72b6dae396edf467f3a3f5e614fb080bf031d227c4b3d4358b14ddc74009a37ed33038eec7cd6fa034f935638359f7adcc19f40af27d18063c5ba1724c5cf7be798bf8172f20798d552024048e322ffb7f608cedf0bd367664d57a0d1b26f09cf6adb771e7f7b87c4623b0253a13a2a9aa6194c0bea3b9b4df13237e785f383343157fd99095a8594a61eece5679e268be57e217f32ca8a7099f611a1259f8d42aad9c7e5a696662e43547e4d7ee7149a1c0d286d154c1af853dfa2b2307651b793aacd578b3f95ab956e58ccc3d8f9d92a5ec576d929dc2980cb35ab5b191df6a031addfac3c9a92f9fbaf2228cecde56cecf4691e7b7343a6174f14068668012a9b63b189d22443c9790e25f3f44d2519d569638ecaa653e5f83e2dc51dbb29ad3bcd34bc05b720e5e5984609aeb793233776c3a0b011429b4f47b28b1e9d27b37de6c96f236560afa39c6e82d950070d85e25285f91d3faf2d9a4c502509a7614b44ce029722160990618545e444e0e5c2f021d1afcc581ee1f87210b4eac75dd77583f00442bb99e574c422ddc7beab18ff5ee7ae0a4a844a66a44d03373bca6a6a58b7d7979e70b24407e2bfa2b116c14db241e0ba2a9494306de9ac3003c670ab48cc8571f07f8b7634c42c3a543522ed557279d126f42951a4d0e26476d10840054e1a10423e4d1847b4447ae38f8505fce2cd29bee0f09f5db5c13fd4f4943c6a692a2ff770d1c811b71f58ab676546a1c1cf7bee6dea4d7976ecf1adef60a2e2689d132057027f44050d002eaeb6c96ff4b1ecc28543a5ea7a4e321da6dbed37d4008bfb1e56a3d5b46ad47999c5d7aa78823c9c9bc592a78fdf4becbda43dd23f3efbe73357d7583b1189afe41aca95d43943a7e0f223d79620aceed1dd69f6b1f17bc122873cd9fb9d829062c50ecbeda0036344d1ef7c313fe4bd044d0235f0f23197a6d1e0904b7cf04e01585eedad523cd02a40ed61bde6f151342b38cf3766d4c3d87dd9fa985bd83dffdd74ff7a5038b9a6a8ce3d0e27de22c3fe69261742412b17b1fe1064dae4e37aa17c816636a13fdfb92845664890f1234403b76a0a5b06cb895ed572d14772f469f5ff9553999eecd1c9ad2f3c9ae0c7338ef35707f04f82dae38cef253ac779b3d992dd30cb943943b58935d4d03626d38e1a5d90126c9d1e6134e0430eb9a67be65dd2ef2bb9c91e388f7b773572c2e91ef0592795e89c7b5a0db8f78622d5c4822670b040c09b9d9ffe53899e403b6b962cab3f4a4e0badaffacde6f2eea0cfbfd2f9a95db0db7c221229493f5b6149b63d10763239f2b1668e3f44653123b4571d0d69712c14183bd5100ee6be077e4c46b90ad197fa9b246bf90918374ade259b799914cf0ce5aac3cf7edaa834a42ebe20041cb133345b393cbf92aa271e3222c38e0b1f41cca7f0355f3934336c3a634dad783dc2ba030015aebf73276493e3cba84178aa009f94eb05d1b83c3eb3087c737c1d22e33e1f3d9892ebc6e517c90b8ba511d6e23e3bb4b01f515eed7d14e14d25bf60a8a0ea087c1bd60b78643e4e840b8bb62c4bd662822f0a73ffbe58baabf1841eb5c080682073ad58366d056ea9b1e8d180922384b88cc5f4886d91be87dd465b2a6a28e975b615768086c4308d84eeb5849ba8fa5fc90165fe404c3d0284d1806608ad76a8d1f6fedf8196c102164f72a755d6482df7182927aeaf44311e00d22893f3d7b50fac78c42db6cfbb8406b339d50a2c7001256a3dc9932ea1701662959d594144886767269e028e509a5b165f64c9e28b368dfe0ac0d136896dd4ffbb341546a223798fb4b073ababc1d9ce62fbe195aa0ebb48d9c35592681fc711115f08ed5f96219c1848d6d1a603a182409f0e3a8899d0840590c3b943a9b08185d815c109a37530e3a5da52591daa0ffa21173e44674a0e4c80e63ffa433967f0fc5a29457d399c90b1db5cebcd5dc899b9db0ba7df9e0ae19552b8570bd04339adf386d44cf0aeca576f8b79f39cc6e05763b22009b0463ea0e28d9db3ac3c7e651f25240c52945dd41c3d5741546b015b6064acf0a3250f58b989a4601abc9cfbe2c96c1c860aa19bf73d3b8dbdad2d8508b7c37af52f354cbd54283a3efd71ad7b9db867b0dd077feb0e8be1a93856073c208e6210010d42c85197c96ba869145e07d336f6a0bf94a6d37fff2f877feca5b169f32721dfc39fc8684ae2d6a77313d4724d9868bb695ae3c570d7b95b3fb5c76a4314ece9bb896a41fc2469d7fd42199764ea18317acd39e7b49e4a28fd78720b3719aee9d5319aaf6f05f2b2311a6e78ef9ac79430425481c576388408a9a4446480d235fecdbf945bc4a6cbea1c00c71783ae1f1f173ffcabeae7fe62c2dd5ebe4d6c90fec77fe6f6d660be633b6f8bb663bf192670470f83a3c1f1b1751795808c7b0310c17c9586c0a5548d3dced8590fb952e4138ab2d0e94515bc43a1990f53a27fdae110a0a83e82eccdf35f7dfff0eb1cf712b4ee2cb50c2a7554a30ceea0dad8d70ce436a851ba61b132f7338d1d9398f2b79ad05da1024e259a9cabb30b53cd95bddc12d1ccd1fbabf3561bf76b074b3cea54dde28d23009c9ad2203c8edbdfc4c4cf77d0641bbed8943a19fdc0d38613e3584b795c72bc520557ac96659eef7da60261f8bc06fdc2cbe08316228773017276d7c8071b1b69286a46243bd90f48ddabf20ba92c0ccce48c80660abffcd01b00dfad694e87cf665c2a5c289b9c3f637d58da466d72b52ad1b3a5dffa6fd6221e9172d27c0ae3f7fe825116286c1d6228af45836c3dcc2b0e635f79566373b1984259ac83aba2a523f05040d914befdb2bba843846cdf77018b0d24b2ca402abddbefebbbcb627f71814a23c686e303f3bec783da4d2645bf291a10db202836c49745068b4e332c73209969820a4308e7145fd19f3b828416a88a966cca8dd04555940e1cf9d7b5248d7de58d78948669fc08315fe83e452a4bf474666409f07c95f11e4ec2b8f5600d2a6ce2b1f5878529ae52c3e39dabea665f47db4fbf82e020274b1162f1d70c1be792cabc8d8cfd453b174e37324bd740695c6609e03891e3c334501ca56be996d5932486ecfececbcff57f3bcc6e44c30b2435b15705726900d730bc1485be035a62a3fc2bc9217a91bc4a3ade73513ceeca7ddd3e8050cfce891078380779aacf64110af13d801f5077aa76d73edd72a573dc6ceac1a3544bdee2c64dbb24559c0fbcf01b8d1e5ac562b4b5b4cd4f3ddea3f89539e428c48f806f7a37dea5fa26a2b1b502f39beb65e2f5e532351e41683f6b31b2e66554449ecc59a46ecc895c2345283d7bc35e0a4bb78bfeb7982586e21d507fb09767875b767f31554b04ea98c5a8e5aeb720ab7236df2892f363713dfed14d4540010a5c41822290f8977768c897d39e4045af11eedca775b91c341eee1010eaa6bc3389aca725874b789952323367641d5b8adc951235a9e50b0bd157d0b11ef81b3cb1ae670fee2849a7b4ca1e9ff83ad9a245a19fa65986b91f432b6a4ec75862ec69399867b7611259552737dfd591144ad080efa6de389c1d25ce499c1f06e1e2aebd416271566a5344d5a96f36643fa4f241861abd136072b806c41f8e1140a36bc7a0de979fb2019c62429befddcc5bfc0131da3e157697529ab808b5c9f5e1925855197f88c77909e7192488aa0013e6c7e905de42eaafa4fe00a69b0c152313e837e8a43b0a1b2af0b4d0405fd169053b28eb967d58f35cb13b7bcdd5bc8b4ac848afda33f278aa5cb001e6500c9a50ee0a5dc73fd73f30b69b2800cf32d867a4f4b73f74998b92c5df3764985f0639cd49b274ae2edf5268b53c4bb5a1205a378c07497f12673ef6ef12663a76cc1fa23c73615c0ec6fb4bd8038c9d4c5655dc84859ea96e2bc88aa19f4e533ff04831f6d7dc82da061ae52f632b91e27fab785907aad3e26299b6945df7714c336eb502d5293aa9b07d5cfdca1bbec3b1e5e1a881af361b016518c7665caea5d8dd8379a2b3603fd1767c127738ed83c3d3c1df627f2c84c25e1ede1a5ba1fb18424e97818dc5a560e7952307a9b2c6a5ac00eb76e16572639b768524bce533e49928d3d712984605c8110e0ae9536cf7d21e9fb8c026128edc892f3843fe7cadf52574a72dca2ea7b4c95cd09ce819487a1f6d215718a6f06447e28723e7f5d5913ac65d31a56b03369d790a055d0ec3c7f603c79be4ff0f3fffad8463bd4815cfeeced457ff2bc12ca3e538d5de1728905f1daf88a0867025154fdb79c8b7f40886252ac97b0e25998a4931c64db79846abb5795b5c37398796908579f0ca1a7aebfcd44cdf2da66e32b2102786473f6ca91fcce7f3a324632745546ef7d03342cbef5665bc53cdd1dac59031bb2251af764c24037deb18c95b653fea8b10965165643a2050f4e18998c284815cf4aa625fdcfff7c5f527d1b30059fff5176ff727ba091ab99286ff05fa426eda625dbcb3c9901b4cf5bfb129758619217e1bc733b2ae3b889998d13b5e2700ac0e689862e59e242b19f38c16288499a739e4c04ca199264e1fdeeba5f300427ec27ec8d09c72dfc0493c9b971690e4def58da3fc6fea7ac68cbf64e18c30a03c8ef6a2d4258140a586d52c045e8a373668512e9238714b2e8a2a431c505f54b0d7329ffe2f953b810cc5ddc68e1bd047e499c3b6ebd3930261e05562937e4d5daa7f1e7aede4620d1b6fb45703d9832ed3ed7a7ae5325152e6b79bfab592e8b1b40d316b2b69fe831010a582c0053342c971b7636c6a96e4425d21299ada4656304c14fc2bf178c2d2ebf2c40d25b0ed27db1629fa8b06195f4bf3b688390d725897e48e8b4dee63f5c0e54645eff4e211de2f903b6b56b792bdcfa11d6d410f5934fb6ae21361985abdfb7d4328896913410271e82ec51b7625d7885eaa0ea2fc5d268830a582ffc66701e64471cd77519f23753778bbf52fcf967cfe40f72493051c41953ae1d6b27429f3908d9455a92b0f409bb85313336b917d6b4424e8dbf9e0cc6f8047619b537f0da0de6ea164ffa081c1871110cd05d575938c2e31c09a1a2b2cda3c57a50c3076c84f1c83e544fd75e53768b1d02f5f0a2deb5838eb1c53c387f0ebe0bb216f67c9d1a1aa41672104d48958c3d70f20dfdaa6d5c502dc53ada014affe25edf80fd8c1071620b330ae5e8490f6d1e47446ad2be00a5726aaf6907f0314e317206ee22d24e155b778247b793cc6010cc1ebfe20008f01164a15f020f82a237677f0f8210696e54e3f2e706f286a8b2d9d3fa852cc3512d402d17784d99e14f241d1013e895d1fe1ef24d08b12751a91f3d762e1fcf013c3b6588e790b93c20cb7fe37773967a1cbcd5fc5d3c42c438ed19d65bf209ae4f732aedb1818ab72f236feb41f44b770eb55b36c986db2f35434a6d4de326bbc24c9e9c3df0621d97fed0734a0a00a7e3968e77db890806ba624da3a67cb3abc49ce4b2111e00e72da04573dd4ad50b85621bbe730a3f79f33417f90a77f12b4b70c9f1eb73424274e6f76a8f9e8609d269b7447170cb03caa324dd73b25632094b7d7c56db118dc20e627e841fad9c8d8bf6c1ba328e5a03dd05579202c2cdc180d9a6a34ac489ee0593680c991e63f28173637f1ec24e040d805ae87f1448fc458aa038bfb9fd177217c8fdde27638dbfe06160f21f580148aadf90f1ced200ec442f17f4591360b0932c19e5ec279ef8a310124a0ad9b504dc8e5bfae66fec0100b068f4420f5c9c2356bb40745eefcb952eaa68bfe770423c00e6ce0a80792aef0412bfd6178f18ae608e645aa0ffd37fa885a201e1ae1b37fcddde4a40f61bd512aefa73253ab0eb75aaa7f3ea7af16397559019f91b6c5e5aedc8ae12ad35775c5da865ec89e643eea1282a9759ea25e629f1b967ad63b2b7d19df9d94928ff4ca1568108be7fd7d28c05ec2773cfd9fcfca79224928847bc4ed5f94c8db3dfb1b8fae9df219e869d63a43c0a93d2ae2cf5a5f8739470f3597442164791a3ad433630f2322df0c872e927a3def19575389775faed7c308aaa7d08b2e0fd916b4b11594741ea2d5b1b3c5b9952569747a942aa2605161958c0e9ef90eeedfd7a105798e025bc0e1747c810bfe01120b4816da8bcdc9184855bb2901db830379720b0d6be029312e0844645a2567b18346db04bddb3d7572a59b80620651b0bf160b5292c7a42ace829769425d79dfba1d9533efdc34aa51c1f7ac9bef19578b69d7bc57c576930fb0716c6d9135c2dac5f61973b59ae3e08fe7b132ee02e944518825c4e4c7b16d986d310d4e1d2ba41f0a996c3087232484006f465534ab0b60c7d674654e2fbe7924452714a46b2f14281b5ffee6e678716f8b8cf37f83429a9fe467df2d397b922839146f518a62721958337831cb030c85a2dd759f78f065338da8e1f1daa3039856c7ea613ef9ccdf4e41491617252beeb232306e266c6154d403eefbd08643e2ce0385d6cafd5d5b8d3d4199bd816474e70666475ea9324a0cfabf9331b92b94bf3f3f54f3f98d9612cc012c9c2c066af5b5dc172d85f61554ba4901c8f7de14e31a8eba6d607f51cad272ad3b3884b787f09c1ca87f5380e8f9ab06bb105e4ed4da6e42820c135c380981cce26e11334cefc7f99e02707d8d7f5d402299fcddc2b1c98662a4dd8d773b7c644b40f24f2182e91ae39e46abb12feeaf5c9fe5e1a33ed892162bc634f0f9306d72eebe83a7d3e046230cfb0752368a0ddef5ee8291b15f6b65de2fb2e933481a3a48847514c66d24ede4789337a58a23880576f19c3771b7c836067019fd67aab7fcd5da7824de2860ea150b52609af196d8f5041d4339c036a659fde390421921796806295fd5458c3a49664dc210e0cb5a11b22ff889100743b4b50769cd61e428c341127d5f13d4526273941921bbe0a87c919b1e9d3850412e9550dc5d7ba857407db2d320fb07035eaeecb38a80afd94450b117ab1bfc7916f37dc9df9699bffacf4095effee3602d9f1b468a08471b4ccbce010669d020034ed64017925247582e4b6bfb612b0f1b8fc909fe54842e3d228fbb782dc8435218ee47a19e0fe43615e03524c9322c43ed8dc33bfad885b9d5a53868acd1d2db58ddc4be96cf7c813dcd936f715d39ceb27158d58fd6b1971bc5dcf7d45cc2f223964a1d5059845dbb33a3dbadef02c6acadb7d3570979ef9b7e810117c20450197ea4073c31471cd02289025dbaf77190b278c7f7b8fa7ad7ca3ded076d04c4c039d3ce37e1ab41b37d0b44e947356682ce7dfcf3ae19f86c011d8c45f2363642be8d0fc5e44442062c6415bfe5c1756ab2c197cea9742463ce9efdffffd2be4835008539c1a3f364d406813689b758d3a6f1ce699f77a4545b2655aa5f1984871d95e0bd683dd5a8f2f35ba515a2ad65e76369d797ec4b9160f1cda0e50360c4c6865a3b5e3c07a387419795bd8aa8db35146befd14e56cc2bb33f0c9f9acdd42cb3eed0f7f30aad4d4c9d31d52e771c407c8cd1600c7bbf7c8550fd3dfb1469550970f92d284dd0a90924b8c192118da335db7820514a8156c8397f3821e60c6d23726a1d29fb5d65963bd7177c438c29f63143b9d2834b0a052a9cf3480d9606482cc451b581e85c8fd79ef4e1c066c4aa13f3e4243e5dea72b918f2d0d1e75e26533466d498820b6c4acf3d25f717ff939ea33d665739a4d537e2ed80bd3577386fe88c6e1b40423da229a4f0bf77e04e799b31c67f1774c8342d102621bfa0e21016f73660fa535d58df3a3932380f38ac0c0cb1e231819b1f4d57b3ec464bc77ad6ada8edd144ab6fcd1c819fc6a8d64e348efec65c3e4d5b174d38d3f19080d93c987558123f182159344dfe05cfc5f2d89113883f3e313ce5155d35a32facc1b160cf98c1b3a13fae8788c0bd1b326eddbbabb834688f80f0b9eed3b533c4691ab6863d1d2f1ddf8a8f5d710131985ddc31805457ffddf697fa0ad5fa579654b2ac169781ac6565174a39716bbf59cc470617b9401050f3ebd01cf7dd51baa9b99bec2d6add084c197f9653c85fd31d50a9ea723cde71a7e7c727a34cdd48f107473a1b5da1506ef1e830e0aac7eb69eb89205284b3cd3493caa9af8ed5c12ac0c05697f06fe5fe570efc3046f20ca4424348218b16805f40b228e2825a083b283d26e2d473e5dc3bae005764c0c5c53a5cfe68690d91d719511a1dc83aa9e43a0d5e36890c96bfc653ff9b90d7b854500ef038a7aab962d5011564e674c76e86429209d37bcaf6fc64b52932749b3ee615a46c654dfac2b4457804fe072985c72356af8db85ccc15a0fd37321dda65e605d3195897d0ea3a8d9b7538ce32adccb6ad4ea1211a08458ddc7e772ac4987299ee4e8b96d0df50672d6be34783aee9cb01df4950c300f349f6fc72609317fd09a7244e2ef564da959b2b21f692be6aaaa76816374b1963e62479a9b6f4dc0f9e6e7d5f5e92217ec3a15a19efcdef4ee60703bec724b193ff1a7f4ec034dd4e0b74a077a3c92067637c60fa1911aacd0194e1ad27def98e85f166f69eaba372604a5a477719733fb0c2e9780bee3c1a1a1105d68fbfb15f2165c84c95c3f76306f357ead3463a01a279ac7eedc91f47b023444278c3b7049bfeaf4a8445bdd59c58972fe3e18dd2a89f0dc4036d8925ea05292ed3210274c86c2b1ccb539071353477a3fd90cb506715f27bfa6a03c9cba48733444121b03a6247d1c48fbe579c834a09e2e8ec7420f7d508545e2e3f09843774fe16ae5c3d86b830080f1edc74b331e1b7f1926d3b4f086cb4dfca8b1f622da03f0aa333934e49cfb43293361e21c7e0f01a7cbca8ae4bf37a2186958dbe3396ea8da31df9cef19b822646620335743900916d36e5f0ef1d21ed95ac28aa94d2992e8b84e03fa8c08853766259c74e6801a893ea7bff78222755bb7959e8c6e311b9ad9cf7a14364da1b52d5e447029309634642271938b0c05b83a2e166355b3be89a52a666ed15cf4da4ecae0b394b937e554369a79ebb758bb2d7f268390ae725f596017280c5316ff5b1c2dbca41047763ef171ff5d42ea059896eb89e6989973d1c38f967424cb313a5ee76efc4233887607f522c53d582d7016ced63aa22d3c10d1e8f54614743ab8d59d974c9ddb4e904fb999449750862a9cfe3b21e402e9aedbaefff1c01045744f169eede0a5f1437aae7f519dd1920c4b6e34be254153cd603c18076e6c4216c97948df9d7c39aa24926e4db52bb08595014efda7bc3ded1ce6a1df0898e2256b1fd561c1ed1a22528a228e5c63f6886e340d5a14bd1516aecd768c0beb437d14eb456dc645a10e1c6feaff38992bfc795e1cb9f64abb7c35ecbeff01475337b80f10fa49f70782c367c28f3c2be9f5a941fd817ed5ea158d8b428c5d55e122223a93e04a6c995c17cf96e977a2ddd708c60bda529d99b5408655749b105030b0ff2a1562b5debccfd9bba83985b618ac1b0a1cf1e5b93c91cce94e5fa8795ca031db2a46fcb029181087e213dbb652a3fe419d8143a9e7b39db40c91e55653aff0b282da2af7879f24391cc7ce64221be29f09d7f3f36f10a64825273519e4ce7d43d4de74ed17d2f2bf1112bb42896e555cae704629f29c026a532a5af326cdb1bf938ef57e96a69ee20df4de561eac3ec1ba826ee64f1a772917367376a4417f5026cfb13a6fee006af1e3267219fa7804fb399f1ee72f3a23f7174bd0d52d9de0be32adb97165a7fd1e06407edead294eee30cd1ab0503329ca52c14da252cbcd3e56e5c2c5b473be29fe26300081e0aae2d1022deec1854e92cfe950eeb3c5d69f9d058fab61ee925d0a11d6eff1b0b47b8381461941980cda9cb0f30ea836b578f3d89bff635a12e141568eaac2ecbf6724b441d8ba54a304f8a44a1ea63bca151c22d240b17b7f8fc3ce5c8a2d3eb8c8201c333a7d48854a391721cdbcd45c161c6cb4c4a3853a1190e15a02a3265efa5340ea3d8a33c67767467886cefdb84d566e5672d96b6e0c6ff9e8e16a1323be0b041f8cb6f0acda927b9a3c8c23435fdb470eb3d3331cf0eba293a3883fbcb45904f5ba88bd9a66d619b72f23d9b3a67a3de5c13c573c8ac033da20fac8a6195b46743048e1454ddd4ca01acf57f2e47e7e02624fdf2d7ec86cff1bdf6f891fff6a4c3edab2fa8961ee65c0b37da70b65f7294727130bfd1df1b8ff0e624302dfb3d80d20b9c72a6d46d2ed4e2848c1a306be43c9df694a4c539f920aaba08acd5fb2a42b8a846eb8ef29fb6e337c10cbb76a3fc68c7af138f25400665d83856eacf123b5d2d4ebedf7780523c809898fd0ace4c6295e76945c5e08df477414d2dca1be7625bc7504ef8da3b288cdf25c05e3d6a37cf066ee05f73803f1388003023dc91329208b59bad07e718dd1aa0e24eb354ec9af6268b6cd9e2c6d514c4bfe240cc7f1fd2db780548112ad532fee1d7fb18ca8c730e649fa83a33081ccb1fd096580dc9a795a79d8e599bbc829a32b59e182910bd8b30c9951f664f838e8675cfb60c1c20df126a6f32af6658432ce2d01b0e47021533dff3ae79a982c1aa139fd9aa7ae55766b160b4af3e7bf50bd73371d2a6d716b2bba5b7e357376a28fbbdf9b467efa08335cd40611f94d62e7c2549ca3bdf587e6cdd091d7812f246972ce055047fb1aa39a6a8e3c3c687b0cc788097fb91ea7d5b78cb7e525444c42e3ef71aff9ddfaac77497f66529c846d22cdf103dcb597b4f0a427520d002d714be26f708363c442f24e5e1b01b758963edd0073ea310b5dba87d77bff77e6080d7e9017a95d0732345c7d2de6107e5519d513fdd468a5e6d854cda9f6e1451fdf5189377ea376b1d48b3e821d6c115bb723af30ee2c763cec5fafd0bd70d19755fdd49e7e1e882a4640a9a4c0401099df671170f66841dac5bee88281682e063f2ad79769bef4491587e3ee0f6eabcd2415e1280ac409d0f2384699db95e8be20343ef8b657d870897faf3bf4702bd5c16941090d7955455c8c656535f990288020a99861bf2119622906bd778e418e6ca2f8c387c4040a2ae828cc44092787f334dd10af881120ab69b73573f37a1209e058e254787b38732195f3a01bfcf420d5bdc1c66a5fa5730eca82a5beec114f359139548ee6a4b487cf803d0860caf85a89d2b0b1ca17e8e30e896a2a0cda52d448ee70b1b7fd4dedda7937e2b9127804bb9d04a856956ae49ebcad37d27b897a87e0db90a52fdc67612dbe373d4c38a97e203a3960af270c667f8f5ce4e3207f9b47b2af06d6b8da45742ac83ff78f2e6e4fa580e7d7022682846a973784cbdee4d3ccf84ed0e3df4b6fcc7a6bae3f67e8cbcba7d074e3a65445ef32fd99a463f4ede6a7c64295952162bde72ba46fc65b6496796e5abcf89eddc1b4fc4fdde22d282a9916872088aae139303d511eb5f27dc0d50494074ca161125f2bd0fd8186f9624fc0300fcf4a5a8a7f52cc69606f167590b38d20fed87309daad307310b4588d87b025ac89c822fc45713923fbea8ca2ca66877362fb3e0af986e03045c8f60436ef1e8e00ecc31249b6c14e989fbad857c549f52b5b7785292aa1d2732044b7981103ca86704c59c3b92f83bcffd910b9a1a6ea8afc58bf58d8e351efa757db0f38b66d396845396b22aef166c6bb23c1dc70b592d5a663e1549898ec187870fed11446947b5a12bee9d0b791aee94e132506df759ccb66f7b269b11676a215e4a35ad3f947095e7b4042739fb88982029e227b14b77babd4b28a2e115e169b51066d6693b3c7cde471d25566e9792e26dea636e691fa293116614f32b0f5f8ee1e962364cd75c1fda936f52f41d72639d3179f627638641f33132852d0d3a97bd41adf7ef48bd8cedeeda229cb9964591a2eb8bd6b4eed2502bcbea7287a993d7796dd8fabdfbf9f670b16dfc0bfac3c09746281e67abcd3ad72c8294268215ff37d810e6a3100c3cb7913171a17b6ce1db123e1db904197932474f109fb78ec397b86f475fbb29efcdc9de6bb24b41e69e1787e26167b45f0795cedf7de67aef486e320e4139c2de736e6f645d0ef9cdfd1dbbccd26331a729d3fa75885d3d8dc6332057269fd03ad564d832019b936e552a575c7ea8b8244ab0690b62697aadd6e1218c0003f607bb2bafbb0206f508a992852295eb605685c38e294f269b392e0cb4b4f13cc24b3a2aed4f6feb8c35a791c778670ee8ec5e879b743b12490e54b5b5fd0ce44b7bce9e3332b65c32cce12482ea49eb2a80fb875400b0e6d2a43b206b601433aef850ddb3070c4f77cf8dce2ca1d706eae2a1cd00411a31c2c9bf1befe6d17c63343ba86446486de33e03ea0993b4750ad71867bec32cd157bf40da3ac74b9a671fae1d1bb38d138b6ed7fb4a4f269f427d5c341733f7cc304367a28fe1d783ff5ab174ff6b897d2456b31fbb4a0c393fe56f04099d91075443c8766b871c8783d88aa0ccb6f415f0cb025fd4508e7b622ea3e8b28840cf6000f56d614a0c95c1097d0a41d39efeff872f53f45166b68d412d3c6614519c96dcc9ba3c9e391b783eff22397e335df100a32f8fda5bf448822550ed62b612b8a67aa84cb6f8cc80f8db7219aa6cca1064d7ba8ff4023a0f1dee24e2717cdf173f1157723fe1405935c43811c4477826d9a8241a767e02017587427bd9454e4024e6962be3e606ba7901c91d746ebc5921c6fe32dd23e4e43d2ea70e66b741032e1b8b6838019038965b7f8f1d8b93d7fc65b5bc3223095a8ee967fedaad4c83903b43e4bce0b5a62a1c92736a56adb137f45ccfd235fad3bcaed918985b27df461755347ad8c6832eca336fd68e0a6faa0583fcbfdf191c215a621e5c6b64d30297bbd411f574130a4148dd73af0c4df2d25d770e3b7bd77231d86fcd7ce8f160725b328d3939cda77a274ec7f132a4ca01ebbc342ec539c44e272712c5ddd35d3c16282652b60a69978686e6685b604641dfca6a5771e2927c98365f7d65f151bc4ec9988d7b1465621ceea973544b5a9e4dd262fa31ce432b1e857d959043c0d76770a062840a881540af5a1b5447c5f87d388916c5978c1a08fe13f757d8a2dd5e530be63843963ca4bca6d21e50d4c80d1f6a09ad91fad600191d7bc42cf2e3625155ce2ae5e9c81eef0d2139bfee60433e44a1f911fd0144f74900a83d0fb0bc5f6dff40f160e17bb87384521443493dc2aaf69eefbd71f18a1c9026eec461f5070603d9981f6c7092c711e63d02ff5581259c317220b3ab385d2bfd91b87dbe4807cf21a8a06a393777dc38435d30baee9f8bf52055eec3d650aedb3f5d68acf2c1c970d59a2fb433fd4977a3512a7f53b1d609f1f794bba2c00dc88986f116ab5642597f1799d475de99f8523a5d37aa078c72d174ec2a3c49c744ab9ab1127d3ceb55b08d4160194140344d7b5f598324d3305cd0b3d46b83186803268fd41c5380c813e5c4d382b34fe4af6b851ed9fde24bfc4141608f67cea0cac954391f7e8206fec2e7cf65a47b69e2abd2fd0c6bcf8021e12947eaaae2b5cdcc7d4259a62c1f8ebe006a9c6141d4974dd065eb709a6fff0f9e2de29473cff901cd36d124f64abd75823683765706705f8d63df39c137601692a215af4d660e4c13c514b52e8018a2301e6416dd56ceb5137cbe6fd7e44c53a72d7085d010c9db2bcca473c058bd54c5f411da4ece8eeca49306857d6507186f1e5f3fdf1b7dfd89e5e9d7649f69e10baaca2ee426d05e97500642d1f9335f1e33e6af577ede2760e2440b191c17d7549ead5cb5995bd539244d935baeb430e507ecad8b0ec4914055f07c27cab1d0452ca88e2f894649efe1dcdc8d708a4e8c6dbc0c58c495b520afab162d9d1070203b68902c7f3372f6c94ff70bcddf37293a054b72295c99af27995152f41b4faf79084fd1a9283e1588d849ee1b5e3a03c8478ba107b92a0e3c87d855eb5b825177a98a390f9c1d9914a3bb2bdd882a4570f1427309643c2db7e4c1c075daa6c7044692810f82bc272a3c7bdeaccd59757c8f15d951f71d542a5c67906c3144baa7a897aa7095c1fdd5faf7ce9c28a3dc5cf34da99e8e96b85ed7543456b6bf997c2dbe0f16f48c752a8fb91849b843169ecf3940c531905ffd9b5c8767c8a6407f48b93ef5f43ac4428a46986bd82676c03f0d4d5be2fd81bb37f7cdb78b893e84e0b08de059e3c031b3008110cb6985566f247395079aa234a190321c708ef7118f4b57c0cd72bbb1598e44d4802948d76502fc18e4064d4f617ddc4eda444017d35dc5233a8eaa34f9e17d3b8e2354dcc1e8a52a1262daf72c0ca612ff31e39f7bbe350211202b3fff2b60791ed10ccfec681c5ed5c2560392f55b39fa13d96ed6a46e1333b4a17f1718a718540a69a3d7d105fa25f066c7353d600a5a6ad437130cbf590520a435e47e4870bb433b77bf945828c9a2dd26b6e57acfacc9514bc95f679ac861b28cc5828172c5049000c311c955b1bb6b0fae0e3d95286984706205b14842ad71f23356e9e3f8ed9cc5f09d1a215bfdae17f3b047fa1fbb3f6b03831b3795fe14d3f94d636f1e74c5012d248f8267d2e19871915b9e9ed1479a4c7b4ba7f64458bb7e444caa4f3779020659b7e2eb7df495680c8be3ab56a584f32e667fe5ff9789928fbf1b31200b4cba1198c6f30f6e4ee6db1c0fff010511776a4ec04b873761458cc6b3873450690e25465a397a6fb5e2cc9ce9ea8f4be6c7b0d77562b3d173b949f498ebf8adc573d487379c89051e012aa1b9068b4d2d94395b561cdf7e2f57fde68949878e569662a43785ef3f184b2b787ef7751cdb4d433e71436df67b8fa57f78441463c6b081d569e8f21929cc97e2f0c9268f4d765f7486090617341d00b8c64c66443769354a364b823a3a77d18f2c901d3c65d2241e2e9f305fa2d056d985f59f8e7d33c85c73e024fefada4a23348d887a16d487e2a66bb0a52949daf7fe8ac79d4ab371d0951a9060e4fbd1b02a512fb984dc3d7f794bd0613e9005aa589d23f0eedd77565260d4e267f9c301ac3317e7d66db16b50b523efbb6b78074f6076f695c0c5a35cf05736345ab69c3ef55bf9f54754e74f7ef9bef1d11a2d0dd2ed6336c8a990daf97bb25dc6692b80fdaeb92df14a213353d59fea1b1aa1771fb5598522b776d3d68be935532232d5a5f38b25b103f5efada596a98da6ab89af38cd94306cfbe817a9a7f1df76d28f9680875de7dbfb1275570ff009f042e121c13c56527636eb35a746fbbab17f0c0ac70fbdde2a1746fa6c59a5715f254279b1333be1d196cf1745a6981a9857d22c43b3f0da6780876e33621101dadafda7ef4269cf082d4503240a13b59112d82c6e18c18bcc5ca22a559dd5f2213dddbefe74dc01d1e3e2db1f33a542c8253feb7703c3a60c154acaad266037d0f9fd75b3ae3da326579bdf04501ef28d0c0f1366ccf41a17a05b96f6841fc2e2790d916579863da0313bec2bc4fa7134f817f14fd5cf1e3f59f79fcbcd4c79da77911444bc62e252b7b06954279612b93ce7f62ac2d67696089ab55de4eaa4884895f0d6775e6a88a275261828f9bb3e490aa9e61b3242fe3955c066fa2784700d08d1c26c6e20775bac25deb252fd5c658c629586f75c44a3e966aa3c9522d0fd53f84f801bb5eb18c326108c037fd2ca7854b3ed4ae6455c02b9925c4b25fe6a50247fbb633b3eb6fec1a796383990e7b82cff07dec995c61f8f93491880271180213fd68f62bc22e501ab8027bec4f9dccd9746ba61ecd559b8656e30f34cb11892b9a846e39cdebc275faf5fc2cf5de00060a939f129c67f3a9966ebbe88211b849c8b741919707cff0853ef5a1f677d9dcdd3f3cd254c1808c43309fc93b8bdbe2324f430f957e8edad4db8d24a0d0d407c5870679af929aa096c64896b4db8ab8db8b9286ee71109afcd8717d293507231857cbd51ca842e320f21ccdcce0654b4a42515196542f37134daec61c03578b9201d3eb363aa4ce30f7a22109e382fc82acd46d8d335a6032b78591c5a5b8e13f7b109edcbb481d52aff7577f25660de50be625bdda9a200891a3d45e4ba3509bf6fbf0e5f708c97bda7ba5caf27216c1df3b3398ba41dc208b5ec4f0cc867c5c55372dee0f4d24ec8c9204577ecedc1f69813d765ce77db6818da6ab46340311404a3a361b7e5dddb7fb8b100c4dfb20d7c2b3078b1ec4b9d0afe2bf8d47bc5e7882f93806cf5f1e5190430fbe2cc3c9dca14f96e807feea31f5a20dde85ad63f638a02bd62408a06b3e966e90adbb63f9688655c21533c45313273aedaf09b29f307199d8346d7ad7515230cc801d350f0554125d7df170519a44ed9772221fc9fc43b7262bddb3761d6dff8db1bf5ed9d32aeb91badfd494bab9d9a21a08e6005991e9934922c06db86b1237523b0d745473b1a70f9b6727d8576f248a1b9acfee02c2a38b76b2c056edd72d17ca559b84c7b81258d5b7cfa9deabba0538236edba027a922da19bc62207de6061dd9f00a0264e68cb1035e72dcd1a0619d9b72621856b58e646c9f7eee302f3dd89270159b144d5fe10d9b9a984d4787fd3ccde8755bee1308ddb9055e1338ed967518129f54c22176c9bf4a0a8519384e2f3ffbc34fbd10d038e0b3310f9649c936d3c940b5014feef562a33348d1f4620a9ec14fe5f40c5f1ac2247fe7488d7326c57f73fbd48dc09d5ec488c82b4725371ebea6887cea815a5aadbeb323d71ce4e80b5ec912c970cf3a55a69e09405fe89eb07555432ec3c6134c58388b3d06cc36a621117130cf13eccf5acfb3247b809940d2d14525e9a26e32f14e11a6a2ea8baaf8cbc499fb063e1d9944cd6cb550ef3e8f898a337a7bdee9bb36a63a9d2b2fa0939db5c55fc143ebcd012517802b99e4a97c7a39a395c6056bc0be3a99f3c561ed7476fb61e08839d60e42f913495b0e1f9534d811243b427949680dccefed507d59850278cc340568981a433dedfb82fcdf206d216c77c41240fd2299ec4885f5806992199e02c198be934393aac75d535edd5ce1f5c27e83d6d32eaed8c3ce1b4936412239b184e20438b5970d98564a692a5c300f33cb10a79e12dab51dde933c272014ad8ba6f07aa9ee499c7086bed3b1a72b5168f9d1dfc283ba484515f3a4ad04817f1e0b83be66a58257b0b11ba07d2b1243fa9131b646a0314d8586a333f98bc700d07ae3a08d62056d0aa394e1d02002c32b13a65d50f24346e3ce041d115709123f420eaaa57da4820815d149454882db185666fd201eb6d31469ad8f92ed1b57f1058adad2800f8de190938f42e516ebbdb1a6bdc80dbc62023b327b010bcca0dbc418cd6701531a2ad33027f545efa0f7862815fb50362353a2e7357678e31c35548fa9e795f557bb126fb2a2c0d7ab89074d66005391b94b1418e591d87a1121a07738a4482d03c86c478cec3aa1de316ca606b93e1417d471ae6e7a3212a4d43d783c22e258ea585bcda643fd40fdd367bbd888e5d6d3a813a149c0ae5bd8891753ec23ab0632ccf837508ccd430c1721a1bdb8d1ea0155c9f7923799105342e8eb924927b3e128e744a5f019f01378e726495fec42579af6d02f205b525721eceffa980e75d814999188dbddbaca2fb2289d51d12f69c5d36e578f0c29f1dd8e5116ec5702227ceb4257866d95b5f6a235961a8af0bc2b3314ddd813abbe2c58cd54d65bc595dc4507c0035a102fbef213ac8e9ebbeaf0ba6a39789c5f49d619fbfff521bb3f343a8e1d80e762c319f3c4c914cc5b23fa883bddca1d72dc40419508e12960a850f25f4321e11bc72467a794e4e211947bd1599664be4fc5ba9b2222c5e007483ba99914a9a34b98ae69c158bede707b0cf7a007e33766743f3062792a071a829fead06f7a1fb815db8f885977071c03eab705bd98944106d02a59549dac0cec74b9fb0ddd379c0eeff7cef25be9c267def1e5bbfe53fbae501c81653a1fb4065dfa2ad872eb4a866bd76d9c49d8ce545bedd693b35226f20617d4abe8f789b74b1d77cbe652fce07a1381a0de17fd5305a275c8af792d14a7a27dc4925310a1bb63e0ff55e7d22b987bfeef319d7f63ff9102743f6229c050c11a35b11213e268eb00cfc5b2ad7930baca562ada4737eeb5d8430feedfc8051f8afdc80e6fb921b807e2ed138800f22d201eca6de53a906a6eb9beb181834ad5da49e8bb4d01799ce309d0948765a291b6b49a947cefd6c7ff8f0384301e6e43bedb0e55956def9bff8042bb4649e80341fe40330c3c719b7df723389232018050c4e89b0d2b7bfddc4852eb8d74a4101a6714d913f277cd3aef198e63143a1c5f61bd87791c5301d571103a9d7ee407b353d1a3261e49c30d1da78c4b9d229548e79097f87fa58ccc86c6acb74ff40de36382ed7b0f84516db634ff81a75972d28964cdde01459e2ae39c0b1a6907c388293cb9fea6f9402fe9ba1c9e5b3be72367303511a3796930f8f74e0dc6ab44014a958ef4d305446e7d39753fd28ece15a937e196d22234e8661f37d5c78b3a201aeb3cb3a36fe9fc4519b387b08b92843ceda950a562a178d942889c537b8a093cd14276ff4a231b295ec415e6bdb33742a6421f41335c05276ff42ed750f843fb8a6c77f98ec33426c46f366d714ad47972d26e963b40f755297a601b283f92dd01b2f2877ae02f45bb99b1a2f327c776426b71560a5ee1c5bad783449e114c567cb7627c64689032949df3406ff05fcc1b7ddbb6117b059d6e2a241685e0bc987bf0f9568969bb022f28e3f178414d58d90c0f6d07af05aa6eb243e08260f8dfe84bc2c6d1e32db05eba7d3161aecca14d85d606cfa793a3d540280e5335ae3e874d3624d54cf9f56a33661f72b6100a97403984dedfccd01f512c0ceca358d1a9e1cd5d33865defcb14dc1d08409a0dcb3d075e01a5b2d92d87b7f8295cd3a71f77c44b99fa6be334b2b5c34110e8c48500e67e1dd61ca0689584bf106f35006f12b34489cb6d7ae6027edeb05f5c5250bc7b1142a961bd426371217f1b25f976850f176bfe794499c09cbf6e9f60935dade292473c79951db1c4f79d44a94f9ba140524a29f281e83de63eb4c202ff403377e41129c614b0455b45398e2d59ae22a35796b6e196ef20f307aef2b6bdaff92764d29d0198585f172446fba859c6bb5ebe82543469f0801ad76d492f963ff879ff88fecd9b0602a4aa7ef69ab04cd0aa81d03d608b5639d7416e92247506a86478d9f751d3679790c55aa6c00feca76dbd5d530e894cb61726ec69513cb4e2a736ad3a1b39e27ff6837de5fc44e96691dac87af776eac2c463faeeff62c1867c99c862075987b3b168d37909b242a020e4f242f60f85476096afdc366e5c608054f081c7b9949230fade81868f6b074cf12f9d7f159f76f52bd93c308498554c10d70e67f90638cd25b9899624b853dbce0363a25e8981dfac0a2abb0a3158bb5eff732bc6c06aef7c42e551095b649f0f8cad03ef0169a20cd701f7f3e0040182d0147a8abfbadc63d95b7c377f917c10be1906a5c6d4a5544216952a59bd65de22ce4c5a9c206f907d37add40cb9a7264cd8d19020c20c5517423d20474d634cb52d3bb2a7736f13b6addeffed32bb6657d839bb8d23220e3b0d66925483543e357de7891a1d10994dbc9e6da9b1aee794bf6e031ae8307b50fe23e236004e9191b7ee7e3e60915dd8ddd12b8fc4904a876069264cfcf93d1470706ba837b4726b2dfa9ab341f2bc7f11b00763c676d2bb20400e290288ea0b0609e38a0b4f9bc108bab7674c555a27a02229cfe6400754845336588a241aecf35e8f935bcaf9589a4fa9fd81384bd6efc9f45ca3017ead439ef4f4cf0bbc35c64373026c4cb72d1cdd000b329fb0a86e7e866e98b00999d91e9e34128aaa2eca39411c64a913f3c45c925c83dba0702c391a0c0fa2db034380ee98e8685f3cc354c0f69ce8de139f74ee412df8957dffb82f8e4a2f6fa2208a9f46cd23d043f31981c348b4c5b61cbc3f0f5e191f3cb4b90681ddc7f699dbabd9a254c619939b31df5dd3c6d5c527a85208bf4367e046ec3d39ad6ea331458f9e85b25bc8d0bb58eebc9545a93aeae86e5ce39fdc3b4be23ab7535d85aaad45ec7305c8f7ef47e4ed1a9191ce4f7acf861f1468ce6306fa4c3443bbe9aa669f1b12ef8c0c88c2f0a6309dd573729653f7bb2006c76ea3cba1f7a8056e9890fb630d8bc1c145b3ca5ccaf3aa790a845b6932a201ab9220c99a4697d49355211ea75d020e767b711eb3bd99441aec4c64820e342d392e3ab6e5dccee4b1f22f4236f6f6dde05a4da2c71301fbb7878f5abf30b50958ecc594dd6f5c5fb7d91e041dd05acb71a1c17b887a5bfdf34bf31386954770f00bc3dc8f6fb52fdffa99c13c207ea3055fb4ba9367529c3adec7b2ff9f8d748d8d98b39842cce48aa00c404df4250fc102b076ae836407b0afe99ed90ad09d5dc0c3490fd29769769e35274725dc7b5e5f6a1fa316a01b302f1d27ff2b144ac58908e4a77dedab81a4f386c6290b0530cb314bc0ff7ac57e87a23bae04e5868c2d1fbc9bb3ebe90909efede7ad5b0905b8076e6c8a04fca7c09362d65a50d7a5376ca8294c4cc4e07efe26bd0cecec6d151a3077bcc9312a90737c27f76eea03673d50171176367e416ba2b96522319dcd33a3f1f2162fe8e3eb7020fd9a5c84e21e3452a7a5a36603aeedf6dc9cd9916c7346e1fc70187b2b1e18db92cce4f6441361bc5e548add2f01ff7a9ab84b859b4833bc83717a8ef73bedf23a3c762e91d65911ee7e56e76564ed07f8e594ff6ea4baef0d10221a18fa05884ce74a5feb407f1e7320e4395378740e3609ac3309c9c6373ece2a43e8d7c0a0a37d02f917aaafb5b421680d4d2bfa4c42cd18df8473785a5d1f4fb45d82b1bedffac98682fbe625a8a15461c791e26539663d95b4aaee1d6edf0a5d0932470d7deb233fc2dea3e1b2aa756748c938fbf6e5e348ea9f8b87cede378ddf59b0d17d2e457ec9e4851a460ac0f56f4c15e26f74c3c0bf4b85926b6ddc559718698883bc58910ad2d513c3853bfa300546a160a23365d04304cb7bd8f3b1e6de809d90363bed62c80b2d9174ac9ab7d7fe7ebc0e20dff61e2b7cacc56c88bda0ffdfe14fbeb5adcf8fc5eb0ecbd3c9a286c112d7d85aed98273bf8477e6003dd56ea10de630cb31fcbcb0ab5365a82fee0d13ffe316fbc2adaad2e82c50fdf0b79a313350b5c20df8f608aabdb2424cd279d6e551dafec804d1dbbe2cc84df0511e8b0e2b156398efff562b4ed5c0fdb3b7bf96e01e6cede78507fbd86b453a361e11c6f81961c3a4d0f0e178f02b9a92162a8a9cfa663fe83ff0f48372c6f9ee4f4d90be5eacf871fdd05cd66d2e66cd77ecf77e2a964c25c993aa42dfccd0e4636f51a2bcf2f31037042493d2f3342af96110df0cdaa45f212dedff4ea995e7cb563afade4c18969926462bfb8bdeedeafca3eb8e2c3a6bb1a3b66963059849c0a031b3062a99ea651784d827bb7db9c07a844658398ebff808b4601c3d247b2eea2419ba88c96eaffae6cfc08ae2d905237f8612301eaeb82b85701e275d61e3a80065527ebc7ef878685f157643ff8982d8bb809ce70123b5be3b3c5e650347ecdda795adf70266761abfd67f71d821b56c950a168156a3dd55ee4c13efcf1e6f9ace0e5c1893e99d7e4c509b654fcc7b54de7eafa5ec335c7b6ecda5accc5ef80f4fe640f3f1e04f63894c92ca658a798de058ed8c9e05fcd2f3d2ef1148053c3575d8c5eebfadc8ac957c6079b2f1ace8ceb609438d39eb2c3563b680567afe1bff8c7c024fb2363a85df3c5fd2f761d50f930a0653b5b7fc49f728e70532f224421ed9166ec5590773257262e8e1de788499da2cbce11e7470f5d84955da5dd3b823fc412887b3ae8261dc630888dc33ec5310edaf3edeab5c85e1c89b6a57677c0d3783270d162d78f8e74760af15deabae9262453059d8a5524713685f3d254efc0a70bc2542976ff551ec4ecdb58c19d949ad3e71f69d1c9b4618a455b733d1a07f9eb7afe21112daa5ad41165845304d2601eb64bebb59cceef45576e14c4a4c8b9b793aa466e3acf81941d6f9fbcb138de03810f87036f7c74fae432ce895ac7e27d02e165da31c02715f92411215aff2869dabd6774f89ece7da5e048a8100991103091b908d18f5318289c209ed97d44a186e0e9b626ce8d8af977145d8ca69ce19c464786a805a1e8d461305b94d72af73d0c56e41fb8852e07a5ecc56235f0eae8ff694554b168c88b57822beaa14d3bc572774ec614a09ffb1e717fec5e8dfd8bc7ab645811c8096cbd8cd0fb19df65575987fe15ddf6a80b84a3536ee56b776d2d3382226fbcc0f7cccb900f85ab719973749ff7421aeda1682d7f18107de505f320bf7018f46d31a87045d6ba78b6312da7e02c1cc929666cc110e074442a55a67971702979dd52265ce0f3b64cfac6b851b9727ad3613d259708e805d963afd70253962f591d66c0bfbf1e755b21f1c0994b47643ecd98562d8ee7cda48dbfeb55dd4057c6c365441b90932d221c62c90414f6f770be0dfd7c7cc156db02013525c9fca08e117414a43ee03dc37e5a4493b5aaccee107b8e1a52e608e3dadf81a3d297e5eaa7e7962d69c2a97710b0798c38588c8ae269c06a57fb83716f424468cc3658f5980920ec652796ba1ee7d477d0effd85df0e13fb68990f38c3e85e9b0bd3eb7561d03bb2c44329c5fee715029013a9ac9f311d2c1f9108185007e3dd71ff541a9930119bdaa5bbd066b209bdaaa0c0b5ead0e16bfd2b9912d51aa20f423f1539740a5c3a00cf7e6eda32e31afa85262d678159f620b745787ea3c346c90b95fd0b0de8ca772a836c5757e4cbad8f1539353b4f4414dca25e5d4be546acfffec5fa8a3991e57e79d4bc621e3b440e4691e06dfc06b2daa2b8970cbc830ce0333b6a9d93bca81fe84a2896ebec8388fe77b74196fad1a3e61117091db769fad09a58f4050256ddaf339bc0d623d924b4d3b9c0b2bc1862b0e7ffabd35ba64091171edee2062b1f18b462254a115bddd6fc83194567e5f274b33350efc206f83c0519cc581aa52ff197b2f8a1ed03c6f3466fa76a0e8f24b7ed0960d0299198cc5a5267e7fa4fa7c99b63c7a59a2d5de83aaef8c0638f7fdd008224750a12a877850a03a825bf1e913be61acf2f1130434fe0da84f60c2dd42a39ae90823d5325c8279a9b21719f5c360215f8d6450d011118472c9a3e343db009270b9a8b0c94d37deb1cb5d62b5c0176d1d77a60e1fa158c3bfb8c2ff06bef6cdffea7af08de8e7481c61c34f035766904f09d5f56c95bb01bbecce46753d2a24dd1204e182d5f41458503bba485f360d108aa32240c3affdc59602b6f4f667b9dbdbac403831b9f188bbfd1cce8fd0be6e29967b86a26b79a0e49b727b1ac4d0d231d73b99d646aaf7156abce62820455e3d2cf31596c96b93615d891f87547e4975fe6ab08689b6d72276eaa1a4dd2c7236ed3ce0cc2d27b450d1ed943e9b73c484c6925ac3781045936e88123d338e04169bc9e0e4fa37371310c81e48e3e4609d5a1a59ef377bd53bfa607ee2f548693d8b2eb6dd77da7fbfa0c059003e5d7c1d6721add6a19e782f14e3872ffe8da8ab48fc7deaf930e1ddc9c1494dcb06f9bacef3ae31622ebdde965dc860ef9fb75447e601cec98a99cb8ba27dd173e31c7636695ea599790b9f84db7de427ea27d88b4105fd8e286b39742faab2e549687917758252ec0449fd11434d97b933f220e038f246d730042d29748e6780f9056df5a68a617e1c63cf7e3550dc1b3e5e9fce4ad2bd45c7bfaa7c7889e15a1fd164cbb8e89aa14c02113d20b7f07e421aacf8e7d19387cccb05cd6a93f65d11087352de8a69072309a5c57bb5ec4585edc192647ae4039544b5156ad27eed4977f941dcd72f5dbcaf952e599a9e619f464ff49b2972a8d1757eeb64367658120ac715b93a12d9fda8e3203a656eac799a8ba5b9de9bdc722877e34f9dd4a6e35208b33b6748d4c4d77864bdb24f1de5546210dcfa734c3a7daf802f6b3b4e380faeaec65329cf62e441c4060c37df5ebd2cd01b850b5cae2da65f9aab17946e7d143220efbc5fdbd1231d65b05cd3de89c8b9e943d45b94b6a7fb00dc334ff89982da5c18b3acef835d7beba8ec67af43f4d455ceb3d48a51a988b2b3f4363b68761cadd8e9b871d995bedcbe57bf8414d2b3c3b4f9b0bf8976746fe9ccf5c7d2e548c72c1b4891aff8366da751c43a78780ad9fe36938a6d43f9e018c351844916cce76cd149ce3a2819b39d251a06f0a1ef2245aa32206313ffdb603f34c563d23ffdd9e910be0e638d67b22ed07f21a7811eaf2da82c21ef0a0babeff9e0167c8eb126e169c4db14e9150890fb853bd2591a6e5b3665df37648ea1fe29b4132c86b12b2ee249a418aea549f838e05d628f00bec92012f2f22509d858183678e1193ef52c261886885cd88bad476ae97f2a69be1e94e085c1ba10c1cad3e0ea6be4a61548f050bc2881a52344bed1ee684b40c7aed5a32ee6747f6a0b9f32ba3f3010e677b6386dfb87409868930d8364a27451d20018a900fef2559408f2595ce16616464188d1bc07c95f85a76ad806599f002f68efb15dd96094c330858bb6e9e7b673b6ca5922ec20ee183469a4835ba3c4116eed66d51344ce6eaa114f7e4f3512a5b8581aff869b9a0bbd03de6feb26157f17b3c94771b5cfa438ac570dac13654277014e971f81afe2cc4f0453bf2fa5ddbd56a4fb9d8eb01690394a92fba986d2eb8ea93bc3943359a53b7d814649ef1dec85c15c25ac99a7a5b055b8faa701a752d4deeda8fbafa87fe5df68248a41fb6af5ba395b83dd9ab8cb254fd92df3ea1790c26f009269b604188b9ac2d30ae354b1bbdbd6af706ba12bbcb85e44fb2755a20d465d349f44386c6c7bc34c84d484985ce480cabf1d344eba9b58f192072a2d4e524ba6972239052aa2602916290f6931dca23b4d83d166645b5c9896e4795df80147ffb402ff0cf6f0529b2a45f69c02faceab52929903df7b26e1997ac13794ba3cec5c8e62659701864feca8d343a6f067531b66e62cefe3d1dc909828c4d09651b048b77d2a8e4109c1eadc0a64215652cd90a52b77301a1c4dcc97b157a8976239607e7f2570bc227b36790dd8763a5261c0afdec9782d99d94aa6d01ae7c5211d818056d8c73d377b5962fe23821449410e31a3061cfb4992092d64c46be315a849dae058bc8eaf71124b71e57983d7207663aa6619c258968f56c9373ba2bda9935e3d84036719a38547df2f5f5e099ed7450f1b2e56b6ab3cf9372f39e856ff051cfc7b60150cba162604e8d8d00aca4692532beea8c9f328adaeab5b4f54ea4de4cab05c687c3e8b1151051cab1660be47e699033f03801c9d26d6c5e53e416284a1f685a690e559b489dd964ab4123af85d090ffaab6a16b1121f4e7decb3c886c816b56ffce583d8e72d7d0f36264ba768ac7e70434835bc15bfb56b5d49f03ea49ae1bfd921c2fecb9050811a75daf93a9a83b210f5565bbe49dfe366b8e60b608c761ec29de618d541431639875545471d8fe5398fae85c7270c81284d23b52866d95b0663e7cb01d56881419ccabf76f9aee1a117b9b55218f9e693e3a014efeba3ba62e52e7dc494ae9412d8612ffa86780d77d649d4463ab02bc356a51f15fe9cd1e1705d31a4e2d43b3072a7c0233ab88c055903b8d55c43a3b2698d4ee8b1eb0b70d8ca7f307f2394d9496cc07963bfa2c252a13c895e9b06012f47ab7367bcb86c55285eb7f01b7485f83c70889951c3dfa16c44284a1eb545851bfe3ea2f094d8a99987357a6eee5ba976bc0c68ccf7a0dde6e40e6de3a541df9e3cec1a40da8ac04e9a38cbf3682c0ac809293cd5179f8cbe236b550839cbbb2d70375702279c90e0e21d6b543adeec67e765354a025b83c2b0994f1df39ffb50f40963abf864147f683fd4ea6d066b3822f24fcc36ab82bcd373bd8388c7a108d07b65bb4e32e74421ef74641b41d7a746b4fb41e816f642d098f93728f8c273029b00564f54267b16bd5aa45efc4e9e8377d840c996ddd5fa8a18a52d31069bc68e1aaf9bbfd0ceb5a3d4ffeaba44f299684b7211b26490af21332bb4a0180bd14f5e50c6aa2defb24026c92591825660281e64bb6dc15c4d7184e588454527e8b5bf4ff32dae0508ea9a04e2e8672e0c96fdbd157908ada0f410cad75252726df7f53118caa052c6b523b8ae099445dfa433f0402c4fe98bc6f3be0aea5544df4524b68a892b07f87b85b902665ff10429846094a76e9deacf640645a60fc73ea118524c61ec7512e3297333f012301cfbfd2797b90438d046994d49962695e534599c32e1a0e747d2e3e421c658e0875258b818f6bcbfd2ec33f48980c591a5d5a2547e1c3525e0f563b8a4e714df97519663aa9845ef2c9ad93b286225547fa806751bde92e2e195175dd8fef6f42fdf6dd3a9d1b45a214cec6df379cc968b0ef0f369b802c380d618a88c8a55ba7319e230deb42bff359b4f31c3402a76567b2680dfd61f3d086bd84a6b5f97a7e20eb695f01716edb5a9a1a0ebd26914f804a4f29dd9a15c34fd29cfcfe6dbe4e49c7f6cb1eed7045bce7e9aacd7a02a28d7dffdd6f0c8ec5cefa1b7fdfe59e094b6b4e9b1961d8daf5f6779f80e6520910edd71790c4264ea6f91cd70b810eec5bd1ac2f4d587968358f8b6e5e55ff089dbee6f49aaabb158145325b89a2047e044b631f352d15f33648d0a919a544880280097729e885dc8a26d8340adcc2cd87216e73f2a09f5991c6cf60a0a2bbd7e754d3ada0905465f112fc88446eefd5cc2a6bdf44f265aa991295231cff358425c3745d2f91fad75e6de92de74df5ff595b8eb376439e4395573eecb511d6ba3497067adfc668a8881af397c8caac162d026f1718585a302575a9a120c7ccf540e07d8d14d22ca15abbc7944c92be5687f3112a5df3669aa2b68d146fecc3794d0bf5c411e3527329604ed535583a4e61af128cb6174f92ee06dd4d77f3e55ff596f56acd4db961793f396c4b4813287ef373a3ff0f5382a35cfd177286be320c147fe75aa2626e5292ccf1f4d4bf0c3802f88fa88cf82ae6a120b11d3943104e457e6f11cdc974b24d89a8eb953344423c53daa391eaec8cea862d57db833009d6cd9257d04149c688552483b3a6a7b4f60ebb99b4799ca5be556a7456bfadfb88d9be4ab66d910f5439ceb9cf87a5e9569b5b4b02b8b6c849bcc6c698beb21a1a55aae4a186732d0f9b4688b3cd574891eb48e33f92a694587166e5545d026fd9754dc19cd35b39f31563a69a76f295a5918a15d41dd8eccd337e474ce6efc5875bd51c74d6634ba7dca0d3b0852f76c3c2b490d571c12f642c2d5d7624411aa1263214f2bbe59826f5909aa469c980ea368e37df3936c9113aacff07a2824eaefd5dcba1a22014462daa83532dfa123c4dca0dc2100a6e6e604a65bb48615d437c1f61f6ffd9802a0bed8216f95aa1dbfd4ceb6da6257abfbe59cc9d81725b8a3b9f01b56119e4f19739e0f1cc2096091e6827adbbf7b8c1df25c88cdb335a7a42c6bdc1bd06df1ac13a9a643539fe61cd75165587cbe1d8131c9b43527370b7a50d3bd480a137ae066f7cc3d5f479d143947a33dbda004196fd45346e19b28b9c413b1fba9294bde59e4f57d9acab74aec4c44748edb197e4e1300b4c8608959d20b42e1bd233b2356d499fed304e736bb0e40dae45baf5b1da64c9234417736045b7ee55c0d2709d99fd1725544314573cb116f784ef94d9c09a69697baabce4cbec97a7f4f7f5dac583e5fdbdebce1f85670221148234c2b4dd8bfb5e8772bd68fb529557159790e9dd76b56878d8b6c0447543f0f459df4fdcdbf7c8a73f4f4013776aded9f80873296137b838062b40dfbc4ed257e8aaa8167218b7f8276a297001ee74f735046819b41097995f2c916c070b1ec8fa4543944b241768d4b88b6b2b77ce6bbe306fe0e6bc2dcb4963d03ec4bcd6efa7c159f4effc6da241193bf4e0e29376b67a98de82cb391741ed0bc023305618460810ed50bd950cc3b65e594ba2b053c48b6762c0057f1948e60f10cb4e94a9b450b1af7f307aa33bfec20b24fa4bc99e6c1f6000c03f2b819da1dcf1e5f8fb22cbe01650f7b2087b5c0a10dde06db491a33ae2ebd153d790c2d0f351be63f99c5aad058b1259868c383c7f2e7d2404d663e09936419454ec7b1716b76dcfb54072924d9d444656dbb1a7f574a7ce2f5c0efcfc1ee5ea7facc79598b1e66f59b58ab2af6132fdc7a65f33cfa41f44502eab53f6bafd6477af17d57def80430abee65ad85196b34c59c3809ac3063b8148986eec2658c9f0b9630f9461cdeed6cde7d020b7804483c4b4b7b5211807ec3dc5cbf51c1adfa122eed9cb19c3163e43219d2fe1dd34d479a4dff5601aacb97a61bcd09f16bd57176d7b64e456539c9debe2eec812288f447a0f4b0dd7d5c58d552cacdcca032005f8fe3fd63f47a2d77055f114fc62462b469b627c5cf6f17fa71c61453048c01ad71031e68c7d050aa4c14f0ae794f917b4ec6d333e82c22348cb69a434dcd4ecc44a47faef5c67da5939cc33850788577017c4ba9a1caaf375871d03469abaa24865fd98c7abbae8a03a829c8a318a19fb15ba8f936debdda3bf2af65b1d5b11828099a75492d5f34dd8d7db7bca899303abc3a707eacbfe50d3c758ace3db0759cc4de4d89d11956dccc314c9e30568694b9694688016e1f398691fca0ccead8390b6c79f124be54d464ac3d24be03dcbc01a809cc80372f87e50b783b1939b4b8ad8e1114e84d78ecf930724f4c8b8a2ab229144fda1c40d68b7f6f1e509405b2d9951ea1c4fa102b85052c5100126b1ea3f2e1cef4eba6ac3b897a386efda20827e20f52d5880147520dfd84ad56e70d8708ea2afa0418ca366fad8134989203264ca255fae868de7604ac1c462b20361b3aaa0020c31226d92fb2b6c39e7c68f1a140151fa7bf3c304babf911dbf348c69d366261ce3431c9fa6ab316134b17a410ea084ca429dbd1c2c03638f6f5e6a55b407271813cad172d4d425d969a879df74b9bdd12c3770a6cbde798392cfa97b5f472b75a5f5e709e8f7c52fcbcd7725d368526123aac6e11ec88dbeab149189efd348e17c6556d2abb23274476f7afa7f6d6242f1377441484838a56707cb361c84eeb7e132a2b62f1df9a8aa4a833c5ae87c9464a8718a705c4f0aa0858c1cf0fb9958cec80037150431993a07c5faa911dffca38c77a3ffd805b2c36cbb33c196cbdcdaf27f605e692243ce229b36fec7ac5b4e40f69be2b87a13bfcd34b10af7232fc29e1760b5ae12a99c91b18c55e120f0a2592e29e1ab4775fae807ab5b5fde059e9f29c5e668155e2d467327dd0d7ab375941c5e316d3cffa1ea4986fc17c6909872c10510f50bf2dbba4dcfe80c69b9061c23424ac8378c1a9299ff2a02c34e7e0894a2f43d20e1deec9dad7bcb58bcfb9899067bd685c0aed6d75054fccf844cc502004dfe13ed6baefa0c288040c39a19b62ee926698d209934dbece175e94e06f8006dae132c2b48bc6335af9c32ec2338dddbbef0fc700b0d9b48ff13ede86def5aaddd77fd3ee90ea35ffe0548e424db4ff99a1cb2353f706cd6ad71ffed39a66c275023643b191737abb0b2674493a672f163446f7db41055df2765844151600e591b220fedbdbd60233c3b3f2fc71cd4247497d47faa4c05e798859a5029cd068b0b129c8599f936904981f0897249004f8120bdacaaed1685258e871dc1cf3f148f159c3ef5a085ccf16052ec210a2ae683acf85b8dfe8c0ad8c71fe8f5ee86f5394ffbae5edd0d57835514910d22516c712b47205b6f6b99da5e8d96065abd198445ec4e17ce458ec44fc97cf4e060ab6d605500d8f4107451aed55b13a3ec6fa396afdfb5d3889b83561384134685373dff1554443c758c14308dbd08f12cbded2231ffae593e9adf099c770a2ad4f8a2eacd9de2e4e552a512cf2fad6e1b48120ebc5d400e02c569a4df4e3fb2d5a2e3b3d684959452585baeb08ac0a89b758bd945f3ff8e0bb83bbadad7388afeda319a378ba5337fe523f753e1db353522cabad0e71aebf093080a90942a27bc219784f1741d6a352a7474115c21f879f5264977b177879cd7bc3a313bbd6b5d8aef02ed73c7c051b72cd752fb95840db0cf807c5e363f5e0c689d6c52ffad7eda477ebf02d41b6557e083aa0fa30a0e62d57b0bb24e52b477bb2a739c1bcdc32c15d89f5bbc8519068301874b33c90d90b24cebc60ec1c3df9b597d2c7ed7fdc91aeb2c7ecd7487c2d7a862be550e0bd3860dba596a5be559863e5ceb4c6b6f39209bdd644274f3e5862c58598f163631b968d570a2646b098c097835b4789789f166eb5ebb228c309fa05d11cbdef551bf335d54b8b8a1efe910383db7e2f114337ba7377c6e895524d2c87465318762df49d9c31f70cf50acd9307c89a1c667177c474521ea510e725c051271a82e069fceed30dfebf8773916b2e0bb1685ea691b15162ec8846fd8923ee8fcef4e96b0e258df6b6a4ac55175bb1143152cfaf01dec17f198ac016490c06917346de17aa41f672385462f2d472349cb035366a88712712707973102f3ac36dfd96bf503403ad963f621cc4cd734c7a2554b801703c33d996e6eccdc4dca03e34e2f7bb539ec8bebce0283e19539fa486ab9281bacfe15399236ca8da4f5c8e6bdc0cb7fe9d03cbadc31398d213eb3ca08f7b820f58be7e0f44783cb491efccad7838301905d4402d079de02a74c12bf4b3925cd173f15b4b398f3c687462d3ee139de0ca70185d5d45e162f46d258c60909c3cab93f6a8f23167505118e9cd2b8e2f8af0b6b328c707980cf91f1a0e503b4261b4eabf120ef5722dc1f45f5113494deffa092e4720b47822b15d5d9abc12b83d0e2edc4d9c2412ca8f95639c50fa04ff66015aaf1932688f67d3fb536ef2f189f45096025058724f8b2e8494931c9a0ccbfe8d744eaff4571195cdf93d697cd243bd5755530bc45c7c0c3e648c33a218c06b568eae8a2c0cc86984c41b78160a340afe7af383b62c9aea98e6bee5f4343ee391ece0557d656e271fcf4fbdc90668cdae7b30cc02854896042081689f53aa1c919a7e910353fcf5945a2c1d5d7885f9fee55983c35fd7b59087373114107176ce466086e6a65e99af879e72c185cbed15995814bd7da1ce8d15edd860741f1561d12a7e1a438a9a2ead884431f51bab05fe15bf225d5a94676ea7dd1f854c8837aa4ac856535bc6d6dc476852b094128671962dfa1f3d63b2ebc3822c29f29887090bf909a2e8710676b210ba38d8013476a05ce263d9c5b81d36986c871a6db79f26da387945642da962efdcb6aa6cf17f2052a13e71049b814761af9ed1b18f03ef0e717f759af143d61e93c62c529456b8ca8a651773e7fe80b157d26bd910b80121e86942fe9c5f7f1ab66197d84af11a7a84caa5a72c9fc2d3cdad3bfffcb5be6095c357b3294749f45b0c6cf7c3738124243afebbe4971de59d1d834985956c8cc899e02a95854664957bb0f801bf498bb1f2bed3b38300fe1ad1441777289181e24461c5085ac2ce42f23f2c483536f174ec8324e9e91e01f8caf1f220d1ef272e4c40bf856148a98cf4489b6ad56df8a41d02da5e0a993ad025d379bbdef715fc1995adc48ae5cb20bdb72a532d62043ff77b91f2c12f63c3ec3bbea49db14be538079730834d15227d7bac4538717a382d1fa1dc6541c8863915f43100aadcb4b3f790a14249303be93595cab38aef33a89fec3422432844312a1d4630ce2a933bd330c15feae3f234fcf658e2442b499969042c2c636612e9d84c04f1ac6f080a48feda89b01d35e361052f0ff172b040282959086d39dae58ca95aaa7dfdc0db281312060757d536433878d247d2f07ce4f3b770961b8141293f509bd421f55bb450042984f46586ce55d8d114fff5c0a9b4e2b0b63ab2241b09274b1ba4d6aaa684c381db647d9e79b0ff2097a43d02b4a6035563f0193d29625044032bc4a129b612a3a519fca6a4b7b500ce685471f8e5fe9af7657e034f749702c8912d2be16626a350396f9d806c627549a79487caf0c6925d69a97707df89c7561c65c8e2eafd7268a5234fd4c47aacd534810c6e368e0ae2ca9e5a45768d1b8e5e310391bada859439494aecb587df7f7044786a915ea55b642bb6497c2041978fb3a8db441e5551f0fa381f673ec4c3f6697442e20f6c134fc6814f701de9f9a55ec520d1ca80edd489cc9bef9f2aa8993b711a08193b841460041fd56bc29c51b1c4a63e72fa5969f5d8b9570e3a54608594c4f98a9a3d5c8409cb07845cb1f1e6f0bf7d47c75db2cff7740fd863952660a5e234893dfbdf036c66f6f8820f0eb3916c35694ce57e2c56c230d9cac9802e186d3eb188b748996212c6966d0824a5dd4e5a910027cfa6a18fbe75b45042241bcd825227d98eb12d702017100b4cfac424d293003431c774ed8fbd58d243634a18ae39f0e0ed39cbcf04f0a2c704b9535df86787e5f66587af1550b3f496f73b3c4252155ff5d0e0608edd36c35c30bb316f97e084e687859e366ed2d2e8a9e3c9970cccadc1a17e8900dcc9b4c40e265694acdf81c07c3352bdcddc5bf692e8e6f99f3f8498a600406660ef3855340729739ce76867fb0166942a70ee760670275800b39241525b556c81559b69e8a0b03220d38569f5761a44963d8911268502152b96f9856857ae7a410c1c225847820808f14a26f89f3d18c19aa8410884c961697e1e4e253aa0f2c072819a50637600be2a1da8ca88164a706e2f5f0644ba716af7224c69aab79afbe021f6d67b96ebf7551b8adb79de39848e7f78228ae18f056d59a99018a3e2fbd38a60b0d900c4e5f9ed283ed5820142ab59c1e1eab081d1fcf49abe106854cfc85185d4590bef48a0661b6c65d18e95142a5abba468887f7e1ec224007441ca6871ef97f8c29972e4520b1f4499573083d948c4401fb382c75ac45c8203343f81b0f45536dc5ed771c519aafacdce1b9257f639f91b6262731e345f896fd3a2afe66223c1a875454e7330eca0c48551964e7128bd9f623cd5db810608ab3fdb510704a589d8f80385342f2d85a1ed03c924e353cfbc99dd9211fc45047c0f668764943b22820298c3ec4031b1789fdde6f5eae05a6335cabbd464cdf1a6827cff3b9c885270417411ed78ad3fa49c6a1c77dcecd5fab84b924a7969cd48a019e0ca0a5f4be2e3df113d3c86d395ce41589a6d974372c0826aaddc99fa43d108d3802002ba4a519b6825b58a7ec09bb1b4fe00360d9dbfff6441a8934151dc410533c56754ddf749aeaca2384d34a36ffe51fa31497765911df149e316f5a2ca2f462faccbee42e92c6b7be7df5ba33b28605690f3f43d136fedd1ed8de1837494c185f4a061268e751930b433beec1e5253c8f92e544b9fc1b7b0acd51357acee3e98168409e994bf3d75ada6c7f2c0aa468435cf1329039a67c20666b0ad203fab24cef678f70dec2bd0452c200f0bb8995bdd56b7d259c59ee072bf4a450be767c229169d69abeddea7723c83db7f84dfff14865a13854e23aa39e17495c1b47239bf245e9302120972d46654b5dec2e40b47f23b730babaaf3f7389eac93a6994d8f9d25b3d84c4d5956e75041d65c3552263a46ce0438dd490a14577679fba9bc0895404a993ed4db8ea7b754a6318321237927c2f005f05fef53728e3f6b0303e066db246a172895582a67784abe2a92690b832d8b56dbce73919561a0346200674d6f82b6e96f8a1f369f96c438bac466d86326bcb0f559482fae11c0f76af08d0bc3cbf6f4cd50b62a323322c23e112f5065f68078a74d223b9964918a2c4b64d0453a797d20a4dd87319709530c6bd5f34977e49802cc4e9b4c04a91fb223e531139b10e7a2b2e98c2ae19c577507a13b37ec82cbc50c586a5a96daa007e8b38e26e971c47a591736b00c2fb06ec37888bbe22042130cc0ae5037a32244cd1a5312de5f3d75d5eb525c17907d117e57767723504d3d7b32337a9ad12b3f455039858c7106359445319872da7a66da2c373152d34d9329c6e4a135254770875bfbb20f85c1a48f1c5ea1065ec89f5461953516c6fb07373dfb36f004d3ef693819fb29a2cac7a3d5ad41617306a01f687d1e6638bb30b059bfe4c6e81a0f0b3df80af59ed1296530428a2c777680642d1a841d80e6d80327a058d36ace803e6ddf70625d20ce38a816946e2278b599f0dfc409aa928d1138d73d3fb6316675cd842a8c6298e71d8c80ee5d460c3616bfe70aa9d7e96c5d904d7533bdd5d7bc6357a9b165e7a4a195041a55f6280b94719633f201e888c685b8391ae3a5c9435601e5b0fd6a1fe3b2cd7cd2c0c7cf678484ccc042501b83a807bf7d789a29cfc0e599d21e4bb364fe3e0b1fb5b9abb75d663f334fecc0e7e0310f0195c685993923b3d6f7c8d9e808cbd009b2f5d0c3458a2e513bcbb43225526cefbd683686781c1b398f08d0a85deef849981c5d4579710121bd3cb73f8c5ce2c2bff9bd9da5da9f7fd778c7b987f78a895c3f7b25ad33df6649cf44c7119572b24d54c339dc76e6f456cf387460ba84543e649e10e643c579390417b77c4e25d68b83e0f6ede6524d149e77f17fcc1db025209d7599c81d7355fbaf408568c8629b228424d17bc0c1e4a506f1d86adb4a7b182caf066e83960be0e6a69683d91607197e626dce8bb41c69894e60631c01581dacf6b5f2f202abd12929952bcb641e78d981afb3271403c6c823105d84cc40ddbf2af68f820ab705160a7ad983fa61b71119515f523e5f13005d8a50b00b556d1f9dca3aa7d6a23d1c652f0f11cf5df4da52b19d9fab8988dabf7193c395d95a155e84422f6a5675f0a672a06a523b6c2b54b864182c285e1a242abc884709ab9f8753db3c9bd16b345cffe4a1346fc9c66d637b6ad14a51ade8a282936ea3d2191036263cf89454a6c2221683bbe17bddea945f093c9c306360fe2ebb602ff05303bb3b4a5e75e3b0982ec2280c4ecc9c7d4db66ac629666968c7ccc761a5c4f9065ded272d79930eda580cef26a92b6a7f2a847ddabbe150fab1ce07ea191738eb9ca79c11dafaffb6d4c458409346d1ae04eb9b8eeb6402052f6776998fccf3bfc999d1789a830a00e9bb1a6dd1db859fff22edfaae30f58d08a9edc4488d39d2c737ec9586ce36c3157de8cab6f20f7406df59b4fa64c8db13c2c0505667417bfa20e278f955ad055bfe9be4493f427977ddb8b9e7c7776f4740cefe533afdfc9a0a585132ebaff12259ee1d98e0ff0cd880ccb3b43d299a59e00f808ff16e9b60647d1b5c6fe790d4775456a3e75ec76563d5ab491c5e8bd480fad0a6ff4e54bb2a6884ccd6120db17f51590030c79e730ef7052e6c417b2644c89b4ff66ed675bf980b026f63109b4d9a0665267203f82ad535ae631b76ef3c75525422f15e99f469254b143d90596566f58ef648c96427aded69bbd19dc10eb01fe8aa23b3e2a354aebb08125d87005bbfe3073beb2384d3170fd72f76b6fa2c220e9cca41f3ece30e12c18d23c425db8f3b7fcf30ed20361e44619f782750a6ed4b04dd5c2f0d6b17aa813de25b39ccac5bc162eacae91c1e6ef49c733e62a3a16da928e915647f5040965f22dccf8e91f745fc906051a27d89dd293a671caf3ba2f92e71bb764086e06bcc5b739746a0f5be84cab23cbaca7f25a0ab62e94e4b3f1ae99a30fd14d8289d5ccf135c8c8707a171f2f58694f99aecb699a7d0245da31654305e6f041b446e939016840ac8d08835b5d15346a0230920bd828d79ce7c08392bc192131279e98366e87c5e0b681501255d938272fc2b4ebbe89ca051f06c39d68db595ecc240ec794ca69bcb01622820edb1a1d10ae3bdff7eccfadd33bd7419e77b7b3579f9a946543f5de8b13f559d86a6c1856a688ae86f473e1985d45e93f1099278592da5589eb27266dd534764b36fa8ecfb04e1fff8dfe84429be2879c7bd82da33740d3a5caf0417a260be34382e33eb7051bb9539c25dca513dbf7d20e792f152ba1fd97a47291ee35f59a811becb53fc2cb33951931fd2c55b0947ba2623726a20b30b129e142b907922dd580de3212a90058f2acd9b26e5ed662a6cd5aa05e8ce9a1e2e8c381b520bccd5ce3e47c76e3a43269bca84e587bc3c9edbcec0663fcc42487d31b35f1a5d92775bf1a873d1be0913a82c95bd0f4373f357a8fe25ebcdeda3700c31a147cf78e0f58545425ab2f7286592e85797d3835833586f49f1c168225ba63b2930d8c83aab5ed1cd446857d46516b903fc3f399f0e0bd1f76a375c2f94f21f6d4f22d46ea786d6195924946998d378c5e671ee1b1c970cf0e8f32add7639be86882a77c459837f174979d7f434330ea131b9845598039592aab26b2a2e3e637ea5559ba9a9bdc9137801fad3d34b315422eaf2ff32ddbd47adf910034a8919a2d191dd1965e2cc8111c18f8e51486859076898810510af3e4b425fa7b07bca0075d6e88c092d780c270f9dd3f8b8f3eccef2e4ebe2a4ff6b1ade6c61fce88e6df21cdf71ace4e1ea6a42398aee0246b798add60b977b73063944cf4e08faf9883ff7006d62efcc9a1dcd84e77161ed0700c817653a1773a01d8ffab0dd862dbe269ca511f977413ef246f53936716482cda27c40cd2b56df4a6e9f2d470521ae605d797b06b8eee1c1f7a825cb5ddbbd976661f830b1c9678c69104353ae3d90e3e8ea81f9d1e68e95c7b87dd4218a427ed35c3e1b9ba41f2b830aaa423932f14869ab7b8b39f852d291859d4b6db2ef211a58be491b1eabb24d18808d19b8da0e819a18402ad7650156d55f915becb327905568437d8a783cf2b416e1130a62f1ec0740e6a67e0d1cafd9b3ceb67700f378571343a72e8901ced783f180a9308fece7dbfb365e81f838f2da579034c2afb2913a7a913fd354aaa4e8d4d166b438531a7d4384de3b93a459ca078f295e03b417705ee08ec1daf5850b210ed803c6033d77ab825f2a517ff986be8022807c2d1a8f694f34674b41b68c526d3fd066d6d93a578e6e160d1e9d2d51bb8b567cd0709484f2b3e5bde241988964ec8a64dc1eb9cd8cbf05fd6ccc060636924f915a4f1a830017968dc53299f6172459e36f91940e97c512bf31627a8ec54bcb213273e70b83d210c027b9aaf4e0e2bbb953cd171440f02d1d7942a93efce72fc6382ca16a1973ddea2cb9410cc55896e3a933638836e4b7f42a3d99b027594af7cdd064c08a88564aa53f0276f19511dbe708b6d747833c0d15e1c0ff3c64d456faf9c75daf38676835723f2108181e8e595fbaa4345e4a6061b6c641b135aed1a55d7c42dddd88097e91d973bb809b69e662f72deeaa3a5441f785c6105da5653cdfd59936533ea52d7c8c67a3d0245bdf579e50c7081902be62eb2e3cee3e215bb681aea8c3ed69f05989cfb7ee1d514c70a4168fc79c78535ca50b8b675f07e7c78459f31223434d3a7b10d5e5b8c3ed907762967ce6ff4bb01cda3b91c2d3e6ad47d95f2ea85a928679afc2c959a6fd48c1df800539c9304b31a424d03891f537f24d5e51c053019827b0ef257cd67e9dd2df85e19ea8f8e48f16152f031db5f9fd2caccf66aa5aec9da51e711c018508278b6f734eb554e871da35bba1d0dff7df036c09fdc150fb626d4a105e036ebf86cbdd3c1dcd345b5efcb263ad8689bdb2621a1cb5503afc47cc1cbbdfd48092d806b5c1470294e710cf219152c287dc1d4e0a21b8f56054c55bbf1b06c216f98486371c666f13d134687d87f86f52fb6b657d4aefb7aac815cbcf0fa6d8a99403196604e8cade1c7e9aa6dd8b0d340cd703b02310533cc4dd6e8e8a4c5b8796591a96c8169714b9467fec3631670d58cd461be1d9f3dc622290a32db3f7678210e696d3372a49cf2b8ae27bc373fb8317d0f8e90ceeee1b6a455dfb8c81320ab8522230f4f55b41299da65fa8359632fa0ecfee591975a12262dbf62bcb273dae92cff86fe9a52ccad379b3647bf63f3f21a9864b081cc33e49be058dee407a7163ade79165961665ee3b0d9c461e9e90266cb5980451a54fd3a56f80d4f1496f0be9dcee7bfcefd7b045bb43c652cc8807cdb666ae792820dd62edad382b0744a2524f3360dcddcf62a604b2f11ee4861b6361a8f04ed3ab717413670406490c263ca6b36aeaa479c708dbcebd6d8ae6e9ac25ed66478c0b75e5b757db9b3adc5f4fc52387047df523008e3b2f2dae5dde2217c1c32a0da5a7aff785cf05ae581ddfabd024dc7eb9d427c50a9dd39067c89bb7e46f8e493fe5411339bcd834760cee3ec9cc8a103dd6ad242d4b5ad22f8e693f0a734fa1851362baa0c6e00c69f2c54aa46ba645d7e5487e90c764abefe563d9e5197ebb882e0f77595909770661ad036d2c720ec059dfe28640e45f9c84055e905ed241efa46d2bf74a5753bcfe4a31410681a886d5087fff11dbfe975531a7a6f377aebf5a0295877a809ae7ad826bcefbb8a813f254229b8401780812f66a8cf3dad811a7af458fd6a018b53b37dea0e0fd6a69df36a16f060999dcd4eab67de0fa1936a5cf1fe81ce80fde4482704f39dc682fc993fb0b83a269be3d389afbd981c4de5632f97f4c7d21fe3cd11d5bca0a3625c3915b1bb4272eb8983dad6751fd80ab01789944e06b11db4397f9d564bb196126849783788675621cfda31a2be5be98a91b827bba47c6157dc7e92d785dec759d11c36cb47c8b6da05c55c6c07945f73e965fda1cac786088e8dac4a58a430738f2994defcad8abe43d2999ffbf53aaee1f4d4cc345bb623b4142c1429676f8415749176f4ea1aeb20ac377604f599d4f33287ddea344c905233aa547e375d4731cf96edeb07c0ffa4e01c6c5ef0898f5150e0deb4d1942973c45eb0d32442e1fb651af0853f6ea8ea497c5e6ca318120af148108ef34e7013c24c0a07473af9473b8b7d1d909b150f99f055d5841b0a1441ebb0741645244f6d73c1f7749d28ed04643fb12f5b0a92ce2e73b3669027c49639c06de6e0dcfab8ef529e9d4f31258469b01663ec41d0e120f7d1fbfb40d11a2fc4a2a857ec18c9aa1611fe80877d6c73f4b641fde1c6a0e45b7c37378864b96864263574735bb4db4547b6c46bc3b46201e8055de00d21a6f8610faa5abc7bfa87b733927f34872f863491dc099fb52f0568ab07bb1435aef4151078f7f070e8cf40fff64a92203bd7701c4efd01bd1b8efb21f53298d334306686b8c35eb6c294e6a84ff2f14b283cdd5243faf03af7ada6062aee5597d550c8030b067e827c6e512c624d1a5f03fe6db839119cc0091abf44729a86a8868f86e14343c3927ce57e9c775dda1c382892566f6ac1d605ccec827e125585f218f004194fb79340914805487bbdaba32bf7db91ce372167a7c8c9918cdd7a3c6a0089fa01b5750aecd5fca4a47106cddd225ae7346d19074c4705d9b66f0ff22bc83df707bdbcef6bd5033b87899c87f8ce95c7131331073af7b605db5ddd48e4d262d7f4b495d9ab28a2d675111f3c03ac0a5cc9105280c8381fe0108ffc4c663515c8846a2ac6b614cfebe4e6e3cadf32ab19f99a1a0358957179d1e9c7ee14800b6a45d0df626e33150d65c228471c61fb0992a93f18ca280d51c87bd06ee9c2a298c2f779bb9e1ff8e16f834e42344486bd08e0fc6bc771e3328f558c14da85eaa0606a82a81b8ac92ab8d11741e96409a9d56e2d042c3ba094d64aa8aec72b75e9184396619fe98c8a193e023ed865e8fc2bf3471f9a02c45fdcbdfacc6569d0c9b6f82146563df9440907ce0296df35e7132869399b388f6e8c805a24d8d26eef245944852605c89d931afe660b54839f30ef9450c157c90f8e66304125b720aebbe71692fd69971cab14bee91c9662797d0b8905519936d63dbbd443733ee07d80c7e994b64cb3b1773bb4d6a61294a3328bc5e42722dc4475a337fc2a25489971b6db919d77240abbe08fd6d32be5e542768ab39fe7eff739de7be3bda5bc0f6e517ea8ffe358e56323edf1cbeb5442ef0d0cfeb12c44b66b436e826ca0457c1a1c0c43566c428521cf3bdf96aebfe9d83d05bdfb70ec77c32840c312271168852c6717152b80387b8cb4190ac07e16467d2040d14a43e675cbddf2fbed522eb91500258330636223780291d0058601da2331b75322ef9338422808945ec36926216bc62d1d36bfe2f902e94eb3b5cc39b448b8c86f08d9a085534807b87b3b4fac2d54c061e36af275b9c81e1af87e8e3937a00d3fdaf53a10ed784ce95e6400a865704822d95823e934d4aad21c88b2c46b3549761d4b1f76d3015d3e068a364ccaa5e36faeb84c1ce4add0451a9cdde6ea0dbc7c68ad481295aa6784d5c89969a105561e38dbe791b9fbfa05b58d70d5555e852b347cc26ff0e9970f4173d187c45157fac7bd85fbb23062bc6173b8bf061de470d7c9b4fa88d563db6bfc098b89bf7c05692334194904eb3503083943c8e1c55f4d314d18bf75dedcac72adb012bcb4195ebbc5ab7a6f42cff93d54d19da8d57bb856df49cbaf40bc39c24006f2e2a0ebd6e490664ce38cc201c615c492ff55eb0ba5006a0659ad20f421eda95d39c3ba5c6af6710ea8d484c5ac0375be243bedc8a6d4bfd8d96f7486f121accae6a7c42be294b53c30f0359f2dfb00c7f797d8808501909afe172f1bd21e297097c06c2cebb2462aa80a4fd90719b3488b22ad9102e39bf21040fc5c85866fad2bca0ab1f6d9b3c4519dd6f10435594a9bae81f7e0769f047ca83ae0f149b10f7f025029e707eadadab65f7c6601b2fb8aa511473e9d3663ebd0e5ba91930ec8001c71e717b754dd280416dde58a7047614b4a358c4117894b73eda34a6ea98156a24b0cb44bba26b1ba9a75169bef22b1bc10f1e5714fd869f5e2c80fedfbc37be3b0f187f93dc589c34f1c2f2f1c5206590df12147e26afeb52459b08010383744535c69822d481db6f50cf48c9081b52854e68fa30e3e61c218de85302052f2903bb50a0df6c09f328901649019bc04adbcba27f4f070113187f95a4ca88292aef9dc4e8098bf26e40ffa74c55cc31339bd565f64d548d44c98d01fdf448ef52fbddc428ef24314383bf19b0d88a240ffadffbf9f674413ae4b8da06f3caeacbecbddba4fbb4a9b125a500dea33f9b3060538cf9cc7d25df2ef9f9e34d56bde5bc02a163027df6be3af01da623e875098f97a764722211f7d4f85df631bc2edf88aef365561273ff5e4b73e4155328c5593643344fadd6992888820ee7b4569b64609d8bd5738e1bbc3a9468bd7403f843c63a0d9757252712785aef5b4f391ce40338d2489c1f5c247d591245da3f4b6a3d473e8ace7e242b13279a0521535a9f80c92b8ea56dd35bb2586db00006ea6774dfe391a7ac37496e9cb64e4f696abb98e34e26727951fbe8afcefe36da14e620dd60ee57cb3ab62a9d19a38b6b83d62bedc8e00765f90f9ab15b8558bdd8e3152efc8592d01f1f75a94b8caafba850fef225b70e209f5e343a308075bf7e10118e23d953f6dc3875ca76a2fdc65bf4d398f591649df5efac4850e28ff42ab9316b7840d4671c6f204d10d8d7909a24914dc69771cd5b3997c6787792ceff41c3236664fe639ed38a2dd60341a256fdb22c0bc82ca4da3bbcc322328f9f38a6f88c2a3affcb7a92a853ee63b9757032c26dcaedeb86a81c373860125b73a4b7cb420c32b976d549c841906105aea2e3e8c5e86060ca930711031a67a829b313b2e978c866f9b4d611563db2d195f522be171f2146545fc07d23b0e0193cddf0fafcc3b0416cc735dbf9c2bb841c963b20c7b9f3c9d446a71f03d98c93e770a461415b900d5e3ca3e1aca77a19844870b97f2e8bcc44c1e52408dd984708c6ea94945746dfcfb2fdad0e0f17facf6f027b4bdd0491d90ee972a7e89901e2e3742347e85c84fe8c4ea2d8e7340cf06f4971b1d3a8296b2ae1f79b9c766ae0d474fbe80554ca0641820c448efa9966edc55ab477406253aec1ff0e0af7bf1ede92ccf21372fa56a8fe267934acf6cdcd143c6e51473054e239a8127656ef5801de79d9edafc19b776309734cd39182cd1b50eef5169007d232b10236641ee7f69aa8989fec1dbe5de2b743d9e35df80e375414b09b1d6a54f9a07e5f3b9db7dfe81da7a3d92c36aaa3eba7b258a7049715a2311703495446ca489e05a69b0107ec71ffa8c7acd60ecdfe24b442d7e9cfc2b3a41fa739c9703f7614fad2128c82f7e8664e8ba3686a065c63dfc99d30d35980be1c7bf85cde4753766678bf3d0c0d1cc5b5b9633395b0620519d141c57400ead6be29e2a29ab89aa6d485704069ebbac9bbd8b42e191d265e1216e4afa3e03a06ee5b84c5ac0731c936a69065ca4129df1b81c602c4dfe4a608b37b7531e4928971f13186a9c718c5216476650249cc98fd7fa56914369dcda7e95d50d31a95f3db54a2bc599bc9f53508db33a22fb2e7ac8f667831231fd1c5447fe13428f15aad5b96d848cc281acc57e67a6728232f3c1a41d7656c8a08b9bcf63498871e643fbc2cda574656fd65222ba12c8565ad303f016382857ac92a3c745fa1efa2246a00e0a0bce695de5aac0e257168b1fdc5a50765d0607f9db071ef526a2fb2d6699176cbe9e461cff6cd144b7d460d2156fa00e05ecc63448ddf51ea6020b81a3c1c67a6f7a3169cc2875ed462da081412e504ec7cd36347f1fab0b09584b7960d88b0b3d99e09c967d595629e03c8c04e886df26da6ae95b956c113b6aca73d31ab27efc18793526324db9955758baa194220d3387e3d5fca0c1069541b4617eca88a7842e50ab0808efd7131f65b8b28fc5f0be8eac9a2ff073fa795a8ce341e24d0c587a723bc6fd8ae2d664f120b01ed0d2e5fdb4d64ba232c6463e0ebcb2b191d447ccda85c8e524a9f805d8978a7b881bd3ad8a570701f545a437f38fc9f2fcbe0c71ae8fdff38ebe15176ff6171383d08f79023e941641bff93638c6820ed6680de5629ef4029dd7f09d8f6fc6547cb9c775da42b0a1978d2496402b7e782c71101114e1e427f7b6e067b7343f3edd0c72d643cc9d0064d46aaa393dbab38c3a4d53395b8c0aa46acfe6ea6a8687972e78769cb9d4b771138f0d3c78d25e17c4d4d9470b05d42f4103ba53299f68584cb88bf935e92b1c472fca2d7c37f1b6c8948f6bf0314c35695e03b75072fa8da082e73a5ff5f4296c0f9548f6abd07884f9a9556454ac9f8a50622ac46f3870fee36a62f8479f6dc24f41aab66e850b8b7639c3fb814b85a8b54203d8e7c0ed9792eb28d3e6a2ec73e5496ffda214869fc3c56ac44ec14fa3127b68b767145fc35a5e52618bd30874e942ab792be87f02ab75fa1065163fd6d5fb5e117013b8f2352bfb899951ecd7b6d000c8e20b0e730ae9f856b5ffb3261f60ba9c5e32d50ed8d99b69d5f0a3aa32c6cc947efbcd66ec30b88bfe17444f4adc945f92f93dd18581aed38313a085e14aec6ca5bcc8bb674882c8da7f02b74b0d98e15e33a4c6a79586c2ecc856ec8b3299acf7777a7f8be854031b09535fd8d6533a9a02fa651cdc3d8c0709fb4fbcd302144669e704e779333c0dff7dbed5adfa0e30363569e815453aef22fce7212ebeba37a766e3e4a4fc24f550ad864f94d9488a6288a06bfb3c8aa53d158dfb8d4e5b3cc78bd9aeffd58a6271e9c260aec4021d7b56fec39aff99ffdd0e58751b9174f1db903046d59835b20f403bb87eac42281b414ef4d5bbeb2546c0746d994fb098a8626e790ae61342e02067363b0918a4a737b7b8dd488d48058f74a5aac75f39bae5c09623426528c9fad4ad7ecf341119538b1f9b5f67415911d444e105f3e62019476908b00be1ac196377972db45d34c4b472ad42e32238fe28077157417a529ea5b8a49156fefdbb292301880b200502a07c66b9e127df3e88c8b6f242b832aadff29668799bb91b4c36f5a46e8bb59487a416c5ab8bd5a252cd31fb6de2744b44aa7075b1d836be6b217d0f9c380caf9c5a4b99c6afa9ad112196e1fd9e175711e614582ecc614c7e3772176692b5a866a2178212ceac372335dc9d15d8aab18e23f55fa612b89e09fb57d31933e4b0777488cbb4a9631d45bd620177d28ed9383dba7eb26818553c780dd18465dba352cade963a8e2e64130027ee84ea3c30439405340947c37b900ef518d2cd5e4e33fb4df40ef8dcc99ff1192c1eb498f4f92ff0ae79b99f58fefdf2c8cc3b81fe415eca2fbfd09115aa5930a96c9e4bc17887b26decebf12388c27a72694667239b2bc9af33c02426051e99ffa6622a5042b6e7af619af310e111ed4ef7e8cfa8ad651556ce724f5b518115423292efae1b0038f235c06547b2ef6d07bdb58af9397a2bbe91d33dc4cb5001f553daf08ed7d1fa79e1596bb87ab581ff1c0ab83850814daf04ecbbb166db97fbd621750734141a4fb649dfe8e67b6bf1bf47c5cbab6ad064dd33d30f11c098627d071d22b5c0782d28b34c83b746d5f1839b6150275634758e81911f982655f6454f3d0ea3b7e24889ec85c956cfa445dc278853a80727a794cb6e7eaf14f4dc23def8f60453572879c08919034df24f41d67a1b87bf36e8584e3f5b50d7ed7cf4cee90e95af3d8e37951db82678654d6134537805f73182dbb5569f92ec77952a3b1f7aebe6c30a831e7269ec76224a70a5d72a52d893c89b051a651394f42a8f993f696e27b2ada1a4716e69a6b40555bb40caf4eb1871636ee166c3c00207c52b7ce3c4d7976f3a5b74a9b0e1bb1ecaaa5d9ab788662b0923727cbad35e47199fbd0a89454ddd1cb3eef418b4fd29153ecaf7a00299eb0b87e2f1d3a41ff31160721a30d1868788ab946e6dcc60ac71638fe0bcf9d440f1fb10cc0ab2de59902454ee77644d2cb85b354476c6471bb9b33645e0b6714340197b9e18c4768382ccfd77844e75050e028fcf6890b84edc094a031c3ff7520d6f2f749f130b0fc128d2fd2a320ee13fb527588ff9315cafc860e7a7d640ee84554073d907503f932110a25b2df666fc9725bceaa39df6937c688d81394f13269f7aba22848c05427249cbe8143b5a90b83837dd8b8fa23627f0b559abc45b79f7f108765c976a1d20d043365de402e0c7e1fabc33128fb5605d8f9d8962bfa406ba109a486bcb4cc1b7b1bf42d6ed22c72a098943f0cc1d82cac618804c757a14f0c3cf4ed4cb744feb2cb1c3c3770388853c59a020bbf3fd895ccb93fe2609e6a54d69296d9bb00dc6311903f3d397c0cabce958265da384cbe7f98b6c4fa10c0531e2f9197439faa59e723d1abd23148653b0ca9cdc3fde7f0c812ce5f54aa86ff155d39620d76af15a2c6cbb3d325a5e95a068bbc85f02b1f3e6412bca56e30be76164326cc260c04f7b5fe0ada4af21f9056efc2d9907e1d6c5d1078938a25cc478bfc0b01b50b5c3c7a10b94aeeaeca0209b91b9a82f98751ba9f2d3f02c244d18cce58af9e9853e933b5562ba35e033e770a89f63ecfcd3d276775b8931bfc5799aee8bbefdd6266f15460978aa5c20307808160a5ad09c724eee989d0fb53167e6913826b74854efcea5049b1f830857bfafb7792b1e4d9c11d5b6ef8a35ff6a68eaa10cd849a5f06ac4fd606446c2eda89b36c22bd743fe3d2299f8966d9cdfb3b124fb8578dff9f8fcbafef9c4f8de609d297554d59696236474be165447c35bf76b5b915ffe54de6ce63506cb2a2262fe9c0dab701bbf00b8e8a1a3a7bab446d5c874a233119b6334378674ab4b7a59da637f9ac618b7e6b20a02b9a8ca6e5f1e83f9ee3ade4ab80c3f5bff2eb15fc99793ed25c416e2922dd288c742fa346b2e305e47520f086099d63e5f44d14dd105023a01496cb70a0fd2c46f56818de28d2e8f0394454739b73997bfd7ac0383edf6221e88785fbd97dd2e7173f50bff713927e774aa76512bdf6f8ba9295bb92c30dbf23b25f765b9ed4ba36bbbeaa443de4e04e40b2db2f2f9da34783356c0fd092830f2ab3c344eea5868519c0e16a341da78f2d97ef247f3a7f305e559933f29e4f2e08f842b96314e22485011417c4d46fcd6f1a25848d8fa855cdc136e11ae0e834a49ea53fcb16b2891f8c2f826e5b53813104068230678999969268b05256f692054fbc6f351e543cccdfba609a0ea49bfc2b8ca5b2c0fdf72a5784ca4f8ea8bc80f85144d25f35fb33a4ceaa775d03e5a814f6329c4d4570d0c55c7a07d6b057cbd943f9415c91f3cbdf98c06c68751a4eb0dea51ed2b9b145f8c43b676dc5fc1022bd2e10cc4deffa6959e3d47208e7c706067ff6222c4440f38a297e3d81cc4524f96aa00afbba8d344d7f35cb839fb9a8a2c58818c85849ba8465c5027135371b028238a22c715e6f20f3f12f87c698507b2dc9815f1fa7326f1b471b77d8aa8b97eeebea5877907338bc87a51f3a6b631ea75fe57b7f749ab6a2081e020fc622221916a9029ab2283680bf7e36e0a53aad2b7dca567fb45655265e6d2020de29d5a24ced43a9a55585d1a9211ee06e9fefc6cc686eb9334224d1ab9faf5522ca0c6f84f1e55c0343fa11a6e21a9821ec2a877a5e6f4d9ff9417cb1d18a1bb3118e7c7cb035c9d56f91007e080f4c3655deef93219769f6ad32120c4b66b5db38a095e258254b732b371a03faf79149c2b653adc1430f42ac25f283ae4388f82457b6c6d6abb8c03802902fe360a1670b71ac332816c494cfcf6c9d2b8b51f4cd284562522a78ac858355e7023a0daaf1312f3ae055a41377a2b17cfd06eb21b936272fbeed10d897daf991d9b650cfdb9e1359890b85fdc8c21fcbcf599400c53de80686481763d039909e34c7fab10278ced19f7ca65fab3d32fbc3f006243c5b61ed4f972344206043f1bbe97a82c504a5d6bd21dfadbf89d98b328659edbd0b19f55626967dfa0470e9402f82527c13fb1f2cb95b9b88640b7a27fad6c3aee0033ec86344e93750c72d1e4d837cb0e4ad6306d3bde6d38853f1b7f42aefcc5a21f4a21555b82e618d14cc429769c3681e74558309ca4081692ed95c8b96dcc0be564986b33e36d4393ec8fb5805920a60776ad910e87f4292b5605632797bb90a8972be4951b6636c41fee7557b855f7c5f60774f387452e8a63c701994167086b208815ccfe068eae19146f48b67b2a7aa102155a0dd3e06ef064be3661732407bce28c098cefed849eb8ce9e746b5766853a8340ce33eeae76f7c43d5b6b8d53cb308e4ae0d31c84d12e9251a261b098cda30eca8575a2049df36d46acb3a518ca79622b98600e4b2c9051404905541059736f33316d073a3ee8858d9602aafa3c5fba84170003d0d7f5f0cbe9263de88f7e59022689b8b1feff91bf836bdb183e09ca82ed756e682d73499343e6b34cdea6b3b8581d2d7b4e434b0fc06f1af813738b4291e5f8c501b7396250f850e4c8cb71cf001158c44d8242623b9116c06a4b44ba88ae5bc3094027f2aa7f70626bed9962a45ee3d1a21a91d28f1ee9c0d7439aefa48dd22c0acd28354e4020c4c926f2b3d38d516aeda96c1f8ce26440d19dad7601a9773cb7e6cd807d254d9d96c66c72deec9d8a55859cbdf60801acfa03c99fa8de777bc8950cb6a696d34a8aa116afa042bdfcc65c58b87304c298644c6fad3a9e82443b61d26c90490dc1c11d91c0810cbb72f0f343d67c41ed8baf2729d7fb2ba603891ef4d6008df9d7f2437c174f4e2031260a832090cbf285ab2079a42d8c24cbcd06d78eb2cf85a4a4700678231996206dc27e7020caee13e6cef604114addbde5b243c83d40a539c451ee415465d7c7ce8cc632b206f778435b2190494bf68711a4de864de8960116e96f02e4dac867a65b827a5fda52958c28016723fc04e3d43302cceb4ccfbc4a106e53660067966c67eb6c815f77902e1d8ce687db0ab43b4dba5e7c9bca8442600ac4ee2787f29e4dfb527dfd0ac58221ed7431f0cbb529267462472327d8a09d1c126f43273ffb773d05b353877c59e6b287bcc2f65eeb483c5cabd6e48282d57a14794b532e8710077ca56522dc87b5292ac169bdabea8228fdfb6d156bc4b46b493bdfb8d6a1c6d8b73487623744d810164f469e073481b6fa77fd4d11b4bea6346cd451a743a2f7195d6aece8d4c79736a7dd1d4405bf10524caf005b17d717067c445c4bd27c3e559a95b603da517e13a1132cce49309c39aeffedaed8d4f14275ce8010e1c211dc9e791223941649ad817f1186e353a1118c75b5f8002a346ab93384a491af1d1128fef08e96417b7f5285c6199cadc283db385aabea447d52fa55257802d1cc1799fe315dd86ce21e4367127dfe2806ad387d652c8aa96acae1140d6ec5f775d20b41e12cc6993d559661226312e7bfb805a31098cd95f13f960945022f8d73b3e6dc555e46f6aaf3ea6538d06513c085f3139b1b85961b21a12e51d3465f11081414ba92b523ffe0e26bea5d8cbd19560706d5359e172832aa52a6b6ab54a02594b5e2776f3ded5e0bd607f00d3e49b2c33487c4b26806def6ec1e6c42afa5ca44ab8b373235c63806765aa8a216d3d133955a700bb1ae1b4917c2049588717e3b625ecd3e2dc6ac3105e5bf9c984f379703c1706527af938181a697036fee080881ea2c3049a7605c0c7a65a4c27327d245f401605d48e5cfbf26fdfc7e71daa9c33a3f8dce62eaa8f494abb82eeb0726bc1db398f18372a513df329690915624799a55ef44982ea21f40cacbd3dbc77ea5793e8553502d64b09a3ba26f69d4339ea92121a8e9fbd92049df5d505fa24bf2020036c0ff7e7fbd7120c223a5037b7778b60126520bc318ac6dfa8b599cf3784a67faa7067854dc76fd518ca3cf0b0ffa22cbe895715033dfaf2dcbd2991a0c010bb8b9a5e9a3a489eb933f1476966aaa61b94672db3c5fc939818f8dc73934fea1f1425c9fc8c75dfdba5e06062a6126ef4b10555d0b372b7ec421876d7414ee36c8de34efb47bc943824fb1675af627f964e9a97fe9bf1116e04b728d26b5038271a3c04f12ae3c0d1914e28c15603b2d51b4169500b451ce7c18f3d21cd396a2427b34a4502a0abb90ba98ef3677c99f55fe4bd67b2bf1848f93a3e6f920e0fb5a7c58b2aa7fd86e8d4f6bc91b15ef7df1f496761dc2771c5ee26c5ec94f2dcc13aaa2e86c8a405f4a0df3c0f98e6b047dfcec635402a5bb578babb766b5d03513111541e89c09ffce97d6aad47edfdd6f5e8ef58e42c0a2bd5cb292ee4e397b6aefed79a4d64f0a00a3f4784f5d47b43089611eae6b5da030ad00c659bd20a3683fd9042e4b0980060f515b97ebfd84a7ac8c94e02c03ca1887f50b169ad36b18c031112e7f5272b2008d3a891d8d725ebffaf05ca70ad69ff8494660998dbc608fdec33b3723226cbc280e374d761a38232806050392d06bab49e3a4eb33e347436da78ebf7df36da9c5375cc6b9ccc742c16274df2eacdbfc43c5d080ba05435af8f84a6c25126e684c9aa7e274d19c4a95ae91b13b099e534b7ebd203b60fa577fd5ba2adfed7921caa61d5bfb6a4bf874427ef9415eccb3051dd540fec5f8dd861098e07ca5b8087fb438af252594142a1ff59bd7fa9671c00724245eb9f53d2170b452dbec026e866f5585416f450beead9abd849b2538635460980761d430ed6260d910f5645ac4b121e3a3fde8a981dbe84b5a82d5cd72a58e055d6d0d7e1b513112b966c43f6f73491a10a93fe342b15b76240569c8f83c1497ac4e64f284686eda3cf31fb28aa0fdcec399b08f177072e7e54d4f63d3e70b95afbe143c7e736b0e46e93ef5922acd670bc722e03edbe238fea6431ba99182ee30453930da43b6409f27c0eb756852a8ec27ed8e4ae599f093be8ad5a81fd7f797be36e6596d547804bca43afd707ed5f74be6b788529f7edbfc4a46669a68b2bea66abaa196c76be9a9792f292c814a10da2237315d5a5f6672b2155f21c951bf69c827dee2b9507af396e281358da432ede4925fc6c1fc9ec5ee718c5bbeb2ba87bf66de455a1c9984618f34cfc61ec00b8956b961295271124cf41e0e8dfdb7a38f452085b3f0630f2d42456d8c1c03fa9da2e88379bb5b44536e0625fd1bfd02b4849e4bbcbc2ba4b51e7c5b5c108c642d186d1a9d8f2310ac2040fcd54c0ac29fd8a040a654b1a76ed48ef0cde70611056d4a5d4726c2a096df3ca2e7be5faee99333da4b61dd408e864e822daa4b25674b1f2fcca5f22d7ae376954c347cc5378d17ae49391eaed35c33a4395397b2517505f873d4efd8a4be780cddf6518959ce16e50d80db6bd815a8a518ffd6593863b50da545e611c1a3449a95e8aa1843d5b4c3dd0ef884b61acc9bf35ab3a1369ffd25ade843b7102fd19852e00108745c441649cf702bbcf4e95b538ff031064be737a205aca6d91130f34211681fc4c3da792dac5f0986a6e8b657b7d59040de8cd8124813ec8b2d52a26fe8ba89fb01b44753f214c9204762e3de3f11810ecd7354134466dcfb60976019a9e19446ab80b7243a1de4d6fcfcd82af1298c32ae8fc3cb1b19bd0dd58d04de5a1e708926e7731529bf82e774a50f8a40c3be308825fb434991d08365e1e8f7d144c5c14de8480e38a95c72e040e2ac6c23cf0ea9bdd97d99eff509095dde21721b5e3cdf887a40549523fdacca2351f88e3e0c277989f0c12fbbdf5fef5fdef665a4d630c18aefa95dd20373a21b62dc60b3644713670365257bd9110a91475accdb4ef35313ca1b30b43882bf20f5d28b5818597326c589e91a8269f8c8cea05f9d31d618c30d848aa44fa94d35d7b4593fa813d87b6816455d95ed42b631bed628799797da8f67bb8c560a609928618288b86daa784b61521ec182994f9f3a7dae0255da39cee8159ba2c429336ae57b4e3820c60232dd7ec5fb01e71ae2129ead8860b18b2cd6cbf0dbf70e451243474d996293055ce6f010b1460841fd2fc33c48e601947bf8cd8d9cf8d4f0dbb2b881343b66b44882c278615b786b9d4fed2e76418a7e3e615d9fc121f4d290b16680ed128c89dede71dd1dc1929c568d455c3d67a1ad94e14ceae384a75c5c77f96ff6fd4f4594cd3f96862c14dfcd45129bc62b06deb985a099ffc7e8bc75d4422ecacf326d057b4d5e54a8965d59de23acbd917fba388161aa9c26a951c13051d332e2f3b076f1257f870dc416d3e042e624fbd2e9869b582292832a6c733c1d58bd2dd8d90fb8f41915ba3dd7a9e8b815d2643f2f4780595e9a16f5d0f8f5b388a43350a56769b1e25f61fc34c9715181a3feb929763a947de9533f159ae315044dca8e991c8cb23826c58d22f684a2bcf52d6c53672e245df98d2a40187d2dd068f47e20f69592c6f3f079f9597e622d16bc1a579c42fac7577d4ab85ae06491e9d4442950eebcbf3738a582e9b667e3beed74546c42b940c09e29bbcd21f8ffc39eb5ca614bfdeff765cae61ee8872616dee3cc69efbe62dec7bb4c1273acad64240437b48b559bedaa0050ee28111a2d8d047c6dec96c195c2f2d658e6cbcb1a3f3b16069db06aa897f8ba7676e2cbd494288f73204ae50c8ed27fa185f085f75f376e316f4afe3954cc69fd5059087d72b63cd7058ef6ed7899fc408b28ab0bac40e6d970ea87d8205d66dd23f21e485d3617528b8709e49a164f852ca7ce2201ceded5596cd53213f2debeb0717bc0035a40fe8bef8096760ca5cd4a9db62f6809d11131ac459996eda387e42e8d988e9b7e85d0196f72da13e766ea0f4dd8841c537951d81043c1c87fa531fa5f50cfe463dc06461cd6cd8724553572e76686a3d94c7309d520b6ff2cbe18959f92b181f644508f47921294bdb82a688d23dfd85b070b4017e691c1768dc22893c38e1eaac5141aea24187f11cb062c4445b3262359a33f7c037cc8acbba7fe6d5fd639214ab2c48f8eee40b14c02462d43bcb8b9a96c38d08010ff8d7c9da0616a80be57be532b45b21fb54663b6cef6771f2bc656fefe593ca7b4c98dddad3c3435e4e9750419f4793a34b25a807c0e97a39afca304222df1310c72c330d3856653131d763be17d25c23f75a3ad1a763bc9f4683185d8e74de82f08a3782e98371614ad4ec7d9ab65312c3fdc056217f7b385784d9da6584d40143c46eb9b48a92df924b4f598d5acb481a9b3a9623a0785a062f51cb9b67839b11988926129c0229fa867cd27bf7e1a37f915e547780af52df2ebbfa80ee47e0a9f22ca114a44a492de0ca4cb2e10922cbfa2a9da9b19272eafb354c392ce81b0b44c376f778ac942f85729b22bbb7f2055e545842f38960fdaee89914c1ef313e8b3920a5fd8fd7ad42b4383d2b5a53620f1c7e5d213e58cca54e1db29008daf203c41732178778834f6108f67fd409b0cb6b20fe9cd7ded06d63e52744229f79c1d7afce35abe5477816824cd09e3f78f135a823e58f3089d84da20f44c29476e241444097b3c5bac49747f609a5e662f1ed97bf77bb8c0d54c8b19753aac10514a9331cb51b25609e24e753384ec0da7d6528e6b7a9d257585489ce59f38dd68150860e6ee92d95ffedf34d473350990a630d70907f71e363b7e305d7b2735ac8f44b25a7703df7816cf1e97240f925855e1d8483867adaa27369c3b25b7758235a309cad06e04b4f8a661b2e80288209d643de0b00c566ce80138e514a20a75f57cc7785ae4342144adfac0fdae12b70abd9c5c6dc34e271f136b405296c8b354e51aea6ee03e9259ef1fe4c0fbf2e0294c4db45caeb0413ce92e866dc11593ac59763bd75fb00171f3a6f2847b2bbb068e5234817f9e72dae2c5a8151f5bb88bbc054f1bedb3b2f7e1b86159b40e6a5e8b6c655318f082dbb5a79335430cbd095c3ff0d53922229f92583177ac48d58f0de2a48db62ec3d84ddf01a981934339bc470f7ec36b05c727356016a116e7bf366002c5478ab4aeac24a599899ae39e26a3ac3c3714c3ce2f802ec7b51d4852ac927e628ea69b56d7321d1168aa8c3be9ada510376873dc8264943f5c3a285dd95941b1031b6aaeda9a41a8b5914e4dc3975258902124f8a70b6bbffba720088ead9f1eab944cbcdcbf11524d9803cb4cce38786a372167cedfde07d085fbcd09760c164e8935d8ab3c2508e72b5da36a0f41c297c0967eef255c8b972072d6489642b08b71803732abce1d4b73d7d3bd5c8011563ae9b7dfe6ea896f5122be312093a308fe0cc4b002850bbb87b4770ce32297d8fa60a183aaf35e7d90b02e209d838c377ed330966afee11ce1ea97e57cce20f0b8851c6c2a19b30152c0a7d0f01d32a269470dfdb287082c75d8bfbb86bfe4d280dcf2346626f59bd8895a39b75288a2737d5e5d7dbaf66db2e99f077527775affa79ae495af98eafdb5d1b1c9731be010a16b72e71f878f1105b34499d307970da592b84bee98faa74ec5537645f9d9ce7ff0ad55fe83e84efff5105740db4715619bbb0466f2ef2bae1251aab0f5023863c9ccea00de29594acfcbf8db7138bcfc862f4864caa74175ce686b740cd9cd72384c039f34f566b3112eed70d2240f21660e93a3fe5cdef8149a68ad52445a353075bdd16bbdad627c8dedc6e03d6508916a63a6de800687e28d505023ac998fbe8d3e4432673c486ba679750f6871c68231558fb95d2d110d456728c90d2ac1401d5610c8f672eb5d82b1a899189442c1eaec3c9405dac72f595288453c1699ee51813849dbe88a657f4f6cd3e0daebcd455028b8da9c18702ddea731f3d8dd21c8fd1739c753b9816549e29ecd1716403ccd6da2376868d34a7e3eb2665ecb0bbfc2f0fe62d5124fe005b680713d1be72ec9ccf7234187783a50201ef42997c91db1a1bc6b7c65542df2dcda57d55052d749184a585d6be30d32d1bf46bbb1ef042a49a01bddc07afab30d9263d8374681f2d5089dc466c256e0e67461855a375c42c551b3f00bf26331dd2a0a0167add8210d160ce8460ad3d621e0b08e51c1c98ae820e36e52fe1540cf3fb7858aff53746c2f2f43ac26308404fd4d279a599b93ef692ec5253e830742cbb48d4f6f99408a0406d17e4e05d241d05ecead19eae88de62172a36870c98a5d146e353ca3d6b32043922b31568778632c028ddbfef9724cde88b375d9d0002d4b2e1b49d3f984d1bb03fa834637e8d7f701eab825a449a8150238a468025da63a5d269bacd0305d72d1b12ee613cf664bfb6b36c250489b4c1687e434411835d066b7e5368c5c90e6fd07eb3d2fc8857c0f526519ae97d71d22b4e988741ff088cd47f0da16dad2a8ea25a8da9f8bfac1976137d71e13acf4aa7a40f9281057e9eaf1e8f2b013c61fd302498008a72ca5529aa5b77400f61d7d3ffca8d3b5d18c2087f34630bbf2bfd55e985091783c6b31055b3e690857ef50b0e9f989f7c9be047d767ae2ab2623c249d49d45991dc7a07de9886f2d309cc1a2edcca5159d3b7726084773242b91c63d84e952c2fbc550d150841c62fed61c9068a0b8cac93e528211e3239a6455e81108ebafcdfb579136d297e6f7c5c50202a67c7b028ef4a118e55334b690faf1e668a93ae1ec9a55acbc4205dab7920ac7416e9342f078de724fc1c49fb6d1db2c6a59cba46146619c951d193a933bf2b25acf9114dfaeb504720484c2b07e1f1f5a89f2627bbbdebf4da759d8453712f7685e074b1d9ce02396fdcc5ca06a1b206545283d67b72eaa204bff0c7af72e800fbb7c7eee8ac60297d4266a568dbfe11bb7e8bff12a02086b83299796f1624fc5b1ba4dc0d8f6d96c65778ebc69356b1f8439c924357dc7130e251401f265fb3b38a7c334ca3ec1b1791f30b5f526d47c08b6e9064351ac1fb5aeeceb798d6b50c996b006466e97c47b51e828530450249491c7550449dcf8b5e2306a6ca7678bd27ec2308015dd7ea4b8adc107896b466eef1fe50915f163cdfe4b9f6908355aef598ba6c09453d882b70cc478b0f423dd7943168b0ad1a855a35ff6c0706546f454c40822552b9b40b8cda4410fccd3c6be642bb1e8f3a57afb53ca479582c8a8e5dab3d04e2889c923d150911428c1a155282f460dfef153805910ecd02f48b53f29bbe8dcf77cd261a1002dac96d99ad0b7d8f473680c301ad5a2e1659558a6cd8591023a7e2c2a732ced50a3a458765ce2a5d3a023907b17b0c3b0da68e8c868e9425ab6994976d5ae92f03cca9281d22eeb854de3f2a5cf959b09cf81dc460855f28aac9fdb631ab5f8952ca4279f81451eb7b5c70894d42b96cfd3859c4252fc6f0a7d436bf5fc2fe27f7d8f8fc1e4719cb77c62585ee7fb236f7a371b904ba0b798b87aa29965d55fdeb160870d82e7997fe825106ba8ad7f1a10eecaf9564751003e35ff6d19fa404d452c007d3bb133b6cf83b62c18d21223d0946c27832e5b8daa67d7c167616f23357e8e4a4779ca47e60341df7226a407d0c338ecc714918651330eaabe1cb20084ec6b34eac8ec3fc2f321af3bab06e3889e57b41e8fb9ba1cf12ba2490fe82e3293376bc8714ba7bbcea3f4be6d5fea2653418cd4fdb60e333b885899cd1d53742c7bc6b8742e482561258ad2b2edfb3ef2716ad71b018798667744144247eb0dc635ad4875064ecf7c6093a02d1e275733f68bcf7579660303581eebbf9384bcd9e586114b24431769098ddb8b9edc638e82c494be586def9bad8be98319185dd0b82c6f3fddeb5c60bb0b34dde4e41288cb1a57378b240343dfc007913abb98c8172bb6108f432aa72abd31325e4855650373db12d4c81bc4dda1e4e369304f35de32ccdf932bb160d8766f1b0eae0377bb6a5b0ce0b8c3b6c0b5d24135a1ba13e7380ae7bce3abf56f88e217d31998f6efa7bd6e71610f576d5cfd2143623fa5a4c325ec8f5473a4f88a0cb0d603bab8515807f5af5f1a45fdb7b9883661329ec0bc7b26269026414837504d0d39295926d4df6e1afb877056fb500579b2caa1b35355ab157c1cc4964c5df7295a156626234c9babb0f671eb2d31924ebe4911a8562529d8a551b7babe023a6695b57e915f398257f9d6c72f4c47944024cc7e7aa0637f2ca089c4c71170618f2e57f0bec2f7b2ad317df87fecfcf8be4cc57805a89ac4dfde5d08188f2a4cdff3c5b6b3d2b3ad0bc81961a4527b80f53fb4af03aa235d4fe019ff73a404f2d322163a5b33f8e6c34dae8f90dda824b29fa3aeaf3daaf3195973d0f2bb2ce0dabe85643bf3c3e1913a5bc12819202bf8d04467e5b55ecfc96bb7acca1bc43be4693d59a8ed1cdacfe1e565b7b95002c277d69e3042cc27538aba6ebe590c9e027c6d9b8ca57898a3ef77103a2146cc9c41e67c15b660ca3d0bf3f5e42bb2de211a6d2b95a637edde1c397fd73288909e889f14514d433fde0d1a3293a4fd44f20a1148de0a9ab53a00a785c9bc51caab88b5fdbba23f4aac6715ac5106eb397d0d8940574e72b3f19f8ec58223a5afd6032bd94b6a1aa3dd3e42aa6bf0e2d348c5b651c6913939835986d94df09b3a3888c2e3188ee77171ccce6ad772ae917f083565af20e4182b0ca3dd7c42c77e0ab65c6d3a90cb154aeb349e599f0b22c4f9e3b48dadba315c150fc9e4346c17ba530c7b19942b9a260827fa37afa6bd3594b5c5f22b14042a913aded757f2c24f3dbca9eeaf37b58224e64b7ee9056b095dfcaf723d261e27381c2a032629685f1ccef91997d7a886ac06a3578b7b640cb6a14fed047b1b29def40900e20fc91e92ce580c542b349c5a79f0421dbd2218979d611bfb2c373c1503e20433a02fb9ea69536be054615ffad2c34a20b71a971750fc7869eff4145f95b7b51d9e1682e80fdd20fe19cf47f83bb9b449e8a2faa596dfc889597e3d5f5a6bf36c2e2b79a146ff42bdeb9a4c0344efbdf419207e9565fe57ddba5411ce8c0afff74164f8279b29a63f76dbd210a166fa9b4b3bd138803643c554bc57cc3c2e8143be955c2c00c239e3565b047b26df6464205a800c3b2d1ccc3e55c64e9bfadcdc9048910c8ed8f416e88fb9760ba4c8dd2aa4e67bb8463f899955dbcb8eebb8a3866471ff35e89a4c02ddfad83187d169f4488781b2cc11fdacdebee91c7c4065c55a292db986340cfae2f168434db618083a1f3fcabe72351686e5ef5d44290582eb43be56bf20a207d51e328f07bb3afe6945efcf88a049c75a08358943cc98a43fb487b5f5c38219a03851f38ee7abe0d73b4b6542e9d9d36d930eeca6f07c00baf273a5d2e7cfbab059c030f870b0a7a9f994a870df542c2fa8bf429d7557449e9c57149b4f7f5954aeedf8d5871bc2abe33de69620a287c7f8b8490c47ddc47d149fdb977d70d9a15271a738f6decaf1e28c453f6bdfdb8bc9b59b3a007bb0154fe5f3bffe045b89ce394e7c5fb56439d06beda029717042b2518e8a244aacb3e1910126ae6c8826679bf5073dc54439be562a6bfd1bc4fec3cf31cd675c155f7b2748df3fbe229cf9c4b9a422a02a654e24d7c33fc2d35a5a361a3e4e307a9f38d40326731ae27801b7e8f214f4e6a6016f3b52f80f384ba73620240adaa0ffcdfce132bfa60703692f0488b34369ca98f07ff942d8fe03e5a1413f5e8bda2c408a783443941a14fc1d92e6cda5c8c38fd49c5ed01a57face3177fa8d44e2ef973a7df83e0858ffc7dd8a8ca6738edf8b07e3e73e1e3c46cd5bd2b3310ff15e74225eed97b3c6c42ddb28a66ff181c2a5d376bf93c1be11395c374f8973a2ce0c7eefa9028b51c49e8f0f874bb8d694b9987eca7cd9146b0a07f470d08ee7305e70fa16be75b809d18d34afccd4e589b3439a83bb414f9ecd5343c6f571e1b70cfcb380cea93e31186e36bcb752fd600f6d9288ae62ef934eb9c0dd4fa904cf188048179282ca367ba1fa2a604cadb467828577417534d33c0b21a2e129d8a7757090818815935709e483e3af7bc720348c932a048e377159d230fdd3d14342dfea06aa95c48657f8e5dbd0a6f86e7c33a44457338553c6aedd38e65b58dfb9d585a1147af4fa153db2e6f1cc8f82c9d075f5032c4f0a281bc844d585a7e71d5814ae6fd5527bbcdc7f3b2118fa1dad845f5fe22cce19e883e420720cd10c29a4ca36340690cf20974e94e0f16404ba956ce8fcde4aa82cee7e28a96241d19722d125865ebd60549e4d1880e9a96e241bab88c2c837b2377646deabfe7b39ee441d5930b01f10770b9407e47a6fc626e5b34234809873fc7b7c9dba09852aa4a72de9a3ad9e40499a94829d3ca10874e62d24f5ec0f88a3a624a83513c58ee86fb306bf33ee6d2637b6fb0d523b6b9fd51c45eac50041980aa941cb9fb186471b279f0362f31957b6aaaaff30017e0934b180e99657b6ada7d4ccee90e471564f99b3e7fb44f82d49ffbfeb82a75aef8bfa981f391cabc0668dfc627e5db584e3ad73a417f3ae4181c247f2feeabea6b91c15ec36c8fc0ccfd316ae0a0ffb2bfaddf3c857619ac6fa2ae8c9bf77aea675abe348f70799d184f985ab60dc6d71f20b27740043e1c833fe16d651e261a82c90725ada619ea29773839ded4c7424ba290acf8b4a64f38600ac403ffffaaf645907056802c2d4ce1282e16ddb5f8fd5ebf04f408175401ceed324ac9ee2295a66f6ed59d2aba07c1a43f29eeeddf0d5cca63c485ab1c3158208d0d4520debbd2a372e93d8f15c8cffaf3b80bf65c01a5d10cf3a951d0b03244fea389acb522610884781c946ec6b58e1ad1e1f7ea12024f32a4b279d42af289e8a15364efbb28e9ff51cb1e95c4fc63c624a155c2e3f4499a9b55e97a0ebe3d0422ade2aa4c11a051035a672fbf006f4537f3a3d3e2f3ff8dff7192ef77130ddc69501f341345b75513bcb780206d0d11f7af28ccface09441b60c8fa163a4d66196206dfa0aa9d05ca19168565731636ead8b23da0af6c58f33905a6b82a45fe97f4aa7a4593cd946e4976dc2be08a1eb5803bb8f895a6e0bbf4f9315aa272cc5354986d8448e3d05e965f6e6a137383c7b0314bdaaa7bcbdef7fc4e305124c6d0f1b93d582b7c9d3a6396aacc1b9ee1ba5b6c5481cc3cbdeb8d6392ba9fd5294e50faa412cfe485b3f4018ebdda40febad1540da4ebb3e3629515fcd6567fc873c763cf6022dd995e5504f594160be15b428ed5996433c843d225824f4215f54d1e9d8d5b9346698b25d7276552445d1da4cb282d454aa8328822769d29ceb45ae1479e46af75f9f9d6f6258ac2188c818a59947ddbc5f79664f5a2e5958af984e2e9262fd5422fa938147324fa3f59aadd73484682e0f79a212ac04e5530c7b8cecbbe0229f1b297680c8dda4c9d1bd8317be17db4ac78f45ef4f2024c93a64caae9fae93d96dbec48404522091029604a4fea8ef8ff66702787821eb5f49f3ea6079bf11f0a19ad2d067caabfc050dfcd2ec59664014704240faefe9c422f87ee8ceb6747c86ab6809a55ef2b79572c97882dfca30fe96cea1eed89f26693d4556610666aea21177597e3358803e36aadd6ca1082c4b413e850e3bf6ad1e9e7918b5b4136a23006e0c0e50a17ea3998a34cf7f313b387226293e772e593035992155fe5046847950d194bd90fdab8aaf5826db207a2a8cc868774cb333d74d34c6d54b45d3215edd71587fea683e8efde062615aa7957afa866d7d295421f3f2ec8fc7dd20107af984504ff7fccb963d40843e08d55e0e5344bc93d6a59c05cd4b4eabd109f08fd71b2314908bbbabacb8215e520fdee1b11c1918b3da872fae95fd3af00b72dc575b3007e905d00c53c0e8178e5139e8d0a188c15307d0f56e96e5203169cb1ae35ee14a760db02151131c0c780df54eec21a90cf5d13dfd57061eaf236a56fe7a25ef68c2f3efd7dce1ec0c88e19bd46008be1590edbe1c222bea2121abb4ebb911db4f3dd61e12cdd9dade97c11fd6518e352a709bd70fd5fbe5b850981225575fb8d4267f6efd32d6feb5aa6db82abbedba6d568522911ed17019dc54d1f85140219e3ea5ed1d99b10008e4348e12c4b675f284e1d0080f5607c4828b7172f542db0b4f62205c03cac5c5da8525f29edb501a3f788b117a331d2b2f73bb809e55db25ca10a0afbff9058bfb1fd0978c6921c45e86768ab9f0c00af5f9bbad0377b837e0367fb314c7307c931654135fa7041f812534051db4e9109d95b41ee1a8ac7fcd29ec37c7dc46f39db04cdd91f52722e3a2e1c6714179ee0b161537b93fff3bef35c5d52e8ea6dbc5c730335f411dc9e83bed6c2481137f4dd1da3d9c3e481f017fc48a188dc6cd5173bc68b82a123356c587618f7f72f808228ccd23ebcfd229be5ceb18d151b9c3ca5e00046414c0fc55bb571b38d061241e67fa4d0c703ec699f353a363b7a68e6ca9a2c25eddbb7e99dce13cf24191f3f56282aeb210fe5c427fa5888fb9c48772d577658f8c31b01b49f7739496e6f0122f8eba5f27c2f8508b939c0ef81329202b6b30d5a60c2eb02e097164b5417e5a7b11be0949a78d001bd5d9baa9a0e9d2ddfb50f1175e9973eeada88611a4e28c4def94c0355afe5acc0778050a7136acb7f7210e796d8dc4e3e78bc3ca84f5275640b77f9c289b9b634ec051ed1a49864a13727b8126a8409fe4b434b20b9c322211b8d12e83b25453fe67ca06fe1522dce6679bd1619e8bd8b238b7e58f87289c881f04d9696cb6efd730a5318bbf87679bb35d20b97e090c2b7b337724df264f1c005c8053834fad4e22997acb4a25d8edd03d796d0ca70c78019c87a42ab3bca81e5d5792a0e95d2b80200cf5ac37ebac109f64fb96b324ea0929daad417bed2a24a46f5fbb3e1f1311f5ec49274dac49186a0f7f59d339f26351ffabcaeb2bb8c1ead28820f39d5e176221d962498607a4c25c46c220b2aefe5818b2acb8869631cc4200fc007a309158b610ab9ab23bb6746a964948038c3781ad6e0fef5dc4706633d8bbad8d087b4d2e5ddee456faebf3dd4d4c6530ec84867da55baec80e91bb90cac43c01e71b0255d361181382bdffa11e9bf5745ee099058d23fff607a0ba2a762fa43c9aaa401d4e5dbeaf5ea105500d34001f657dfa8feebbcbabeadeb7017c2c78dec6903d40d7791b6354a68fc5fc80e8640522d601e189f43918d6f979a76ecc56ddb7b9cd147949f07d70a9d5531c0c451e10a7de7b23c1602d2c4c3397454dad0685e8abe620b871877adda594a9291cd3034393ab0acc07629d4fde4cea337f9fe5780df389bc7d5a3503ea0ae2ad6062adca8e54da1aac341854b4a993f4d1e04207d005112d55a554598a2c0f29895aeb29a15c8a6f55af20f652b1b85962eb1919e2028c8a70354e92602f932a11d9e6f0fb1e1f61aed2a7d0b81e0a22e1578bf2c18479d5a7acf580edbceb665381f2d09471c910fe54e099eb67a2bb4ae342dcd3522b276960fd18143635b9f351a43fa8d9d27e2b368d6ab6b29dcad6b8e8dd370756bab06de8b225b79ebacdbddfd361f50095765abe10443c2f0dfb568b4348c2e08db4a4fa1bbfb20ad6a526b2259d8839879854f0f3b5ee1deeb815f5c4f419c04a35386d2887ef9d474a2d4af81e55b92c31d28e6995056c6656c68b856905c6927b5d227e316a368726e414dab3ee581e1e19ed199cb4c5336f5cdb900e3b022e2c7d22de67835fd4381b65be215f714e9e4b13c80866118728b9bfff442fb2062aae74bd7167c59b5521e5ebe36515810936d69f442cdc3da5ac621a6f9756fcb0884b4d83791117675201e4a668843feb1e55fb27a2a9ea88031cca0ab933bd5f1cad0e5d78919129576e1920fadb6119f73a9a53a22590c9e276e116b589e5d397203ec4a2008107f4d59925658fc5b4572d0c233723af6935bce9fb37fb24bbc92b70a22154518290cd7d41682993a6521619574c9a34942fc190444fd988c4dafa96eb5d78dc4a2f0edaf0c0bdf90c9de0d8ed2ad7a984497b92a6be3816dd50e22298e1f3920fc18bca874bc71b3a2efbf471516176e51cd49270fc64fcc4cf0090e4f64ae57c363109d7c45dfc4f9be4ba425d44d1a53c18124534f974496ea6988ededb2c2423df786ae45737b29428c3fcf7fc0296210a77ab7f7a62d2cfdbe3103f9feecfad728f7e4b8a7ed504c6f79fdf7fe99529fa633c5fd2918453139a642a7685917131004346a2c21e41695313e3dc04f8245f390267faa2dd7a5196c7eff88fd4df76c4e2edc47f464d0d0011de6c258956ed5481589a51df6161cd13f3fc85738a08eefbb9c5e98f9f52b154cee1cd74dbefaa571f8a5fefeb1dd6980f1648bb2a0143b5560db3e1546c2c6393fb20deeb3093ac26a7076b853df4a3d561330624a98de8955ccd029838685a6c4bb111e76dc8961b608bde7542d36c564e574f0519449064ecf20e1ff57623da812b411f78761f8c5fc741573cf82e90df83a544bc1b1d94abb9e7158cbdc918093fe589866d8fb60461e17315082c5d5df53f4587e22c6eae1a969d31942245683953d201e079620a26f4979a7c36072358e9c805c04f39beb48632b1c0a1cfc303364c374f2de1b5270e14fed0597b8116b4fce75253a81c3c7d0573bd7841d2a55e109e67889d0152b821b2d07c632be9e32d46bfe9b358e5de44aef7816c3f520d62108434932b38469c334344dd1f29232e77bc577d292f7bfb0068108ee3c570b59d4612562529910034682cf847006b806cfc70fcbba24f538c78f16bb78524b43e4907c59f3ade8af1db168745a827844d9a5c246b3e31e0d03b4dc0d3768324dc1f66547d6cc7876aae68454c3696f6e2fc8a55623f53837851c93594cefadb0731433af695844f64eb47ec805d077b9e6d5311e4ffc257e472ed5937df44a8f7fef89bff90c75384a886b6bab53546a6e65200fd2ba7e2494d2b4b3d6a605044590d87c6677b69eca2fea66f6b5027dbed6dacd3e2056002f7be8864da60ff3035c3828f7e92fc205231eda5ad6799d5dd506533f260a60455a9c9000ab602fb6fb2a6236fc9a98f89868f45aae473622cc2c552df352b327da80659ee77d8d19110de77eadd8e90ee21abe7721f964f172d04de34418c7de7ec6547c9e33c14631e986ba8c85f99edf0b3b4b5bc58ab00bb204a1aa230c7417cd3e0eac72c25a8e9afcca807759cfa443bdde0b1a7f44096499d9c7a375e09ef6524cbbc59a8a1725eb254fc5ea1afbb5d859ac73c2326bc016c2451e0e10fd350a5a55d306ff8d854cea40e31e7a177b52d822951d787d35c39c5f2fb83340359b321d1bb80c9287d67202fcb42ef52ac6f28d0d89da93ae86c53fdb5c245025b1ada76f85b2c42f4a7bdae8f592c24e470f083f49c11e15494639175dc845d90ce6f1aeae39e6c49187e2af24d13b91ebdfc750aba742fb38ef1cc4ad003bd38a05f85823719f3c293f153a11d51df9963ca1afe6d57a62d0a50d35cef857fd2799db417ee261e45400afe1e0615be4a92fcc29d8b46511cb0aa589258a2ca154a851d066e36020cc57b74d9dfb6d3792cc89cbc9ea866a2727707fc4a65f055e2f922089af1f9f988fa5f6009c4ae2f50d0cfd78761f8021a83888cc31ff62a796a8f6e38bdc83148c7310cb62f0bb57a99d5a53cf0e127fbde114d15ada615dca4e0342c024a5c8394da99b35a203e15d219bec66c3ea340c4110c4c8712a5ee1ddd7d8050edd8d97d273caa5788c815502d687c14ee9b514dec31e02408b978aaeed11d1c9ccc78ac39b3d86c8051d8cbfa4cac4c02ad8aba52cd3df3b6dbf2672e177f07d0c5278d3a0b97b48e600f953ded69a3849f66b392e2afb379a53463802828d8e5fe9560b415d8cdfcf3acc9a93f530ef1c2b4e01d1f536d1dca5b2754976513ff309b7e1002fc5d348b9cb84b8dff3d45b26b590198c13b5b4ff5075f57b804e77f632141a57e889ae30e10a8545decf6879f311e2c9059846de7d83958dd86847f16ffb7c186117e3fc3925d58d7eed0df29038a982881e76aacd4e4ed98d167f1c4f08dee5986ca4990fa89ff4305d2630e3eb3614e06bd2b32b70790441d4803ff149253dd02b523e49e982c2f12844a9ca5924bdececb6ab271f78da529528ff61b5aa83e56aecf9ca15986f5c2ff0337b394f722a5cec8542348ea99ae729745f48aeb14d57d8612ee348e08b9c0e92b0cb20f4e0a1449168d069812d60a9720a0eec5505a63210e3258554c822df04c62a51e8664abf330759380072c2696610bb7ce5cce87369c766f5fff06bdfc6fb4e7bfbf2b128ea37d34511d05ba47497137713efce233547cbd10dcb3274c8b5169269a651aee36146c86742676f6e9fa503fcdefd7f3bc15ef104060dbd3243c79ef708371d580724652060a798d6ac19a613db0d4fd07c602fb0dc4d07dce974267da49c3553bc22e21211ebc0d20afb04a0404f8b9f8f2b65951261c86977212be975009df30cd2c77fbaefd05c3b85c12e6e23d7b7048862353eee042dd96dc920325189348ba66d11af69ec8fd01b075d853b0903c75c91c1ce41b5defe0346f6bd2e7905f9410cfe895f3f5cbf73e916497b7dd5473269dfaa7e9491b36b7a55fec270c201567773163f3a9e08c318ec1a8a1898334cdd61f360093e0b7650c6c46c5909453c8c11759185119be59018f0311f68cd6d2fd8bf39a3d6024b8a254457bdfe4e10f3fb0a66800af6770636d157b4c6cf91e0880852ce914406ff35d706a4e54931f080b8d7d9540d47de9aa737a3a889ff0335fe64779ff1f7a1de823b3f7b285a0ea985a95bc8296a4b0d0bf94fe3ddb2b178bb0f14766119aaa0b26d475bf64fe180d9a936d6b108e3b717eac2e6c6b2776f9a331c61d04ac12150e9ecb801338d061bde6b581bf13c9ee25aba2d484db87056ccdb31dae9e356a625f30c9d71d67438993f6966376374d0639a3b58104b615539de453146b272d545a84a2dd66b625fd3127d51462e4c53cadc651cc5309b44dc0832b73f54a2c780a134fc1ebbb5ab80c14844618315441fb59b37a40dd5662453594778e4cd5d6c45e2f71b9883c4a790748d6fd88fba1d178be5a2d64f84e868e36e099bae138a8fc893a4480d06da32305a222e51c6c699cf2461eb2d4a929d6d1a3ed3a79f3fb8624845e1981ffb3163b7d003a6cb1f7a7a99db897d7341dcee58b77ca4d58fbe60d9b58a4ad1ea12632855687aa889183094480f58186c64831271c4c6093d496dce09ed4e54c12d6dc2764ad48b07af22e4fe33905824453a6fee311235a3bf88d26fdc5b9724419a26274e0c0bbe1a445a18c78e7d77283cab73f4fcc2109ce3fc21488547eaa27dbe5d72a9bc023f87f5e201abee370c23aaf1fc2f58fe19c551475eb2c1e02afbb800a13e16c5b499ed184f53d7bcb90dc73e3a331df1ddc1ac3a44bd3d587a272effacc1c1362de18d1f99fc61ee199226151162ba1875d645dd6b8f009c25fc28c8b2177549a36ad402de2ae321a5c665c52281666b4117ebe47efa0f08d080816b6eb66b6a0f801e2d6b552b3dd04aa4808a58bca202d9db582acc9eca48f4e146246652424f0d49746d57b95945c4b3f521ca008da87b4e536f628e362bbc427069eb8d10ab2bd50803fb185884c852603bbe30c92f9631bfaae86ff4cccf311d96b33de9f4d1209ae048218d2e6f0ada239a680219ee75b3923d86d3cdc29ed00cfdb8f53f9d74f82b35d621e0054aa68aad7720c9222c9cd347d2f14221a87c203f9a265dd68e37e96e2c1df2051b9df7fda14935798af9c1d04c9c8391b354f0049c843f520906a72d5cefaf9d319e8e9a296fe399c37424d66ebd596326d1b06c198391b668239b3e54c0bf7713c6f4380cebf6b898dffbe960db79f39470c1ff0470a618c1f92483ac90de02f5426453005aa96774aad03d534d28c82331dc0e9e93d8b78a2f7acc4771ff2eac74f8f5d68984a74cf0ce6a4413f3679ed99b40b7fcccd89f345b45439a693401a7d92732e339d02dbee828a7c2ea82dd56836467c3347570e6e7e37514027919fff6f69f6a60d1f401584fe77598c5f3d3cb3f22f3fbae7d1468d002e0d09f9f7aa57fdf81f0a772c86862531729979bcd699ca91317fde194707c32f840086f399af99e1b7989f2717f5af316d769f2359d9a38e66e38a4d9a9cbdfa3eaecbed12e136e752df0bc0054e21fe757b46be23b7c77289ae6618fa4d221eba1cbf7c4dfca07bdd100f4136819a550296799cf238409e214ca83e351bd3d4f86be032ee04c8b40b84f4c36bba9f7c29051b38a60057719cce1f7e542ab46a9d5016636144fcdddfa33fabaca10da5de2dc3d53f3a4a97a46420ef9798056e7ce108b871e0cdc0b0a0cd5c4dce327e0ba833de60db600de8034945014a97fe611dc8a92ad5d116aa54e9f29e782fe4247a5e8cb080191557ddb232c9800dfb6282484148b8d8923ac7bb7c58eb173771541e1fe5a367342c87530fcc43f094fce8dd2e902452786ca8b0c7b1d9ba7469bc93b44522ccf81af3b50bf78086d3f0bc51b4d9452889ac5135d354580008025b36c8151bfe44df910cad2bf791b928c128be34f868613461567b2d8c5eefe272f4cc532a46d457d364bf3962cf64f9f3a432cc09eaf21ebae96e535c14a75b1b2b3864298ff24f3fe5264b079b4afe6dd0302a060bbe11317a625f130e2e2fdcfecc7f9879df5be1569976bffb7720d757099dd74f3ed9a547fb3e811a300d10996f4988cef74960c5f1386948fe72bdc2a4f981bc6b62bab891973184e14ac7240d9b74af5f5cf78b27aa771561c4a6a60f50233e83ff0568834d110baa4138d59091a27707bd03ace3aed8bbcba7d3039e7e1116f315d585222c31eeeda6310afc75ec7ed26eacc8bf2278185bb80e4f188e152f903dbd0ad3c23a53599c3174e34aa78055aa32d8a473cadd777e1e9c072faba182053bd51b29dfb8df6fd636bd6c377f533da9bf3e52f2f955c264e5fc1ba68af7fddfdfd80401469944ecc7bfedd6c12b5a895d1467a09da4fe2270d993bf7823194d81a50055224b3198de764fc3acb09ff0662525a051a1e20c794c6f7b3ef815ef6ee917cdbe4df6b8975a48e80f00786dfb6b885bf20d05bb53ef27a117edfed6c0a16035dc51913f7e15579893216bbdb058e507a0300e029e5c1256ba5f3da0799dc7add742d0b2e267c0b8c4d7ae3734b1aea4ca0ab67c9d9a0db8f746fc193e107060644136099b5697f2764675860931a01d0b3ddd79468255b194fc8982f9076a0ce86a361ac5559f2ab9d86b76271f24e19bdb96d8235b1eab7fb6971ddc5e1eab33697c6ca906386d179400406d0b2c86a3e72803cb004b54b91425159631e7c28f0fa1ea77ec270505ad7e3ced720a62168a617d147a7f5cd8bb1c148450b9a9c88793e56a6cda95d35ad3ad5759778bc61f27c98700fc53527af553c416b62262aab9e883184a0f9aeaaa1404cf52ac96d4a222ac7569e68f8f38ebf50370385fb0c1b3e6e1e4d34219b27107e7474cbbac34443a7f9000fb39a98c3423ad15da22ee3a91f603b36af5de1598adad8202ce8966e367c0f49710b778a9cf734521ea2d238e4750750d1a51d5dbab8ba49b02a9e1ab0dbb7fa0818e41d55942f599ce16043eb18f6cab20971b1ef62c67f3dae0f782ee3bf5d63f7f9a9dd6f9d76a091c3fc222bac45711beead3a3514c3acc85d98c02e97291e728b5321297fbe2bcb68a8acbcc71fd18434d30d0d6a9ca036d19f6cdaaada5e8db5bd8e2b5f67d461db9a71dafee7381ccb967a39749ad1a720c292f374ead3643fc513905bd8bee22d4213c4d44caf107fb33abc073206c62a309ab74795a6b92dfbf0cdfc9a170589a1c18d46c6c08f637c89707a1435c2ee16a1150cef6f1e7d864447c9c31e820d0cc0a00bcc187fe0e1707e4a8dfe1c024bda5d0d32a7ce1d118c3d5a0791d95b6303593fab358a682e05f207bb833217ecba632094edff8c4fb4d3b60e8ea0970535515ccb8714747a66f26babb3742cd5ea3f3ddec6081ea10e299518980c82123926c05cb114941fa1aa357d43e00dd43ac5f780594a65128af1cc9cc47f0ce6eb18e26d03c12247e197356988931f80e106cdfc137c2be31ca293e1272c3369f6920657cec26436bb3b814859414e51c36d57e6eea2357199aa163ee6de221b066b4d26295183913f72029cb021fbaf454646ed34755877da457dffebe845447564b7c8b8128c80a2b8331c79230ebd4afaa2621b2856668b96698f55dd4a16cbd9dc910d3854bdeb1e5413dc23ce847495b349e5f3f4699477b015ca5b632471d0cdc25e6610274aa03ad9d2e64fb35340a40d04ba57b6425a930529ee45e77f79074b1699733b74c34635f55127e5e8dfefc5f059434feb4a5c4edc92e3c78215c326f71cbacec3656337f6d759d520eac231480924b88d13f15935d61232929f1b54718a1fc4dfc0730cdfeb5943becb9425f7f9f043c2da3fe825d7c272736a74166583eb49a11b7bb232d2a5f66696059a8a6f1bcd335fcef6cae936ebd65c0587ddeb3a6f79ea9b158831ed444676109e077af4113585af34df97aa02cf85fb2fc1aedd64b40d0a52938ce637b89a2195481304fc352b274d2e9b7cec7625a4d6014774b8c29f9f0cddf68b05150109b3c35d192d36ec3dc803e6b40f895d76a93f9edc5eaeb6ce26e39e2405da5004ca3a6fa9b7127735ef80512da7e0690245c2ac6ad16d8db0fcaa542195f4a301f65a696c34ba4314ba7f9c743fa36567d23c769f3e1fa411aa0f19f0d07625781513a7a18840d592a120bbb158e92e1ae8f4209915f8e418f0bf1717ed79862f8c588aa152b0417649b11a18b2006062cc46bd6c04127217e6ff79ac947036894b9b727ea40e14604e9b26b0b05baf49722b1bb2d8f82c6302a9a499dfc4d731176916ad6afa6b9cab329523ad6340e38e61c08b674cbfa244942e00434768707136112d27edbabc21c0575b5cd9fd3d73f7b5b95a6d9e63fca46fd092eb1ee7cf466e53722be29b135c9113935a660d4b6cd0d488f9a6bd87836e6147353dd8182e1dfe3934cb3cf07dda157b9da2bd6688ead4b88cf8759af78713e50dda5e2632792b133b08c1bb4d3a9820b737240c4763aaceca2afdc9a1f15e6898e2d8f254431a2af06bba547e87f1069530d4ebe88155a4709883213cf6aa80b4a9744aec6cc7f3e064a3df7c33e4eac6623263f926568093053feb53aa7559185b6a99571d0fc23594bb19e8dba9bb46d99876a7929ba4fbb28c47ab05ad2e1afb60eb7a8251ee9bf570b1eafd40f03da7732dfcb5eda655ddb02b61f24bbff31ca86b5cead83952b3030100332b76c02286dbabcb7deff1b70f8cae109a92945f670a1c0883259daf30183d848942b9d8e030118e57dc19a32b801fa9b7097fb8eb3385c74d54c98711766fe7fccab4b823b6943dc3ea8b8c5d1b89bb9cf34744d9e870493d56891ff9e8ba5c673355a288b911919e17a0e72b5f9613bc83c46aae92e659537642079eb9fc8af6f0dd4e4e8c7b256c95abed95fb05f70d46d8c37a1780b513e9b8ffa3eb92b7231e46bdec76153469602b83bffa01c67cd1c59fb5355f9d1d5d893a6b81fac6ca0b35d56b8202c3c7dd0639668960221fe5b94342091cc2c4f73bbd104427bbcc00a6c8d197629ef30666cbea0af99aca42700d2c28cd38b8375ff7cfe525976e2f371c2385c4e590be42613de447a006243b3f4c1013b583e1c757a72ebc20c49366e21298c1c18e393c1773366407c7776681df3a543df3f7000054563c5f14385c1842cbae68a6497599242c685ad13045bce65a2f29ebd9eb184bb7bdec2007ae0b8aae9803ec3f187bc96131d60b87d8f941c6ee1d7e89b38ddac48fd615ebc95f752a6c9c64fe3b21120db31a94e99f337dfd82a706d93f15bad2f3013f9f425f8847d5a52577e5b9a154f7a339d2363d4e3826f94f8379f37b0b296d212d972a493b07fee7990a3aebc873225ed504766cf105d7d8ace8f702f914c30c85781200725679bfdc7e669e47cbba32a2407f5747b324ddd20cc6c80c717888a9d1bf16c077945ff96da03bba4033c9aed3f30536e68897dfc64418546711e483039a2cdffcd1514845753f6fff734fe415b29664b1f4792606efd1be7f165a6c336fd3bb9a18c4f77a69579d3e512b6f1dfaadef77565a47ca6c8be6a8bc870c02915b29dce45a0a1dfd5aa31a53f699f78149a9b5950b3a204783f6055a6e4eb3eb422800359ef2cc41fdb29d041a7941531df2111a2bd28bca4025756e86bf786ac4e4fe544101585da986671474171c0b34cddb0dbd5ffb2fb1ebc779386e384782787316a1c26abfc938116f989bc62d433e1ab91a86d6db72cf1b28235e5846ecbb33d0ff0a8fb7274784ed8409ba75569708d464d9921ef8e805a2e1a13ebf97b7373c1b89d9e6df8582f2d79b8e4c5e55dd93e2e7332c3b4e935729b4ad4eb3c3bf213ead0a4bc83fc6df75a0647d4031161e991689dede4278365c8ccda038be690786c4a0f735c8eb90684ff7855a7edc5e76b7abfd8d588a80d6d1579474f9229fd049fa34dc7499d691b7f97265275dfd771e92e880bc4509c4f2b0a0d31d317495a9ea7edda29530c8d76df690694ce71cb883e442958fd54a8a291bb0b3aaf12a718f53e0620e06d12e2b8fcf872217b5d61e2ae3594b5e0c1ad842afdd3805cc61e4ec25cac59c84cc531d5a9309d726f0b736d859a64ac4142dd1018495885d6bafe92b65d9be69fea2db3c9ab8f5f599c789869913004286a60157e155f27f18885ce62b4bbc83d835f02fae3c4c61f8464f8010862adc93a682de605cf60f96001d85cf5df9900bcbe5e31950f87ff37fc47731853730fd04fdf1d871b40f3974e8872282cd74556822c2c4911d851495619591213ab476bcf16348ce81ec48bfa302874a375f40a07f4d9eb43c7025ca8b0fa5b932e3bf43fa494da6767341283e9e49e6b13b3017bef45c6d9d53b3c29b80c4b3cdc31e5aebe5fa49330d37878d798b42fc9b5dae350a0a6804d4fe1ae5a218f2e7798023a6da24bf687819f1ad0b7e3ffd87326daf0dce628f22bc93c349b45281aaa0ece9d54b4868fc2f224473b8dd2b697db8aaa066d5aa7bd18549a18e27b9d2106620c085962b9eb9ec27a13819cf6a1fe8a6304bae47995411cb8eec509770b3111ed71998872de2abff2aad61cf66f451e9f969e8ab799f94ea8333f4d01bc52ff07e93c299b880d21531bdd750189fbcf0eaaa33cdde5648a4269c1b58dc8571d3a9e7dd9b6213ce8afc1b699394dd79247d1242c57576c198a8e4a450339828a844e5c396149294172349f9318f2f0fb345734869c1bfed82b2a7b6f3edf910cb1306c5b3ed55a6d435380d59fffd1935ab8c5975467f5676ab361af44c7feaf3be1f160291ac95bd23e1cb56b77f4274d3a7458908fe0e15c592b407fd7055197ac5973faa2b16f4624eb5a3e9fdea1cc08f1420a7d50568b4efcdea5abf972d5bc3f7fb6a38b1587a44cb7e0fb188f433df227a41b7be5d08cd3b0a9a8c6fa1ec4797f9a1a0ced753efb75a3440d00bdb5e5b9557558aa518297e30434131169371450d2749b9c5a2ba6189cbf85d7052ddf9c05f84ce93818fad3f0bfd7b0dccf0377430aca840d03f845dea502dfb95eba42edacfa5b08d589abb2d03ba9822395f8c56866d91f19e19ebe50fd3e35df6943c3e4fe99d415537bd62f5e747accbe2a1c164cd5c09de5a6533a1b84d8d834c5791df5945155182e27d793bf61dfa472c46e1fd3ed149e26665b7837a66926828624e9baa6ed3a0d0492f85d4a54ad2bda5697b2f71b5cf3ba14c659c96608a2304a2870d7beffc2c0ef11e667e8e12d6e73d3b9734534fb18edabab3e1af7e44b25c6e23444ff1a4db89f1c4dde4515b6334790e0137d72336500147a758b887f1a3307f08a496aed817c4a4ff6e7ffe3d37a19b68140f4cecb01984642075810efb0dee9e88cea8beba7b328f584bec9a24f62aef692fb354adff1552c75ad18d9c65f1c8fe6733022a903e6cdad6ae91dab5cdcb818b093d5cfea3842d57f0d95e05e98790ee9eeebf36a46a782cad881f764e7781c2270e40eafe24df3226bd12eb3b3245cf0c3df2a5ecd72b816c3fa587ddab8760884d12846174f8d2b0f1edfe7caa4ae4ac6504ea26d299d444eceeca5be2d0cf3840a573e601724096827d9cfb2376213cea5981ef56ed7284bc5b1bc3bd88ade25e6d30834882224b4611d94d23fd0d13e75afae3e72b6e99ebea9c15167ecf8bdc089be7f8be393fb0d6a651c86e70c317a4bf762a951fe540e52684fff46b044777e93c3b447d5fc54c19d3bab521eb3582068debfc0327ea733dbb60cb165f5823f1dc135d1f0c251817e14e76a9b12cb3023fb120cf5125a8dd4ef5153c6595a892d9576e944e8cae45a39bb17b39ee2c0045868d998a5f6f008fde8b258bf0113a67350095279d0a3bff39a3b1978963ab95b409493350cba7f3215be1bb489400bcc7a41c2fc376b6e6a467adfae4e761026ea92906ce77ebb6e9248b72267514350ee87f48b5fb6dca045ded577de93a0f6ca46b05d020a01ae1af9c749a71a7ede00bb9372e1976edb1f01627a5a0ea896aa948b795a4a677bc08a1122b5f3200046d9bd6d9c07ad068d9d55f60b195e1717a6712c95697e96ddcf400312ef66b281947a25d3d448c707d83739386d8a4ccfda3ef2df65d8d7d7373c1e2c0845bbb927343694c2bf917eca14651221016a24a20e1516fe6f8e1561e2f0082cece467f265fe986a8afa1fbc585d7a665f660366fa7eedea151377e4d6be1fbbf3897fa2ac42e16480287e670275ac7cc056b4841316340f007ccabe1dc4f499cdb0d02c9edd5afadea709cee07d52ff902496afd77b2b3cf7b73e58041da58ae057708bcb3e1172a903a676bb22435ceaf14a349f50d60bc96a151ec40f49e81615d94f62a4d0a3849284bb493285ae7a7c1dc703659e38852741213449032e40b8b2ad0531c5242889de22099c5b79d4052b35b2c97e8ecc1705c6a1eeab922f46cc7de29017f22b5b02d61cddee661e7131234beb17ff50d14487c1bf0104af252f2706541ca123c14e1a87989ef6b514ffdc73819ba4127de8c519d17b43f27cf99e90cfcbc236af7893cce3d3621a25266d7474b153fa7dcdf58627b87d778996096029064938af69b32afe8fe85b8caafe2b8295dcdf884c80c10751196a3ca38b348f17d14351d13677b7e3c86febe03d8c9ebc19929a541d1424e292142e36d9ba4f241709e09a51013b5309899e0a7e57cd32274be33222097047d53cacd11e0572d2a8dbf7cbdb347f33678c33c9298c2a0f7bcd53e7603b7daebe28dd827fadcf2228561febcfcfafab5dbe21401c2063a81c1260b8cef30ee0bc290e2d7324238b64a056f4ef174d7994952cfc70ded9a552d8c16b08c746589e4493c3ae6e4282ce83ef60a6dff2044c1e14fe3f921f7aca27ae2ed286c78fd564930a61c18f659d34294e5c738ce517cfcf3221b76b6ce6caa610e6fc76da9a1df09b07a4bc4f9c61fa7f2b985a2fe9961853ca8248574d079d4c8dbb2ed44464ad1174759701cd1c0de710718ce3e378a7b2c1143d5d53b88b8097b4696067a608be4953b95112fedbc21af8a07bd0d2dde122845e42840a67f7bef027b7fcd0c1a52d4ff4c6d2190d4f27684f8dcad940fc2421e5572f2f9215ba859b087a797fe7116d46beaff5da13a77764bca9c79782fe9eded8c0bcac40dee71491bdf036c420118b7c4f2596c7d88fc2c4ea0b798478cb66bcf1cb336fe542289ee3e76a0d64aee2c604f8b54f715d89829a1e2b5dc38599fa49ee01fe4e767728117cddcfdd3fd11cc9b12cbd269373c1b0f49f1dfb3c7758f3a07d07ac111b274c012ecef88900ba27ce8f8b696faa725b6fa7680669d767c38d4cf6bfd6fdb1dbe63ba3073fee500b8590edb9f67fcf850ffc8f84890f79a5846d826d7aa4f5aba92e5302f3ee72a065475a87a5fb4cf9d07ab6c6be5edec78e467f6ca642eb48b2d074fa5e1f48b86a4c0f7ccb1a086c49f69d409fcb644a2f20b40966b5bbc5b362929f2e307dd275bde217002b8d433fe124b3eadb1d746e682a2759a7dc6f18f41549012753870572e3e54a88dd625055f3d3b675b459d289d7a2be112e3e60de1534d3425cfa8401a4e57a3ab18e16991e5eb1d1bac3ef7ccc9ae5b62fd9e2342448c1b96651f4dc85b0b9fa87cee97ccaac333bfc9f8bd0389f6201235c21451d16e6b7a35aeb37198d3c9f5fe354b074da4d41ac38a5fa47d329703ec0204aae5a8082f7d6bde79ab9f0919c1ff49253e60dc87b178bce8de83aaea380bd5ec0931b34d9785498fb0a9e04e56d0e2ce970b2a33852eb8da2385e2412a3e88399d7dd7cce2ce541f1dfa06219d8573ced604aeca7cde283b6a63baa51a9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这篇文章是需要密码的。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring源码分析</title>
      <link href="/2023/10/28/SpringAnalysis/"/>
      <url>/2023/10/28/SpringAnalysis/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring源码分析"><a href="#Spring源码分析" class="headerlink" title="Spring源码分析"></a>Spring源码分析</h1><h2 id="AnnotationConfigApplicationContext"><a href="#AnnotationConfigApplicationContext" class="headerlink" title="AnnotationConfigApplicationContext"></a>AnnotationConfigApplicationContext</h2><p>反推猜测应该完成什么?</p><ol><li>生成bean对象  -&gt;  创建beanFactory （bean工厂）</li><li>BeanDefinition类 (加载bean信息,  通过注解得来的信息)   -&gt;  注解配置解析器AnnotationBeanDefinitionReader类</li></ol><p>AnnotationBeanDefinitionReader中读取到不同的注解，有一系列的注解解析器去解析不同的注解</p><ol start="3"><li>类路径扫描器 ClassPathBeanDefinitionScanner</li><li>系统属性扫描器 …</li></ol><p>深入AnnotationConfigApplicationContext注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AnnotationConfigApplicationContext</span><span class="params">(Class&lt;?&gt;... componentClasses)</span> &#123; <span class="comment">// 配置类可以有多个</span></span><br><span class="line">    <span class="comment">// 调用无参数构造函数, 初始化三个重要对象</span></span><br><span class="line">    <span class="comment">// 1. DefaultListableBeanFactory工厂: 生成bean对象的beanFactory工厂</span></span><br><span class="line">    <span class="comment">// 2. AnnotatedBeanDefinitionReader: 对加了特定注解(如@Service、@Repository)的类进行读取转换为BeanDefinition对象</span></span><br><span class="line">    <span class="comment">// 还要注册各种处理器: registerAnnotationConfigProcessors(), 通过此方法添加各种内置处理器, 其中最重要的:</span></span><br><span class="line">    <span class="comment">// 2.1 ★ConfigurationClassPostProcessor 是一个beanFactory后置处理器,用来完成bean的扫描与注入</span></span><br><span class="line">    <span class="comment">// 2.2  AutowiredAnnotationBeanPostProcessor是一个bean的后置处理器, 依赖完成@Autowired自动注入</span></span><br><span class="line">    <span class="comment">// 3. ClassPathBeanDefinitionScanner:对用户指定的包目录进行扫描查找bean对象的路径 扫描</span></span><br><span class="line">    <span class="built_in">this</span>();</span><br><span class="line">    <span class="comment">// 利用AnnotatedBeanDefinitionReader取将传进来的Configuration类做解析</span></span><br><span class="line">    <span class="comment">// 将配置类Configuration注册到容器,但不实例化,其中最核心的方法为:doRegisterBean()</span></span><br><span class="line">    <span class="built_in">this</span>.register(componentClasses);</span><br><span class="line">    <span class="comment">// ***容器刷新***  @ComponentScan在这里完成解析</span></span><br><span class="line">    <span class="built_in">this</span>.refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this类中托管的各种注解解析器bean"><a href="#this类中托管的各种注解解析器bean" class="headerlink" title="this类中托管的各种注解解析器bean"></a>this类中托管的各种注解解析器bean</h3><p><strong>this()方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AnnotationConfigApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();<span class="comment">//调用父类无参数构造方法,省略了</span></span><br><span class="line">    <span class="comment">// startupStep类: 记录Application启动期间发生的特定阶段和操作的度量指标</span></span><br><span class="line">    <span class="type">StartupStep</span> <span class="variable">createAnnotatedBeanDefReader</span> <span class="operator">=</span> <span class="built_in">this</span>.getApplicationStartup().start(<span class="string">&quot;spring.context.annotated-bean-reader.create&quot;</span>);</span><br><span class="line">    <span class="comment">// 生成并注册BeanDefinition</span></span><br><span class="line">    <span class="comment">// 配置类</span></span><br><span class="line">    <span class="comment">//1.org.springframework.context.annotation.internalConfigurationAnnotationProcessor </span></span><br><span class="line">    <span class="comment">// 自动配置</span></span><br><span class="line">    <span class="comment">//2.org.springframework.context.annotation.internalAutowiredAnnotationProcessor     </span></span><br><span class="line">    <span class="comment">// 特定注解</span></span><br><span class="line">    <span class="comment">//3.org.springframework.context.annotation.internalCommonAnnotationPostProcessor   </span></span><br><span class="line">    <span class="comment">// 事件监听</span></span><br><span class="line">    <span class="comment">//4.org.springframework.context.event.internalEventListenerProcessor</span></span><br><span class="line">    <span class="comment">// 工厂</span></span><br><span class="line">    <span class="comment">//5.org.springframework.context.event.internalEventListenerFactory</span></span><br><span class="line">    <span class="built_in">this</span>.reader = <span class="keyword">new</span> <span class="title class_">AnnotatedBeanDefinitionReader</span>(<span class="built_in">this</span>);<span class="comment">// 注解bean读取</span></span><br><span class="line">    createAnnotatedBeanDefReader.end();</span><br><span class="line">    <span class="comment">// 注册默认的includeFilter</span></span><br><span class="line">    <span class="built_in">this</span>.scanner = <span class="keyword">new</span> <span class="title class_">ClassPathBeanDefinitionScanner</span>(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此发现还少了一个<code>DefaultListableBeanFactory</code>的工厂创建</p><h4 id="构建工厂"><a href="#构建工厂" class="headerlink" title="构建工厂"></a>构建工厂</h4><p><code>super()</code></p><p>点进父类 (GenericApplicationContext) -&gt; super()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">GenericApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.customClassLoader = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.refreshed = <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>();</span><br><span class="line">    <span class="comment">// 父类构造器中创建了一个bean工厂,默认列表bean工厂</span></span><br><span class="line">    <span class="built_in">this</span>.beanFactory = <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这发现我们猜想的三个功能<strong>在this()中</strong>全部找到</p><h4 id="注册各种处理器"><a href="#注册各种处理器" class="headerlink" title="注册各种处理器"></a>注册各种处理器</h4><p><code>this.reader = new AnnotatedBeanDefinitionReader(this)</code></p><p>注册处理器, 点进去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AnnotatedBeanDefinitionReader</span><span class="params">(BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建系统 属性及环境变量 getOrCreateEnvironment()</span></span><br><span class="line">    <span class="comment">// 查看this(xx,yy)构造方法</span></span><br><span class="line">    <span class="built_in">this</span>(registry, getOrCreateEnvironment(registry));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造方法<code>this(xx,yy)</code>,点进去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AnnotatedBeanDefinitionReader</span><span class="params">(BeanDefinitionRegistry registry, Environment environment)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.beanNameGenerator = AnnotationBeanNameGenerator.INSTANCE;</span><br><span class="line">    <span class="built_in">this</span>.scopeMetadataResolver = <span class="keyword">new</span> <span class="title class_">AnnotationScopeMetadataResolver</span>();</span><br><span class="line">    Assert.notNull(registry, <span class="string">&quot;BeanDefinitionRegistry must not be null&quot;</span>);</span><br><span class="line">    Assert.notNull(environment, <span class="string">&quot;Environment must not be null&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.registry = registry;</span><br><span class="line">    <span class="comment">// 内部类用于解析 @Conditional注解</span></span><br><span class="line">    <span class="built_in">this</span>.conditionEvaluator = <span class="keyword">new</span> <span class="title class_">ConditionEvaluator</span>(registry, environment, (ResourceLoader)<span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 注册多种内置注解配置解析器</span></span><br><span class="line">    AnnotationConfigUtils.registerAnnotationConfigProcessors(<span class="built_in">this</span>.registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>深入<code>AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerAnnotationConfigProcessors</span><span class="params">(BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">    registerAnnotationConfigProcessors(registry, (Object)<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;BeanDefinitionHolder&gt; <span class="title function_">registerAnnotationConfigProcessors</span><span class="params">(BeanDefinitionRegistry registry, <span class="meta">@Nullable</span> Object source)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建Bean工厂   beanFactory</span></span><br><span class="line">    <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> unwrapDefaultListableBeanFactory(registry);</span><br><span class="line">    <span class="keyword">if</span> (beanFactory != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 逐步追加一些默认组件</span></span><br><span class="line">        <span class="comment">// 第一个追加的组件 AnnotationAwareOrderComparator</span></span><br><span class="line">        <span class="keyword">if</span> (!(beanFactory.getDependencyComparator() <span class="keyword">instanceof</span> AnnotationAwareOrderComparator)) &#123;</span><br><span class="line">            <span class="comment">// 对@Order、@Priority、Ordered接口进行排序的比较类</span></span><br><span class="line">            beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(beanFactory.getAutowireCandidateResolver() <span class="keyword">instanceof</span> ContextAnnotationAutowireCandidateResolver)) &#123;</span><br><span class="line">            <span class="comment">// @Autowired @Qualifier @Lazy注解解析器</span></span><br><span class="line">            beanFactory.setAutowireCandidateResolver(<span class="keyword">new</span> <span class="title class_">ContextAnnotationAutowireCandidateResolver</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// BeanDefinitionHolder: 有名字和别名的</span></span><br><span class="line">    Set&lt;BeanDefiniti onHolder&gt; beanDefs = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>(<span class="number">8</span>);</span><br><span class="line">    RootBeanDefinition def;</span><br><span class="line">    <span class="comment">// 判断容器是否有internalConfigurationAnnotationProcessor 这个bean</span></span><br><span class="line">    <span class="keyword">if</span> (!registry.containsBeanDefinition(<span class="string">&quot;org.springframework.context.annotation.internalConfigurationAnnotationProcessor&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 创建一个配置类处理器,托管成Bean  ConfigurationClassPostProcessor</span></span><br><span class="line">        def = <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(ConfigurationClassPostProcessor.class);</span><br><span class="line">        <span class="comment">// 补充一个属性值  source</span></span><br><span class="line">        def.setSource(source);</span><br><span class="line">        <span class="comment">// 在registerPostProcessor()中将 RootBeanDefinition 包装成 BeanDefinitionHolder, 为什么?</span></span><br><span class="line">        <span class="comment">// BeanDefinition添加了alias(别名)</span></span><br><span class="line">        <span class="comment">// 另外, 注册此bean到容器是在 在registerPostProcessor完成的 (仅仅是加载到容器中)</span></span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, <span class="string">&quot;org.springframework.context.annotation.internalConfigurationAnnotationProcessor&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!registry.containsBeanDefinition(<span class="string">&quot;org.springframework.context.annotation.internalAutowiredAnnotationProcessor&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 没有则创建 AutowiredAnnotationBeanPostProcessor 并且托管</span></span><br><span class="line">        def = <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(AutowiredAnnotationBeanPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, <span class="string">&quot;org.springframework.context.annotation.internalAutowiredAnnotationProcessor&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略其他的处理器,当前仅留俩个样例</span></span><br><span class="line">    <span class="keyword">return</span> beanDefs; <span class="comment">// 返回BeanHolderProcess集合</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><mark class="hl-label pink">梳理一下:</mark> <p>super() : <strong>初始化bean工厂</strong></p><p>new AnnotatedBeanDefinitionReader(this) : <strong>创建各种各样的处理器</strong></p><h3 id="register注册配置类"><a href="#register注册配置类" class="headerlink" title="register注册配置类"></a>register注册配置类</h3><p>注册@Configuration类</p><p><strong>this.register(componentClasses)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(Class&lt;?&gt;... componentClasses)</span> &#123;</span><br><span class="line">    <span class="comment">// 断言</span></span><br><span class="line">    Assert.notEmpty(componentClasses, <span class="string">&quot;At least one component class must be specified&quot;</span>);</span><br><span class="line">    <span class="type">StartupStep</span> <span class="variable">registerComponentClass</span> <span class="operator">=</span> <span class="built_in">this</span>.getApplicationStartup().start(<span class="string">&quot;spring.context.component-classes.register&quot;</span>).tag(<span class="string">&quot;classes&quot;</span>, () -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(componentClasses);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 注册配置类 (点进去)</span></span><br><span class="line">    <span class="built_in">this</span>.reader.register(componentClasses);</span><br><span class="line">    registerComponentClass.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>this.reader.register(componentClasses);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(Class&lt;?&gt;... componentClasses)</span> &#123;</span><br><span class="line">    Class[] var2 = componentClasses;</span><br><span class="line">    <span class="type">int</span> <span class="variable">var3</span> <span class="operator">=</span> componentClasses.length;</span><br><span class="line"><span class="comment">// 循环遍历componentClass组件类</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="number">0</span>; var4 &lt; var3; ++var4) &#123;</span><br><span class="line">        Class&lt;?&gt; componentClass = var2[var4];</span><br><span class="line">        <span class="comment">// 注册bean</span></span><br><span class="line">        <span class="built_in">this</span>.registerBean(componentClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真正注册bean 的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">doRegisterBean</span><span class="params">(Class&lt;T&gt; beanClass, <span class="meta">@Nullable</span> String name, <span class="meta">@Nullable</span> Class&lt;? extends Annotation&gt;[] qualifiers, <span class="meta">@Nullable</span> Supplier&lt;T&gt; supplier, <span class="meta">@Nullable</span> BeanDefinitionCustomizer[] customizers)</span> &#123;</span><br><span class="line">    <span class="comment">// 解析包装传入的 Configuration类,变成AnnotatedGenericBeanDefinition对象</span></span><br><span class="line">    <span class="type">AnnotatedGenericBeanDefinition</span> <span class="variable">abd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotatedGenericBeanDefinition</span>(beanClass);</span><br><span class="line">    <span class="comment">// 判断是否要跳过,判断依据是此类上是否有@Conditional注解</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.conditionEvaluator.shouldSkip(abd.getMetadata())) &#123;</span><br><span class="line">        <span class="comment">// 回调函数</span></span><br><span class="line">        abd.setInstanceSupplier(supplier);</span><br><span class="line">        <span class="comment">// Scope值</span></span><br><span class="line">        <span class="type">ScopeMetadata</span> <span class="variable">scopeMetadata</span> <span class="operator">=</span> <span class="built_in">this</span>.scopeMetadataResolver.resolveScopeMetadata(abd);</span><br><span class="line">        <span class="comment">// 默认设置scope是singleton</span></span><br><span class="line">        abd.setScope(scopeMetadata.getScopeName());</span><br><span class="line">        <span class="comment">// 如果有定义bean的名字则用定义的,否则则获取并生成</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> name != <span class="literal">null</span> ? name : <span class="built_in">this</span>.beanNameGenerator.generateBeanName(abd, <span class="built_in">this</span>.registry);</span><br><span class="line">        <span class="comment">// 处理类上面的通用注解: 如@Lazy @Primary @DependsOn,解析出左边的注解,保存到BeanDefinition中</span></span><br><span class="line">        AnnotationConfigUtils.processCommonDefinitionAnnotations(abd);</span><br><span class="line">        <span class="type">int</span> var10;</span><br><span class="line">        <span class="type">int</span> var11;</span><br><span class="line">        <span class="keyword">if</span> (qualifiers != <span class="literal">null</span>) &#123;</span><br><span class="line">            Class[] var9 = qualifiers;</span><br><span class="line">            var10 = qualifiers.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(var11 = <span class="number">0</span>; var11 &lt; var10; ++var11) &#123;</span><br><span class="line">                Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; qualifier = var9[var11];</span><br><span class="line">                <span class="keyword">if</span> (Primary.class == qualifier) &#123;</span><br><span class="line">                    abd.setPrimary(<span class="literal">true</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Lazy.class == qualifier) &#123;</span><br><span class="line">                    abd.setLazyInit(<span class="literal">true</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    abd.addQualifier(<span class="keyword">new</span> <span class="title class_">AutowireCandidateQualifier</span>(qualifier));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 用户自定义注解</span></span><br><span class="line">        <span class="keyword">if</span> (customizers != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 类必须实现BeanDefinitionCustomizer接口</span></span><br><span class="line">            BeanDefinitionCustomizer[] var13 = customizers;</span><br><span class="line">            var10 = customizers.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(var11 = <span class="number">0</span>; var11 &lt; var10; ++var11) &#123;</span><br><span class="line">                <span class="type">BeanDefinitionCustomizer</span> <span class="variable">customizer</span> <span class="operator">=</span> var13[var11];</span><br><span class="line">                customizer.customize(abd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 到此还没有实例化,仅仅是构建了一个BeanDefinitionHolder</span></span><br><span class="line">        <span class="type">BeanDefinitionHolder</span> <span class="variable">definitionHolder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionHolder</span>(abd, beanName);</span><br><span class="line">        <span class="comment">// 应用scopeProxyMode  代理模式</span></span><br><span class="line">        definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="built_in">this</span>.registry);</span><br><span class="line">        <span class="comment">// 把BeanDefinitionHolder注册到registry容器中</span></span><br><span class="line">        BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, <span class="built_in">this</span>.registry); </span><br><span class="line">        <span class="comment">// registerBeanDefinition注册bean</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><mark class="hl-label pink">梳理一下:</mark> <p>三步: </p><ol><li>this()注册了默认的Bean</li><li>register()注册配置类的Bean   (registerBeanDefinition()方法)</li><li>那么还剩一个refresh则是用于 注册自定义的Bean</li></ol><h3 id="refresh-所有的-bean-的创建以及初始化"><a href="#refresh-所有的-bean-的创建以及初始化" class="headerlink" title="refresh()所有的 bean 的创建以及初始化"></a>refresh()所有的 bean 的创建以及初始化</h3><p>Spring的<code>refresh()</code>方法会触发所有bean的<u>创建</u>和<u>初始化</u>过程。当调用<code>refresh()</code>方法时，Spring容器会执行一系列的步骤，包括创建BeanFactory、加载Bean定义、实例化Bean、依赖注入、初始化Bean等。</p><p>在<code>refresh()</code>方法中，Spring会遍历所有注册的Bean定义，根据定义创建相应的Bean实例，并对这些实例进行初始化。这个过程包括调用Bean的构造函数创建实例，设置Bean的属性值，执行Bean的初始化方法等。这样，所有的Bean都会经过这个过程，完成它们的创建和初始化。</p><p>需要注意的是，<code>refresh()</code>方法并<u>不会销毁已经存在</u>的Bean实例。它主要用于重启Spring容器，重新加载和初始化Bean。如果需要销毁已经存在的Bean实例，可以使用<code>destroy()</code>方法或者通过配置合适的作用域（如prototype）来控制Bean的生命周期。</p><p>非常重要的方法 <span class="p red">invokeBeanFactoryPostProcessors</span> bean工厂的后置处理器</p><p>Refresh()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="built_in">this</span>.startupShutdownMonitor) &#123;<span class="comment">// 设置同步标识</span></span><br><span class="line">        <span class="type">StartupStep</span> <span class="variable">contextRefresh</span> <span class="operator">=</span> <span class="built_in">this</span>.applicationStartup.start(<span class="string">&quot;spring.context.refresh&quot;</span>);</span><br><span class="line"><span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line"><span class="comment">// 1. 调用容器准备刷新的方法, 获取容器的时间,包括设置上下文状态,获取属性,验证必要的属性等</span></span><br><span class="line"><span class="comment">// ▶可以实现initPropertySources()方法, 添加属性或设置需要验证的属性</span></span><br><span class="line">        <span class="built_in">this</span>.prepareRefresh();</span><br><span class="line"><span class="comment">// Tell the subclass to refresh the internal bean factory</span></span><br><span class="line"><span class="comment">// 2. ★★★★★获取新的beanFactory,刷新BeanFactory和获取getBeanFactory  --&gt; 获取IOC容器</span></span><br><span class="line"><span class="comment">// 如果在这里断点,只会发现它仅仅完成了beanFactory设置序列化id</span></span><br><span class="line">        <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="built_in">this</span>.obtainFreshBeanFactory();</span><br><span class="line"><span class="comment">// Prepare the bean factory for use in this context, 为BeanFactory配置容器亏秤,如类加载器,事件处理器</span></span><br><span class="line"><span class="comment">// 3. 填充BeanFactory功能, 配置容器特性</span></span><br><span class="line"><span class="comment">// 例如设置ClassLoader,设置SpEL表达式解析器,添加忽略注入的接口,添加三个和环境相关的bean  (SpEL: 例如@Value(&quot;#&#123;name&#125;&quot;)) </span></span><br><span class="line"><span class="comment">// 添加两个bean后置处理器BeanPostProcessor(ApplicationContextAwareProcessor和ApplicationListenerDetector)等</span></span><br><span class="line">        <span class="built_in">this</span>.prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Allows post-processing of the bean factory in context subclasses</span></span><br><span class="line"><span class="comment">// 4. 在这里是空方法(模版语法),子类可以重写这个方法,可以在BeanFactory创建并与准备完成后做进一步的设置</span></span><br><span class="line"><span class="comment">// 即子类处理自定义的BeanFactoryPostProcess</span></span><br><span class="line">            <span class="built_in">this</span>.postProcessBeanFactory(beanFactory);<span class="comment">// 为容器的子类指定特殊的post事件处理器</span></span><br><span class="line">            <span class="type">StartupStep</span> <span class="variable">beanPostProcess</span> <span class="operator">=</span> <span class="built_in">this</span>.applicationStartup.start(<span class="string">&quot;spring.context.beans.post-process&quot;</span>);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            以下两点是关于后置处理器的激活</span></span><br><span class="line"><span class="comment">            Spring中会发现有很多后置处理器,但最终可以分为两种</span></span><br><span class="line"><span class="comment">            (1)BeanFactoryPostProcessor,用于干预BeanFactory的创建过程</span></span><br><span class="line"><span class="comment">            (2)BeanPostProcessor,用于干预Bean的创建过程</span></span><br><span class="line"><span class="comment">            后置处理器的作用非常重要,Bean的创建以及AOP的实现全部依赖后置处理器</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="comment">// Invoke factory processor registered as beans in the context</span></span><br><span class="line"><span class="comment">// 5. ★★★★★ 激活各种BeanFactory处理器,调用所有注册的BeanFactoryPostProcessor的Bean</span></span><br><span class="line">            <span class="comment">// BeanFactoryPostProcessor可以在工厂初始化后,让用户做一些定制型的工作.(实现此BeanFactoryPostProcessor接口)</span></span><br><span class="line">            <span class="comment">// 执行所有的BeanFactoryPostProcessor,包括自定义的,以及Spring内置的</span></span><br><span class="line"><span class="comment">// 默认情况下,容器中只有一个BeanFactoryPostProcessor,即Spring内置的ConfigurationClassPostProcessor(★这个类很重要)</span></span><br><span class="line"><span class="comment">// 会先执行实现了BeanDefinitionRegistryPostProcessor接口的类,然后执行BeanFactoryPostProcessor的类</span></span><br><span class="line"><span class="comment">// ★★★★ ConfigurationClassPostProcessor类的postProcessorBeanFactory()方法进行了@Configuration类的解析,@ComponentScan的扫描,@Import注解的处理</span></span><br><span class="line"><span class="comment">// 进过了这一步以后,会将所有交由Spring管理的bean对应的BeanDefinition放入beanFactory的beanDefinitionMap中</span></span><br><span class="line"><span class="comment">// 同时ConfigurationClassPostProcessor类的postProcessorBeanFactory()方法执行完后:</span></span><br><span class="line"><span class="comment">//向容器中添加了一个后置处理器-- ImportAwareBeanPostProcessor</span></span><br><span class="line">            <span class="built_in">this</span>.invokeBeanFactoryPostProcessors(beanFactory);<span class="comment">//★★★★★★ 及其重要,在这里完成了 @ComponentScan的扫描,@Import注解的处理</span></span><br><span class="line">            <span class="comment">// Register bean processor that intercept creation.</span></span><br><span class="line"><span class="comment">// 6. ★★★注册BeanPostProcessor后置处理器</span></span><br><span class="line">            <span class="comment">// AutowiredAnnotationBeanPostProcessor(处理被@Autowired注解修饰的bean,并注入)</span></span><br><span class="line">            <span class="comment">// RequiredAnnotationBeanPostProcessor(处理被@Required注解修饰的方法)</span></span><br><span class="line">            <span class="comment">// CommonAnnotationBeanPostProcessor(处理@PreDestroy @PostConstruct @Resource等多个注解的作用)等</span></span><br><span class="line">            <span class="comment">// AutoProxyCreator(处理AOP代理 @Aspect)</span></span><br><span class="line">            <span class="built_in">this</span>.registerBeanPostProcessors(beanFactory);</span><br><span class="line">            beanPostProcess.end();</span><br><span class="line"><span class="comment">// 7. 初始化信息源(做国际化功能: 消息绑定,消息解析)</span></span><br><span class="line">            <span class="built_in">this</span>.initMessageSource();</span><br><span class="line"><span class="comment">// 8. 初始化事件派发器,在注册监听器时会用到</span></span><br><span class="line">            <span class="built_in">this</span>.initApplicationEventMulticaster();</span><br><span class="line"><span class="comment">// 9. 这也是一个挂载点,一个空方法,由子类实现(不同的Spring容器做不同的实现),在容器监听的时候可以自定义逻辑</span></span><br><span class="line">            <span class="built_in">this</span>.onRefresh();</span><br><span class="line"><span class="comment">// 10. 注册监听器,派发之前步骤产生的一些事件(尽可能没有)</span></span><br><span class="line">            <span class="built_in">this</span>.registerListeners();</span><br><span class="line"><span class="comment">// 11. ***** 初始化剩下的单例Bean(非延时加载的) 真正的初始化bean的方法</span></span><br><span class="line">            <span class="built_in">this</span>.finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"><span class="comment">// 12. 初始化容器的生命周期事件处理器,并发布容器的生命周期事件 </span></span><br><span class="line">            <span class="built_in">this</span>.finishRefresh();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BeansException var10) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isWarnEnabled()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.logger.warn(<span class="string">&quot;Exception encountered during context initialization - cancelling refresh attempt: &quot;</span> + var10);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.destroyBeans();</span><br><span class="line">            <span class="built_in">this</span>.cancelRefresh(var10);</span><br><span class="line">            <span class="keyword">throw</span> var10;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.resetCommonCaches();</span><br><span class="line">            contextRefresh.end();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ComponentScan属性的读取"><a href="#ComponentScan属性的读取" class="headerlink" title="@ComponentScan属性的读取"></a>@ComponentScan属性的读取</h3><h4 id="逐步读取"><a href="#逐步读取" class="headerlink" title="逐步读取"></a>逐步读取</h4><span class="p red">目标: 读取basePackages设置的类</span><p>寻找的目录指引如下:(以下每一步操作均为追踪描述方法后的指引介绍)</p><ol><li>入口 AnnotationConfigApplicationContext </li><li>当前类下的构造器实现重载解析类的方法 找到<code>refresh()</code>,</li><li><code>★invokeBeanFactoryPostProcessors</code>方法(重要),</li><li>然后可以找到一个后置处理器的委托代理类 (PostProcessorRegistrationDelegate) ,其中有方法为<em>invokeBeanFactoryPostProcessors</em></li><li>在当前方法中找到 if-else中的<em>invokeBeanFactoryPostProcessors</em>方法(中间处理bean工厂类上加了注解的,比如@Primary,@Order排序),  不论走if还是else 都会激活bean工厂的后置处理器</li></ol><p>invokeBeanFactoryPostProcessors <img no-lazy class="inline" src="https://bu.dusays.com/2022/05/19/6285328a83ca7.gif" style="height:40px;"></p><ol start="6"><li>找到<code>postProcessor.postProcessBeanFactory(beanFactory)</code>这一行, 当前行为后置处理器处理bean工厂,  点进postProcessBeanFactory方法发现什么都没有, 他是一个@FunctionalInterface接口(函数接口),  找实现类(如下图),</li></ol><img src="/2023/10/28/SpringAnalysis/ComponentScan_ans.png" class title="spring @ComponentScan属性读取分析--后置处理器实现类"><ol start="7"><li>找到 postProcessBeanFactory 方法(bean工厂的后置处理器)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">factoryId</span> <span class="operator">=</span> System.identityHashCode(beanFactory);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.factoriesPostProcessed.contains(factoryId)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;postProcessBeanFactory already called on this post-processor against &quot;</span> + beanFactory);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.factoriesPostProcessed.add(factoryId);</span><br><span class="line">        <span class="comment">// BeanDefinitionRegistryPostProcessor hook apparently not supported...</span></span><br><span class="line">        <span class="comment">// Simply call processConfigurationClasses lazily at this point then</span></span><br><span class="line">        <span class="comment">// 判断已注册的PostProcessor是否包含了factoryId</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.registriesPostProcessed.contains(factoryId)) &#123;</span><br><span class="line">            <span class="comment">// ★正式处理配置Bean定义  @Configuration  -&gt; 里面带了一个@ComponentScan</span></span><br><span class="line">            <span class="built_in">this</span>.processConfigBeanDefinitions((BeanDefinitionRegistry)beanFactory);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 代理</span></span><br><span class="line">        <span class="built_in">this</span>.enhanceConfigurationClasses(beanFactory);</span><br><span class="line">        <span class="comment">// Import感知  @Import(&#123;A.class&#125;)</span></span><br><span class="line">        beanFactory.addBeanPostProcessor(<span class="keyword">new</span> <span class="title class_">ImportAwareBeanPostProcessor</span>(beanFactory));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>追踪processConfigBeanDefinitions</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processConfigBeanDefinitions</span><span class="params">(BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">    List&lt;BeanDefinitionHolder&gt; configCandidates = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    String[] candidateNames = registry.getBeanDefinitionNames();</span><br><span class="line">    String[] var4 = candidateNames;</span><br><span class="line">    <span class="type">int</span> <span class="variable">var5</span> <span class="operator">=</span> candidateNames.length;</span><br><span class="line"><span class="comment">// 迭代所有候选的bean名字</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="number">0</span>; var6 &lt; var5; ++var6) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> var4[var6];</span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">beanDef</span> <span class="operator">=</span> registry.getBeanDefinition(beanName);</span><br><span class="line">        <span class="comment">// 判断上面是否包含ConfigurationClass属性</span></span><br><span class="line">        <span class="keyword">if</span> (beanDef.getAttribute(ConfigurationClassUtils.CONFIGURATION_CLASS_ATTRIBUTE) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 略  (如果有则加入候选)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!configCandidates.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 配置类候选排序(@Order,@Priority排序标志)</span></span><br><span class="line">        configCandidates.sort((bd1, bd2) -&gt; &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> ConfigurationClassUtils.getOrder(bd1.getBeanDefinition());</span><br><span class="line">            <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> ConfigurationClassUtils.getOrder(bd2.getBeanDefinition());</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(i1, i2);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">SingletonBeanRegistry</span> <span class="variable">sbr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 检查是否为单例bean</span></span><br><span class="line">        <span class="keyword">if</span> (registry <span class="keyword">instanceof</span> SingletonBeanRegistry) &#123;</span><br><span class="line">            sbr = (SingletonBeanRegistry)registry;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.localBeanNameGeneratorSet) &#123;</span><br><span class="line">                <span class="type">BeanNameGenerator</span> <span class="variable">generator</span> <span class="operator">=</span> (BeanNameGenerator)sbr.getSingleton(<span class="string">&quot;org.springframework.context.annotation.internalConfigurationBeanNameGenerator&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (generator != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.componentScanBeanNameGenerator = generator;</span><br><span class="line">                    <span class="built_in">this</span>.importBeanNameGenerator = generator;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 环境,如果没有则标准环境</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.environment == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.environment = <span class="keyword">new</span> <span class="title class_">StandardEnvironment</span>();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// Parse each @Configuration class</span></span><br><span class="line"><span class="comment">// ★★★★解析每一个@Configuration类,包括@ComponentScan</span></span><br><span class="line">        <span class="type">ConfigurationClassParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConfigurationClassParser</span>(<span class="built_in">this</span>.metadataReaderFactory, <span class="built_in">this</span>.problemReporter, <span class="built_in">this</span>.environment, <span class="built_in">this</span>.resourceLoader, <span class="built_in">this</span>.componentScanBeanNameGenerator, registry);</span><br><span class="line">        <span class="comment">// 上述配置类解析器包括：注解元信息的读取工厂、问题报告器、标准系统环境变量、资源加载器、组件扫描bean名字构建器</span></span><br><span class="line">        Set&lt;BeanDefinitionHolder&gt; candidates = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>(configCandidates);</span><br><span class="line">        Set&lt;ConfigurationClass&gt; alreadyParsed = <span class="keyword">new</span> <span class="title class_">HashSet</span>(configCandidates.size());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;<span class="comment">// 一个一个的读取候选的配置(可以有多个配置类,一次读取一个)</span></span><br><span class="line">            <span class="type">StartupStep</span> <span class="variable">processConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.applicationStartup.start(<span class="string">&quot;spring.context.config-classes.parse&quot;</span>);</span><br><span class="line"><span class="comment">// ★★★★★★  真正的解析器在此</span></span><br><span class="line">            parser.parse(candidates); <span class="comment">// candidate 候选集合(多个配置类)</span></span><br><span class="line">            </span><br><span class="line">            parser.validate();</span><br><span class="line">            Set&lt;ConfigurationClass&gt; configClasses = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>(parser.getConfigurationClasses());</span><br><span class="line">            <span class="comment">// 下面代码略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>追踪parse (8中源码注释标★★★★★★)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parse</span><span class="params">(Set&lt;BeanDefinitionHolder&gt; configCandidates)</span> &#123;</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">var2</span> <span class="operator">=</span> configCandidates.iterator();</span><br><span class="line">    <span class="comment">// 循环迭代每一个Configuration类,parse()解析</span></span><br><span class="line">    <span class="keyword">while</span>(var2.hasNext()) &#123;</span><br><span class="line">        <span class="type">BeanDefinitionHolder</span> <span class="variable">holder</span> <span class="operator">=</span> (BeanDefinitionHolder)var2.next();</span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">bd</span> <span class="operator">=</span> holder.getBeanDefinition();</span><br><span class="line">        <span class="comment">// 开始判断注解属于什么类</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bd <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">                <span class="built_in">this</span>.parse(((AnnotatedBeanDefinition)bd).getMetadata(), holder.getBeanName());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bd <span class="keyword">instanceof</span> AbstractBeanDefinition &amp;&amp; ((AbstractBeanDefinition)bd).hasBeanClass()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.parse(((AbstractBeanDefinition)bd).getBeanClass(), holder.getBeanName());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.parse(bd.getBeanClassName(), holder.getBeanName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// catch异常处理处(略)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.deferredImportSelectorHandler.process();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此处总结发现,  源码中凡是嵌套if-eles的,  最后都会调用 同一个方法,  <wavy>方法的重载</wavy></p><ol start="10"><li>继续追踪重载的parse</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">parse</span><span class="params">(<span class="meta">@Nullable</span> String className, String beanName)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    Assert.notNull(className, <span class="string">&quot;No bean class name for configuration class bean definition&quot;</span>);</span><br><span class="line">    <span class="comment">// 元数据读取</span></span><br><span class="line">    <span class="type">MetadataReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="built_in">this</span>.metadataReaderFactory.getMetadataReader(className);</span><br><span class="line"><span class="comment">// ★ 处理配置类</span></span><br><span class="line">    <span class="built_in">this</span>.processConfigurationClass(<span class="keyword">new</span> <span class="title class_">ConfigurationClass</span>(reader, beanName), DEFAULT_EXCLUSION_FILTER);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="11"><li>追踪processConfigurationClass,★★★★★然后追踪do-while里面的递归处理配置类</li></ol><p>在此处先是处理条件注解@Conditional, 然后判断配置类, 没导入则合并 marginImport</p><p>do-while中递归读取配置类方法<code>doProcessConfigurationClass</code>.</p><p><strong>在@Configuration注解中它包括了@Component注解</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> SourceClass <span class="title function_">doProcessConfigurationClass</span><span class="params">(ConfigurationClass configClass, SourceClass sourceClass, Predicate&lt;String&gt; filter)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">// 第一步判断配置类上是否有@Component注解</span></span><br><span class="line">    <span class="keyword">if</span> (configClass.getMetadata().isAnnotated(Component.class.getName())) &#123;</span><br><span class="line">        <span class="built_in">this</span>.processMemberClasses(configClass, sourceClass, filter);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 属性资源读取 (eg: @PropertySource(&quot;classpath:db.properties&quot;))</span></span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> AnnotationConfigUtils.attributesForRepeatable(sourceClass.getMetadata(), PropertySources.class, PropertySource.class).iterator();</span><br><span class="line"></span><br><span class="line">    AnnotationAttributes importResource;</span><br><span class="line">    <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">        importResource = (AnnotationAttributes)var4.next();</span><br><span class="line">        <span class="comment">// 有则处理</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.environment <span class="keyword">instanceof</span> ConfigurableEnvironment) &#123;</span><br><span class="line">            <span class="built_in">this</span>.processPropertySource(importResource);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.logger.info(<span class="string">&quot;Ignoring @PropertySource annotation on [&quot;</span> + sourceClass.getMetadata().getClassName() + <span class="string">&quot;]. Reason: Environment must implement ConfigurableEnvironment&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ★★★★★目标到达★★★★★</span></span><br><span class="line">    Set&lt;AnnotationAttributes&gt; componentScans = AnnotationConfigUtils.attributesForRepeatable(sourceClass.getMetadata(), ComponentScans.class, ComponentScan.class);</span><br><span class="line">    <span class="comment">// 如果包扫描注解不是空 并且 不跳过</span></span><br><span class="line">    <span class="keyword">if</span> (!componentScans.isEmpty() &amp;&amp; !<span class="built_in">this</span>.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) &#123;</span><br><span class="line">        <span class="comment">// 迭代器遍历包扫描的注解</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var14</span> <span class="operator">=</span> componentScans.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var14.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">AnnotationAttributes</span> <span class="variable">componentScan</span> <span class="operator">=</span> (AnnotationAttributes)var14.next();</span><br><span class="line">            <span class="comment">// The config class is annotated with @ComponentScan -&gt; perform the scan immediatel</span></span><br><span class="line"><span class="comment">// ★★★★★ 这个parse真正处理@ComponentScan中的basePackages</span></span><br><span class="line">            Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions = <span class="built_in">this</span>.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());</span><br><span class="line">            <span class="type">Iterator</span> <span class="variable">var8</span> <span class="operator">=</span> scannedBeanDefinitions.iterator();</span><br><span class="line"><span class="comment">// Check the set of scanned definitions for any further config classes and parse recursively if needed </span></span><br><span class="line">            <span class="keyword">while</span>(var8.hasNext()) &#123;</span><br><span class="line">                <span class="type">BeanDefinitionHolder</span> <span class="variable">holder</span> <span class="operator">=</span> (BeanDefinitionHolder)var8.next();</span><br><span class="line">                <span class="type">BeanDefinition</span> <span class="variable">bdCand</span> <span class="operator">=</span> holder.getBeanDefinition().getOriginatingBeanDefinition();</span><br><span class="line">                <span class="keyword">if</span> (bdCand == <span class="literal">null</span>) &#123;</span><br><span class="line">                    bdCand = holder.getBeanDefinition();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(bdCand, <span class="built_in">this</span>.metadataReaderFactory)) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.parse(bdCand.getBeanClassName(), holder.getBeanName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// @Import </span></span><br><span class="line">    <span class="built_in">this</span>.processImports(configClass, sourceClass, <span class="built_in">this</span>.getImports(sourceClass), filter, <span class="literal">true</span>);</span><br><span class="line">    importResource = AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource.class);</span><br><span class="line">    <span class="comment">// 略</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上述源码的parse:</p><ol><li><p>首先建立了一个ClassPathBeanDefinitionScanner扫描器,  扫描@ComponentScan,  以及是否要过滤(includeFilters)</p></li><li><p>包扫描器获取名字,  获取作用域(设置),  资源模式,  扫描过滤条件(包含过滤器,扫描过滤器),  判断是否为懒加载(lazyInit)</p></li><li><p>★★★★★ 期盼的 (扫描basePackages)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 情况一 basePackages</span></span><br><span class="line">Set&lt;String&gt; basePackages = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>();</span><br><span class="line">        String[] basePackagesArray = componentScan.getStringArray(<span class="string">&quot;basePackages&quot;</span>);</span><br><span class="line"><span class="comment">// 情况二 basePackageClasses</span></span><br><span class="line">Class[] var20 = componentScan.getClassArray(<span class="string">&quot;basePackageClasses&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>判断是否为空,  假如为空,  则获取<wavy>当前注解类的包路径</wavy></p></li><li><p>最后看看是否有筛选,  过滤</p></li></ol><p>到此,包名准备完毕, 然后 递归扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> scanner.doScan(StringUtils.toStringArray(basePackages));</span><br></pre></td></tr></table></figure><h4 id="doScan递归扫描"><a href="#doScan递归扫描" class="headerlink" title="doScan递归扫描"></a>doScan递归扫描</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 资源扫描</span></span><br><span class="line"><span class="comment">    扫描包路径下.class文件, 将资源转换为Resource</span></span><br><span class="line"><span class="comment">2. 资源加载</span></span><br><span class="line"><span class="comment">    通过ASM框架获取class元数据,封装BeanDefinition</span></span><br><span class="line"><span class="comment">3. 资源解析</span></span><br><span class="line"><span class="comment">    获取bean上注解的属性值, 如@Scope</span></span><br><span class="line"><span class="comment"> 4. 生成Bean</span></span><br><span class="line"><span class="comment">     生成beanName, 设置Bean默认值(懒加载,初始化方法等) 代理模式</span></span><br><span class="line"><span class="comment"> 5. 注册Bean</span></span><br><span class="line"><span class="comment"> 把BeanDefinition放入IOC容器DefaultListableBeanFactory</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> Set&lt;BeanDefinitionHolder&gt; <span class="title function_">doScan</span><span class="params">(String... basePackages)</span> &#123;</span><br><span class="line">    Assert.notEmpty(basePackages, <span class="string">&quot;At least one base package must be specified&quot;</span>);</span><br><span class="line">    <span class="comment">//创建一个集合,存放扫描到的Bean定义封装类</span></span><br><span class="line">    <span class="comment">// 无序,不可重复,  BeanDefinitionHolder包了一个BeanDefinition: bean的定义类:关于一个bean所有的相关信息</span></span><br><span class="line">    <span class="comment">//                        (scope,lazy,initmethod,destroymethod...)</span></span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//遍历扫描所有给定的包路径</span></span><br><span class="line">    <span class="keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line">        <span class="comment">//** 调用父类ClassPathScanningCandidateComponentProvider的方法</span></span><br><span class="line">        <span class="comment">// 扫描指定类路径, 获取符合条件的Bean定义, 并存入集合beanDefinitions中</span></span><br><span class="line">        Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</span><br><span class="line">        <span class="comment">//遍历BeanDefinition  (扫描到的bean)</span></span><br><span class="line">        <span class="keyword">for</span> (BeanDefinition candidate : candidates) &#123;</span><br><span class="line">            <span class="comment">//** 获取@Scope的值,即获取scope的作用域, scope取值: singleton,prototype</span></span><br><span class="line">            <span class="type">ScopeMetadata</span> <span class="variable">scopeMetadata</span> <span class="operator">=</span> <span class="built_in">this</span>.scopeMetadataResolver.resolveScopeMetadata(candidate);</span><br><span class="line">            <span class="comment">// 为bean 设置作用域</span></span><br><span class="line">            candidate.setScope(scopeMetadata.getScopeName());</span><br><span class="line">            <span class="comment">//** 为bean生成名字</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> <span class="built_in">this</span>.beanNameGenerator.generateBeanName(candidate, <span class="built_in">this</span>.registry);</span><br><span class="line">            <span class="comment">// 设置Bean的自动依赖注入装配属性等  ****这里每一个bean 先设置默认值(lazy,autowiredMode,dependency,init,destroy)</span></span><br><span class="line">            <span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">                <span class="comment">//*  -&gt; applyDefaults  给默认值设置一个bean的属性</span></span><br><span class="line">                postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果扫描到的bean是Spring的注解bean,则处理其通用的Spring注解</span></span><br><span class="line">            <span class="comment">// 再设置这个bean上的用户配置值</span></span><br><span class="line">            <span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">                <span class="comment">//** 解析通用注解(@Lazy、@Primary、@DependsOn、@Role、@Description注解)，为这些注解设置值</span></span><br><span class="line">                AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 冲突检查</span></span><br><span class="line">            <span class="keyword">if</span> (checkCandidate(beanName, candidate)) &#123;</span><br><span class="line">                <span class="type">BeanDefinitionHolder</span> <span class="variable">definitionHolder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionHolder</span>(candidate, beanName);</span><br><span class="line">                definitionHolder =</span><br><span class="line">                    AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="built_in">this</span>.registry);</span><br><span class="line">                beanDefinitions.add(definitionHolder);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//**  在容器中注册扫描到的bean</span></span><br><span class="line">                registerBeanDefinition(definitionHolder, <span class="built_in">this</span>.registry);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> beanDefinitions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="简化注册扫描"><a href="#简化注册扫描" class="headerlink" title="简化注册扫描"></a>简化注册扫描</h4><p>以往</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br></pre></td></tr></table></figure><p>通过读取配置类,  然后读取配置类上面的@ComponentScan注解,  然后在扫描</p><p>现在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(basePackages = <span class="string">&quot;com.spring&quot;</span>);</span><br></pre></td></tr></table></figure><p>通过使用AnnotationConfigApplicationContext的重载方法,  直接扫描指定的basePackages路径,  省略了读取配置类在读取注解的流程</p><p>使用这个方案,  也就是直接走到了 <code>scanner.doScan(StringUtils.toStringArray(basePackages));</code>方法而不需要绕来绕去的解析</p><p>缺点:  路径固定</p><h3 id="上部分小总结"><a href="#上部分小总结" class="headerlink" title="上部分小总结"></a>上部分小总结</h3><p>refresh</p><img src="/2023/10/28/SpringAnalysis/refresh.png" class title="refresh流程"><h3 id="实例化-循环依赖"><a href="#实例化-循环依赖" class="headerlink" title="实例化(循环依赖)"></a>实例化(循环依赖)</h3><h4 id="流程了解"><a href="#流程了解" class="headerlink" title="流程了解"></a>流程了解</h4><p>既然都得到了扫描到的对象 <code> Set&lt;BeanDefinition&gt;</code></p><p>接下来需要做的就是实例化对象了</p><p>其中实例化包括</p><ol><li>@Value 设置属性</li><li>@Autowired 注入依赖</li></ol><p>然后 存入map</p><p>通过getBean()获取IOC容器中的bean</p><p>从容器中取的流程:   </p><ul><li>懒加载模式:  content.getBean() -&gt; getBean  -&gt;  doGetBean()</li><li>非懒加载模式: finishBeanFactoryInitialization()   -&gt; beanFactory.preInstantiateSingletons()  生成<u>一个单例bean</u>  -&gt; getBean()  -&gt; doGetBean()</li></ul><p>所以两类都是殊途同归 <span class="p red">doGetBean()</span></p><h4 id="如何解决循环依赖"><a href="#如何解决循环依赖" class="headerlink" title="如何解决循环依赖"></a>如何解决循环依赖</h4><p>循环依赖, 依赖成为一个环,  互相依赖</p><h5 id="构造方法循环依赖"><a href="#构造方法循环依赖" class="headerlink" title="构造方法循环依赖"></a>构造方法循环依赖</h5><ol><li><p>在构造器循环依赖的每一个构造器上面加注解<u>@Lazy</u></p></li><li><p>代码重构</p></li><li><p>改为字段依赖注入</p></li></ol><p>使用注意点是:</p><p>@Lazy注解: </p><ul><li>初始化注入<strong>代理对象</strong>时, 真实调用时使用Spring AOP动态代理去<strong>关联</strong>真实对象, 然后通过反射完成调用</li><li>加在构造器上,  作用域为构造器所有参数,  加在某个参数上,  作用域为该参数</li><li>作用在接口上,  使用JDK动态代理,  这样在类上,  使用CGLib动态代理</li></ul><h5 id="Setter循环依赖"><a href="#Setter循环依赖" class="headerlink" title="Setter循环依赖"></a>Setter循环依赖</h5><p>字段注入循环依赖,Spring官方通过三层缓存解决,  解决方案:</p><p>setter注入下 实例化 <strong>(无参构造方法)</strong> 和依赖属性注入**(set或属性)**是分开的, 这是其可以解决循环依赖最根本的原因</p><h5 id="getBean中创建Bean的流程"><a href="#getBean中创建Bean的流程" class="headerlink" title="getBean中创建Bean的流程"></a>getBean中创建Bean的流程</h5><h6 id="doGetBean"><a href="#doGetBean" class="headerlink" title="doGetBean()"></a>doGetBean()</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; T <span class="title function_">doGetBean</span><span class="params">(</span></span><br><span class="line"><span class="params">    String name, <span class="meta">@Nullable</span> Class&lt;T&gt; requiredType, <span class="meta">@Nullable</span> Object[] args, <span class="type">boolean</span> typeCheckOnly)</span></span><br><span class="line">    <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"><span class="comment">// 根据指定的名称获取被管理的Bean的名字, 剥离指定名称中对容器的相关依赖</span></span><br><span class="line">    <span class="comment">// 如果指定的是别名,那么将别名转换为规范的Bean名称</span></span><br><span class="line"><span class="comment">// &lt;1&gt;获取beanName: 传入参数name可能是别名,也有可能是FactoryBean, 所以需要一系列的解析</span></span><br><span class="line">    <span class="comment">//  为FactoryBean时,name为 &quot;&amp;工厂名&quot; ,还要别名的情况</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> transformedBeanName(name);</span><br><span class="line">    Object beanInstance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Eagerly check singleton cache for manually registered singletons.</span></span><br><span class="line">    <span class="comment">// 从缓存中获取已被创建过的单例Bean</span></span><br><span class="line"><span class="comment">// ***&lt;2&gt;从缓存中获取单例bean,避免循环依赖 </span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">sharedInstance</span> <span class="operator">=</span> getSingleton(beanName);<span class="comment">// 单例模型 (getSingleton方法看下面源码部分)</span></span><br><span class="line">    <span class="comment">// 如果缓存中有此单例Bean</span></span><br><span class="line">    <span class="keyword">if</span> (sharedInstance != <span class="literal">null</span> &amp;&amp; args == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">                logger.trace(<span class="string">&quot;Returning eagerly cached instance of singleton bean &#x27;&quot;</span> + beanName +</span><br><span class="line">                             <span class="string">&quot;&#x27; that is not fully initialized yet - a consequence of a circular reference&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.trace(<span class="string">&quot;Returning cached instance of singleton bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        beanInstance = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 省略</span></span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            beanCreation.end();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> adaptBeanInstance(name, beanInstance, requiredType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="getSingleton"><a href="#getSingleton" class="headerlink" title="getSingleton()"></a>getSingleton()</h6><p>只有单例才会有这个,原型模式不会调用此方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Spring对单例的bean只会创建一次,后续获取则都是在缓存中获取</span></span><br><span class="line"><span class="comment">// 该过程体现在 #getSingleton(String beanName)中</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">三级缓存机制的理解: 目标避免循环依赖</span></span><br><span class="line"><span class="comment">一级: 从singletonObjects获取实例</span></span><br><span class="line"><span class="comment">否则:从earlySingletonObjects获取</span></span><br><span class="line"><span class="comment">否则: 从singletonFactories获取beanName对应的ObjectFactory,在调用getObject()来创建bean,并放到earlySingletonObjects中</span></span><br><span class="line"><span class="comment">并从singletonFactories中删除此ObjectFactory</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">getSingleton</span><span class="params">(String beanName, <span class="type">boolean</span> allowEarlyReference)</span> &#123;</span><br><span class="line">    <span class="comment">// Quick check for existing instance without full singleton lock</span></span><br><span class="line">    <span class="comment">// 从单例缓存(一级缓存)中获取单例bean: 用来存已经完成初始化的单例bean</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">singletonObject</span> <span class="operator">=</span> <span class="built_in">this</span>.singletonObjects.get(beanName);</span><br><span class="line">    <span class="comment">// 如果缓存中没有 并且 该bean真正创建(在singletonsCurrentlyInCreation集中存在此bean的名字)</span></span><br><span class="line">    <span class="comment">// ★★★ isSingletonCurrentlyInCreation(beanName)</span></span><br><span class="line">    <span class="keyword">if</span> (singletonObject == <span class="literal">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">        <span class="comment">// 从二级缓存earlySingletonObjects中取  已经创建但是没有属性注入</span></span><br><span class="line">        singletonObject = <span class="built_in">this</span>.earlySingletonObjects.get(beanName);</span><br><span class="line">        <span class="comment">// earlySingletonObjects中没有,且运行提前创建</span></span><br><span class="line">        <span class="keyword">if</span> (singletonObject == <span class="literal">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">            <span class="comment">// 双重检查锁</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 防止重复创建,使用正式创建bean前锁定(单例模型的双重检查锁:当前判断了两次singletonObject,在锁之前和锁之后)</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>.singletonObjects) &#123;</span><br><span class="line">                <span class="comment">// Consistent creation of early reference within full singleton lock</span></span><br><span class="line">                singletonObject = <span class="built_in">this</span>.singletonObjects.get(beanName);</span><br><span class="line">                <span class="keyword">if</span> (singletonObject == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// earlySingletonObjects中没有,且运行提前创建</span></span><br><span class="line">                    singletonObject = <span class="built_in">this</span>.earlySingletonObjects.get(beanName);</span><br><span class="line">                    <span class="keyword">if</span> (singletonObject == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 从三级缓存 singletonFactories 中获取对应的ObjectFactory</span></span><br><span class="line">                        ObjectFactory&lt;?&gt; singletonFactory = <span class="built_in">this</span>.singletonFactories.get(beanName);</span><br><span class="line">                        <span class="keyword">if</span> (singletonFactory != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="comment">// 从单例工厂中获取bean</span></span><br><span class="line">                            singletonObject = singletonFactory.getObject();</span><br><span class="line">                            <span class="comment">// 存入(early, 注意此时还没有添加属性(populateBean用来注入属性的),添加到二级缓存)</span></span><br><span class="line">                            <span class="built_in">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">                            <span class="comment">// 从三级缓存中删除</span></span><br><span class="line">                            <span class="built_in">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singletonObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三级缓存的理解:目标<strong>避免循环依赖</strong><br><u>一级</u>: 从<u>singletonObjects</u>获取实例<br><u>二级</u>——&gt;否则:从<u>earlySingletonObjects</u>获取<br><u>三级</u>————&gt;否则: 从<u>singletonFactories</u>获取beanName对应的ObjectFactory,在调用getObject()来创建bean,并放到earlySingletonObjects中<br>——————&gt;并从singletonFactories中删除此ObjectFactory</p><hr><p>一级缓存(singletonObjects): 是一个<strong>完整</strong>的Bean    -</p><p>二级缓存(earlySingletonObjects): bean的实例,但是<strong>没有属性</strong>( 属性还没有注入,所以说构造方式没办法解决循环依赖,set注入可以 ) ,  早期的bean</p><p>三级缓存(singletonFactories ): 存放bean的原始工厂，其内容与二级缓存中的无异</p><p>Spring解决循环依赖(在此仅考虑<strong>set&#x2F;属性注入,单例</strong>情况)是依靠<span class="p red">Bean的中间态</span>(一级:完整bean 二级:没有属性的bean 三级;ObjectFactory)这个概念, 而中间态是指bean的初始化状态</p><p>实例化的过程又是通过构造器创建的,如果A还没创建出来就不能提前曝光(对象工厂,三级缓存ObjectFactory), 所以构造器的循环依赖无法解决</p><hr><span class="p red">双重检查锁</span>: 单例,  在一级缓存和二级缓存后加锁,加锁后再走一遍判断一级二级缓存中是存在singletonObject对象]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2023/10/25/Vue/"/>
      <url>/2023/10/25/Vue/</url>
      
        <content type="html"><![CDATA[<div class="tip cogs"><p>此文章用于记录在Vue遇到的一些问题和解决方案</p></div><h1 id="Vue对于axios的并行请求处理"><a href="#Vue对于axios的并行请求处理" class="headerlink" title="Vue对于axios的并行请求处理"></a>Vue对于axios的并行请求处理</h1><p>使用该方法,  <u>优化性能与数据渲染效果</u>, <wavy>axios.all和axios.spread</wavy> ,  所有请求同时进行,  等请求全部发送后再对数据处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserAccount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 封装Promise请求</span></span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserPermissions</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345/permissions&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">all</span>([<span class="title function_">getUserAccount</span>(), <span class="title function_">getUserPermissions</span>()])</span><br><span class="line"><span class="comment">// spread将各请求结果拆分返回</span></span><br><span class="line">    .<span class="title function_">then</span>(axios.<span class="title function_">spread</span>(<span class="keyword">function</span> (<span class="params">resp1, resp2</span>) &#123;</span><br><span class="line">    <span class="comment">// 两个请求现在都执行完成</span></span><br><span class="line">   <span class="comment">// 此时例如我需要对这两个请求进行处理</span></span><br><span class="line">    <span class="keyword">let</span> permissions = resp1.<span class="property">data</span>;<span class="comment">// 可以使用此方案接收</span></span><br><span class="line">    <span class="keyword">if</span>(permissions.<span class="property">code</span> == <span class="number">200</span>)&#123;&#125;<span class="comment">// 进行数据处理</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>axios.all方法接受一个数组作为参数，数组中的每个元素都是一个请求，返回一个<a href="https://so.csdn.net/so/search?q=promise&spm=1001.2101.3001.7020">promise</a>对象，当数组中所有请求均已完成时，执行then方法。<br>在then方法中执行了 axios.spread 方法。该方法是接收一个函数作为参数，返回一个新的函数。接收的参数函数的参数是axios.all方法中每个<u>请求返回的响应</u></p><p>应用场景: </p><p><strong>并发请求</strong>: 当您需要同时发送多个请求，并在所有请求完成后处理它们的响应时，可以使用这些方法。例如，在一个页面上加载多个资源或从多个 API 端点获取数据时，您可以使用 axios.all 来同时发送这些请求，并使用 axios.spread 来处理每个请求的响应数据。</p><p><strong>依赖关系请求</strong>: 有时，您可能需要在一个请求的结果中使用另一个请求的结果。使用 axios.all，您可以并发发送这些请求，并在它们都完成后使用 axios.spread 来处理它们的响应。这可以帮助您更高效地处理具有依赖关系的请求。</p><p><strong>批量操作</strong>: 如果您需要执行一系列类似的操作，例如创建、更新或删除多个资源，您可以使用 axios.all 方法来同时发送这些请求，并使用 axios.spread 来处理每个请求的结果。这样可以减少请求的数量和网络延迟。</p><h1 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h1><p>什么是MVVM? <wavy>MVVM 其实表示的是 View-ViewModel-Model</wavy></p><p>其中对应的就是:视图层-视图模型层-模型层,  Model 是作为模型层，它是负责<strong>处理业务逻辑</strong>以及和<strong>服务器端进行交互</strong>的；ViewModel 是作为视图模型层，也就是 Vue 框架所起到的作用了，主要是作为 View 层和 Model 层之间的<strong>通信桥梁</strong>,</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>在页面视图渲染完成之后再往已经渲染完成的data模型添加新属性,  从而后续的Vue操作在页面渲染不生效,  但是通过debug查找,  渲染模型已经有属性了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 显示</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> jsonModel 分页数据(后端返回原始数据)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">displayPage</span>(<span class="params">jsonModel</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> _this = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">if</span>(jsonModel.<span class="property">code</span> === <span class="number">200</span>)&#123;</span><br><span class="line">        _this.<span class="property">pageInfo</span> = jsonModel.<span class="property">data</span></span><br><span class="line">        _this.<span class="property">foods</span> = jsonModel.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">        <span class="comment">// foods: data模型</span></span><br><span class="line">        _this.<span class="property">foods</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            item.<span class="property">status</span> = <span class="literal">false</span> <span class="comment">// 往foods模型里面添加字段status</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前为问题样例: </p><p>jsonModel是后台传的原始数据对象,  当前操作是先给模型固定数据,  然后在进行对模型添加字段,  所带来的问题是: 页面模型已经渲染,  并且<u>当前新添加的字段数据更新,  它不会触发Vue的Observe监听</u></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 显示</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> jsonModel 分页数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">displayPage</span>(<span class="params">jsonModel</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> _this = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">if</span>(jsonModel.<span class="property">code</span> === <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="comment">// Vue 是MVVM模型 ,我们需要在渲染前修改模型数据</span></span><br><span class="line">        <span class="comment">// 渲染模型</span></span><br><span class="line">        jsonModel.<span class="property">data</span>.<span class="property">data</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            item.<span class="property">status</span> = <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 进行页面模型对象渲染</span></span><br><span class="line">        _this.<span class="property">pageInfo</span> = jsonModel.<span class="property">data</span></span><br><span class="line">        _this.<span class="property">foods</span> = jsonModel.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在页面对象模型渲染<strong>前</strong>,  对模型数据进行修改</p><h1 id="ES6异步"><a href="#ES6异步" class="headerlink" title="ES6异步"></a>ES6异步</h1><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>Promise是一个对象</p><h3 id="Promise-状态-对象-需要实例化"><a href="#Promise-状态-对象-需要实例化" class="headerlink" title="Promise 状态(对象,需要实例化)"></a>Promise 状态(对象,需要实例化)</h3><p>Promise操作有三种状态:</p><ol><li>pending(进行中)</li><li>fulfilled(已成功)</li><li>rejected(已失败)</li></ol><p>除了异步操作的结果,任何其他操作都无法改变这个状态</p><blockquote><p>Promise 对象只有：从 pending 变为 fulfilled 和从 pending 变为 rejected 的状态改变。只要处于 fulfilled 和 rejected ，状态就不会再变了即 resolved（已定型）。</p></blockquote><p>缺点:1.无法取消 Promise ，一旦新建它就会立即执行，无法中途取消。 2.如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。 3.当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p><h3 id="then"><a href="#then" class="headerlink" title=".then"></a>.then</h3><p>then 方法接收两个函数作为参数，第一个参数是 Promise 执行成功时的回调，第二个参数是 Promise 执行失败时的回调，两个函数只会有一个被调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="comment">// 例:</span></span><br><span class="line">    <span class="comment">// 访问后台url</span></span><br><span class="line">    <span class="comment">// 得到结果: jsonModel =&gt; 1</span></span><br><span class="line">    <span class="comment">// axios.get()</span></span><br><span class="line">    <span class="keyword">var</span> jsonModel = &#123;<span class="attr">name</span>:<span class="string">&#x27;then&#x27;</span>,age=<span class="number">18</span>&#125;</span><br><span class="line">    <span class="title function_">resolve</span>(jsonModel)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// 1 处理这个value  -&gt; jsonModel</span></span><br><span class="line">    <span class="keyword">return</span> value <span class="comment">// 如果需要连续发请求的话,该返回值又会被包装成Promise对象</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="comment">// 当前then回调没有返回值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="property">age</span>) <span class="comment">// 18</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="comment">// 上一个函数没有返回值给这个函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// undefined</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="comment">// 异常处理</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>then 方法将返回一个 <wavy>resolved</wavy> 或 <wavy>rejected</wavy>状态的 Promise 对象用于链式调用，且 Promise 对象的值就是这个返回值。</li></ul><h3 id="catch"><a href="#catch" class="headerlink" title=".catch"></a>.catch</h3><p>Promise.catch()方法是promise.then(undefined,onRejected)方法的一个别名，该方法用来注册当promise对象状态变为Rejected的回调函数。</p><p>通俗来说就是:发生异常执行的</p><h3 id="all-静态方法"><a href="#all-静态方法" class="headerlink" title=".all(静态方法)"></a>.all(静态方法)</h3><p>Promise.all可以接受一个元素为Promise对象的数组作为参数，当这个数组里面所有的promise对象都变为resolve时，该方法才会返回。Promise.all方法中会按照数组的原先顺序将结果返回;</p><p>例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>)[</span><br><span class="line">    <span class="comment">// setInterval()  定时任务</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;请求1&#x27;</span>)</span><br><span class="line">    &#125;,<span class="number">3000</span>)</span><br><span class="line">])</span><br><span class="line"><span class="keyword">var</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>)[</span><br><span class="line">    <span class="comment">// setInterval()  定时任务</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;请求2&#x27;</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">])</span><br><span class="line"><span class="comment">// all表示以上两个函数都执行完</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([ promise1,promise2 ]),<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// 则会打印 [请求1,请求2]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当前小结处可以查看当前文档的 #Vue对于axios的并行请求处理 </p><h3 id="race"><a href="#race" class="headerlink" title=".race"></a>.race</h3><p>Promise.race的含义是只要有一个promise对象进入FulFilled或者Rejected状态的话，程序就会停止，且会继续后面的处理逻辑</p><p>可以参考<a href="https://www.cnblogs.com/tugenhua0707/p/4771528.html">ES6的promise对象研究 - 龙恩0707 - 博客园 (cnblogs.com)</a></p><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><wavy>构建器</wavy><p>可以通过 yield 关键字，把函数的执行流挂起，为改变执行流程提供了可能，从而为异步编程提供解决方案。</p><p>和一般方法不同的是: 1.在 function 后面，函数名之前有个 * 2.函数内部有 yield 表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用法:</p><p>调用 Generator 函数和调用普通函数一样，在函数名后面加上()即可，但是 Generator 函数不会像普通函数一样立即执行，而是返回一个指向内部状态对象的指针，所以要调用遍历器对象Iterator 的 next 方法，指针就会从函数头部或者上一次停下来的地方开始执行</p><p>这个就有点类似于Java的迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    it.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单向移动,  指针后移</p><h2 id="文件对象"><a href="#文件对象" class="headerlink" title="文件对象"></a>文件对象</h2><p>在日常,  对于文件的上传操作是必要的</p><h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><p>页面代码案例:</p><p>需求:我需要对<code>id=fphoto</code>的文件对象进行处理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;fphoto&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fphoto&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fphoto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;detail&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;detail&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;50&quot;</span> <span class="attr">id</span>=<span class="string">&quot;detail&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>上架<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>常见方案</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">submit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> _this = <span class="variable language_">this</span></span><br><span class="line">    <span class="comment">// 对于文件上传, 必须为post, 并且需要指定Content-Type: multipart/form-data</span></span><br><span class="line">    <span class="keyword">let</span> fphoto = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#fphoto&quot;</span>).<span class="property">files</span>[<span class="number">0</span>] <span class="comment">// 这个可以取多个文件, 我们只取一个</span></span><br><span class="line">    <span class="comment">// 创建formdata对象</span></span><br><span class="line">    <span class="keyword">let</span> formdata = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">    formdata.<span class="title function_">append</span>(<span class="string">&quot;fphoto&quot;</span>,fphoto) <span class="comment">// 文件对象</span></span><br><span class="line">    <span class="comment">// 其他的对象参数(append进去)</span></span><br><span class="line">    formdata.<span class="title function_">append</span>(<span class="string">&quot;detail&quot;</span>, _this.<span class="property">detail</span>)</span><br><span class="line">    <span class="keyword">const</span> req = &#123;</span><br><span class="line">        <span class="attr">headers</span>:&#123;</span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;multipart/form-data&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 请求参数配置</span></span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;/upload&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:formdata,</span><br><span class="line">        <span class="attr">headers</span>: req.<span class="property">headers</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 处理请求  当前章节次要</span></span><br><span class="line">        <span class="keyword">let</span> jsonModel = res.<span class="property">data</span></span><br><span class="line">        <span class="keyword">if</span>(jsonModel.<span class="property">code</span> === <span class="number">200</span>)&#123;</span><br><span class="line"><span class="keyword">let</span> jsonModel = res.<span class="property">data</span></span><br><span class="line">            <span class="keyword">if</span>(jsonModel.<span class="property">code</span> === <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;上传成功!&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该案例总结</p><ul><li>对于文件上传, 必须为post</li><li>并且需要在headers指定Content-Type: multipart&#x2F;form-data</li><li>剩下的参数都用formdata包装即可</li></ul><h1 id="前端导出Excel"><a href="#前端导出Excel" class="headerlink" title="前端导出Excel"></a>前端导出Excel</h1><p>前端代码,  后端用EasyExcel实现, 详情见文档</p><p>导出excel,  浏览器弹窗下载<a href="https://easyexcel.opensource.alibaba.com/docs/current/">关于Easyexcel | Easy Excel (alibaba.com)</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">    <span class="comment">// 请求后台地址</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;http://localhost:9000/upload/export/forEmployee&quot;</span>,</span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&quot;blob&quot;</span>, <span class="comment">//设置返回信息为二进制文件，默认为json</span></span><br><span class="line">    <span class="comment">// 需要导出的数据</span></span><br><span class="line">    <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">employeeList</span>, <span class="comment">//后台照常用@RequestBody接收即可</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这个地方我们应该拿到后端响应信息里面的文件信息, 此处分析其文件在res.data中</span></span><br><span class="line">    <span class="keyword">let</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([res.<span class="property">data</span>], &#123; <span class="attr">type</span>: <span class="string">&quot;application/xlsx&quot;</span> &#125;);</span><br><span class="line">    <span class="keyword">let</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">    <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>); <span class="comment">//创建a标签</span></span><br><span class="line">    link.<span class="property">href</span> = url;</span><br><span class="line">    link.<span class="property">download</span> = <span class="string">&quot;员工信息_&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() + <span class="string">&quot;.xlsx&quot;</span>; <span class="comment">//重命名文件</span></span><br><span class="line">    link.<span class="title function_">click</span>();</span><br><span class="line">    <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(url);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h1><p>案例需求:  点击左边&#x2F;右边元素,  然后点击左移,   实现元素移动</p><table border="1" width="500" height="200" align="center" cellpadding="10" cellspacing="0">    <!-- 表格行标签 -->    <tr align="center">        <!-- 表格表头单元格标签 -->        <th>left</th>         <th>operate</th>        <th>right</th>    </tr>    <tr align="center">        <!-- 表格普通单元格标签 -->        <td>A</td>        <td rowspan="3">左移 | 右移</td>        <td>D</td>    </tr>    <tr align="center">        <!-- 表格普通单元格标签 -->        <td>B</td>        <td>E</td>    </tr>    <tr align="center">        <!-- 表格普通单元格标签 -->        <td>C</td>        <td>F</td>    </tr></table><p>App.vue</p><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class="content">              <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyCross</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:left</span>=<span class="string">&quot;this.left&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:right</span>=<span class="string">&quot;this.right&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">moveLeft</span>=<span class="string">&quot;moveLeft&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">moveRight</span>=<span class="string">&quot;moveRight&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">moveAllLeft</span>=<span class="string">&quot;moveLeftAll&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">moveAllRight</span>=<span class="string">&quot;moveRightAll&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">MyCross</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">MyCross</span> <span class="keyword">from</span> <span class="string">&quot;./components/Cross.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Cross</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">left</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;林冲&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;武松&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;白胜&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">      ],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">right</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;林冲&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;哈哈&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">      ],</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">moveRight</span>(<span class="params">item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">right</span>.<span class="title function_">push</span>(item);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">left</span> = <span class="variable language_">this</span>.<span class="property">left</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> i !== item);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">moveLeft</span>(<span class="params">item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">left</span>.<span class="title function_">push</span>(item);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">right</span> = <span class="variable language_">this</span>.<span class="property">right</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> i !== item);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">moveLeftAll</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">right</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">left</span>.<span class="title function_">push</span>(item);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">right</span> = [];</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">moveRightAll</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">left</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">right</span>.<span class="title function_">push</span>(item);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">left</span> = [];</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><p>Cross.vue</p><details class="folding-tag" green><summary> 子组件代码 </summary>              <div class="content">              <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: flex&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in left&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;moveRight(item)&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; item.name &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding-top: 50px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;moveAllLeft()&quot;</span>&gt;</span>←←<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;moveAllRight()&quot;</span>&gt;</span>→→<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in right&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;moveLeft(item)&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; item.name &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">left</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">required</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">right</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">required</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">moveRight</span>(<span class="params">item</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;moveRight&#x27;</span>,item)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">moveLeft</span>(<span class="params">item</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;moveLeft&#x27;</span>,item)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">moveAllLeft</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;moveAllLeft&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">moveAllRight</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;moveAllRight&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><blockquote><p> 说明:  App.vue为父组件,  Cross.vue为子组件</p></blockquote><p>先注册组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyCross</span> <span class="keyword">from</span> <span class="string">&quot;./components/Cross.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="comment">// 注册组件</span></span><br><span class="line">    <span class="title class_">Cross</span>,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="父传子props"><a href="#父传子props" class="headerlink" title="父传子props"></a>父传子props</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyCross</span></span></span><br><span class="line"><span class="tag">         <span class="attr">:left</span>=<span class="string">&quot;this.left&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">:right</span>=<span class="string">&quot;this.right&quot;</span></span></span><br><span class="line"><span class="tag">         @<span class="attr">moveLeft</span>=<span class="string">&quot;moveLeft&quot;</span></span></span><br><span class="line"><span class="tag">         @<span class="attr">moveRight</span>=<span class="string">&quot;moveRight&quot;</span></span></span><br><span class="line"><span class="tag">         @<span class="attr">moveAllLeft</span>=<span class="string">&quot;moveLeftAll&quot;</span></span></span><br><span class="line"><span class="tag">         @<span class="attr">moveAllRight</span>=<span class="string">&quot;moveRightAll&quot;</span></span></span><br><span class="line"><span class="tag">         &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">MyCross</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件中引用子组件</p><p>通过语法糖(1)  :left  , 将父组件中的this.left数据传递给子组件,  子组件中同样需要使用该名接收</p><p>语法糖(2) @moveLeft: 子组件通知的事件名,  通知后会调用父组件中等号右侧的方法</p><p>在子组件中: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="comment">// 接收父组件中传的值(通过父组件的语法糖), 可以约束类型</span></span><br><span class="line">    <span class="attr">left</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">right</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>此时假如父组件中传了值过来,  即可以直接使用该字段了,  在子组件中使用例如:   this.left</p><h2 id="子传父-emit"><a href="#子传父-emit" class="headerlink" title="子传父$emit"></a>子传父$emit</h2><p>子传父,   例如此时需要通过点击事件触发</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;moveLeft()&quot;</span>&gt;</span>←←<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此按钮作用为:  点击了此按钮并且选中了一个元素,  则实现左移</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">// 方法如下</span></span><br><span class="line">    <span class="title function_">moveLeft</span>(<span class="params">item</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;moveLeft&#x27;</span>,item) <span class="comment">// 传输对象给父组件</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过语法  $emit通知父组件,  并且传了一个参数item过去</p><p>可以很容易的看出,  通知父组件的方法为 moveLeft,  那么父组件中调用子组件的语法中我们可以看到如下操作:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyCross</span> @<span class="attr">moveLeft</span>=<span class="string">&quot;moveLeftFunc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">MyCross</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们通过@moveLeft接收通知,  并且触发调用父组件中的方法moveLeftFunc,  形参接收子组件传输的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">moveLeftFunc</span>(<span class="params">item</span>) &#123; <span class="comment">// item为子组件中传输的对象</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">left</span>.<span class="title function_">push</span>(item);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">right</span> = <span class="variable language_">this</span>.<span class="property">right</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> i !== item);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="Vue-Admin-Template初始化"><a href="#Vue-Admin-Template初始化" class="headerlink" title="Vue-Admin-Template初始化"></a>Vue-Admin-Template初始化</h1><h2 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * You will need to set publicPath if you plan to deploy your site under a sub path,</span></span><br><span class="line"><span class="comment">   * for example GitHub Pages. If you plan to deploy your site to https://foo.github.io/bar/,</span></span><br><span class="line"><span class="comment">   * then publicPath should be set to &quot;/bar/&quot;.</span></span><br><span class="line"><span class="comment">   * In most cases please use &#x27;/&#x27; !!!</span></span><br><span class="line"><span class="comment">   * Detail: https://cli.vuejs.org/config/#publicpath</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">  <span class="attr">assetsDir</span>: <span class="string">&quot;static&quot;</span>,</span><br><span class="line">  <span class="comment">// 关闭eslint</span></span><br><span class="line">  <span class="comment">// lintOnSave: process.env.NODE_ENV === &quot;development&quot;,</span></span><br><span class="line">  <span class="attr">lintOnSave</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">productionSourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: port,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">overlay</span>: &#123;</span><br><span class="line">      <span class="attr">warnings</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">errors</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      [process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>]: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://127.0.0.1:9000&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          [<span class="string">&quot;^&quot;</span> + process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>]: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// before: require(&#x27;./mock/mock-server.js&#x27;)</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>关闭本地mock模拟接口,  使用自定义后端接口</p><h2 id="env-development"><a href="#env-development" class="headerlink" title=".env.development"></a>.env.development</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># just a flag</span><br><span class="line">ENV = &#x27;development&#x27;</span><br><span class="line"> </span><br><span class="line"># base api</span><br><span class="line"># VUE_APP_BASE_API = &#x27;api&#x27;</span><br><span class="line">VUE_APP_BASE_API = &#x27;http://localhost:9000&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># vue-cli uses the VUE_CLI_BABEL_TRANSPILE_MODULES environment variable,</span><br><span class="line"># to control whether the babel-plugin-dynamic-import-node plugin is enabled.</span><br><span class="line"># It only does one thing by converting all import() to require().</span><br><span class="line"># This configuration can significantly increase the speed of hot updates,</span><br><span class="line"># when you have a large number of pages.</span><br><span class="line"># Detail:  https://github.com/vuejs/vue-cli/blob/dev/packages/@vue/babel-preset-app/index.js</span><br><span class="line"></span><br><span class="line">VUE_CLI_BABEL_TRANSPILE_MODULES = true</span><br></pre></td></tr></table></figure><h2 id="routr-index-js"><a href="#routr-index-js" class="headerlink" title="routr&#x2F;index.js"></a>routr&#x2F;index.js</h2><p>调整路由</p><h2 id="utils-request-js"><a href="#utils-request-js" class="headerlink" title="utils&#x2F;request.js"></a>utils&#x2F;request.js</h2><p>把响应返回值判断改成200</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode</title>
      <link href="/2023/10/21/LeetCode/"/>
      <url>/2023/10/21/LeetCode/</url>
      
        <content type="html"><![CDATA[<div class="tip cogs"><p>随机记录</p></div><h1 id="力扣算法题记录"><a href="#力扣算法题记录" class="headerlink" title="力扣算法题记录"></a>力扣算法题记录</h1><p>s: simple m:middle h:hard</p><h2 id="P88-合并两个有序数组-S-数组"><a href="#P88-合并两个有序数组-S-数组" class="headerlink" title="P88 合并两个有序数组 S 数组"></a>P88 合并两个有序数组 S 数组</h2><p>思路一 先合并在排序<br>思路二 合并的时候就进行排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并两个有序数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums1 主数组 nums1.length = m + n</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> m 后面需要替换的数量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums2 替换数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n nums2.length</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> m, <span class="type">int</span>[] nums2, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m; i &lt; nums1.length; i++) &#123;</span><br><span class="line">          nums1[i] = nums2[index++];</span><br><span class="line">      &#125;</span><br><span class="line">      Arrays.sort(nums1);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="P27-移除元素-S-数组"><a href="#P27-移除元素-S-数组" class="headerlink" title="P27 移除元素 S 数组"></a>P27 移除元素 S 数组</h2><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地 </a>修改输入数组</strong>。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p>思路:  快慢差</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 移除元素</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> nums 给定数组</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> val  移除value</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num != val) &#123;</span><br><span class="line">            nums[count++] = num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P169-多数元素-S-数组"><a href="#P169-多数元素-S-数组" class="headerlink" title="P169 多数元素 S 数组"></a>P169 多数元素 S 数组</h2><p>给定一个大小为 <code>n</code> 的数组 <code>nums</code> ，返回其中的多数元素。多数元素是指在数组中出现次数 <strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素</p><p>思路一 排序取中间(题目 进阶：尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">majorityElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">return</span> nums[nums.length &gt;&gt; <span class="number">1</span>] ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路二 候选人正票数和负票数的<strong>抵消问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多数元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 目标数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">majorityElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">  <span class="comment">// 默认候选人就是第一个元素</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">candidate</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">  <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">      <span class="comment">// 得支持票</span></span><br><span class="line">      <span class="keyword">if</span> (nums[i] == candidate) &#123;</span><br><span class="line">          count++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 得反对票</span></span><br><span class="line">          count--;</span><br><span class="line">          <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="comment">// 更换候选人</span></span><br><span class="line">              candidate = nums[i];</span><br><span class="line">              count = <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> candidate;</span><br><span class="line">  <span class="comment">// 默认候选人就是第一个元素，然后给自己投一票（count=1），如果遇到相同的票则+1，否则-1。当count为0的时候换下一个人，并且重置票数为1（count=1）。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双指针-技巧"><a href="#双指针-技巧" class="headerlink" title="双指针(技巧)"></a>双指针(技巧)</h2><p>对于双指针, 用的最多的无非就是左右指针,  那么左右指针一般都有类似的解法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">template</span><span class="params">(<span class="type">int</span> []nums)</span>&#123;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>, right=nums.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="comment">// 逻辑</span></span><br><span class="line">        <span class="keyword">if</span>()&#123; <span class="comment">// 指针移动条件</span></span><br><span class="line">            left++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如题<a href="https://leetcode.cn/problems/container-with-most-water/">P11 盛水最多的容器</a> 就是左右指针,   其中还有一种为中间发散指针(从中间到两边)<a href="https://leetcode.cn/problems/longest-palindromic-substring/">5. 最长回文子串 - 力扣（LeetCode）</a></p><h2 id="P11-盛水最多的容器-M-数组"><a href="#P11-盛水最多的容器-M-数组" class="headerlink" title="P11 盛水最多的容器 M 数组"></a>P11 盛水最多的容器 M 数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = height.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">area</span> <span class="operator">=</span> (right - left) * Math.min(height[right], height[left]);<span class="comment">// 当前面积</span></span><br><span class="line">        ans = Math.max(ans, area); <span class="comment">// 判断面积</span></span><br><span class="line">        <span class="keyword">if</span> (height[left] &lt; height[right]) &#123; <span class="comment">// 左边是短的边</span></span><br><span class="line">            left++; <span class="comment">// 指针移动</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板都是类似固定的,  同样的模板模式还出现在二叉树</p><h2 id="P125-验证回文串-S-字符串"><a href="#P125-验证回文串-S-字符串" class="headerlink" title="P125 验证回文串 S 字符串"></a>P125 验证回文串 S 字符串</h2><p>对于该题的要点有:</p><ol><li><p>需要跳过非字符的元素</p></li><li><p>通过Java的API <strong>Character.isLetterOrDigit</strong>判断是字符还是数字(is: true   not: false)</p><p> java.lang.Character.isLetterOrDigit(char ch) 这个方法确定指定的字符是否为字母或数字。字符被认为是字母或数字，如果字符是字母或数字则此方法返回true，否则为false</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = s.length() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="string">&quot;&quot;</span> || s == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right &amp;&amp; !Character.isLetterOrDigit(s.charAt(left))) &#123;</span><br><span class="line">            left++;<span class="comment">//如果是不是字符则左指针向后移动。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right &amp;&amp; !Character.isLetterOrDigit(s.charAt(right))) &#123;</span><br><span class="line">            right--;<span class="comment">//如果不是字符则右指针向前移动。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Character.toLowerCase(s.charAt(left)) != Character.toLowerCase(s.charAt(right))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//判断是否为回文串。若不是退出。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 指针一同移动 判断对称位置字符</span></span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出来,  大体的模板是不动的,  唯一变化的就是中间,  当前案例由于需要俩头一起遍历并且跳过非字符,  那么需要一直判断(while)</p><p>然后学习新的API   java.lang.Character.isLetterOrDigit(char ch)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = s.length() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="comment">// 代码逻辑</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 指针移动</span></span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P20-有效的括号-S-字符串-栈"><a href="#P20-有效的括号-S-字符串-栈" class="headerlink" title="P20 有效的括号 S 字符串 #栈"></a>P20 有效的括号 S 字符串 #栈</h2><p><a href="https://leetcode.cn/problems/valid-parentheses/">20. 有效的括号</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.length() % <span class="number">2</span> == <span class="number">1</span>) <span class="comment">// 如果不是偶数 那么直接返回了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Character&gt;(); <span class="comment">// 栈</span></span><br><span class="line">    <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> item : chars) &#123;</span><br><span class="line">        <span class="comment">// 左括号们</span></span><br><span class="line">        <span class="keyword">if</span> (item == <span class="string">&#x27;(&#x27;</span> || item == <span class="string">&#x27;[&#x27;</span> || item == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">            stack.push(item);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 这两个必须一起(一个是判断栈有没有值,一个是拿栈顶值) 不然会爆空指针</span></span><br><span class="line">            <span class="keyword">if</span> (stack.empty())</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">char</span> <span class="variable">top</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">            <span class="comment">// 判断栈顶的值与右边的括号们是不是一对 是则出栈</span></span><br><span class="line">            <span class="keyword">if</span> ((top == <span class="string">&#x27;(&#x27;</span> &amp;&amp; item == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">                || (top == <span class="string">&#x27;[&#x27;</span> &amp;&amp; item == <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">                || (top == <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; item == <span class="string">&#x27;&#125;&#x27;</span>)) &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 没有匹配的参数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.empty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P26-80-删除有序数组中的重复项-I-and-II-S-M-数组"><a href="#P26-80-删除有序数组中的重复项-I-and-II-S-M-数组" class="headerlink" title="P26-80 删除有序数组中的重复项(I and II) S-M 数组"></a>P26-80 删除有序数组中的重复项(I and II) S-M 数组</h2><p>同类的两道题目,  这两个题目的快慢指针都是同类解法</p><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/?envType=study-plan-v2&envId=top-interview-150">26. 删除有序数组中的重复项(简单)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">1</span>, fast = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (fast &lt; nums.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[slow - <span class="number">1</span>] == nums[fast]) &#123;</span><br><span class="line">            <span class="comment">// 其实这一步就是移动快指针(但是由于哪种情况都需要移动快指针 故直接写外层了)</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nums[slow] = nums[fast];</span><br><span class="line">            slow++;</span><br><span class="line">        &#125;</span><br><span class="line">        fast++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/?envType=study-plan-v2&envId=top-interview-150">80. 删除有序数组中的重复项 II (中等)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">2</span>, fast = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (fast &lt; nums.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[slow - <span class="number">2</span>] == nums[fast]) &#123;</span><br><span class="line">            fast++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nums[slow] = nums[fast];</span><br><span class="line">            fast++;</span><br><span class="line">            slow++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出来,  差距只有在指针判断的间隔上(对于判断不需要重复的情况那么指针间隔为1,  至多两个重复的情况则间隔为2)<a href="https://www.bilibili.com/video/BV1CZ4y1C7hU?vd_source=dc163be4c7c74ef7d917b74d3d553305">可参考 B站 两题的详细视频讲解</a></p><h2 id="P392-判断子序列-S-字符串"><a href="#P392-判断子序列-S-字符串" class="headerlink" title="P392 判断子序列 S 字符串"></a>P392 判断子序列 S 字符串</h2><p><a href="https://leetcode.cn/problems/is-subsequence/description/?envType=study-plan-v2&envId=top-interview-150">P392 判断子序列</a></p><p>双指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubsequence</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (s.length() == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (t.length() == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (right &lt; t.length() &amp;&amp; left &lt; s.length()) &#123;</span><br><span class="line">        <span class="comment">// 相等两个指针都移动</span></span><br><span class="line">        <span class="keyword">if</span> (s.charAt(left) == t.charAt(right)) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        right++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left &gt;= s.length();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P21-合并两个有序链表-S-链表"><a href="#P21-合并两个有序链表-S-链表" class="headerlink" title="P21 合并两个有序链表 S 链表"></a>P21 合并两个有序链表 S 链表</h2><p><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">合并两个有序链表</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line">    <span class="comment">// 其中一个为空</span></span><br><span class="line">    <span class="keyword">if</span> (list1 == <span class="literal">null</span>) </span><br><span class="line">        <span class="keyword">return</span> list2;</span><br><span class="line">    <span class="keyword">if</span> (list2 == <span class="literal">null</span>) </span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">margin</span> <span class="operator">=</span> ans;</span><br><span class="line">    <span class="keyword">while</span> (list1 != <span class="literal">null</span> &amp;&amp; list2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 除了尾部情况</span></span><br><span class="line">        <span class="keyword">if</span> (list1.val &lt; list2.val) &#123;</span><br><span class="line">            margin.next = list1;</span><br><span class="line">            list1 = list1.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            margin.next = list2;</span><br><span class="line">            list2 = list2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        margin = margin.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 排尾阶段</span></span><br><span class="line">    <span class="keyword">if</span>(list1 == <span class="literal">null</span>)</span><br><span class="line">        margin.next = list2;</span><br><span class="line">    <span class="keyword">if</span>(list2 == <span class="literal">null</span>)</span><br><span class="line">        margin.next = list1;</span><br><span class="line">    <span class="keyword">return</span> ans.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上题，通过采用新链表+双指针，双指针判断两个链表，新链表用于构建答案</p><blockquote><p>易踩坑：1. 在构建新链表时，不保存头节点而直接赋值，导致数据丢失（7-8行） 需要使用一个新的链表节点+另外一个指向新节点的节点变量，然后用于构建ans（错误案例：ListNode ans &#x3D; new ListNode(-1); 只使用一个头节点进行操作，不进行头节点的保存引用）</p><ol start="2"><li>对于循环内的赋值，需要使用赋值节点的下一个节点赋值，而不是他自己（错误案例：margin&#x3D; list1；margin &#x3D; margin.next；）</li><li>对于当前题：注意到还有一个收尾的操作，笔者在debug的时候发现最后一个节点被忽略了，因而才引入排尾阶段</li></ol></blockquote><h2 id="P83-删除排序链表中的重复元素-S-链表"><a href="#P83-删除排序链表中的重复元素-S-链表" class="headerlink" title="P83 删除排序链表中的重复元素 S 链表"></a>P83 删除排序链表中的重复元素 S 链表</h2><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list/">删除排序链表中的重复元素</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head.next;</span><br><span class="line">    <span class="keyword">while</span>(fast != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(slow.val != fast.val)&#123;</span><br><span class="line">            slow.next = fast;<span class="comment">// 慢指针执行快指针 连接</span></span><br><span class="line">            slow = slow.next;<span class="comment">// 慢指针往后移动</span></span><br><span class="line">        &#125;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 收尾操作(对于最后一组是重复元素的情况,假如没有重复元素则不会有该情况)</span></span><br><span class="line">    <span class="keyword">if</span>(slow != <span class="literal">null</span>) </span><br><span class="line">        slow.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上述的两题(链表),  都有收尾操作</p><h2 id="P160-相交链表-S-链表-hash表-map"><a href="#P160-相交链表-S-链表-hash表-map" class="headerlink" title="P160 相交链表 S 链表 #hash表(map)"></a>P160 相交链表 S 链表 #hash表(map)</h2><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">160. 相交链表</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">    Map&lt;ListNode, Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (headA == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> headA;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">        ans.put(p, p.val);</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">b</span> <span class="operator">=</span> headB;</span><br><span class="line">    <span class="keyword">while</span> (b != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans.containsKey(b))  <span class="comment">// 如果相交则可以拿到相同的对象</span></span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        b = b.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P141-环形链表-S-链表-hash表-set"><a href="#P141-环形链表-S-链表-hash表-set" class="headerlink" title="P141 环形链表 S 链表 #hash表(set)"></a>P141 环形链表 S 链表 #hash表(set)</h2><p><a href="https://leetcode.cn/problems/linked-list-cycle/">141. 环形链表</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">t</span> <span class="operator">=</span> head;</span><br><span class="line">    HashSet&lt;ListNode&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (t != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftLen</span> <span class="operator">=</span> set.size(); <span class="comment">// 添加前的长度</span></span><br><span class="line">        set.add(t);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightLen</span> <span class="operator">=</span> set.size();<span class="comment">// 添加后的长度</span></span><br><span class="line">        <span class="keyword">if</span> (leftLen == rightLen) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 环形</span></span><br><span class="line">        t = t.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P144-二叉树的前序遍历-S-二叉树"><a href="#P144-二叉树的前序遍历-S-二叉树" class="headerlink" title="P144 二叉树的前序遍历 S 二叉树"></a>P144 二叉树的前序遍历 S 二叉树</h2><p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/">144. 二叉树的前序遍历</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    middle(root, ans);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">middle</span><span class="params">(TreeNode node, List&lt;Integer&gt; res)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.add(node.val); <span class="comment">// 前序</span></span><br><span class="line">        middle(node.left, res); <span class="comment">// 如果是中序则出现在这个位置</span></span><br><span class="line">        middle(node.right,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P145-二叉树的后序遍历-S-二叉树"><a href="#P145-二叉树的后序遍历-S-二叉树" class="headerlink" title="P145 二叉树的后序遍历 S 二叉树"></a>P145 二叉树的后序遍历 S 二叉树</h2><p><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/">145. 二叉树的后序遍历</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    func(root, ans);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">func</span><span class="params">(TreeNode node, List&lt;Integer&gt; ans)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        func(node.left,ans);</span><br><span class="line">        func(node.right,ans);</span><br><span class="line">        ans.add(node.val); <span class="comment">// 后序</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="场景题"><a href="#场景题" class="headerlink" title="场景题"></a>场景题</h1><p>除了算法题还有场景题欧</p><h2 id="分金条问题"><a href="#分金条问题" class="headerlink" title="分金条问题"></a>分金条问题</h2><p>问题描述：雇1个人工作7天，你有1根金条可以分成7份，只能<strong>切2刀</strong>，如何保证每天都得到1份金条</p><p>我们首先，把金条看出七份，然后我们我们切两刀（1&#x2F;7，2&#x2F;7，4&#x2F;7）那么可以看成一个线段从1&#x2F;7处和3&#x2F;7处切了(<a href="https://blog.csdn.net/qq_43264029/article/details/107270544">切金条CSDN</a>)</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20veHVleGlhbnFpL2ltZy9yYXcvbWFzdGVyL2ltZy8yMDIwMDcxMDE5NDUxNy5wbmc?x-oss-process=image/format,png"></p><p>然后七天的话:  第一天给工人 1&#x2F;7，那么我们还有（剩2&#x2F;7 + 4&#x2F;7 &#x3D; <strong>6&#x2F;7</strong>）</p><p>第二天：我们给他2&#x2F;7，然后他返回第一天我们给他的1&#x2F;7（剩1&#x2F;7 + 4&#x2F;7 &#x3D; <strong>5&#x2F;7</strong>）</p><p>第三天：我们给他第二天要回的1&#x2F;7，此时我们（剩<strong>4&#x2F;7</strong>）</p><p>第四天：要回所有的金条（3&#x2F;7），我们给他我们剩的4&#x2F;7. (剩1&#x2F;7 + 2&#x2F;7 &#x3D; <strong>3&#x2F;7</strong>)</p><p>第五天：给他1&#x2F;7。我们（剩<strong>2&#x2F;7</strong>）</p><p>第六天：要回1&#x2F;7，然后给剩下的2&#x2F;7。（剩<strong>1&#x2F;7</strong>）</p><p>第七天：给他1&#x2F;7。我们（剩<strong>0</strong>）</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2023/10/20/Nginx/"/>
      <url>/2023/10/20/Nginx/</url>
      
        <content type="html"><![CDATA[<p>刮开看看：<psw>这里啥都没有</psw></p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 负载均衡 </tag>
            
            <tag> 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2023/10/16/Docker/"/>
      <url>/2023/10/16/Docker/</url>
      
        <content type="html"><![CDATA[<p>刮开看看：<psw>开始慢慢有笔记了</psw></p><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>如果之前有安装过旧版本的Docker,则通过命令卸载旧版本的Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></table></figure><p>没有任何匹配，说明没装过docker</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先需要虚拟机联网，安装yum工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2 --skip-broken</span><br></pre></td></tr></table></figure><p>运行耐心等待一下，安装完成(最后显示 完毕!)</p><p>然后更新本地镜像源：配置阿里云的仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置docker镜像源</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line">sed -i <span class="string">&#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><p>安装docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure><p>docker-ce: 社区版</p><h3 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h3><p>防火墙设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment"># 禁止开机启动防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"><span class="comment"># 可以查看防火墙状态</span></span><br><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker  # 启动docker服务</span><br><span class="line"></span><br><span class="line">systemctl stop docker  # 停止docker服务</span><br><span class="line"></span><br><span class="line">systemctl restart docker  # 重启docker服务</span><br></pre></td></tr></table></figure><p>查看docker状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><p>查看docker版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><h3 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h3><p>docker官方镜像仓库网速较差，我们需要设置国内镜像服务：<br>参考阿里云的镜像加速文档：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://gtxivg4h.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="部署MySQL"><a href="#部署MySQL" class="headerlink" title="部署MySQL"></a>部署MySQL</h2><p>先停掉虚拟机中的MySQL，确保虚拟机已经安装Docker，且网络开通的情况下，执行下面命令即可安装MySQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure><p>解读：</p><p><strong>docker run -d</strong> ：创建并运行一个容器，**-d**则是让容器以后台进程运行</p><p><strong>–name mysql</strong> : 给容器起个名字叫mysql,必须唯一</p><p><strong>-p 3306:3306</strong> : 设置端口映射。(后面这个是容器内MySQL默认端口,前面是映射出去的端口(宿主机),比如3307)</p><p>容器是隔离环境，外界不可访问。但是可以将宿主机端口映射容器内到端口，当访问宿主机指定端口时，就是在访问容器内的端口了。</p><p>容器内端口往往是由容器内的进程决定，例如MySQL进程默认端口是3306，因此容器内端口一定是3306；而宿主机端口则可以任意指定，一般与容器内保持一致。</p><p>格式： -p 宿主机端口:容器内端口，示例中就是将宿主机的3306映射到容器内的3306端口</p><p><strong>-e</strong> TZ&#x3D;Asia&#x2F;Shanghai : 配置容器内进程运行时的一些参数(e–&gt;environment)</p><p>格式：**-e KEY&#x3D;VALUE**，KEY和VALUE都由容器内进程决定</p><p>案例中，TZ&#x3D;Asia&#x2F;Shanghai是设置时区；MYSQL_ROOT_PASSWORD&#x3D;123456是设置MySQL默认密码</p><p><strong>mysql</strong> : 设置镜像名称，Docker会根据这个名字搜索并下载镜像</p><p>格式：REPOSITORY:TAG，例如mysql:8.0，其中REPOSITORY可以理解为镜像名，TAG是版本号</p><p>在未指定TAG的情况下，默认是最新版本，也就是mysql:latest</p><h3 id="连接远程数据库"><a href="#连接远程数据库" class="headerlink" title="连接远程数据库"></a>连接远程数据库</h3><p>打开数据库连接工具</p><p>如果出现<strong>没有权限</strong>,则在Docker容器中,输入指令,<em>进入容器,查看容器内目录</em> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it container_name /bin/bash</span><br></pre></td></tr></table></figure><p>登录MySQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>修改权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br><span class="line"># 更新user为root，host为% 的密码为123456</span><br><span class="line"> </span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br><span class="line"># 更新user为root，host为localhost 的密码为123456</span><br></pre></td></tr></table></figure><p>刷新权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES; #刷新权限</span><br></pre></td></tr></table></figure><p>最后查询用户信息   (查看root用户)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select host,user,plugin,authentication_string from mysql.user;</span><br></pre></td></tr></table></figure><p>连接成功则可以像在Windows操作本地数据库一样的了</p><h2 id="Docker基础"><a href="#Docker基础" class="headerlink" title="Docker基础"></a>Docker基础</h2><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker pull</td><td>拉取镜像</td></tr><tr><td>docker push</td><td>推送镜像到DockerRegistry</td></tr><tr><td>docker images</td><td>查看本地镜像</td></tr><tr><td>docker rmi</td><td>删除本地镜像</td></tr><tr><td>docker run</td><td>创建并运行容器（不能重复创建）</td></tr><tr><td>docker stop</td><td>停止指定容器</td></tr><tr><td>docker start</td><td>启动指定容器</td></tr><tr><td>docker restart</td><td>重新启动容器</td></tr><tr><td>docker rm</td><td>删除指定容器</td></tr><tr><td>docker ps</td><td>查看容器</td></tr><tr><td>docker logs</td><td>查看容器运行日志</td></tr><tr><td>docker exec</td><td>进入容器</td></tr><tr><td>docker save</td><td>保存镜像到本地压缩文件</td></tr><tr><td>docker load</td><td>加载本地压缩文件到镜像</td></tr><tr><td>docker inspect</td><td>查看容器详细信息</td></tr></tbody></table><p>Docker文档<a href="https://docs.docker.com/">Docker Docs</a></p><img src="/2023/10/16/Docker/docker_1.png" class title="部分操作图解"><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>以拉取Nginx为例:</p><p>需求:</p><ul><li>在DockerHub中搜索Nginx镜像,查看镜像的名称</li><li>拉取Nginx镜像</li><li>查看本地镜像列表</li><li>创建并运行Nginx容器</li><li>查看容器</li><li>停止容器</li><li>再次启动容器</li><li>进入Nginx容器</li><li>删除容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.访问Docker Hub搜索镜像</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.拉取Nginx镜像,不指定版本即默认为latest最新</span></span><br><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查看本地镜像列表</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 结果如下</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx        latest    605c77e624dd   22 months ago   141MB</span><br><span class="line">mysql        latest    3218b38490ce   22 months ago   516MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.创建并运行Nginx容器</span></span><br><span class="line">docker run -d --name nginx -p 80:80 nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.查看容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 5.1查看容器格式化(格式会更加清爽)</span></span><br><span class="line">docker ps --format <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                   CREATED         STATUS         PORTS                               NAMES</span><br><span class="line">b83c1bfa9956   nginx     <span class="string">&quot;/docker-entrypoint.…&quot;</span>   2 minutes ago   Up 2 minutes   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   nginx</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span></span><br><span class="line">CONTAINER ID   IMAGE     PORTS                               STATUS         NAMES</span><br><span class="line">b83c1bfa9956   nginx     0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   Up 2 minutes   nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.停止容器</span></span><br><span class="line">docker stop nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.1查看所有容器  docker ps -a</span></span><br><span class="line">docker ps -a --format <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span></span><br><span class="line"><span class="comment"># 结果:(刚刚停止的Nginx的状态为Exited)</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps -a --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span></span><br><span class="line">CONTAINER ID   IMAGE     PORTS                 STATUS                     NAMES</span><br><span class="line">b83c1bfa9956   nginx                           Exited (0) 3 minutes ago   nginx</span><br><span class="line">107a163cba71   mysql     3306/tcp, 33060/tcp   Created                    xenodochial_allen</span><br><span class="line">b32527ef7193   mysql                           Exited (0) 25 hours ago    mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.启动容器</span></span><br><span class="line">docker start nginx</span><br><span class="line"><span class="comment"># 8.进入容器,查看容器内目录</span></span><br><span class="line">docker <span class="built_in">exec</span> -it nginx bash <span class="comment"># ecec:执行 -it:模拟可输入终端 bash:命令行交互</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.查看日志</span></span><br><span class="line">docker logs nginx    <span class="comment"># 查看nginx日志</span></span><br><span class="line">docker logs -f nginx <span class="comment"># 一直查看Nginx日志</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.退出容器</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 11.删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> nginx <span class="comment"># 在运行的容器删除会提示</span></span><br><span class="line"><span class="comment"># 无法删除,则需要先停止(stop在rm),或者</span></span><br><span class="line">docker <span class="built_in">rm</span> -f nginx</span><br></pre></td></tr></table></figure><h3 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h3><p>比如在前面的案例中,我们需要对docker ps显示的内容进行格式化(format),指令过长,每一次都要输入这么多,  非常麻烦</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改/root/.bashrc文件</span></span><br><span class="line">vi /root/.bashrc</span><br><span class="line">内容如下：</span><br><span class="line"><span class="comment"># .bashrc</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># User specific aliases and functions</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">rm</span>=<span class="string">&#x27;rm -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">cp</span>=<span class="string">&#x27;cp -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">mv</span>=<span class="string">&#x27;mv -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> dps=<span class="string">&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> dis=<span class="string">&#x27;docker images&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Source global definitions</span></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/bashrc ]; <span class="keyword">then</span></span><br><span class="line">        . /etc/bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>然后，执行命令使别名生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /root/.bashrc</span><br></pre></td></tr></table></figure><p>所以当我们设置了这个,  如果需要查看镜像的情况,  则可以使用dps格式化别名指令</p><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p>容器是隔离环境，容器内程序的文件、配置、运行时产生的容器都在容器内部，我们要读写容器内的文件非常不方便  (比如我们进入到容器中使用vi指令修改index.html会提示没有指令).</p><p><strong>数据卷（volume）</strong>是一个虚拟目录，是<strong>容器内目录</strong>与<strong>宿主机目录</strong>之间映射的桥梁</p><p>以Nginx为例,众所周知</p><ul><li>html: 放静态资源</li><li>conf: 放配置文件</li></ul><p>如果我们要让Nginx代理我们的静态资源，最好是放到<code>html</code>目录；如果我们要修改Nginx的配置，最好是找到<code>conf</code>下的<code>nginx.conf</code>文件</p><p>但是非常遗憾的一点是,  不能直接去修改它(原容器), 容器运行的Nginx所有的文件都在容器内部。所以我们必须利用数据卷将两个目录与宿主机目录关联，方便我们操作。如图：</p><img src="/2023/10/16/Docker/docker_2.png" class title="以Nginx为例的数据卷"><p>上图解答:</p><p>我们创建了两个数据卷html和conf</p><p>其中html对应nginx容器中的&#x2F;html,  通过数据卷指向了宿主机中的文件&#x2F;html,  _data是用来存放数据自动创建的,  这样一来容器和宿主机就被<wavy>关联</wavy>起来了了,  称之为<span class="p red">挂载</span></p><p>这样我们就可以在宿主机中的 &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;html&#x2F;_data 存放资源,  那么容器中的数据也会被容器相对应的目录所映射</p><p>当前操作为  <span class="p red">双向绑定</span>,  宿主机自动映射到容器</p><p>&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes目录为默认存放所有容器数据卷的目录,  在下根据数据卷的名称创建新目录,  例如:  &#x2F;数据卷名称&#x2F;_data</p><h3 id="数据卷命令"><a href="#数据卷命令" class="headerlink" title="数据卷命令"></a>数据卷命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker volume create</td><td>创建数据卷</td></tr><tr><td>docker volume ls</td><td>查看所有数据卷</td></tr><tr><td>docker volume rm</td><td>删除指定数据卷</td></tr><tr><td>docker volume inspect</td><td>查看某个数据卷的详情</td></tr><tr><td>docker volume prune</td><td>清除数据卷</td></tr></tbody></table><p>Docker文档<a href="https://docs.docker.com/">Docker Docs</a></p><p><strong>注意：</strong>容器与数据卷的挂载要在创建容器时配置，对于创建好的容器，是不能设置数据卷的。而且<strong>创建容器的过程中，数据卷会自动创建</strong>。</p><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><p>需求;</p><ul><li>创建Nginx容器,  修改nginx容器内的html目录下的index.html文件内容</li><li>将静态资源部署到nginx的html目录</li></ul><blockquote><p>提示: 在执行docker run 命令时,  使用 <span class="p red">-v 数据卷:容器内目录</span>   可以完成数据卷挂载</p><p>当创建容器时,  如果挂载了数据卷且数据卷不存在,  则会自动创建数据卷</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.首先创建容器并指定数据卷，注意通过 -v 参数来指定数据卷</span></span><br><span class="line">docker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.然后查看数据卷</span></span><br><span class="line">docker volume <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>     a8bcfc131404273c3d5a5a450fbcc270dbf414d1367648190e864eebfc7802ad</span><br><span class="line"><span class="built_in">local</span>     html    <span class="comment"># 刚刚创建的卷在这</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查看数据卷详情</span></span><br><span class="line">docker volume inspect html</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker volume inspect html</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2023-11-05T21:18:52+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/html/_data&quot;</span>, <span class="comment"># 宿主机位置(映射)</span></span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查看/var/lib/docker/volumes/html/_data目录</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll /var/lib/docker/volumes/html/_data</span></span><br><span class="line">总用量 8</span><br><span class="line">-rw-r--r--. 1 root root 497 12月 28 2021 50x.html</span><br><span class="line">-rw-r--r--. 1 root root 615 12月 28 2021 index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.进入该目录，并随意修改index.html内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cd /var/lib/docker/volumes/html/_data</span></span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line">[root@localhost _data]<span class="comment"># vi index.html  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.进入容器内部，查看/usr/share/nginx/html目录内的文件是否变化</span></span><br><span class="line">docker <span class="built_in">exec</span> -it nginx bash</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/share/nginx/html</span><br></pre></td></tr></table></figure><p>如果不指定挂载目录，自动会为你挂载到&#x2F;usr&#x2F;lib下</p><h3 id="挂载本地目录或文件"><a href="#挂载本地目录或文件" class="headerlink" title="挂载本地目录或文件"></a>挂载本地目录或文件</h3><p>数据卷的目录结构较深，如果我们去操作数据卷目录会不太方便。在很多情况下，我们会直接将容器目录与宿主机指定目录挂载。挂载语法与数据卷类似：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 挂载本地目录</span></span><br><span class="line">-v 本地目录:容器内目录</span><br><span class="line"><span class="comment"># 挂载本地文件</span></span><br><span class="line">-v 本地文件:容器内文件</span><br></pre></td></tr></table></figure><span class="p red">注意:</span> 本地目录或文件必须以 `/` 或 `./`开头，如果直接以名字开头，会被识别为数据卷名而非本地目录名。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-v mysql:/var/lib/mysql <span class="comment"># 会被识别为一个数据卷叫mysql，运行时会自动创建这个数据卷</span></span><br><span class="line">-v ./mysql:/var/lib/mysql <span class="comment"># 会被识别为当前目录下的mysql目录，运行时如果不存在会创建目录</span></span><br></pre></td></tr></table></figure><p>案例需求:</p><ul><li>挂载<code>/root/mysql/data</code>到容器内的<code>/var/lib/mysql</code>目录</li><li>挂载<code>/root/mysql/init</code>到容器内的<code>/docker-entrypoint-initdb.d</code>目录（初始化的SQL脚本目录 —&gt; 只有第一次才生效）</li><li>挂载<code>/root/mysql/conf</code>到容器内的<code>/etc/mysql/conf.d</code>目录（这个是MySQL配置文件目录）</li></ul><blockquote><p> 解释: init为SQL脚本初始化,  conf为配置文件,  其中配置文件主要是配置一些MySQL默认编码,  utf8mb4</p></blockquote><p>我们在虚拟机创建对应的目录,data,  init,  conf</p><p>本地目录挂载:(关于MySQL的挂载详情直达<a href="https://hub.docker.com/_/mysql">MySQL Image | Docker Hub</a>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.删除原来的MySQL容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.进入root目录(:需要设置挂载的目录,提前创建好挂载目录)</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.创建并运行新的MySQL容器,并且挂载(-v)到本地目录</span></span><br><span class="line"><span class="comment"># 当前使用的路径为全路径 /root/mysql, 也可以./root/mysql</span></span><br><span class="line">docker run -d \</span><br><span class="line">--name mysql \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">    -e TZ=Asia/Shanghai \</span><br><span class="line">    -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">    -v /root/mysql/data:/var/lib/mysql \</span><br><span class="line">    -v /root/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">    -v /root/mysql/init:/docker-entrypoint-initdb.d \</span><br><span class="line">mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查看MySQL容器内数据</span></span><br><span class="line"><span class="comment"># 查看data目录，会发现里面有大量数据库数据，说明数据库完成了初始化</span></span><br><span class="line"><span class="built_in">ls</span> -l data</span><br><span class="line"><span class="comment"># 4.1 进入MySQL</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql bash</span><br><span class="line"><span class="comment"># 4.2 登录mysql</span></span><br><span class="line"><span class="comment"># 4.3 查看编码表</span></span><br><span class="line">show variables like <span class="string">&quot;%char%&quot;</span></span><br><span class="line"><span class="comment"># 结果,发现编码是预设的utf8mb4没有问题</span></span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">| Variable_name            | Value                          |</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">| character_set_client     | utf8mb4                        |</span><br><span class="line">| character_set_connection | utf8mb4                        |</span><br><span class="line">| character_set_database   | utf8mb4                        |</span><br><span class="line">| character_set_filesystem | binary                         |</span><br><span class="line">| character_set_results    | utf8mb4                        |</span><br><span class="line">| character_set_server     | utf8mb4                        |</span><br><span class="line">| character_set_system     | utf8mb3                        |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql-8.0/charsets/ |</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.查看数据(其实就是SQL语言了)</span></span><br></pre></td></tr></table></figure><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>在这之前,  前面都是pull别人的镜像,  如果我也需要部署一个自己的镜像,  那么该怎么做呢?</p><h3 id="镜像结构"><a href="#镜像结构" class="headerlink" title="镜像结构"></a>镜像结构</h3><p>在构建镜像之前,  我们需要先了解镜像的结果.</p><p>镜像之所以可以让我们<span class="p red">快速</span>跨操作系统部署应用而忽略其运行环境、配置，就是因为镜像中包含了程序运行需要的系统函数库、环境、配置、依赖。</p><p>所以不容易看出,  自定义镜像的本质就是依次准备好程序运行的基础环境、依赖、应用本身、运行配置等文件，并且打包而成</p><p>镜像是由<strong>层级结构</strong>组成: (在我们pull镜像的时候就不难看出)</p><img src="/2023/10/16/Docker/mirror.png" class title="镜像层级结构"><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>Dockerfile就是一个文本文件,  其中包含了一个个的<strong>指令(Instruction)</strong>,  用指令来说明要执行什么操作来构建镜像。将来Docker可以根据Dockerfile来帮我们构建镜像。常见指令如下:</p><table><thead><tr><th>指令</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><strong>FROM</strong></td><td>指定基础镜像</td><td>from centos:6</td></tr><tr><td><strong>ENV</strong></td><td>设置环境变量，可在后面指令使用</td><td>enu alue</td></tr><tr><td><strong>COPY</strong></td><td>拷贝本地文件到镜像的指定目录</td><td>copy .&#x2F;xx.jar &#x2F;tmp&#x2F;app.jar</td></tr><tr><td><strong>RUN</strong></td><td>执行Linux的shell命令，一般是安装过程的命令</td><td>run yum install gcc</td></tr><tr><td><strong>EXPOSE</strong></td><td>指定容器运行时监听的端口，是给镜像使用者看的</td><td>expose 8080</td></tr><tr><td><strong>ENTRYPOINT</strong></td><td>镜像中应用的启动命令，容器运行时调用</td><td>entrypoint java -jar xx.jar</td></tr></tbody></table><p>更多详细语法,  请参考官方文档 <a href="https://docs.docker.com/engine/reference/builder/">Dockerfile reference | Docker Docs</a></p><p>例如需要基于Ubuntu构建一个Java应用,  其中Dockerfile内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line">FROM ubuntu:16.04</span><br><span class="line"><span class="comment"># 配置环境变量，JDK的安装目录、容器内时区</span></span><br><span class="line">ENV JAVA_DIR=/usr/local</span><br><span class="line">ENV TZ=Asia/Shanghai</span><br><span class="line"><span class="comment"># 拷贝jdk和java项目的包</span></span><br><span class="line">COPY ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span><br><span class="line">COPY ./docker-demo.jar /tmp/app.jar</span><br><span class="line"><span class="comment"># 设定时区</span></span><br><span class="line">RUN <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span><br><span class="line"><span class="comment"># 安装JDK</span></span><br><span class="line">RUN <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> \</span><br><span class="line"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span><br><span class="line"> &amp;&amp; <span class="built_in">mv</span> ./jdk1.8.0_144 ./java8</span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line">ENV JAVA_HOME=<span class="variable">$JAVA_DIR</span>/java8</span><br><span class="line">ENV PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"><span class="comment"># 指定项目监听的端口</span></span><br><span class="line">EXPOSE 8080</span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span><br></pre></td></tr></table></figure><p>对于JDK镜像配置,  我们可以使用别人提供的JDK基础镜像,  简化Dockerfile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line">FROM openjdk:11.0-jre-buster   <span class="comment"># 省去JDk配置</span></span><br><span class="line"><span class="comment"># 设定时区</span></span><br><span class="line">ENV TZ=Asia/Shanghai</span><br><span class="line">RUN <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span><br><span class="line"><span class="comment"># 拷贝jar包</span></span><br><span class="line">COPY docker-demo.jar /app.jar</span><br><span class="line"><span class="comment"># 入口</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span><br></pre></td></tr></table></figure><p>最后相对于上面那个, 下面这个简洁了很多了</p><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>当Dockerfile编写好之后,  就可以使用命令来构建镜像了,  例如在当前目录下准备好了一个<code>Dockerfile</code>文件和<code>ClickCount.jar</code>项目jar包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入存放文件的目录</span></span><br><span class="line"><span class="built_in">cd</span> /root/demo</span><br><span class="line"><span class="comment"># 开始构建</span></span><br><span class="line">docker build -t click:1.0 .</span><br></pre></td></tr></table></figure><p>命令说明:</p><ul><li><code>docker build</code>: 构建一个docker镜像</li><li><code>-t</code>:是给镜像起名, 格式一人撒repository:tag的格式, 如果不指定tag,则默认为latest</li><li><code>.</code>:最后的点代表当前目录(Dockerfile所在目录),  也可以指定其他目录的Dockerfile</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如指定/root/dockerfile_demo目录</span></span><br><span class="line">docker build -t click:1.0 /root/dockerfile_dem</span><br></pre></td></tr></table></figure><p>查看镜像列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看镜像列表：</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">click      1.0       d6ab0b9e64b9   10 minutes ago   89MB</span><br><span class="line">nginx         latest    605c77e624dd   16 months ago    141MB</span><br><span class="line">mysql         latest    3218b38490ce   17 months ago    517MB</span><br></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>在上面的案例,  我们已经创建了Java项目的容器,  其中往往Java项目需要访问其他容器中间件(MySQL,Redis等),  他们需要访问则需要通过网络</p><p>默认情况下,  所有容器都是以bridge(网桥)方式连接到Docker的一个虚拟网桥上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.用基本命令，寻找Networks.bridge.IPAddress属性</span></span><br><span class="line">docker inspect mysql</span><br><span class="line"><span class="comment"># 也可以使用format过滤结果</span></span><br><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;println .IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> mysql</span><br><span class="line"><span class="comment"># 得到IP地址如下：</span></span><br><span class="line">172.17.0.2</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 2.然后通过命令进入dd容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="built_in">dd</span> bash</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3.在容器内，通过ping命令测试网络</span></span><br><span class="line">ping 172.17.0.2</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.053 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.059 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.058 ms</span><br></pre></td></tr></table></figure><p>发现Ping通,  并没有什么问题</p><p>但是，容器的网络IP其实是一个虚拟的IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个IP，而在部署时很可能MySQL容器的IP会发生变化，连接会失败</p><p>官方文档<a href="https://docs.docker.com/engine/reference/commandline/network/">docker network | Docker Docs</a></p><p>常见网络命令有:</p><table><thead><tr><th><strong>命令</strong></th><th><strong>说明</strong></th><th><strong>文档地址</strong></th></tr></thead><tbody><tr><td>docker network create</td><td>创建一个网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_create/">docker network create</a></td></tr><tr><td>docker network ls</td><td>查看所有网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_ls/">docs.docker.com</a></td></tr><tr><td>docker network rm</td><td>删除指定网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_rm/">docs.docker.com</a></td></tr><tr><td>docker network prune</td><td>清除未使用的网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_prune/">docs.docker.com</a></td></tr><tr><td>docker network connect</td><td>使指定容器连接加入某网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_connect/">docs.docker.com</a></td></tr><tr><td>docker network disconnect</td><td>使指定容器连接离开某网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_disconnect/">docker network disconnect</a></td></tr><tr><td>docker network inspect</td><td>查看网络详细信息</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_inspect/">docker network inspect</a></td></tr></tbody></table><h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.首先通过命令创建一个网络</span></span><br><span class="line">docker network create qlh</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 2.然后查看网络</span></span><br><span class="line">docker network <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">e070f0159014   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">cfb0c477c4dc   host      host      <span class="built_in">local</span></span><br><span class="line">9393a7da1c50   none      null      <span class="built_in">local</span></span><br><span class="line">f5084a25485a   qlh       bridge    <span class="built_in">local</span></span><br><span class="line"><span class="comment"># 其中，除了qlh以外，其它都是默认的网络</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3.让dd和mysql都加入该网络，注意，在加入网络时可以通过--alias给容器起别名</span></span><br><span class="line"><span class="comment"># 这样该网络内的其它容器可以用别名互相访问！</span></span><br><span class="line"><span class="comment"># 3.1.mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名</span></span><br><span class="line">docker network connect qlh mysql --<span class="built_in">alias</span> db</span><br><span class="line"><span class="comment"># 3.2.db容器，也就是我们的java项目</span></span><br><span class="line">docker network connect qlh <span class="built_in">dd</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 4.进入dd容器，尝试利用别名访问db</span></span><br><span class="line"><span class="comment"># 4.1.进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="built_in">dd</span> bash</span><br><span class="line"><span class="comment"># 4.2.用db别名访问</span></span><br><span class="line">ping db</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">PING db (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mysql.qlh (172.18.0.2): icmp_seq=1 ttl=64 time=0.070 ms</span><br><span class="line">64 bytes from mysql.qlh (172.18.0.2): icmp_seq=2 ttl=64 time=0.056 ms</span><br><span class="line"><span class="comment"># 4.3.用容器名访问</span></span><br><span class="line">ping mysql</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">PING mysql (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mysql.qlh (172.18.0.2): icmp_seq=1 ttl=64 time=0.044 ms</span><br><span class="line">64 bytes from mysql.qlh (172.18.0.2): icmp_seq=2 ttl=64 time=0.054 ms</span><br></pre></td></tr></table></figure><p>现在可以通过别名(例如: db)访问</p><p>总结:</p><ul><li>在自定义网络中，可以给容器起多个别名，默认的别名是容器名本身</li><li>在同一个自定义网络中的容器，可以通过别名互相访问</li></ul><h2 id="项目部署示例"><a href="#项目部署示例" class="headerlink" title="项目部署示例"></a>项目部署示例</h2><p>尝试部署黑马商城</p><p>项目结构:</p><ul><li>hmall:  商城的后端代码</li><li>hmall-portal：商城用户端的前端代码</li><li>hmall-admin：商城管理端的前端代码</li></ul><p>部署的容器及端口说明：</p><table><thead><tr><th><strong>项目</strong></th><th><strong>容器名</strong></th><th><strong>端口</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>hmall</td><td>hmall</td><td>8080</td><td>黑马商城后端API入口</td></tr><tr><td>hmall-portal</td><td>nginx</td><td>18080</td><td>黑马商城用户端入口</td></tr><tr><td>hmall-admin</td><td>nginx</td><td>18081</td><td>黑马商城管理端入口</td></tr><tr><td>mysql</td><td>mysql</td><td>3306</td><td>数据库</td></tr></tbody></table><p>在正式部署前，我们先删除之前的nginx、dd两个容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f nginx <span class="built_in">dd</span></span><br></pre></td></tr></table></figure><p>mysql容器中已经准备好了商城的数据，所以就不再删除了。</p><h3 id="部署SpringBoot项目"><a href="#部署SpringBoot项目" class="headerlink" title="部署SpringBoot项目"></a>部署SpringBoot项目</h3><p>hamll项目是一个maven聚合项目,  打开项目结构如下</p><hr><p>hamll</p><p>—–&gt;hm-common   通用工具模块</p><p>—–&gt;hm-service   业务模块</p><hr><p>其中我们需要部署的是hm-service模块,  其中配置文件采用了多环境的方式</p><ul><li>application.yml</li><li>application-dev.yml</li><li>application-local.yml</li></ul><blockquote><p>其中的<code>application-dev.yaml</code>是部署到开发环境的配置，<code>application-local.yaml</code>是本地运行时的配置</p></blockquote><p>查看application.yaml，会发现其中的JDBC地址并未写死，而是读取变量：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 环境修改</span></span><br><span class="line">  <span class="attr">profile:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="comment"># 数据库相关   1. db.host  2. db.pw</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://$&#123;db.host&#125;:3306/hmall?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC&amp;useSSL=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;db.pw&#125;</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>这两个变量在<code>application-dev.yml</code>和<code>application-local.yml</code>中并不相同:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application-dev.yml</span></span><br><span class="line"><span class="attr">db:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">pw:</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># application-local.yml</span></span><br><span class="line"><span class="attr">db:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">pw:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>在dev开发环境（也就是Docker部署时）采用了mysql作为地址，刚好是我们的mysql容器名，只要两者在一个网络，就一定能互相访问</p><p>将<code>hm-service</code>目录下的<code>Dockerfile</code>和<code>hm-service/target</code>目录下的<code>hm-service.jar</code>一起上传到虚拟机的<code>root</code>目录</p><p>部署项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.构建项目镜像，不指定tag，则默认为latest</span></span><br><span class="line">docker build -t hmall .</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 2.查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">hmall         latest    0bb07b2c34b9   43 seconds ago   362MB</span><br><span class="line">docker-demo   1.0       49743484da68   24 hours ago     327MB</span><br><span class="line">nginx         latest    605c77e624dd   16 months ago    141MB</span><br><span class="line">mysql         latest    3218b38490ce   17 months ago    516MB</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3.创建并运行容器，并通过--network将其加入hmall网络，这样才能通过容器名访问mysql</span></span><br><span class="line">docker run -d --name hmall --network hmall -p 8080:8080 hmall</span><br></pre></td></tr></table></figure><p>测试，通过浏览器访问：http:&#x2F;&#x2F;你的虚拟机地址:8080&#x2F;search&#x2F;list。</p><h3 id="部署前端"><a href="#部署前端" class="headerlink" title="部署前端"></a>部署前端</h3><p><code>hmall-portal</code>和<code>hmall-admin</code>是前端代码，需要基于nginx部署。在黑马资料中已经提供了nginx的部署目录</p><p>其中：</p><ul><li><code>html</code>是静态资源目录，我们需要把<code>hmall-portal</code>以及<code>hmall-admin</code>都复制进去</li><li><code>nginx.conf</code>是nginx的配置文件，主要是完成对<code>html</code>下的两个静态资源目录做代理</li></ul><p>我们现在要做的就是把整个nginx目录上传到虚拟机的<code>/root</code>目录下：</p><p>然后创建nginx容器并完成两个挂载：</p><ul><li>把<code>/root/nginx/nginx.conf</code>挂载到<code>/etc/nginx/nginx.conf</code></li><li>把<code>/root/nginx/html</code>挂载到<code>/usr/share/nginx/html</code></li></ul><p>由于需要让nginx同时代理hmall-portal和hmall-admin两套前端资源，因此我们需要暴露两个端口：</p><ul><li>18080：对应hmall-portal</li><li>18081：对应hmall-admin</li></ul><p>命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name nginx \</span><br><span class="line">  -p 18080:18080 \</span><br><span class="line">  -p 18081:18081 \</span><br><span class="line">  -v /root/nginx/html:/etc/nginx/html \</span><br><span class="line">  -v /root/nginx/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">  --network hmall \</span><br><span class="line">  nginx</span><br></pre></td></tr></table></figure><p>测试，通过浏览器访问：http:&#x2F;&#x2F;你的虚拟机ip:18080</p><h2 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h2><p>在当前的项目部署示例中, 我们部署了 1)MySQL容器  2)Nginx容器  3) Java项目,  但是在以后复杂的项目中,  当然还要部署其他的中间件,  从而远远不止类似于当前的三个容器,  如果还像之前那样部署,  非常麻烦</p><p>而Docker Compose就可以帮助我们实现<strong>多个相互关联的Docker容器的快速部署</strong>。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>Docker Compose的YML语法详情见<a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">Compose file version 3 reference | Docker Docs</a></p><p>在docker-compose文件中可以定义多个相互关联的应用容器，每一个应用容器被称为一个服务</p><p>在之前的MySQL部署时,  我们使用的命令示例是这样的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">  -v ./mysql/data:/var/lib/mysql \</span><br><span class="line">  -v ./mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">  -v ./mysql/init:/docker-entrypoint-initdb.d \</span><br><span class="line">  --network hmall</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure><p>而使用Compose,  是这样的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">new</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">new:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hmall</span></span><br></pre></td></tr></table></figure><p>对比如下:</p><table><thead><tr><th><strong>docker run 参数</strong></th><th><strong>docker compose 指令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>–name</td><td>container_name</td><td>容器名称</td></tr><tr><td>-p</td><td>ports</td><td>端口映射</td></tr><tr><td>-e</td><td>environment</td><td>环境变量</td></tr><tr><td>-v</td><td>volumes</td><td>数据卷配置</td></tr><tr><td>–network</td><td>networks</td><td>网络</td></tr></tbody></table><p>那么对于刚刚项目部署的样例则可以修改为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/init:/docker-entrypoint-initdb.d&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line">  <span class="attr">hmall:</span></span><br><span class="line">    <span class="attr">build:</span> </span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;18080:18080&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;18081:18081&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./nginx/nginx.conf:/etc/nginx/nginx.conf&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./nginx/html:/usr/share/nginx/html&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">hm-net:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hmall</span></span><br></pre></td></tr></table></figure><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><p>编写好了Yaml文件,  就可以部署项目了</p><p>对于一些常见的命令 <a href="https://docs.docker.com/compose/reference/">Overview of docker compose CLI | Docker Docs</a></p><p>语法如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose [OPTIONS] [COMMAND]</span><br></pre></td></tr></table></figure><p>其中，OPTIONS和COMMAND都是可选参数，比较常见的有:</p><table><thead><tr><th colspan="1" rowspan="1"> <p><strong>类型</strong></p> </th><th colspan="1" rowspan="1"> <p><strong>参数或指令</strong></p> </th><th colspan="1" rowspan="1"> <p><strong>说明</strong></p> </th></tr></thead><tbody><tr><td colspan="1" rowspan="2"> <p>Options</p> </td><td colspan="1" rowspan="1"> <p>-f</p> </td><td colspan="1" rowspan="1"> <p>指定compose文件的路径和名称</p> </td></tr><tr><td colspan="1" rowspan="1"> <p>-p</p> </td><td colspan="1" rowspan="1"> <p>指定project名称。project就是当前compose文件中设置的多个service的集合&#xff0c;是逻辑概念</p> </td></tr><tr><td colspan="1" rowspan="9"> <p>Commands</p> </td><td colspan="1" rowspan="1"> <p>up</p> </td><td colspan="1" rowspan="1"> <p>创建并启动所有service容器</p> </td></tr><tr><td colspan="1" rowspan="1"> <p>down</p> </td><td colspan="1" rowspan="1"> <p>停止并移除所有容器、网络</p> </td></tr><tr><td colspan="1" rowspan="1"> <p>ps</p> </td><td colspan="1" rowspan="1"> <p>列出所有启动的容器</p> </td></tr><tr><td colspan="1" rowspan="1"> <p>logs</p> </td><td colspan="1" rowspan="1"> <p>查看指定容器的日志</p> </td></tr><tr><td colspan="1" rowspan="1"> <p>stop</p> </td><td colspan="1" rowspan="1"> <p>停止容器</p> </td></tr><tr><td colspan="1" rowspan="1"> <p>start</p> </td><td colspan="1" rowspan="1"> <p>启动容器</p> </td></tr><tr><td colspan="1" rowspan="1"> <p>restart</p> </td><td colspan="1" rowspan="1"> <p>重启容器</p> </td></tr><tr><td colspan="1" rowspan="1"> <p>top</p> </td><td colspan="1" rowspan="1"> <p>查看运行的进程</p> </td></tr><tr><td colspan="1" rowspan="1"> <p>exec</p> </td><td colspan="1" rowspan="1"> <p>在指定的运行中容器中执行命令</p> </td></tr></tbody></table> <h2 id="样例-Docker整合FastDFS"><a href="#样例-Docker整合FastDFS" class="headerlink" title="样例: Docker整合FastDFS"></a>样例: Docker整合FastDFS</h2><p>镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 查找FastDFS</span></span><br><span class="line">docker search fastdfs</span><br><span class="line"><span class="comment"># 2. 拉取镜像</span></span><br><span class="line">docker pull delron/fastdfs</span><br></pre></td></tr></table></figure><p>tracker安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name tracker --network=yournetwork -v E:\dockercontainers\fastdfs\tracker:/var/fdfs delron/fastdfs tracker</span><br></pre></td></tr></table></figure><ul><li><code> E:\dockercontainers\fastdfs\tracker</code>为挂载到本地的路径</li><li><code>--network=yournetwork</code>加入的网桥</li></ul><p>storage安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8888:8888 --name storage --network=yournetwork  -e TRACKER_SERVER=172.18.0.2:22122  -v E:\dockercontainers\fastdfs\storage:/var/fdfs -e GROUP_NAME=group1 delron/fastdfs storage</span><br></pre></td></tr></table></figure><ul><li><code>TRACKER_SERVER</code>为上面的<code>tracker</code>连接到的网桥的地址</li><li><code>GROUP_NAME</code>分组名</li></ul><hr><p>测试: 在storage容器中测试使用命令上传图片</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器内bash指令模式</span></span><br><span class="line">docker <span class="built_in">exec</span> -it storage bash</span><br><span class="line"><span class="comment"># 进入/var/fdfs目录</span></span><br><span class="line"><span class="built_in">cd</span> /var/fdfs</span><br><span class="line"><span class="comment"># 加载位于E:\dockercontainers\fastdfs\storage下的文件 3.png</span></span><br><span class="line"><span class="comment"># E:\dockercontainers\fastdfs\storage为映射地址</span></span><br><span class="line"><span class="comment"># 加载完成会返回一串字符路径 group1/M00/00/00/rBIAA2VLaFSAXi66AABGbuqCV2g017.jpg</span></span><br><span class="line">/usr/bin/fdfs_upload_file /etc/fdfs/client.conf 3.png</span><br><span class="line"><span class="comment"># 最后通过映射端口访问</span></span><br><span class="line">http://localhost:8888/group1/M00/00/00/rBIAA2VLaFSAXi66AABGbuqCV2g017.jpg</span><br></pre></td></tr></table></figure><h3 id="应用-SpringBoot整合FastDFS"><a href="#应用-SpringBoot整合FastDFS" class="headerlink" title="应用: SpringBoot整合FastDFS"></a>应用: SpringBoot整合FastDFS</h3><p>导入第三方依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--fastDFS--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.luhuiguo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置SpringBoot Yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fdfs:</span></span><br><span class="line">  <span class="comment"># docker网桥分配的IP地址  tracker的地址</span></span><br><span class="line">  <span class="attr">tracker-list:</span> <span class="number">172.18</span><span class="number">.0</span><span class="number">.4</span><span class="string">:22122</span></span><br><span class="line">  <span class="attr">so-timeout:</span> <span class="number">6000</span>  <span class="comment"># 设置读取时间</span></span><br><span class="line">  <span class="attr">connect-timeout:</span> <span class="number">1000</span> <span class="comment">#  设置连接时间</span></span><br></pre></td></tr></table></figure><p>编写一个简单的UploadService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注入Fast客户端</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> FastFileStorageClient fastFileStorageClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">uploadFile</span><span class="params">(MultipartFile multipartFile)</span> &#123;</span><br><span class="line">    <span class="type">StorePath</span> <span class="variable">storePath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        storePath = fastFileStorageClient.uploadFile(<span class="string">&quot;&quot;</span>,</span><br><span class="line">                                                     multipartFile.getInputStream()</span><br><span class="line">                                                     , multipartFile.getSize()</span><br><span class="line">                                                     , <span class="string">&quot;jpg&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;Group:&#123;&#125;,Path:&#123;&#125;,FullPath:&#123;&#125;&quot;</span>,</span><br><span class="line">                 storePath.getGroup(),</span><br><span class="line">                 storePath.getPath(),</span><br><span class="line">                 storePath.getFullPath());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;uploadFile发生了异常，&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> storePath.getFullPath();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该starter源码参考: [luhuiguo](<a href="https://github.com/luhuiguo/fastdfs-spring-boot-starter">luhuiguo&#x2F;fastdfs-spring-boot-starter: Spring Boot FastDFS Starter (github.com)</a>), 关于此依赖版本,  参考<a href="https://mvnrepository.com/">maven仓库</a>,  搜索fastdfs (当前github中的readme文件介绍指定的是0.1.0)</p><h2 id="应用通信"><a href="#应用通信" class="headerlink" title="应用通信"></a>应用通信</h2><p>环境: SpringBoot项目,Docker容器有: Redis, MySQL,  FastDFS</p><p>当前项目的拓扑图示例如下:</p><img src="/2023/10/16/Docker/docker_3.png" class title="通信拓扑图"><ul><li><p>对于Windows访问容器:  Windows访问<wavy>暴露的端口</wavy>,  例如访问docker容器中的nginx暴露的8888端口,  从而访问FastDFS存储的照片</p></li><li><p>对于Docker容器内部通信:  容器之间可以通过网桥通信,  例如我的Application应用(SpringBoot),  需要访问MySQL和Redis等容器,  则可以访问<span class="p red">网桥</span>分配的ip地址(如图),  实现通信。查看如何查询网桥情况： <psw>docker network inspect your_bridge</psw></p></li></ul><p>关于线上环境: 在Docker内部则是通过网桥访问容器原生端口(例如MySQL:3306),  SpringBoot的配置文件配置样例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fdfs:</span></span><br><span class="line">  <span class="comment"># docker网桥分配的IP地址  tracker的地址</span></span><br><span class="line">  <span class="attr">tracker-list:</span> <span class="number">172.18</span><span class="number">.0</span><span class="number">.4</span><span class="string">:22122</span></span><br><span class="line">  <span class="attr">so-timeout:</span> <span class="number">6000</span>  <span class="comment"># 设置读取时间</span></span><br><span class="line">  <span class="attr">connect-timeout:</span> <span class="number">1000</span> <span class="comment">#  设置连接时间</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9999</span>  <span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># docker网桥分配的IP地址</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://172.18.0.2:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="comment">#Redis相关配置</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">172.18</span><span class="number">.0</span><span class="number">.5</span>  <span class="comment"># docker网桥分配的IP地址</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment">#password:123456</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span> <span class="comment">#0是0号数据库，redis默认开启的16个数据库</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">5000</span> <span class="comment">#超时时间</span></span><br></pre></td></tr></table></figure><blockquote><p>例如Redis在网桥上的IP为172.18.0.5,  则需要在配置文件中配置网桥地址。 (结构图参考该小结首照片)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2023/10/08/SpringBoot/"/>
      <url>/2023/10/08/SpringBoot/</url>
      
        <content type="html"><![CDATA[<p>SpringBoot笔记持续更新中!</p><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><h3 id="发布者订阅者"><a href="#发布者订阅者" class="headerlink" title="发布者订阅者"></a>发布者订阅者</h3><p>样例场景:  我们需要在用户注册后 给订阅的用户推送消息(例如前100名注册的 系统自动发放徽章等)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span> <span class="comment">// 保证事件和用户注册的一致性</span></span><br><span class="line"><span class="keyword">public</span> Long <span class="title function_">register</span><span class="params">(User insert)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">save</span> <span class="operator">=</span> userDao.save(insert);</span><br><span class="line">    <span class="comment">// 用户注册的事件  -&gt; 谁订阅就给谁发送通知 （1.Mq  2.ApplicationEventPublisher）</span></span><br><span class="line">    applicationEventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">UserRegisterEvent</span>(<span class="built_in">this</span>, insert)); <span class="comment">// this事件订阅者，发送端</span></span><br><span class="line">    <span class="keyword">return</span> insert.getId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候我们可以采用Spring的推送事件<code>ApplicationEventPublisher</code>,  其中除此之外我们还可以采用MQ进行同等操作</p><ul><li>消息发布者 Event事件</li></ul><p>我们定义一个事件,  继承<code>ApplicationEvent</code>然后定义构造函数,  我们此时场景需要用户的信息,  故我们在构造函数传入User即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span>: UserRegisterEvent</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Calyee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 用户注册事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRegisterEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserRegisterEvent</span><span class="params">(Object source, User user)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>消息接收者</li></ul><p>此项我们只需要在方法上使用注解<code>@EventListener</code>或 带事务的<code>TransactionalEventListener</code>,  需不需要带事务则看具体应用场景,  此时的事务类型为枚举项,  事务为是否加入父事务执行,  @Async异步执行</p><p>我们需要在注解处标明刚刚定义的<strong>事件推送者</strong>,  然后在方法处传入该事件, 对于 <code>Object source</code>则传入this事件即可, 然后对其进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span>: UserRegisterListener</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Calyee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 用户注册监听</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRegisterListener</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserBackpackService userBackpackService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送改名卡</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userRegisterEvent 注册事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@TransactionalEventListener(classes = UserRegisterEvent.class, phase = TransactionPhase.AFTER_COMMIT)</span> <span class="comment">// 事务提交后</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendCard</span><span class="params">(UserRegisterEvent userRegisterEvent)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userRegisterEvent.getUser();</span><br><span class="line">        userBackpackService.acquireItem(user.getId(), ItemEnum.MODIFY_NAME_CARD.getId(), IdempotentEnum.UID, user.getId().toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送 前10名/100名 注册的徽章</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@TransactionalEventListener(classes = UserRegisterEvent.class, phase = TransactionPhase.AFTER_COMMIT)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendBadge</span><span class="params">(UserRegisterEvent userRegisterEvent)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userRegisterEvent.getUser();</span><br><span class="line">        <span class="type">int</span> <span class="variable">registeredUserCount</span> <span class="operator">=</span> userDao.count();</span><br><span class="line">        <span class="keyword">if</span>(registeredUserCount &lt; <span class="number">10</span>)&#123;</span><br><span class="line">            userBackpackService.acquireItem(user.getId(), ItemEnum.REG_TOP10_BADGE.getId(), IdempotentEnum.UID, user.getId().toString());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(registeredUserCount &lt;<span class="number">100</span>)&#123;</span><br><span class="line">            userBackpackService.acquireItem(user.getId(), ItemEnum.REG_TOP100_BADGE.getId(), IdempotentEnum.UID, user.getId().toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于文件结构定义:  我们可以采用定义一个event包+event包下的listener包,   </p></blockquote><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="读取YML配置文件信息"><a href="#读取YML配置文件信息" class="headerlink" title="读取YML配置文件信息"></a>读取YML配置文件信息</h4><p>导入依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置文件处理器: 是SpringBoot处理yml,yaml,properties配置文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1. 以流的方式读取 application.yml</span></span><br><span class="line"><span class="comment">    2. 以反射的方式 将application.yml的值 存储到对象中(setXxx()方法)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可选,它将选择权交给上级应用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yml样例:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">product:</span></span><br><span class="line">  <span class="attr">pname:</span> <span class="string">apple</span></span><br><span class="line">  <span class="attr">price:</span> <span class="number">20.5</span></span><br><span class="line">  <span class="attr">is-used:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">man-date:</span> <span class="number">2021</span><span class="string">/09/09</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">attributes:</span> &#123;<span class="attr">&#x27;color&#x27;:</span> <span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;type&#x27;</span><span class="string">:&#x27;good&#x27;</span>&#125;</span><br><span class="line">  <span class="attr">address:</span></span><br><span class="line">    <span class="attr">province:</span> <span class="string">湖南省</span></span><br><span class="line">    <span class="attr">city:</span> <span class="string">长沙</span></span><br><span class="line">  <span class="attr">types:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">水果</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">零食</span></span><br></pre></td></tr></table></figure><p>对应的实体类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>     <span class="comment">// Get Set</span></span><br><span class="line"><span class="comment">// 当processor读取到application.yml配置文件以product,存储到当前对象中</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;product&quot;)</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// IOC</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pname;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> Boolean isUsed; <span class="comment">// is-used</span></span><br><span class="line">    <span class="keyword">private</span> Date manDate;   <span class="comment">// man-date</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; attributes;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; types;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Product product;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        Assert.assertNotNull(product);</span><br><span class="line">        Assert.assertEquals(<span class="string">&quot;apple&quot;</span>, product.getPname());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其中我们需要导入的junit的包是这个 import org.junit.Test;</p><p>不是 import org.junit.jupiter.api.Test;</p><p>不然会报错 Runner org.junit.internal.runners.ErrorReportingRunner does not support filtering and will ther</p></blockquote><h4 id="读取其他配置文件内容"><a href="#读取其他配置文件内容" class="headerlink" title="读取其他配置文件内容"></a>读取其他配置文件内容</h4><p>1.读取例如properties配置 <code>@PropertySource()</code></p><p>在配置文件中加入注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.读取例如properties配置  并以key value存储</span></span><br><span class="line"><span class="meta">@PropertySource(value = &#123;&quot;classpath:db.properties&quot;&#125;)</span><span class="comment">// value可以加多个</span></span><br></pre></td></tr></table></figure><p>db.properties配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>如何在Spring中使用呢? 使用<code>@Value($&#123;username&#125;)</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value($&#123;username&#125;)</span></span><br><span class="line"><span class="keyword">private</span> String username;  <span class="comment">// root</span></span><br></pre></td></tr></table></figure><p>2.读取例如xml配置 <code>@ImportResource</code></p><p>在配置文件中加入注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.读取spring.xml配置文件</span></span><br><span class="line"><span class="meta">@ImportResource(locations = &#123;&quot;classpath:spring.xml&quot;&#125;)</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;us&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.springboot.entity.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhang&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>读取:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;us&quot;)</span> <span class="comment">// 根据bean的唯一id获取,因为在User类里面加了@Component注解,已经注入过了(id=user)</span></span><br><span class="line"><span class="keyword">private</span> User user;</span><br></pre></td></tr></table></figure><h4 id="在运行时修改配置文件信息"><a href="#在运行时修改配置文件信息" class="headerlink" title="在运行时修改配置文件信息"></a>在运行时修改配置文件信息</h4><ol><li><p>在命令行参数中配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar --server.port=9090</span><br></pre></td></tr></table></figure><blockquote><p>此项使用必须建立在启动类的run方法中,传入了main函数中的args参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"> <span class="comment">// 命令行参数配置(传给SpringBoot的)  --server.port=xxx</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="comment">// 1. 传入参数的启动类,可以读取命令行配置</span></span><br><span class="line">     SpringApplication.run(Application.class, args);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>2.传入虚拟机系统属性</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dserver.port=<span class="number">9090</span> -jar xxx.jar</span><br></pre></td></tr></table></figure><blockquote><p>-D 设置虚拟参数  其中server.port是自己需要修改的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="comment">// 没有传入参数</span></span><br><span class="line">     SpringApplication.run(Application.class);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>在最后,我们还能添加属性在配置文件里面,例如我需要加属性: name&#x3D;qiuqiu</p><p>eg: <code>java -jar xxx.jar --server.port=9090 --name=qiuqiu</code> </p><p>​      <code>java -Dserver.port=9090 -Dname=qiuqiu -jar xxx.jar</code> </p><h4 id="SpringBoot读取配置信息、环境变量"><a href="#SpringBoot读取配置信息、环境变量" class="headerlink" title="SpringBoot读取配置信息、环境变量"></a>SpringBoot读取配置信息、环境变量</h4><ol><li>Environment基本的环境变量</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取环境变量信息,spring启动时,自动加载</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment environment;</span><br></pre></td></tr></table></figure><p>​2.ConfigurableEnvironment环境变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> ConfigurableEnvironment configurableEnvironment;</span><br></pre></td></tr></table></figure><p><strong>ConfigurableEnvironment是Environment的子接口,功能更多</strong></p><p>注入之后,直接调用即可</p><h4 id="多环境配置-多数据源配置"><a href="#多环境配置-多数据源配置" class="headerlink" title="多环境配置 多数据源配置"></a>多环境配置 多数据源配置</h4><p><strong>多环境:</strong></p><p>开发时分为多个环境: 开发环境 (dev) , 测试环境 (test) , 生产环境 (prod)</p><p>系统默认<code>application.yml</code></p><img src="/2023/10/08/SpringBoot/dev_env.png" class><p>1.通过在<code>application.xml</code>默认配置文件中配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 激活指定使用哪个环境配置文件</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>2.通过注解配置 <code>@Profile(&quot;dev&quot;)</code>,加入在带<code>@Configuration</code>注解的配置类中</p><blockquote><p> 多环境配置,如果设置的环境跟默认环境有相同的配置 , 则当前设置的环境会<strong>覆盖默认环境的相同配置属性</strong></p></blockquote><p><strong>多数据源:</strong></p><p>在<code>@Configuration</code>修饰的配置类中配置数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;driverClassName&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String driverName;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;password&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;url&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="comment">// 表示指定了 spring.profiles.active: test的时候用这个数据源</span></span><br><span class="line"><span class="meta">@Profile(&quot;test&quot;)</span> <span class="comment">// 测试数据源</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">localDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">DriverManagerDataSource</span> <span class="variable">source</span> <span class="operator">=</span> </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DriverManagerDataSource</span>();</span><br><span class="line">    source.setDriverClassName(driverName);</span><br><span class="line">    source.setUsername(username);</span><br><span class="line">    source.setPassword(password);</span><br><span class="line">    source.setUrl(url);</span><br><span class="line">    <span class="keyword">return</span> source;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="comment">// 表示指定了 spring.profiles.active: prod的时候用这个数据源</span></span><br><span class="line"><span class="meta">@Profile(&quot;prod&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">localDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">source</span> <span class="operator">=</span> </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    source.setDriverClassName(driverName);</span><br><span class="line">    source.setUsername(username);</span><br><span class="line">    source.setPassword(password);</span><br><span class="line">    source.setUrl(url);</span><br><span class="line">    <span class="keyword">return</span> source;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时则只会有一个数据源的bean</p><h4 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h4><p><strong>基础配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志配置</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="comment"># 日志级别</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">  <span class="comment"># 根日志配置 日志级别</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">debug</span></span><br><span class="line">    <span class="comment"># 配置该路径下的日志级别</span></span><br><span class="line">    <span class="attr">org.springframework:</span> <span class="string">error</span></span><br><span class="line">    <span class="attr">org.apache:</span> <span class="string">error</span></span><br><span class="line">  <span class="comment"># 日志输出</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">  <span class="comment"># name和path只能设置一个,默认输出在当前模块的根目录</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring.log</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">logs/</span></span><br></pre></td></tr></table></figure><p><strong>滚动配置</strong></p><p>暂无</p><h3 id="Pom文件相关"><a href="#Pom文件相关" class="headerlink" title="Pom文件相关"></a>Pom文件相关</h3><p><code>spring-boot-start-test</code></p><p>对于<code>spring-boot-starter-test</code>的依赖, 默认是引入junit4和junit5</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--排除junit4--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>docker打包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dockerfile-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>default<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>push<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span>javastack/$&#123;project.name&#125;<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">buildArgs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">JAR_FILE</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">JAR_FILE</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">buildArgs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dockerfile</span>&gt;</span>Dockerfile<span class="tag">&lt;/<span class="name">dockerfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><h4 id="一、普通测试类-和-套件"><a href="#一、普通测试类-和-套件" class="headerlink" title="一、普通测试类 和 套件"></a>一、普通测试类 和 套件</h4><p>例如此时我有一个service类需要测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先需要加注解@Component 交给Spring管理</li><li>然后在当前的包中右键,点击Go To -&gt; Test -&gt; Create New Test 一般点击OK即可</li><li>然后idea在test包下就会自动创建一个跟当前类同样结构的测试类</li><li>在测试类中需要引入注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取springboot的启动类</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = SpringBootApplication.class)</span> </span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br></pre></td></tr></table></figure><p>测试(单方法,单类):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest()</span> <span class="comment">// 获取springboot的启动类</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// spring支持IOC: 控制反转  再进行DI注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> calculator.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 传统sout输出   不推荐</span></span><br><span class="line">        <span class="comment">// 推荐  断言</span></span><br><span class="line">        <span class="comment">// 优点: 与预期结果一致,绿   不一致:红   便于捕捉没通过预期的方法</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;add = &quot; + add);</span></span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>, add); <span class="comment">// 绿</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>现在需求是: 假如有多个类,类里面有很多方法需要测试,那该怎么实现一起自动化测试?</strong></p><p>: 使用SpringBoot的套件测试 , 顾名思义:把测试方法类全部放一起测试,就跟一个整体套件一样</p><p>启动当前类就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前方法是测试套件</span></span><br><span class="line"><span class="comment"> * 就是把CalculatorTest 和 OtherTest </span></span><br><span class="line"><span class="comment"> * 两个类里面的方法 全部一起测试,假如用了断言 测试完成后</span></span><br><span class="line"><span class="comment"> * 通过与未通过一目了然</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(Suite.class)</span></span><br><span class="line"><span class="meta">@Suite</span>.SuiteClasses(&#123;CalculatorTest.class,OtherTest.class&#125;) <span class="comment">// 测试指定类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuiteTest</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、其他的注解"><a href="#二、其他的注解" class="headerlink" title="二、其他的注解:"></a>二、其他的注解:</h4><h4 id="1-Disabled"><a href="#1-Disabled" class="headerlink" title="1) @Disabled"></a><code>1) @Disabled</code></h4><p>：禁用测试方法,  用于当前方法现在不需要进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Disabled(&quot;This test is not ready yet.&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">disabledTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 没有写完的逻辑 或是 已经不需要测试的逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-TestMethodOrder-和-Order"><a href="#2-TestMethodOrder-和-Order" class="headerlink" title="2) @TestMethodOrder 和 @Order"></a><code>2) @TestMethodOrder</code> 和 <code>@Order</code></h4><p>：配置测试方法的执行顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TestMethodOrder(MethodOrderer.OrderAnnotation.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Order(1)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethod1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 在这里写测试逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Order(2)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethod2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 在这里写测试逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-BeforeAll-和-AfterAll"><a href="#3-BeforeAll-和-AfterAll" class="headerlink" title="3) @BeforeAll 和 @AfterAll"></a><code>3) @BeforeAll</code> 和 <code>@AfterAll</code></h4><p>：在测试类的所有测试方法前和后执行一次，可用于全局初始化和销毁资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BeforeAll</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initOperate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterAll</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">destoryOperate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 资源销毁操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-BeforeEach-和-AfterEach"><a href="#4-BeforeEach-和-AfterEach" class="headerlink" title="4) @BeforeEach 和 @AfterEach"></a><code>4) @BeforeEach</code> 和 <code>@AfterEach</code></h4><p>：在测试类的每个测试方法前和后都会执行一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeEachTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 执行前的准备工作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterEach</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterEachTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 执行后的清理工作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-RepeatedTest"><a href="#5-RepeatedTest" class="headerlink" title="5) @RepeatedTest"></a><code>5) @RepeatedTest</code></h4><p>：指定测试方法重复执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RepeatedTest(6)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">repeatedTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 该测试方法会重复执行6次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-ParameterizedTest-和-ValueSource"><a href="#6-ParameterizedTest-和-ValueSource" class="headerlink" title="6) @ParameterizedTest 和 @ValueSource"></a><code>6) @ParameterizedTest</code> 和 <code>@ValueSource</code></h4><p>：用于参数化测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@ValueSource(strings = &#123; &quot;name1&quot;, &quot;name2&quot;, &quot;name3&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testParameter</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用参数化的名称进行测试</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-AutoConfigureMockMvc"><a href="#7-AutoConfigureMockMvc" class="headerlink" title="7) @AutoConfigureMockMvc"></a><code>7) @AutoConfigureMockMvc</code></h4><p>：启用MockMvc的自动配置，可用于测试接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyControllerIntegrationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testController</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        mockMvc.perform(get(<span class="string">&quot;/api/someendpoint&quot;</span>))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().contentType(MediaType.APPLICATION_JSON));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切换服务器"><a href="#切换服务器" class="headerlink" title="切换服务器"></a>切换服务器</h3><p>在pom.xml里面修改,例如需要把tomcat修改为undertow</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1. 从starter-web中排除tomcat(原来的服务器)依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  2. 加入新的服务器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>部分执行控制台输出如下</p><img src="/2023/10/08/SpringBoot/Snipaste_2023-10-11_21-04-37.png" class></blockquote><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><ol><li>在启动类中标明注解<code>@EnableScheduling</code></li><li>编写一个Job任务类,在类上面标明@Component注解给spring托管</li><li>在@<code>Scheduled</code>中写cron表达式设置定时</li></ol><p>以Redis缓存文章浏览量同步数据库为例: (当前需要在<strong>启动时</strong>,需要有缓存,需要看下面的<strong>启动任务</strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateViewCountJob</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 */10 * * * ?&quot;)</span> <span class="comment">// 开启定时任务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateViewCountJob</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 获取redis中存取的浏览量</span></span><br><span class="line">        Map&lt;String, Integer&gt; viewCountMap = redisCache.getCacheMap(SystemConstants.ARTICLE_VIEW_COUNT);</span><br><span class="line">        <span class="comment">// 双列集合不能用流,可以先转entrySet(键值对)或者keySet</span></span><br><span class="line">        List&lt;Article&gt; articleList = viewCountMap.entrySet()</span><br><span class="line">                .stream()                            <span class="comment">//  key(long)  value(long)</span></span><br><span class="line">                .map(entry -&gt; <span class="keyword">new</span> <span class="title class_">Article</span>(Long.valueOf(entry.getKey()), entry.getValue().longValue()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 更新到数据库</span></span><br><span class="line">        articleService.updateBatchById(articleList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动前预加载服务"><a href="#启动前预加载服务" class="headerlink" title="启动前预加载服务"></a>启动前预加载服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> ViewCountRunner</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 在启动之前对浏览量进行查询 然后缓存到redis里面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewCountRunner</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleMapper articleMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 查询博客信息 id + viewCount           key value</span></span><br><span class="line">        List&lt;Article&gt; articleList = articleMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//        articleList.forEach(item-&gt;&#123;</span></span><br><span class="line"><span class="comment">//            map.put(String.valueOf(item.getId()),item.getViewCount());</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line">        map = articleList.stream()</span><br><span class="line">                .collect(Collectors.toMap(article -&gt; article.getId().toString(), <span class="comment">// key</span></span><br><span class="line">                        article -&gt; &#123;                                  <span class="comment">// value</span></span><br><span class="line">                            <span class="keyword">return</span> article.getViewCount().intValue();   <span class="comment">// 1L 在redis中要用Integer</span></span><br><span class="line">                        &#125;));</span><br><span class="line">        <span class="comment">// 存储到redis</span></span><br><span class="line">        redisCache.setCacheMap(SystemConstants.ARTICLE_VIEW_COUNT,map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义的Runner实现了<code>CommandLineRunner</code>类,重写run方法,该方法在SpringBoot启动时也会同步执行该任务,这个是SpringBoot提供的简单类</p><p>: 如果在上下文中，存在多个该接口实现类，可以通过@order注解，指定加载顺序</p><p>@Order写在实现类上  例如@Order(value &#x3D; 1)   越前越快执行</p><hr><h3 id="SpringBoot的自动配置"><a href="#SpringBoot的自动配置" class="headerlink" title="SpringBoot的自动配置"></a>SpringBoot的自动配置</h3><h4 id="1、了解注解及一些类"><a href="#1、了解注解及一些类" class="headerlink" title="1、了解注解及一些类"></a>1、了解注解及一些类</h4><h5 id="Configuration结合-Bean"><a href="#Configuration结合-Bean" class="headerlink" title="@Configuration结合@Bean"></a><code>@Configuration结合@Bean</code></h5><p>eg. <code>@Configuration</code>,里面的<code>proxyBeanMethods</code>属性 true : false</p><p>proxyBeanMethods配置类是用来指定@Bean注解标注的方法是否使用代理，<strong>默认是true使用动态代理</strong>，直接从IOC容器之中取得对象；<br>如果设置为false,也就是不使用注解，每次调用@Bean标注的方法获取到的对象和IOC容器中的都不一样，是一个新的对象，所以我们可以将此属性设置为false来<strong>提高性能</strong>,但是不能扩展,例如AOP切面</p><p><strong>优缺点</strong>： 设置true动态代理的可以后期被切面增强，但是启动速度性能慢些，设置false则使用new对象，提高性能但是不能被增强</p><h5 id="EnableAutoConfiguration-xx-class"><a href="#EnableAutoConfiguration-xx-class" class="headerlink" title="@EnableAutoConfiguration(xx.class)"></a><code>@EnableAutoConfiguration(xx.class)</code></h5><p>帮助SpringBoot应用将所有<strong>符合条件</strong>的<code>@Configuration</code>配置都加载到当前SpringBoot，并创建对应<strong>配置类的Bean</strong>，并把该Bean实体交给IoC容器进行管理 </p><p>该注解的功能更强大,<strong>托管配置类并把bean托管</strong>,<strong>可以读取属性文件注入</strong></p><h5 id="ConfigurationProperties-prefix"><a href="#ConfigurationProperties-prefix" class="headerlink" title="@ConfigurationProperties(prefix = &quot;&quot;)"></a><code>@ConfigurationProperties(prefix = &quot;&quot;)</code></h5><p>一次性读取符合前缀的属性配置文件,只能注入属性</p><h5 id="Import"><a href="#Import" class="headerlink" title="@Import"></a><code>@Import</code></h5><ol><li><p>导入外部的class文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Apple.class,Product.class&#125;)</span> <span class="comment">// 导入两个class</span></span><br><span class="line"><span class="comment">// 此时的实例化注入对象,是这种形式的 例如 Apple类原来在外部文件中 org.friut中</span></span><br><span class="line"><span class="comment">// 那么由该方法实例化的对象的id是这样的  &quot;org.friut.Apple&quot; </span></span><br></pre></td></tr></table></figure><p>2.导入一个包的多个类</p></li></ol><p>假如需要导入的类多了,那么则需要使用该方式,我们需要创建一个类实现<code>ImportSelector</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImportList</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;META-INF/&quot;</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> File file = new File(url); // 将所有需要的全类名 封装到一个固定的文件内 在依次读取</span></span><br><span class="line">        <span class="comment">// file.listFile();</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">            <span class="comment">// 把扫描到的文件名添加到此处</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使用<code>@Import(&#123;ImportList.class,Other.class&#125;)</code>导入刚刚的类</p><h5 id="ApplicationContextAware接口在类中注入Spring容器对象"><a href="#ApplicationContextAware接口在类中注入Spring容器对象" class="headerlink" title="ApplicationContextAware接口在类中注入Spring容器对象"></a>ApplicationContextAware接口在类中注入Spring容器对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBeansGetInfoClass</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.context = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 读取beanName</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getSpringBeanInfo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBeanNameInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String name : <span class="built_in">this</span>.context.getBeanDefinitionNames()) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现<code>ApplicationContextAware</code>接口的类必须被Spring所管理</p><p>作用: 换句话说，就是这个类可以直接获取Spring配置文件中，所有有引用到的Bean对象</p></blockquote><h5 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a><code>@Conditional</code></h5><p><strong>条件判断注解</strong></p><p>例如,我需要动态加载Tomcat或Jetty服务器,即 如果容器中有服务器某Bean则加载,当然还要判断是否有多个服务器判断(当前实例未做判断,具体看<a href="#%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AEWebServer%E6%9C%8D%E5%8A%A1">自动配置WebServer服务</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  这个是一个WebServer自动配置类</span></span><br><span class="line"><span class="comment"> *  该案例为动态切换Tomcat和Jetty服务器的实例配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 交给Spring管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebServerAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="comment">// Spring配置文件</span></span><br><span class="line">    <span class="comment">// WebServer自动配置类</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 条件加载,根据TomcatCondition中约束的条件,动态注入Bean</span></span><br><span class="line">    <span class="meta">@Conditional(TomcatCondition.class)</span> </span><br><span class="line">    <span class="keyword">public</span> TomcatWebServer <span class="title function_">tomcatWebServer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TomcatWebServer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional(JettyCondition.class)</span> <span class="comment">// Jetty服务器条件加载判断</span></span><br><span class="line">    <span class="keyword">public</span> JettyWebServer <span class="title function_">jettyWebServer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JettyWebServer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>条件判断类 必须实现Condition接口,重写matches方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TomcatCondition</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断项目中是否有符合条件的依赖</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 利用类加载器,加载需要判断的类</span></span><br><span class="line">  conditionContext.getClassLoader().loadClass(<span class="string">&quot;org.apache.catalina.startup.Tomcat&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">// 能走到这个地方 证明有</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 没有该类</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        // 如果返回true,则符合条件</span></span><br><span class="line"><span class="comment">//        return false;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、自动配置start"><a href="#2、自动配置start" class="headerlink" title="2、自动配置start"></a>2、自动配置start</h4><h5 id="样例一-DataSource"><a href="#样例一-DataSource" class="headerlink" title="样例一: DataSource"></a>样例一: DataSource</h5><p>以读取<code>spring.datasource</code>为例:</p><p>例如我的<code>application.yml</code>如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC&amp;useSSL=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">serialization:</span></span><br><span class="line">      <span class="attr">write-dates-as-timestamps:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>查看源码</p><img src="/2023/10/08/SpringBoot/jdbc.png" class><p>我们简单的查看到,该类里面包含一些通用的数据源属性,并且通过注解<code>@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</code>读取<code>application.yml</code>配置文件设置的值,  <strong>但是注意到,该属性在此处并未在spring容器中注入</strong>,那么spring是如何进行初始化的呢?</p><p>当前是自动装配,那当然是自动装配了,那么是在哪儿自动装配? </p><p>: 在此包中 , 很容易找到一个名为<code>DatasourceAutoConfiguration</code>的类 ,通过类名注意到这很显然是一个<strong>自动装配数据源的类</strong></p><img src="/2023/10/08/SpringBoot/reg_ioc.png" class><p>找到自动配置类, 即 带<code>@EnableConfigurationProperties</code>注解的类, 通过此注解对刚刚已经注入属性的类进行IOC注册, 那么这个就被自动装配了</p><hr><h5 id="样例二-WebServer"><a href="#样例二-WebServer" class="headerlink" title="样例二: WebServer"></a>样例二: WebServer</h5><p>在此处,再举一个例子(<strong>样例二</strong>)如下,例如我需要对服务器的配置 , 比如<code>server.port=9090</code>服务器的端口等 </p><p>步骤一: 对服务器的基础配置进行读取</p><p>文件在<code>org.springframework.boot</code>的 <code>spring-boot-autoconfigure</code>里面的<code>org.springframework.boot.autoconfigure.web.ServerProperties</code></p><p>ServerProperties类 里面同样可以看到注解<code>@ConfigurationProperties</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(</span></span><br><span class="line"><span class="meta">    prefix = &quot;server&quot;, // 读取配置文件属性</span></span><br><span class="line"><span class="meta">    ignoreUnknownFields = true</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line">    <span class="keyword">private</span> InetAddress address;</span><br><span class="line">    <span class="meta">@NestedConfigurationProperty</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ErrorProperties</span> <span class="variable">error</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorProperties</span>();</span><br><span class="line">    <span class="keyword">private</span> ForwardHeadersStrategy forwardHeadersStrategy;</span><br><span class="line">    <span class="keyword">private</span> String serverHeader;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">DataSize</span> <span class="variable">maxHttpHeaderSize</span> <span class="operator">=</span> DataSize.ofKilobytes(<span class="number">8L</span>);</span><br><span class="line">    <span class="keyword">private</span> Shutdown shutdown;</span><br><span class="line">    <span class="meta">@NestedConfigurationProperty</span></span><br><span class="line">    <span class="keyword">private</span> Ssl ssl;</span><br><span class="line">    <span class="meta">@NestedConfigurationProperty</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Compression compression;</span><br><span class="line">    <span class="meta">@NestedConfigurationProperty</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Http2 http2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Servlet servlet;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Reactive reactive;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Tomcat tomcat;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Jetty jetty;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Netty netty;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Undertow undertow;</span><br><span class="line"><span class="comment">// 方法省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤二: 对服务器配置完成的类在IOC容器中进行注册bean</p><p>在当前的package下的</p><p><code>org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration</code></p><p>我们可以看到熟悉的结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfiguration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>  <span class="comment">// 注册ServerProperties配置类</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;ServerProperties.class&#125;)</span> <span class="comment">// 主要注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmbeddedWebServerFactoryCustomizerAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EmbeddedWebServerFactoryCustomizerAutoConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">        proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass(&#123;HttpServer.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">NettyWebServerFactoryCustomizerConfiguration</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">NettyWebServerFactoryCustomizerConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> NettyWebServerFactoryCustomizer <span class="title function_">nettyWebServerFactoryCustomizer</span><span class="params">(Environment environment, ServerProperties serverProperties)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NettyWebServerFactoryCustomizer</span>(environment, serverProperties);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 以下的省略   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="两个样例总结"><a href="#两个样例总结" class="headerlink" title="两个样例总结"></a><strong>两个样例总结</strong></h5><p>从以上步骤可以看出spring-boot-starter的配置流程较简单，简化一下流程即为：</p><p>1.添加<code>@ConfigurationProperties</code>读取application.yml配置文件<br>2.配置<code>@EnableAutoConfiguration</code>注解类，自动扫描package生成所需bean<br>3.添加<strong>spring.factories</strong>配置让spring-boot-autoconfigure对当前项目进行AutoConfiguration</p><h5 id="SpringBoot自动配置"><a href="#SpringBoot自动配置" class="headerlink" title="SpringBoot自动配置"></a>SpringBoot自动配置</h5><p>样例总结 说到读取<strong>spring.factories</strong>,那么springboot底层是如何进行读取,并且自动配置呢?</p><p>首先我们从启动类入口入手,<code>@SpringBootApplication</code> , 追踪发现注解<code>@EnableAutoConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span> <span class="comment">// 自动装配</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = EnableAutoConfiguration.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">// 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开<code>@EnableAutoConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它导入了一个名为<code>AutoConfigurationImportSelector</code>的自动装配类选择器 , 并且追踪, 它实现了DeferredImportSelector 该类为 ImportSelector的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoConfigurationImportSelector</span> <span class="keyword">implements</span> <span class="title class_">DeferredImportSelector</span>, BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AutoConfigurationEntry</span> <span class="variable">EMPTY_ENTRY</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoConfigurationEntry</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] NO_IMPORTS = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> LogFactory.getLog(AutoConfigurationImportSelector.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE</span> <span class="operator">=</span> <span class="string">&quot;spring.autoconfigure.exclude&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> ConfigurableListableBeanFactory beanFactory;</span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line">    <span class="keyword">private</span> ClassLoader beanClassLoader;</span><br><span class="line">    <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line">    <span class="keyword">private</span> ConfigurationClassFilter configurationClassFilter;</span><br><span class="line"><span class="comment">// 此处方法构造器省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ImportSelector类,实现该类重写方法获取需要扫描的包 , 并且返回全类名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line">    <span class="comment">// 重写该方法</span></span><br><span class="line">    String[] selectImports(AnnotationMetadata importingClassMetadata);</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">default</span> Predicate&lt;String&gt; <span class="title function_">getExclusionFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在AutoConfigurationImportSelector中实现了selectImports方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个字符串数组,保存扫描类的路径</span></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> </span><br><span class="line">            <span class="comment">// 通过该方法(getAutoConfigurationEntry)获取自动配置的项</span></span><br><span class="line">            <span class="built_in">this</span>.getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line">        <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getAutoConfigurationEntry方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title function_">getAutoConfigurationEntry</span><span class="params">(AnnotationMetadata annotationMetadata)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">AnnotationAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> <span class="built_in">this</span>.getAttributes(annotationMetadata);</span><br><span class="line">        List&lt;String&gt; configurations = </span><br><span class="line">            <span class="comment">// 获取候选的配置属性  (点进方法)</span></span><br><span class="line">            <span class="built_in">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">        configurations = <span class="built_in">this</span>.removeDuplicates(configurations);</span><br><span class="line">        Set&lt;String&gt; exclusions = <span class="built_in">this</span>.getExclusions(annotationMetadata, attributes);</span><br><span class="line">        <span class="built_in">this</span>.checkExcludedClasses(configurations, exclusions);</span><br><span class="line">        configurations.removeAll(exclusions);</span><br><span class="line">        configurations = <span class="built_in">this</span>.getConfigurationClassFilter().filter(configurations);</span><br><span class="line">        <span class="built_in">this</span>.fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AutoConfigurationEntry</span>(configurations, exclusions);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getCandidateConfigurations方法  获取候选的配置属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> List&lt;String&gt; <span class="title function_">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;</span><br><span class="line">    List&lt;String&gt; configurations = <span class="keyword">new</span> </span><br><span class="line">        <span class="comment">// 加载工厂 bean  -&gt;  loadFactoryNames()</span></span><br><span class="line">        ArrayList(SpringFactoriesLoader.loadFactoryNames(<span class="built_in">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="built_in">this</span>.getBeanClassLoader()));</span><br><span class="line">     <span class="comment">// 读取第二个配置文件 -&gt;  load()</span></span><br><span class="line">    ImportCandidates.load(AutoConfiguration.class, <span class="built_in">this</span>.getBeanClassLoader()).forEach(configurations::add);</span><br><span class="line">    Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories nor in META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很容易发现 , springboot使用spring的类加载器,加载类 , 在断言处,发现不能为空的断言,分析: <strong>没有自动配置类</strong>找到在路径<code>META-INF/spring.factories nor in META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>中,也就是说 读取配置类是读取固定路径(这种机制叫做<strong>SPI</strong>机制),是一种<strong>服务提供发现机制</strong>, 然后读取了两个文件</p><img src="/2023/10/08/SpringBoot/read_Configuration.png" class><blockquote><p>其中这两个文件,包含了大量SpringBoot启动时需要读取的配置类</p></blockquote><p>打开加载工厂bean方法 <code>loadFactoryNames</code> (该方法读取的是第一个配置文件 <code>spring.factories</code>)</p><img src="/2023/10/08/SpringBoot/spring_class_load.png" class><p>通过类加载器,通过文件配置</p><p>读取第二个配置文件 通过  load()方法,点开发现</p><img src="/2023/10/08/SpringBoot/read_Configuration2.png" class><p>通过流的读取,把配置文件按行读取,形成一个数组</p><p>在第二个配置文件中读取到例如<code>org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration</code>的Web服务器类,spring则会去自动读取扫描配置Web服务的配置类并且注入托管,就是前面说到的[Web配置流程](#样例二: WebServer) ,经历 配置文件读取,配置类读取,配置类根据条件注入,bean托管等流程</p><h4 id="SpringBoot-Starter分析及自定义"><a href="#SpringBoot-Starter分析及自定义" class="headerlink" title="SpringBoot Starter分析及自定义"></a>SpringBoot Starter分析及自定义</h4><p>SpringBoot Starter: 启动类   分析starter的启动流程:</p><h5 id="依赖分析-从SpringBoot-starter开始"><a href="#依赖分析-从SpringBoot-starter开始" class="headerlink" title="依赖分析: 从SpringBoot starter开始"></a>依赖分析: 从SpringBoot starter开始</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>追踪发现 包含依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再追踪: 然后发现了有一个依赖是<code>spring-boot-autoconfigure</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自动配置依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开依赖 <code>org.springframework.boot:spring-boot-starter</code></p><p>idea 中的 maven依赖结构如下:</p><blockquote><p>spring-boot-starter</p><p>​META-INF</p><p>​LICENSE.txt</p><p>​MANIFEST.MF</p><p>​NOTICE.txt</p></blockquote><p>所以:其实这个starter最重要的就是<code>pom.xml</code>文件,它引入了<code>autoconfiguration</code>的jar包</p><p>需要打开本地加载的依赖文件才能看到具体的结构</p><p>依赖结构:</p><img src="/2023/10/08/SpringBoot/auto.png" class><p>标准的SpringBoot是将所有的自动配置类都写在了 <code>xxx.factories</code>,但我们自定义的starter是将配置类都写在了<code>spring.factories</code>文件中</p><h5 id="MyBatis-Starter"><a href="#MyBatis-Starter" class="headerlink" title="MyBatis Starter"></a>MyBatis Starter</h5><p>结构如下</p><img src="/2023/10/08/SpringBoot/autoconfig.png" class title="Mybatis自动配置"><p>其中<code>mybatis</code>的<code>spring.factories</code>的内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span></span><br><span class="line"><span class="string">org.mybatis.spring.boot.autoconfigure.MybatisLanguageDriverAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 两个案例总结:</span><br><span class="line"></span><br><span class="line">包含两个模块:</span><br><span class="line"></span><br><span class="line">一个是```starter```,一个是```autoconfiguration```</span><br><span class="line"></span><br><span class="line">其中在starter里面主要就是**引入autoconfiguration** 以及帮我们版本仲裁其它jar包</span><br><span class="line"></span><br><span class="line">在```autoconfiguration```中是**托管配置类** , 比如我当前开发的Jdbc模块:那么我的starter则需要导入一些依赖,**重点是导入我的JdbcAutoConfiguration配置类**,其中它需要读取一些属性配置文件```Properties```,它包含了当前模块的配置属性信息, 位于```META-INF/spring.factories```的配置文件则是SpringBoot会自动读取的配置文件</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"># Auto Configure 使用SpringBoot自动配置类 读取配置类 INF/spring.factories   </span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.hang.myAutoConfiguration.JdbcAutoConfiguration</span><br></pre></td></tr></table></figure><p>其中start中的pom文件<strong>依赖了autoconfiguration</strong>包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- starter只做了这一件事情:</span></span><br><span class="line"><span class="comment">        引入AutoConfiguration配置类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>JdbcAutoConfiguration<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此: 我们只需要在SpringBoot项目中<strong>引入自定义的starter即可</strong></p><h5 id="自定义starter"><a href="#自定义starter" class="headerlink" title="自定义starter"></a>自定义starter</h5><p>以日期格式化DateFormat为例</p><ol><li>定义一个autoconfiguration模块(包含AutoConfiguration和Properties)</li></ol><p>AutoConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;TimeFunction.class&#125;)</span> <span class="comment">// 如果有这个类字节码才加载</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;TimeProperties.class&#125;)</span> <span class="comment">// IOC 属性类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateFormatAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TimeFunction <span class="title function_">timeFunction</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TimeFunction</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;hang.time&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFormat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> format;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFormat</span><span class="params">(String format)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.format = format;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yml配置 (日期格式化自定义)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hang:</span></span><br><span class="line">  <span class="attr">time:</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">yyyy年MM月dd日</span> <span class="string">HH:mm:ss</span></span><br></pre></td></tr></table></figure><p>自定义函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要托管这个类 -&gt; @Bean注解将这个类在@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeFunction</span> &#123; </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TimeProperties timeProperties;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">showTime</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">DateFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(timeProperties.getFormat());</span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> df.format(date);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;欢迎您:&quot;</span> + name + <span class="string">&quot;现在是:&quot;</span> + format;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义一个starter模块</li></ol><p>这个模块主要是引入<strong>autoconfiguration</strong>模块</p><ol start="3"><li>定义spring.factories文件(位于autoconfiguration的<code>resource/META-INF</code>下)</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用SpringBoot自动配置类文件 读取配置类AutoConfiguration</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span></span><br><span class="line">  <span class="string">com.hang.dateFormatAutoConfiguration.DateFormatAutoConfiguration</span></span><br></pre></td></tr></table></figure><blockquote><p>如果不用starter自动配置,手动配置,需要配置属性文件解析Configuration-processor依赖</p><p>配置文件类通过@ConfigurationProperties(profix&#x3D;””)读取配置文件</p><p>通过@Component注入spring,方法等用@Bean注入</p></blockquote><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a><code>@ComponentScan</code></h4><h5 id="排除过滤器"><a href="#排除过滤器" class="headerlink" title="排除过滤器"></a>排除过滤器</h5><h6 id="AutoConfigurationExcludeFilter"><a href="#AutoConfigurationExcludeFilter" class="headerlink" title="AutoConfigurationExcludeFilter"></a>AutoConfigurationExcludeFilter</h6><p>对于里面的过滤器分析:(案例)</p><p> 如果排除中有一个符合条件,  则排除扫描排除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">        @ComponentScan.Filter(</span></span><br><span class="line"><span class="meta">                type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">                classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">        ),@ComponentScan.Filter(</span></span><br><span class="line"><span class="meta">                type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">        classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><p>例如我有一个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span>()&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OrderService <span class="title function_">orderService</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderService</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如我在 resource下的META_INF下面的spring.factories中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.hang.AppConfig</span><br></pre></td></tr></table></figure><p>众所周知,  在这个文件下配置了扫描路径也会被解析,  那么则会<strong>被解析两次</strong>.</p><p>如果配置了此项, 则只会被解析一次</p><h6 id="TypeExcludeFilter"><a href="#TypeExcludeFilter" class="headerlink" title="TypeExcludeFilter"></a>TypeExcludeFilter</h6><p>配置此项需要单独定义一个排除过滤器,  继承自 TypeExcludeFilter,  重写match方法</p><p>例如我需要排除我的UserService</p><p>则通过重写类形参中的MetadataReader获取类信息然后判断即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HangTypeExcludeFilter</span> <span class="keyword">extends</span> <span class="title class_">TypeExcludeFilter</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">match</span><span class="params">(MetadataReader metadataReader,  MetadataReaderFactory metadataReaderFactory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> metadataReader.getClassMetadata().getClassName()</span><br><span class="line">            .equals(UserService.class.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>光配置了此项还不够,  因为在执行当前方法过滤时,  并不知道容器中有没有扫描到或者注册bean(大概),  从而导致已经开始过滤,  然后导致失效</p><p>我们在扫描之间就得放置一些bean, 该怎么做呢?</p><p>在spring.factories中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 初始化器在创建容器对象后,扫描前执行</span><br><span class="line">+ # Initializersa</span><br><span class="line">+ org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">+ com.hang.ApplicationContextInitializer</span><br><span class="line"></span><br><span class="line"># Auto Configure   # -&gt; 刚刚在上一个案例写的</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.hang.AppConfig</span><br></pre></td></tr></table></figure><p>自定义一个初始化器</p><p>HangApplicationContextInitializer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HangApplicationContextInitializer</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextInitializer</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span>&#123;</span><br><span class="line">        <span class="comment">// 添加一个单例bean(排除过滤器)</span></span><br><span class="line">        applicationContext.getBeanFactory()</span><br><span class="line">            .regiseterSingleton(<span class="string">&quot;HangTypeExcludeFilter&quot;</span>,<span class="keyword">new</span> <span class="title class_">HangTypeExcludeFilter</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时则刚刚写的HangTypeExcludeFilter 中的 match匹配过滤则会生效了</p><h3 id="SpringBoot-Session整合Redis"><a href="#SpringBoot-Session整合Redis" class="headerlink" title="SpringBoot Session整合Redis"></a>SpringBoot Session整合Redis</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--springboot整合redis session--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改Session未同步问题"><a href="#修改Session未同步问题" class="headerlink" title="修改Session未同步问题"></a>修改Session未同步问题</h4><div class="checkbox checked"><input type="checkbox" checked="checked">            <p>当前问题仅仅适用于当前案例情况</p>            </div><p>在Session未整合Redis之前,  对数据的操作为<wavy>引用数据类型</wavy>,  即修改已存在的session值,  自动同步</p><details class="folding-tag" green><summary> 案例代码 </summary>              <div class="content">              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  添加购物车</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/addCart&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">addCart</span><span class="params">(<span class="meta">@RequestParam(&quot;fid&quot;)</span> Integer fid,</span></span><br><span class="line"><span class="params">                      <span class="meta">@RequestParam(&quot;num&quot;)</span> Integer num,</span></span><br><span class="line"><span class="params">                      HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// 根据fid去查商品</span></span><br><span class="line">    <span class="type">Resfood</span> <span class="variable">food</span> <span class="operator">=</span> resfoodService.getById(fid);</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(food)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;没有此商品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从session去Cart(map)</span></span><br><span class="line">    Map&lt;Integer, CartItem&gt; cart = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (Objects.nonNull(session.getAttribute(<span class="string">&quot;cart&quot;</span>))) &#123;</span><br><span class="line">        cart = (Map&lt;Integer, CartItem&gt;) session.getAttribute(<span class="string">&quot;cart&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;cart&quot;</span>, cart);</span><br><span class="line">    &#125;</span><br><span class="line">    CartItem cartItem;</span><br><span class="line">    <span class="comment">// 判断这个视频在map是否有</span></span><br><span class="line">    <span class="keyword">if</span> (cart.containsKey(fid)) &#123;</span><br><span class="line">        cartItem = cart.get(fid);</span><br><span class="line">        cartItem.setNum(cartItem.getNum() + <span class="number">1</span>);</span><br><span class="line">        cart.put(fid, cartItem);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cartItem = <span class="keyword">new</span> <span class="title class_">CartItem</span>();</span><br><span class="line">        cartItem.setNum(num);</span><br><span class="line">        cartItem.setResfood(food);</span><br><span class="line">        cart.put(fid, cartItem);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理数量</span></span><br><span class="line">    <span class="keyword">if</span> (cartItem.getNum() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        cart.remove(fid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 问题出现处: 原代码没有加这个</span></span><br><span class="line">+   session.setAttribute(<span class="string">&quot;cart&quot;</span>, cart);</span><br><span class="line">    <span class="comment">// 成功</span></span><br><span class="line">    <span class="keyword">return</span> Result.*ok*(cart.values());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>样例中第37行处,  在没有把Session添加到Redis中前,  用户在对session的值修改后, tomcat自动同步更新session的数据,  即添加购物车不会出现 <span class="p red">数量限制问题</span></p><p>但是将Session添加到Spring session data redis中的时候,  从一开始的引用类型变成了类似于值引用类型了,  即引用redis里面的session值,  并不会进行同步修改</p><p>经查源码:  在Spring整合Redis Session时采用了 <span class="p red">事件监听</span> 的方式,  即需要再次重复设置session的操作<psw>session.setAttribute()</psw>,  Redis中的Session才会同步修改</p><h3 id="SpringBoot-Mockito测试"><a href="#SpringBoot-Mockito测试" class="headerlink" title="SpringBoot Mockito测试"></a>SpringBoot Mockito测试</h3><h4 id="案例-Controller层"><a href="#案例-Controller层" class="headerlink" title="案例 Controller层"></a>案例 Controller层</h4><p>当前测试环境:JDK8 , SpringBoot2.7.3  , Junit4, MyBatis-Plus3.x</p><p>首先第一步先创建一个简单的MVC框架的测试用例,我们在Controller中右键Go to创建测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getById&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUserInfoById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.saveUserInfo(user)</span><br><span class="line">                ? <span class="string">&quot;保存成功&quot;</span> : <span class="string">&quot;保存失败&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span> <span class="comment">// Junit4</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = &#123;MockApplication.class&#125;,</span></span><br><span class="line"><span class="meta">// 在每一次进行mock测试时 启用随机端口启动 为例避免多个测试用例同时启动时不会产生端口占用问题</span></span><br><span class="line"><span class="meta">        webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="comment">// 自动配置和启用MockMvc配置  如果不加这个注解 下面是不能注入的</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc(addFilters = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserControllerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 预期对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;w&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;悟空&quot;</span>,</span><br><span class="line">                <span class="string">&quot;song@foxmail.com&quot;</span>, <span class="string">&quot;13283718600&quot;</span>, <span class="string">&quot;男&quot;</span>,</span><br><span class="line">                <span class="number">1</span>, <span class="literal">null</span>, <span class="string">&quot;天子脚下&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用注入的mockMvc模拟发送请求</span></span><br><span class="line">        <span class="comment">// MockMvcRequestBuilders: 请求构建器</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 在请求后面还可以指定请求类型 例如APPLICATION_JSON_VALUE</span></span><br><span class="line">            mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">&quot;/user/getById&quot;</span>)</span><br><span class="line">                            .contentType(MediaType.APPLICATION_JSON_VALUE)</span><br><span class="line">                            <span class="comment">// 这里还能设置header</span></span><br><span class="line">                            .param(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">                    )</span><br><span class="line">                    <span class="comment">// MockMvcResultMatchers: mockMvc结果匹配器</span></span><br><span class="line">                    .andExpect(MockMvcResultMatchers.status().isOk()) <span class="comment">// 例如当前为 匹配状态码为200或者其他可以表示成功的</span></span><br><span class="line">                    <span class="comment">// 这个是用于取返回body的  $.name代表取body里面的name字段 假如还有</span></span><br><span class="line">                    .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">&quot;$.name&quot;</span>, Matchers.equalToIgnoringCase(user.getName())))</span><br><span class="line">                    <span class="comment">// 如果状态码符合预期 则进行print输出响应信息</span></span><br><span class="line">                    .andDo(MockMvcResultHandlers.print())</span><br><span class="line">                    <span class="comment">// 真正请求得到响应的内容,真正执行的返回值</span></span><br><span class="line">                    .andReturn();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;当前方法为:&#123;&#125;,发生了异常&quot;</span>, <span class="string">&quot;getById&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在当前测试用例中</p><ol><li><p>注意到<code>@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</code>,其中它代表 :<strong>在每一次进行mock测试时 启用随机端口启动 为例避免多个测试用例同时启动时不会产生端口占用问题</strong></p></li><li><p><code>@AutoConfigureMockMvc(addFilters = false)</code> : 这个用于<strong>自动配置和启用MockMvc配置</strong></p></li><li><p>注入mockMvc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MockMvc mockMvc;</span><br></pre></td></tr></table></figure></li><li><p>在mockMvc实例中,使用<code>perform</code>执行一个HTTP请求, 入口参数为RequestBuilder，输出结果为ResultAction</p></li><li><p>在<code>perform中</code>,使用<code>MockMvcRequestBuilders</code>请求构建器构造请求, 可以使用get或者post请求,在get或post里面写入请求路径,在后面还可以加请求内容类型<code>contentType(MediaType.APPLICATION_JSON_VALUE)</code>,其中还能像SpringMVC一样设置其他的比如header,param</p></li><li><p><code>andExpect</code>期望, 使用<code>MockMvcResultMatchers</code> :mockMvc结果匹配器断言, 在我的测试用例中,使用了两个匹配断言 </p><p>6.1 、<code>.andExpect(MockMvcResultMatchers.status().isOk())</code>: 用于匹配返回状态码是否为ok,其中一般指200</p><p>6.2、<code>.andExpect(MockMvcResultMatchers.jsonPath(&quot;$.name&quot;, Matchers.equalToIgnoringCase(user.getName())))</code>,其中user为<strong>自定义的期望对象</strong>, 对于<code>jsonPath</code>对象,一般用于取返回的Body对象, 对于当前返回的结果如下 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MockHttpServletResponse:</span><br><span class="line">           Status = <span class="number">200</span></span><br><span class="line">    <span class="type">Error</span> <span class="variable">message</span> <span class="operator">=</span> <span class="type">null</span></span><br><span class="line">          <span class="variable">Headers</span> <span class="operator">=</span> [Content-Type:<span class="string">&quot;application/json&quot;</span>]</span><br><span class="line">     <span class="type">Content</span> <span class="variable">type</span> <span class="operator">=</span> application/<span class="type">json</span></span><br><span class="line">             <span class="variable">Body</span> <span class="operator">=</span> &#123;<span class="string">&quot;uid&quot;</span>:<span class="number">1</span>,<span class="string">&quot;username&quot;</span>:<span class="string">&quot;w&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;a&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;悟空&quot;</span>,<span class="string">&quot;email&quot;</span>:<span class="string">&quot;song@foxmail.com&quot;</span>,<span class="string">&quot;phone&quot;</span>:<span class="string">&quot;13283718600&quot;</span>,<span class="string">&quot;sex&quot;</span>:<span class="string">&quot;男&quot;</span>,<span class="string">&quot;state&quot;</span>:<span class="number">1</span>,<span class="string">&quot;code&quot;</span>:<span class="literal">null</span>,<span class="string">&quot;addr&quot;</span>:<span class="string">&quot;天子脚下&quot;</span>&#125;</span><br><span class="line">    <span class="type">Forwarded</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="literal">null</span></span><br><span class="line">   <span class="type">Redirected</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="type">null</span></span><br><span class="line">          <span class="variable">Cookies</span> <span class="operator">=</span> []</span><br></pre></td></tr></table></figure><p>假如Body中的json数据有嵌套,同样也是使用如: <code>$.games[0].name</code> 取game[0]对象的name属性</p></li><li><p><code>.andDo(MockMvcResultHandlers.print())</code></p></li></ol><p>如果符合预期结果 则进行print输出响应详细的信息:包括请求头,请求体等常见的字段,比如还有ModelAndView,Response</p><ol start="8"><li><code>.andReturn();</code></li></ol><p>真正请求得到响应的内容,真正执行的返回值,返回值可以new一个<code>MockMvc</code>对象返回</p><ol start="9"><li>其中还包括一些其他的函数,详情见 <a href="https://docs.spring.io/spring-framework/reference/testing/spring-mvc-test-framework.html">SpringBoot Test Doc</a> 文档</li></ol><p>如果使用这种方式发生注入错误,找不到一个Bean为MockMvc的,那么使用下面这种方案注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = &#123;MockApplication.class&#125;,</span></span><br><span class="line"><span class="meta">// 在每一次进行mock测试时 启用随机端口启动 为例避免多个测试用例同时启动时不会产生端口占用问题</span></span><br><span class="line"><span class="meta">        webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="comment">// 自动配置和启用MockMvc配置  如果不加这个注解 下面是不能注入的</span></span><br><span class="line"><span class="comment">//@AutoConfigureMockMvc(addFilters = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserControllerTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebApplicationContext webApplicationContext;</span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;文本响应测试用例&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 测试代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>注意到首先注入了<code>WebApplicationContext</code>对象,然后有一个没有初始化的MockMvc实例</li><li><code>@Before</code>注解: 在每一个测试用例之前调用,每一次都会使用 MockMvcBuilders对<code>webApplicationContext</code>进行构建,从而得到一个<strong>实例对象mockMvc</strong></li><li><code>@DisplayName(&quot;文本响应测试用例&quot;)</code>注解: 作用如图例</li></ol><img src="/2023/10/08/SpringBoot/mock1.png" class><blockquote><p> 注入方式一: 自动配置在<code>org.springframework.boot:spring-boot-test-autoconfiguration</code>下的<code>web.servlet.MockMvcAutoConfiguration</code>配置类,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用以下示例进行注入</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> WebApplicationContext webApplicationContext;</span><br><span class="line"><span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">    mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入方式二: 自动配置在<code>org.springframework.boot:spring-boot-test-autoconfiguration</code>下的<code>web.servlet.AutoConfigurationMockMvc</code>注解类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 在当前测试类上加注解 </span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc(addFilters = false)</span></span><br><span class="line"><span class="comment">// 2. AutoWired注入MockMvc</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MockMvc mockMvc;</span><br></pre></td></tr></table></figure></blockquote><p>对于Get请求 示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在请求后面还可以指定请求类型 例如APPLICATION_JSON_VALUE</span></span><br><span class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">&quot;/user/getById&quot;</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON_VALUE)</span><br><span class="line">                .param(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">               )</span><br><span class="line">    <span class="comment">// MockMvcResultMatchers: mockMvc结果匹配器</span></span><br><span class="line">    .andExpect(MockMvcResultMatchers.status().isOk()) <span class="comment">// 例如当前为 匹配状态码为200或者其他可以表示成功的</span></span><br><span class="line">    <span class="comment">// 这个是用于取返回body的</span></span><br><span class="line">    .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">&quot;$.name&quot;</span>, Matchers.equalToIgnoringCase(user.getName())))</span><br><span class="line">    <span class="comment">// 如果状态码符合预期 则进行print输出响应信息</span></span><br><span class="line">    .andDo(print())</span><br><span class="line">    <span class="comment">// 真正请求得到响应的内容,真正执行的返回值</span></span><br><span class="line">    .andReturn();</span><br></pre></td></tr></table></figure><p>对于Post请求 示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSON 格式 -&gt; content</span></span><br><span class="line">mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">&quot;/user/save&quot;</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                .content(<span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                         <span class="string">&quot;  \&quot;uid\&quot;: \&quot;1\&quot;,\n&quot;</span> +</span><br><span class="line">                         <span class="string">&quot;  \&quot;username\&quot;: \&quot;w\&quot;&quot;</span> +</span><br><span class="line">                         <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">                <span class="comment">// MockMvcResultMatchers: mockMvc结果匹配器</span></span><br><span class="line">                .accept(MediaType.APPLICATION_JSON))</span><br><span class="line">    .andDo(print());</span><br><span class="line"><span class="comment">// From 格式 -&gt; param</span></span><br><span class="line">mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">&quot;/user/save&quot;</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_FORM_URLENCODED)</span><br><span class="line">                .param(<span class="string">&quot;uid&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">                .param(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON))</span><br><span class="line">    .andDo(print());</span><br></pre></td></tr></table></figure><h4 id="案例-Service层"><a href="#案例-Service层" class="headerlink" title="案例 Service层"></a>案例 Service层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = &#123;MockApplication.class&#125;,</span></span><br><span class="line"><span class="meta">// 在每一次进行mock测试时 启用随机端口启动 为例避免多个测试用例同时启动时不会产生端口占用问题</span></span><br><span class="line"><span class="meta">        webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MockBean</span> <span class="comment">// 模拟Bean:Mockito 会帮我们创建一个假的 Mock 对象，替换掉 Spring 中已存在的那个真实的 userDao Bean</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试没有dao数据访问层&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEmptyMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">expectUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;测试没有dao数据访问层&quot;</span>, <span class="string">&quot;11&quot;</span>, <span class="string">&quot;测试没有dao数据访问层&quot;</span>,<span class="string">&quot;song@foxmail.com&quot;</span>, <span class="string">&quot;13283718600&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">1</span>, <span class="literal">null</span>, <span class="string">&quot;天子脚下&quot;</span>);</span><br><span class="line">        <span class="comment">// Mockito.when( 对象.方法名() ).thenReturn( 自定义结果 )</span></span><br><span class="line">        Mockito.when(userMapper.selectById(<span class="number">1</span>))</span><br><span class="line">                .thenReturn(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;测试没有dao数据访问层&quot;</span>, <span class="string">&quot;11&quot;</span>, <span class="string">&quot;测试没有dao数据访问层&quot;</span>,<span class="string">&quot;song@foxmail.com&quot;</span>, <span class="string">&quot;13283718600&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">1</span>, <span class="literal">null</span>, <span class="string">&quot;天子脚下&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUserInfoById(<span class="number">1</span>); <span class="comment">// 访问模拟的Dao</span></span><br><span class="line">        Assert.assertEquals(expectUser,user);       <span class="comment">// 断言正确</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试Service&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Mockito.when( 对象.方法名() ).thenReturn( 自定义结果 )</span></span><br><span class="line">        Mockito.when(userService.getUserInfoById(<span class="number">1</span>))</span><br><span class="line">                .thenReturn(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;测试Service&quot;</span>, <span class="string">&quot;11&quot;</span>, <span class="string">&quot;测试没有dao数据访问层&quot;</span>,<span class="string">&quot;song@foxmail.com&quot;</span>, <span class="string">&quot;13283718600&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">1</span>, <span class="literal">null</span>, <span class="string">&quot;天子脚下&quot;</span>));</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUserInfoById(<span class="number">1</span>);</span><br><span class="line">        log.info(user.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.<code>@MockBean</code>: 模拟Bean:Mockito 会帮我们创建一个假的 Mock 对象，替换掉 Spring 中已存在的那个真实的 userDao Bean</p><p>2.<code>when</code>: 模拟引导访问的 <strong>对象.方法名()</strong></p><p>3.<code>thenReturn</code>: 引导访问的返回结果 </p><p>当前样例1: <code>Mockito.anyInt()</code>,任意的Int类型值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Mockito.when(userService.getUserById(Mockito.anyInt()))</span><br><span class="line">       .thenReturn(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>, <span class="string">&quot;Calyee&quot;</span>));</span><br><span class="line"><span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> userService.getUserById(<span class="number">3</span>); <span class="comment">// 回传的user的名字为Calyee</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> userService.getUserById(<span class="number">200</span>); <span class="comment">// 回传的user的名字也为Calyee</span></span><br></pre></td></tr></table></figure><p>当前样例2:  <strong>指定的值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mockito.when(userService.getUserById(<span class="number">3</span>)).thenReturn(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>, <span class="string">&quot;Calyee&quot;</span>));</span><br><span class="line"><span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> userService.getUserById(<span class="number">3</span>); <span class="comment">// 回传的user的名字为Calyee -&gt; 为预设期盼</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> userService.getUserById(<span class="number">200</span>); <span class="comment">// 回传的user为null</span></span><br></pre></td></tr></table></figure><p>当前样例3:  当调用Insert的时候<strong>不论传入的User字节码对象</strong>是谁,都返回100</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mockito.when(userService.insertUser(Mockito.any(User.class))).thenReturn(<span class="number">100</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> userService.insertUser(<span class="keyword">new</span> <span class="title class_">User</span>()); <span class="comment">//会返回100</span></span><br></pre></td></tr></table></figure><p>其他注解:</p><p>4.<code>thenThrow</code>: 当请求方法传入的值为1时,抛出一个RuntimeException (<strong>适用于 有出参的方法</strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mockito.when(userService.getUserById(<span class="number">1</span>))</span><br><span class="line">       .thenThrow(<span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;mock throw exception&quot;</span>));</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUserById(<span class="number">1</span>); <span class="comment">//会抛出一个RuntimeException</span></span><br></pre></td></tr></table></figure><p>5.<code>doThrow</code> 如果方法没有返回值的话（即是方法定义为 public void myMethod() {…}），要改用 doThrow() 抛出 Exception, doThrow ( <strong>适用于 没有出参的方法</strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mockito.doThrow(<span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;mock throw exception&quot;</span>))</span><br><span class="line">       .when(userService).print();</span><br><span class="line">userService.print(); <span class="comment">//会抛出一个RuntimeException</span></span><br></pre></td></tr></table></figure><h2 id="简单模拟SpringBoot"><a href="#简单模拟SpringBoot" class="headerlink" title="简单模拟SpringBoot"></a>简单模拟SpringBoot</h2><h3 id="初始化Spring项目"><a href="#初始化Spring项目" class="headerlink" title="初始化Spring项目"></a>初始化Spring项目</h3><p>1.创建maven工程,建两个<code>Module</code></p><img src="/2023/10/08/SpringBoot/create_module.png" class><ol><li>springboot模块，表示springboot框架的源码实现</li><li>user包，表示用户业务系统，用来写业务代码来测试我们所模拟出来的SpringBoot</li></ol><p>2.其中SpringBoot也是依赖于Spring,我们需要处理请求,故需要导入SpringMVC,当然还有Tomcat等依赖</p><p>导入依赖 (其中Java JDK版本为1.8)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.65<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在User测试模块中引入刚刚创建的SpringBoot模块(这个是另外一个模块的)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在User模块中创建一个标准的测试结构</p><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello My SpringBoot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="核心注解与核心类"><a href="#核心注解与核心类" class="headerlink" title="核心注解与核心类"></a><strong>核心注解与核心类</strong></h4><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MyApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 自定义SpringBoot</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> QiuLiHang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@HangSpringBootApplication</span> <span class="comment">// 该注解里面包含了ComponentScan注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HangSpringApplication.run(MyApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在springboot模块中创建</p><p>启动类标记注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>  <span class="comment">// 默认扫描当前解析类的包路径,传给run方法的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> HangSpringBootApplication &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动SpringBoot应用的启动类 -&gt; run()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HangSpringApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Class clazz)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="run方法"><a href="#run方法" class="headerlink" title="run方法"></a>run方法</h4><p>首先我们需要的是,启动类执行完成,就可以像原生SpringBoot一样在浏览器上可以访问到<code>localhost:8081/test</code> 方法</p><p>那么此时肯定要<strong>启动Tomcat容器</strong>,要想处理请求,在Spring容器中添加创建的<code>DispatcherServlet</code>对象添加到Tomcat里面,最后启动Tomcat</p><h4 id="创建Spring容器"><a href="#创建Spring容器" class="headerlink" title="创建Spring容器"></a>创建Spring容器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HangSpringApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Class clazz)</span>&#123;</span><br><span class="line">         <span class="comment">// 创建Spring容器</span></span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        <span class="comment">// 注册: clazz -&gt; Spring容器的配置类</span></span><br><span class="line">        applicationContext.register(clazz);</span><br><span class="line">        <span class="comment">// 刷新容器,加载被扫描的bean</span></span><br><span class="line">        applicationContext.refresh();</span><br><span class="line">        <span class="comment">// 启动Tomcat (此处未实现启动其他服务器)</span></span><br><span class="line">        startTomcat(applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>AnnotationConfigWebApplicationContext</code>创建的容器,把传入的clazz作为容器的配置类, 比如此时我传入的是<code>MyApplication.class</code>类,当前类作为配置类,由于当前类头上带有我们刚刚<strong>自定义的启动类注解</strong><code>@HangSpringBootApplication</code>, 其中当前注解内部带有<strong>扫描注解</strong><code> @ComponentScan</code> 那么将会自动默认扫描<strong>当前解析类的包路径(传入run方法的类包路径)</strong>,假如设置了明示了扫描路径,则扫描自定义路径, 那么则会扫描到我们的<code>UserService 和 UserController</code> , 然后添加到Spring容器里面</p><p>一般情况 我们会<strong>直接把启动类当成配置类</strong></p><p>而不会进行如下操作: 在其他类中创建启动类,然后在main方法(<strong>不是启动类了,没有带启动类标识注解</strong>)中进行<code>HangSpringApplication.run(MyApplication.class)</code>操作 <strong>(启动类标识@HangSpringBootApplication当前标明在MyApplication类上)</strong></p><h4 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h4><p>对于SpringBoot,它使用的是内嵌Tomcat方式,对于内嵌Tomcat,我们需要进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">startTomcat</span><span class="params">(WebApplicationContext applicationContext)</span>&#123;</span><br><span class="line"><span class="comment">// 启动 Tomcat</span></span><br><span class="line">        <span class="type">Tomcat</span> <span class="variable">tomcat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tomcat</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> tomcat.getServer();</span><br><span class="line">        <span class="type">Service</span> <span class="variable">service</span> <span class="operator">=</span> server.findService(<span class="string">&quot;Tomcat&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connector</span> <span class="variable">connector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Connector</span>();</span><br><span class="line">        connector.setPort(<span class="number">8081</span>); <span class="comment">// 连接端口</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Engine</span> <span class="variable">engine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEngine</span>();</span><br><span class="line">        engine.setDefaultHost(<span class="string">&quot;localhost&quot;</span>);<span class="comment">// 本地测试</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardHost</span>();</span><br><span class="line">        host.setName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardContext</span>();</span><br><span class="line">        context.setPath(contextPath);</span><br><span class="line">        context.addLifecycleListener(<span class="keyword">new</span> <span class="title class_">Tomcat</span>.FixContextListener());</span><br><span class="line"></span><br><span class="line">        host.addChild(context);</span><br><span class="line">        engine.addChild(host);</span><br><span class="line"></span><br><span class="line">        service.setContainer(engine);</span><br><span class="line">        service.addConnector(connector);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// SpringMVC 处理请求  注册DispatcherServlet</span></span><br><span class="line">        tomcat.addServlet(contextPath, <span class="string">&quot;dispatcher&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DispatcherServlet</span>(applicationContext));<span class="comment">// 传入Spring容器</span></span><br><span class="line">        context.addServletMappingDecoded(<span class="string">&quot;/*&quot;</span>, <span class="string">&quot;dispatcher&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            tomcat.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>此时就能启动Tomcat了,可以正常启动了,其中控制台会输出tomcat启动情况,例如刚刚设置的8081端口</p><p> 浏览器访问<code>localhost:8081/test</code>,结果返回了<code>&quot;Hello My SpringBoot!&quot;</code></p><h4 id="修改其他的服务器"><a href="#修改其他的服务器" class="headerlink" title="修改其他的服务器"></a>修改其他的服务器</h4><p>1.在springboot中创建一个抽象方法为:<code>WebServer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对自定义服务器调用 实现抽象化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WebServer</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务启动抽象接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(WebApplicationContext applicationContext)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.定义其他服务器接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> TomcatWebServer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Tomcat服务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> QiuLiHang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TomcatWebServer</span> <span class="keyword">implements</span> <span class="title class_">WebServer</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *Tomcat服务启动类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(WebApplicationContext applicationContext)</span> &#123;</span><br><span class="line">        <span class="type">Tomcat</span> <span class="variable">tomcat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tomcat</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> tomcat.getServer();</span><br><span class="line">        <span class="type">Service</span> <span class="variable">service</span> <span class="operator">=</span> server.findService(<span class="string">&quot;Tomcat&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connector</span> <span class="variable">connector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Connector</span>();</span><br><span class="line">        connector.setPort(<span class="number">8081</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Engine</span> <span class="variable">engine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEngine</span>();</span><br><span class="line">        engine.setDefaultHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardHost</span>();</span><br><span class="line">        host.setName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardContext</span>();</span><br><span class="line">        context.setPath(contextPath);</span><br><span class="line">        context.addLifecycleListener(<span class="keyword">new</span> <span class="title class_">Tomcat</span>.FixContextListener());</span><br><span class="line"></span><br><span class="line">        host.addChild(context);</span><br><span class="line">        engine.addChild(host);</span><br><span class="line"></span><br><span class="line">        service.setContainer(engine);</span><br><span class="line">        service.addConnector(connector);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// SpringMVC 处理请求</span></span><br><span class="line">        tomcat.addServlet(contextPath, <span class="string">&quot;dispatcher&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DispatcherServlet</span>(applicationContext));<span class="comment">// 传入Spring容器</span></span><br><span class="line">        context.addServletMappingDecoded(<span class="string">&quot;/*&quot;</span>, <span class="string">&quot;dispatcher&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            tomcat.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> JettyWebServer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Jetty服务启动类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> QiuLiHang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JettyWebServer</span> <span class="keyword">implements</span> <span class="title class_">WebServer</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(WebApplicationContext applicationContext)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;启动jetty&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上添加了两个示例服务实现类</p><p>再次修改run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HangSpringApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Class clazz)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建Spring容器</span></span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        <span class="comment">// 注册: clazz -&gt; Spring容器的配置类</span></span><br><span class="line">        applicationContext.register(clazz);</span><br><span class="line">        <span class="comment">// 刷新容器,加载被扫描的bean</span></span><br><span class="line">        applicationContext.refresh();</span><br><span class="line">        <span class="comment">// 启动Tomcat  -&gt; 当前方法只能启动tomcat</span></span><br><span class="line">        <span class="comment">// startTomcat(applicationContext); // 原方法</span></span><br><span class="line">        <span class="comment">// 那么如何优雅的启动自定义的服务器呢? 即pom中导入的服务器</span></span><br><span class="line">        <span class="comment">// 1. 获取WebServer类 (多态)</span></span><br><span class="line">        <span class="type">WebServer</span> <span class="variable">webServer</span> <span class="operator">=</span> getWebServer(applicationContext);</span><br><span class="line">        <span class="comment">// 2. 调用子类启动服务</span></span><br><span class="line">        webServer.start(applicationContext);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   获取Spring容器中的WebServer对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> WebServer <span class="title function_">getWebServer</span><span class="params">(WebApplicationContext webApplicationContext)</span> &#123;</span><br><span class="line">        <span class="comment">// key为beanName,value为Bean对象</span></span><br><span class="line">        Map&lt;String,WebServer&gt; webServers =</span><br><span class="line">                webApplicationContext.getBeansOfType(WebServer.class);<span class="comment">// 获取WebServer类型的对象</span></span><br><span class="line">        <span class="comment">// 限制Spring容器中的WebServer对象</span></span><br><span class="line">        <span class="comment">// 1.不能为空</span></span><br><span class="line">        <span class="keyword">if</span>(webServers.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.只能存在一个</span></span><br><span class="line">        <span class="keyword">if</span>(webServers.size() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回唯一的一个</span></span><br><span class="line">        <span class="keyword">return</span> webServers.values().stream().findFirst().get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时,在启动类中添加一个Tomcat 的Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HangSpringBootApplication</span> <span class="comment">// 该注解里面包含了ComponentScan注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Spring配置类中配置的bean</span></span><br><span class="line">    <span class="comment">// 会被加入到SpringIOC容器里面,在后面启动WebServer的时候 会被扫描到</span></span><br><span class="line">    <span class="comment">// 然后通过多态 启动子类实现的服务接口</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TomcatWebServer <span class="title function_">tomcatWebServer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TomcatWebServer</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HangSpringApplication.run(MyApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前情况启动结果如下</p><img src="/2023/10/08/SpringBoot/tomcat_bean.png" class><p>当然,自己在启动类中配置服务器的bean,显然耦合度太高了,至此我们需要引入新的方案</p><h5 id="自动配置WebServer服务"><a href="#自动配置WebServer服务" class="headerlink" title="自动配置WebServer服务"></a><strong>自动配置WebServer服务</strong></h5><p>首先在springboot模块中添加<code>WebServerAutoConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> WebServerAutoConfiguration</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> WebServer自动配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> QiuLiHang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 交给Spring管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebServerAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="comment">// Spring配置文件</span></span><br><span class="line">    <span class="comment">// WebServer自动配置类</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional(TomcatCondition.class)</span></span><br><span class="line">    <span class="keyword">public</span> TomcatWebServer <span class="title function_">tomcatWebServer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TomcatWebServer</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional(JettyCondition.class)</span></span><br><span class="line">    <span class="keyword">public</span> JettyWebServer <span class="title function_">jettyWebServer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JettyWebServer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中发现有一个注解为 <code>@Conditional(TomcatCondition.class)</code></p><p>该注解,当该Condition.class判断返回的boolean结果,作为是否执行该方法的条件,如果返回true则该注解修饰的该方法可执行</p><p>其中<code>TomcatCondition</code>类需要自定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TomcatCondition</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断项目中是否有符合条件的依赖</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 利用类加载器,加载需要判断的类</span></span><br><span class="line">  conditionContext.getClassLoader().loadClass(<span class="string">&quot;org.apache.catalina.startup.Tomcat&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">// 能走到这个地方 证明有</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 没有该类</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        // 如果返回true,则符合条件</span></span><br><span class="line"><span class="comment">//        return false;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>走到这了, 上面的目标就是,检查当前依赖是否包含修饰的依赖项, 实现自动判断</p><p>现在还会出现问题, 就是 不能像SpringBoot一样,默认Tomcat, 排除其他的服务器依赖给子项目, 此时要在父项目中的pom.xml中设置<code>&lt;optional&gt;true&lt;/optional&gt;</code>属性: 该依赖在<strong>项目之间依赖不传递</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.65<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.4.14.v20181114<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">          加了这个设置,禁止依赖传递,即传给子类</span></span><br><span class="line"><span class="comment">          (因为SpringBoot也是默认传递Tomcat而不传递jetty等其他)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时, 如果在子模块中想切换<code>jetty</code> ,在依赖父项目处使用<code>exclusion</code>排除父项目传递的依赖, 再添加其他依赖, 示例如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--排除tomcat--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--切换为jetty--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.4.14.v20181114<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="模拟条件注解"><a href="#模拟条件注解" class="headerlink" title="模拟条件注解"></a>模拟条件注解</h4><p>在上面的模拟方案,  基于两个服务器的选择从而定义了两个Condition类: 1.TomcatCondition  2.JettyCondition</p><p>大胆想象,  加入有很多服务器需要筛选,  然后发现全部都是重复的代码,  何不如封装一下呢</p><p>仿SpringBoot的<code>ConditionalOnClass</code>编写一个<code>HangConditionalOnClass</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Conditional(HangCondition.class)</span>  <span class="comment">// 封装的条件排除类</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> HangConditionalOnClass &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拿到的类名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HangCondition类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HangCondition</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> &#123;</span><br><span class="line">        <span class="comment">// AnnotatedTypeMetadata 里面有解析到HangConditionalOnClass注解的Value信息</span></span><br><span class="line">        <span class="comment">// 因为是解析到HangConditionalOnClass注解才进来这里的</span></span><br><span class="line">        Map&lt;String, Object&gt; annotationAttributes = annotatedTypeMetadata.getAnnotationAttributes(HangConditionalOnClass.class.getName());</span><br><span class="line">        <span class="type">String</span> <span class="variable">values</span> <span class="operator">=</span> (String) annotationAttributes.get(<span class="string">&quot;value&quot;</span>); <span class="comment">// 拿到Value</span></span><br><span class="line">        <span class="comment">// 判断项目中是否有符合条件的依赖</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 利用类加载器,加载需要判断的类</span></span><br><span class="line">            conditionContext.getClassLoader().loadClass(values);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">// 能走到这个地方 证明有</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 没有该类</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自动配置类"><a href="#自动配置类" class="headerlink" title="自动配置类"></a>自动配置类</h4><p>有了条件注解，我们就可以来使⽤它了，那如何实现呢？这⾥就要⽤到⾃动配置类的概念，我们先看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebServiceAutoConfiguration</span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@HangConditionalOnClass(&quot;org.apache.catalina.startup.Tomcat&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> TomcatWebServer <span class="title function_">tomcatWebServer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TomcatWebServer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@HangConditionalOnClass(&quot;org.eclipse.jetty.server.Server&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JettyWebServer <span class="title function_">jettyWebServer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JettyWebServer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码跟最开始的大同小异,  只不过加了我们的条件注解</p><p>要实现服务器自动配置只需要在过滤掉所有bean留下唯一的bean就行了</p><p>这样整体SpringBoot启动逻辑就是这样的：</p><ol><li>创建⼀个AnnotationConfigWebApplicationContext容器</li><li>解析MyApplication类，然后进⾏扫描</li><li>通过getWebServer⽅法从Spring容器中获取WebServer类型的Bean</li><li>调⽤WebServer对象的start⽅法</li></ol><p>有了以上步骤，我们还差了⼀个关键步骤，就是Spring要能解析到WebServiceAutoConfiguration这个⾃动配置类，因为不管这个类⾥写了什么代码，Spring不去解析它，那都是没⽤的，此时我们需要SpringBoot在run⽅法中，能找到WebServiceAutoConfiguration这个配置类并添加到Spring容器中。</p><p>基于包扫描,  在SpringBoot中自己实现了一套SPI机制,  也就是熟悉的<u>spring.factories</u></p><h4 id="发现自动配置类"><a href="#发现自动配置类" class="headerlink" title="发现自动配置类"></a>发现自动配置类</h4><p>基于SPI机制, SpringBoot约定在项目的resource目录下的META_INF中创建spring.factories,  配置SpringBoot中所需扫描的类</p><p>并且提供一个接口</p><p>HangAutoConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HangAutoConfiguration</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在WebServiceAutoConfiguration实现此接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebServiceAutoConfiguration</span> <span class="keyword">implements</span> <span class="title class_">HangAutoConfiguration</span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@HangConditionalOnClass(&quot;org.apache.catalina.startup.Tomcat&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> TomcatWebServer <span class="title function_">tomcatWebServer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TomcatWebServer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@HangConditionalOnClass(&quot;org.eclipse.jetty.server.Server&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JettyWebServer <span class="title function_">jettyWebServer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JettyWebServer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后利用spring中的@Import技术导入这些配置类,  我们在@HangSpringBootApplication的定义上增加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(HangImportSelect.class)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZhouyuImportSelect</span> <span class="keyword">implements</span> <span class="title class_">DeferredImportSelector</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata  importingClassMetadata)  &#123;</span><br><span class="line">        ServiceLoader&lt;AutoConfiguration&gt; serviceLoader =  ServiceLoader.load(AutoConfiguration.class);</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span>  <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">        <span class="keyword">for</span>(AutoConfiguration autoConfiguration : serviceLoader)&#123;</span><br><span class="line">            list.add(autoConfiguration.getClass().getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就完成了从com.zhouyu.springboot.AutoConfiguration⽂件中获取⾃动配置类的名字，并导⼊到Spring容器中，从⽽Spring容器就知道了这些配置类的存在，⽽对于user项⽬⽽⾔，是不需要修改代码的。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/2023/10/06/SpringMVC/"/>
      <url>/2023/10/06/SpringMVC/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="一、SpringMVC简介"><a href="#一、SpringMVC简介" class="headerlink" title="一、SpringMVC简介"></a>一、SpringMVC简介</h1><h3 id="1、什么是MVC"><a href="#1、什么是MVC" class="headerlink" title="1、什么是MVC"></a>1、什么是MVC</h3><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p><p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p><p>JavaBean分为两类：</p><ul><li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</li><li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li></ul><p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p><p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p><p>MVC的工作流程：<br>用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器</p><h3 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h3><p>SpringMVC是Spring的一个后续产品，是Spring的一个子项目</p><p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目表述层开发的<strong>首选方案</strong>。</p><blockquote><p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台servlet</p></blockquote><h3 id="3、SpringMVC的特点"><a href="#3、SpringMVC的特点" class="headerlink" title="3、SpringMVC的特点"></a>3、SpringMVC的特点</h3><ul><li><strong>Spring 家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</li><li><strong>基于原生的Servlet</strong>，通过了功能强大的<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一处理</li><li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li><li><strong>代码清新简洁</strong>，大幅度提升开发效率</li><li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li><li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li></ul><h1 id="二、HelloWorld"><a href="#二、HelloWorld" class="headerlink" title="二、HelloWorld"></a>二、HelloWorld</h1><h3 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h3><p>IDE：idea 2023.1</p><p>服务器：tomcat8</p><p>Spring版本：5.3.1</p><h3 id="2、创建maven工程"><a href="#2、创建maven工程" class="headerlink" title="2、创建maven工程"></a>2、创建maven工程</h3><h5 id="a-添加web模块"><a href="#a-添加web模块" class="headerlink" title="a&gt;添加web模块"></a>a&gt;添加web模块</h5><h5 id="b-打包方式：war"><a href="#b-打包方式：war" class="headerlink" title="b&gt;打包方式：war"></a>b&gt;打包方式：war</h5><h5 id="c-引入依赖"><a href="#c-引入依赖" class="headerlink" title="c&gt;引入依赖"></a>c&gt;引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、配置web-xml"><a href="#3、配置web-xml" class="headerlink" title="3、配置web.xml"></a>3、配置web.xml</h3><p>注册SpringMVC的前端控制器DispatcherServlet</p><h5 id="a-默认配置方式"><a href="#a-默认配置方式" class="headerlink" title="a&gt;默认配置方式"></a>a&gt;默认配置方式</h5><p>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为&#x2F;<servlet-name>-servlet.xml，例如，以下配置所对应SpringMVC的配置文件位于WEB-INF下，文件名为springMVC-servlet.xml</servlet-name></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="b-扩展配置方式"><a href="#b-扩展配置方式" class="headerlink" title="b&gt;扩展配置方式"></a>b&gt;扩展配置方式</h5><p>可通过init-param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置SpringMVC前端控制器DispatcherServlet的初始化时间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> 作为框架的核心组件，在启动过程中有大量的初始化操作要做</span></span><br><span class="line"><span class="comment">而这些操作放在第一次请求时才执行会严重影响访问速度</span></span><br><span class="line"><span class="comment">因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>&#x2F;<url-pattern>标签中使用&#x2F;和&#x2F;*的区别：</url-pattern></p><p>&#x2F;所匹配的请求可以是&#x2F;login或.html或.js或.css方式的请求路径，但是&#x2F;不能匹配.jsp请求路径的请求</p><p>因此就可以避免在访问jsp页面时，该请求被DispatcherServlet处理，从而找不到相应的页面</p><p>&#x2F;*则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用&#x2F;&#x2F;*的写法</p></blockquote><h3 id="4、创建请求控制器"><a href="#4、创建请求控制器" class="headerlink" title="4、创建请求控制器"></a>4、创建请求控制器</h3><p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器</p><p>请求控制器中每一个处理请求的方法成为控制器方法</p><p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、创建springMVC的配置文件"><a href="#5、创建springMVC的配置文件" class="headerlink" title="5、创建springMVC的配置文件"></a>5、创建springMVC的配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.hang.mvc.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   处理静态资源，例如html、js、css、jpg</span></span><br><span class="line"><span class="comment">  若只设置该标签，则只能访问静态资源，其他请求则无法访问</span></span><br><span class="line"><span class="comment">  此时必须设置&lt;mvc:annotation-driven/&gt;解决问题</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启mvc注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultCharset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6、测试HelloWorld"><a href="#6、测试HelloWorld" class="headerlink" title="6、测试HelloWorld"></a>6、测试HelloWorld</h3><h5 id="a-实现对首页的访问"><a href="#a-实现对首页的访问" class="headerlink" title="a&gt;实现对首页的访问"></a>a&gt;实现对首页的访问</h5><p>在请求控制器中创建处理请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @RequestMapping注解：处理请求和控制器方法之间的映射关系</span></span><br><span class="line"><span class="comment">// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径</span></span><br><span class="line"><span class="comment">// localhost:8080/springMVC/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//设置视图名称</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="b-通过超链接跳转到指定页面"><a href="#b-通过超链接跳转到指定页面" class="headerlink" title="b&gt;通过超链接跳转到指定页面"></a>b&gt;通过超链接跳转到指定页面</h5><p>在主页index.html中设置超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello&#125;&quot;</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在请求控制器中创建处理请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">HelloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h3><p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</p><h1 id="三、-RequestMapping注解"><a href="#三、-RequestMapping注解" class="headerlink" title="三、@RequestMapping注解"></a>三、@RequestMapping注解</h1><h3 id="1、-RequestMapping注解的功能"><a href="#1、-RequestMapping注解的功能" class="headerlink" title="1、@RequestMapping注解的功能"></a>1、@RequestMapping注解的功能</h3><p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p><p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p><h3 id="2、-RequestMapping注解的位置"><a href="#2、-RequestMapping注解的位置" class="headerlink" title="2、@RequestMapping注解的位置"></a>2、@RequestMapping注解的位置</h3><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p><p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestMappingController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、-RequestMapping注解的value属性"><a href="#3、-RequestMapping注解的value属性" class="headerlink" title="3、@RequestMapping注解的value属性"></a>3、@RequestMapping注解的value属性</h3><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p><p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p><p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRequestMapping&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/testRequestMapping<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、-RequestMapping注解的method属性"><a href="#4、-RequestMapping注解的method属性" class="headerlink" title="4、@RequestMapping注解的method属性"></a>4、@RequestMapping注解的method属性</h3><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p><p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p><p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错405：Request method ‘POST’ not supported</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;,</span></span><br><span class="line"><span class="meta">        method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解</p><p>处理get请求的映射–&gt;@GetMapping</p><p>处理post请求的映射–&gt;@PostMapping</p><p>处理put请求的映射–&gt;@PutMapping</p><p>处理delete请求的映射–&gt;@DeleteMapping</p><p>2、常用的请求方式有get，post，put，delete</p><p>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符串（put或delete），则按照默认的请求方式get处理</p><p>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在RESTful部分会讲到</p></blockquote><h3 id="5、-RequestMapping注解的params属性（了解）"><a href="#5、-RequestMapping注解的params属性（了解）" class="headerlink" title="5、@RequestMapping注解的params属性（了解）"></a>5、@RequestMapping注解的params属性（了解）</h3><p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p><p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p><p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p><p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p><p>“param&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数且param&#x3D;value</p><p>“param!&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数但是param!&#x3D;value</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test(username=&#x27;admin&#x27;,password=123456)&quot;</span>&gt;</span>测试@RequestMapping的params属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">        ,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">        ,params = &#123;&quot;username&quot;,&quot;password!=123456&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时页面回报错400：Parameter conditions “username, password!&#x3D;123456” not met for actual request parameters: username&#x3D;{admin}, password&#x3D;{123456}</p></blockquote><h3 id="6、-RequestMapping注解的headers属性（了解）"><a href="#6、-RequestMapping注解的headers属性（了解）" class="headerlink" title="6、@RequestMapping注解的headers属性（了解）"></a>6、@RequestMapping注解的headers属性（了解）</h3><p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p><p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p><p>“header”：要求请求映射所匹配的请求必须携带header请求头信息</p><p>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</p><p>“header&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header&#x3D;value</p><p>“header!&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header!&#x3D;value</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到</p><h3 id="7、SpringMVC支持ant风格的路径"><a href="#7、SpringMVC支持ant风格的路径" class="headerlink" title="7、SpringMVC支持ant风格的路径"></a>7、SpringMVC支持ant风格的路径</h3><p>？：表示任意的单个字符</p><p>*：表示任意的0个或多个字符</p><p>&#x2F;**：表示任意的一层或多层目录</p><p>注意：在使用&#x2F;<strong>时，只能使用&#x2F;</strong>&#x2F;xxx的方式</p><h3 id="8、SpringMVC支持路径中的占位符（重点）"><a href="#8、SpringMVC支持路径中的占位符（重点）" class="headerlink" title="8、SpringMVC支持路径中的占位符（重点）"></a>8、SpringMVC支持路径中的占位符（重点）</h3><p>原始方式：&#x2F;deleteUser?id&#x3D;1</p><p>rest方式：&#x2F;deleteUser&#x2F;1</p><p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;</span>测试路径中的占位符--&gt;/testRest<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRest</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="meta">@PathVariable(&quot;username&quot;)</span> String username)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id:&quot;</span>+id+<span class="string">&quot;,username:&quot;</span>+username);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终输出的内容为--&gt;id:1,username:admin</span></span><br></pre></td></tr></table></figure><h1 id="四、SpringMVC获取请求参数"><a href="#四、SpringMVC获取请求参数" class="headerlink" title="四、SpringMVC获取请求参数"></a>四、SpringMVC获取请求参数</h1><h3 id="1、通过ServletAPI获取"><a href="#1、通过ServletAPI获取" class="headerlink" title="1、通过ServletAPI获取"></a>1、通过ServletAPI获取</h3><p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、通过控制器方法的形参获取请求参数"><a href="#2、通过控制器方法的形参获取请求参数" class="headerlink" title="2、通过控制器方法的形参获取请求参数"></a>2、通过控制器方法的形参获取请求参数</h3><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;</span>测试获取请求参数--&gt;/testParam<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</p><p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p><p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p></blockquote><h3 id="3、-RequestParam"><a href="#3、-RequestParam" class="headerlink" title="3、@RequestParam"></a>3、@RequestParam</h3><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p><p>@RequestParam注解一共有三个属性：</p><p>value：指定为形参赋值的请求参数的参数名</p><p>required：设置是否必须传输此请求参数，默认值为true</p><p>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p><p>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值</p><h3 id="4、-RequestHeader"><a href="#4、-RequestHeader" class="headerlink" title="4、@RequestHeader"></a>4、@RequestHeader</h3><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p><p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><h3 id="5、-CookieValue"><a href="#5、-CookieValue" class="headerlink" title="5、@CookieValue"></a>5、@CookieValue</h3><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p><p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><h3 id="6、通过POJO获取请求参数"><a href="#6、通过POJO获取请求参数" class="headerlink" title="6、通过POJO获取请求参数"></a>6、通过POJO获取请求参数</h3><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testpojo&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testpojo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testPOJO</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终结果--&gt;User&#123;id=null, username=&#x27;张三&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="7、解决获取请求参数的乱码问题"><a href="#7、解决获取请求参数的乱码问题" class="headerlink" title="7、解决获取请求参数的乱码问题"></a>7、解决获取请求参数的乱码问题</h3><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p></blockquote><h1 id="五、域对象共享数据"><a href="#五、域对象共享数据" class="headerlink" title="五、域对象共享数据"></a>五、域对象共享数据</h1><h3 id="1、使用ServletAPI向request域对象共享数据"><a href="#1、使用ServletAPI向request域对象共享数据" class="headerlink" title="1、使用ServletAPI向request域对象共享数据"></a>1、使用ServletAPI向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testServletAPI</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,servletAPI&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、使用ModelAndView向request域对象共享数据"><a href="#2、使用ModelAndView向request域对象共享数据" class="headerlink" title="2、使用ModelAndView向request域对象共享数据"></a>2、使用ModelAndView向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testModelAndView</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ModelAndView有Model和View的功能</span></span><br><span class="line"><span class="comment">     * Model主要用于向请求域共享数据</span></span><br><span class="line"><span class="comment">     * View主要用于设置视图，实现页面跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    <span class="comment">//向请求域共享数据</span></span><br><span class="line">    mav.addObject(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelAndView&quot;</span>);</span><br><span class="line">    <span class="comment">//设置视图，实现页面跳转</span></span><br><span class="line">    mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、使用Model向request域对象共享数据"><a href="#3、使用Model向request域对象共享数据" class="headerlink" title="3、使用Model向request域对象共享数据"></a>3、使用Model向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModel</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Model&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、使用map向request域对象共享数据"><a href="#4、使用map向request域对象共享数据" class="headerlink" title="4、使用map向request域对象共享数据"></a>4、使用map向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMap</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Map&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、使用ModelMap向request域对象共享数据"><a href="#5、使用ModelMap向request域对象共享数据" class="headerlink" title="5、使用ModelMap向request域对象共享数据"></a>5、使用ModelMap向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModelMap</span><span class="params">(ModelMap modelMap)</span>&#123;</span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelMap&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、Model、ModelMap、Map的关系"><a href="#6、Model、ModelMap、Map的关系" class="headerlink" title="6、Model、ModelMap、Map的关系"></a>6、Model、ModelMap、Map的关系</h3><p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface Model&#123;&#125;</span><br><span class="line">public class ModelMap extends LinkedHashMap&lt;String, Object&gt; &#123;&#125;</span><br><span class="line">public class ExtendedModelMap extends ModelMap implements Model &#123;&#125;</span><br><span class="line">public class BindingAwareModelMap extends ExtendedModelMap &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="7、向session域共享数据"><a href="#7、向session域共享数据" class="headerlink" title="7、向session域共享数据"></a>7、向session域共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testSession&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;testSessionScope&quot;</span>, <span class="string">&quot;hello,session&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、向application域共享数据"><a href="#8、向application域共享数据" class="headerlink" title="8、向application域共享数据"></a>8、向application域共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testApplication&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testApplication</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    application.setAttribute(<span class="string">&quot;testApplicationScope&quot;</span>, <span class="string">&quot;hello,application&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、SpringMVC的视图"><a href="#六、SpringMVC的视图" class="headerlink" title="六、SpringMVC的视图"></a>六、SpringMVC的视图</h1><p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p><p>SpringMVC视图的种类很多，默认有转发视图和重定向视图</p><p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p><p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p><h3 id="1、ThymeleafView"><a href="#1、ThymeleafView" class="headerlink" title="1、ThymeleafView"></a>1、ThymeleafView</h3><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testHello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testHello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、转发视图"><a href="#2、转发视图" class="headerlink" title="2、转发视图"></a>2、转发视图</h3><p>SpringMVC中默认的转发视图是InternalResourceView</p><p>SpringMVC中创建转发视图的情况：</p><p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转</p><p>例如”forward:&#x2F;“，”forward:&#x2F;employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testForward&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testForward</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、重定向视图"><a href="#3、重定向视图" class="headerlink" title="3、重定向视图"></a>3、重定向视图</h3><p>SpringMVC中默认的重定向视图是RedirectView</p><p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p><p>例如”redirect:&#x2F;“，”redirect:&#x2F;employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRedirect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRedirect</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以&#x2F;开头，若是则会自动拼接上下文路径</p></blockquote><h3 id="4、视图控制器view-controller"><a href="#4、视图控制器view-controller" class="headerlink" title="4、视图控制器view-controller"></a>4、视图控制器view-controller</h3><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">path：设置处理的请求地址</span></span><br><span class="line"><span class="comment">view-name：设置请求地址所对应的视图名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/testView&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;success&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="七、RESTful"><a href="#七、RESTful" class="headerlink" title="七、RESTful"></a>七、RESTful</h1><h3 id="1、RESTful简介"><a href="#1、RESTful简介" class="headerlink" title="1、RESTful简介"></a>1、RESTful简介</h3><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p><h5 id="a-资源"><a href="#a-资源" class="headerlink" title="a&gt;资源"></a>a&gt;资源</h5><p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p><h5 id="b-资源的表述"><a href="#b-资源的表述" class="headerlink" title="b&gt;资源的表述"></a>b&gt;资源的表述</h5><p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交换）。资源的表述可以有多种格式，例如HTML&#x2F;XML&#x2F;JSON&#x2F;纯文本&#x2F;图片&#x2F;视频&#x2F;音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p><h5 id="c-状态转移"><a href="#c-状态转移" class="headerlink" title="c&gt;状态转移"></a>c&gt;状态转移</h5><p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p><h3 id="2、RESTful的实现"><a href="#2、RESTful的实现" class="headerlink" title="2、RESTful的实现"></a>2、RESTful的实现</h3><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p><p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</p><p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p><table><thead><tr><th>操作</th><th>传统方式</th><th>REST风格</th></tr></thead><tbody><tr><td>查询操作</td><td>getUserById?id&#x3D;1</td><td>user&#x2F;1–&gt;get请求方式</td></tr><tr><td>保存操作</td><td>saveUser</td><td>user–&gt;post请求方式</td></tr><tr><td>删除操作</td><td>deleteUser?id&#x3D;1</td><td>user&#x2F;1–&gt;delete请求方式</td></tr><tr><td>更新操作</td><td>updateUser</td><td>user–&gt;put请求方式</td></tr></tbody></table><h3 id="3、HiddenHttpMethodFilter"><a href="#3、HiddenHttpMethodFilter" class="headerlink" title="3、HiddenHttpMethodFilter"></a>3、HiddenHttpMethodFilter</h3><p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p><p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p><p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p><p>a&gt;当前请求的请求方式必须为 <strong>post</strong></p><p>b&gt;当前请求必须传输请求参数 <strong>_method</strong></p><p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数_method的值，因此请求参数&#x2F;_method的值才是最终的请求方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form th:action=<span class="string">&quot;@&#123;/update&#125;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;_method&quot;</span> value=<span class="string">&quot;PUT&quot;</span>&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;修改&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><blockquote><p>原理就是: 在接收到请求为post时,在HiddenHttpMethodFilter过滤器中,在form 表单提交中 通过请求判断form 表单中隐藏域是name&#x3D;”_method”  value&#x3D;”DELETE”重新赋值修改,然后转换成为了delete或者put请求(具体取决于value的值)</p></blockquote><p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和HiddenHttpMethodFilter</p><p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p><p>原因：</p><ul><li><p>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字符集的</p></li><li><p>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</p></li><li><p>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">paramValue</span> <span class="operator">=</span> request.getParameter(<span class="built_in">this</span>.methodParam);</span><br></pre></td></tr></table></figure><h1 id="八、RESTful案例"><a href="#八、RESTful案例" class="headerlink" title="八、RESTful案例"></a>八、RESTful案例</h1><h3 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h3><p>和传统 CRUD 一样，实现对员工信息的增删改查。</p><ul><li><p>搭建环境</p></li><li><p>准备实体类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoConstructor</span></span><br><span class="line"><span class="meta">@AllConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">//1 male, 0 female</span></span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>准备dao模拟数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">    employees = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Employee&gt;();</span><br><span class="line"></span><br><span class="line">    employees.put(<span class="number">1001</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;E-AA&quot;</span>, <span class="string">&quot;aa@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">    employees.put(<span class="number">1002</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1002</span>, <span class="string">&quot;E-BB&quot;</span>, <span class="string">&quot;bb@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">    employees.put(<span class="number">1003</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1003</span>, <span class="string">&quot;E-CC&quot;</span>, <span class="string">&quot;cc@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">    employees.put(<span class="number">1004</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1004</span>, <span class="string">&quot;E-DD&quot;</span>, <span class="string">&quot;dd@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">    employees.put(<span class="number">1005</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1005</span>, <span class="string">&quot;E-EE&quot;</span>, <span class="string">&quot;ee@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">initId</span> <span class="operator">=</span> <span class="number">1006</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(employee.getId() == <span class="literal">null</span>)&#123;</span><br><span class="line">        employee.setId(initId++);</span><br><span class="line">    &#125;</span><br><span class="line">    employees.put(employee.getId(), employee);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> employees.values();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">get</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> employees.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">    employees.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、功能清单"><a href="#2、功能清单" class="headerlink" title="2、功能清单"></a>2、功能清单</h3><table><thead><tr><th>功能</th><th>URL 地址</th><th>请求方式</th></tr></thead><tbody><tr><td>访问首页√</td><td>&#x2F;</td><td>GET</td></tr><tr><td>查询全部数据√</td><td>&#x2F;employee</td><td>GET</td></tr><tr><td>删除√</td><td>&#x2F;employee&#x2F;2</td><td>DELETE</td></tr><tr><td>跳转到添加数据页面√</td><td>&#x2F;toAdd</td><td>GET</td></tr><tr><td>执行保存√</td><td>&#x2F;employee</td><td>POST</td></tr><tr><td>跳转到更新数据页面√</td><td>&#x2F;employee&#x2F;2</td><td>GET</td></tr><tr><td>执行更新√</td><td>&#x2F;employee</td><td>PUT</td></tr></tbody></table><h3 id="3、具体功能：访问首页"><a href="#3、具体功能：访问首页" class="headerlink" title="3、具体功能：访问首页"></a>3、具体功能：访问首页</h3><h5 id="a-配置view-controller"><a href="#a-配置view-controller" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="b-创建页面"><a href="#b-创建页面" class="headerlink" title="b&gt;创建页面"></a>b&gt;创建页面</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span>&gt;</span>访问员工信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、具体功能：查询所有员工数据"><a href="#4、具体功能：查询所有员工数据" class="headerlink" title="4、具体功能：查询所有员工数据"></a>4、具体功能：查询所有员工数据</h3><h5 id="a-控制器方法"><a href="#a-控制器方法" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmployeeList</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    Collection&lt;Employee&gt; employeeList = employeeDao.getAll();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employeeList&quot;</span>, employeeList);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_list&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="b-创建employee-list-html"><a href="#b-创建employee-list-html" class="headerlink" title="b&gt;创建employee_list.html"></a>b&gt;创建employee_list.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataTable&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>options(<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toAdd&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span>)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;employeeList&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5、具体功能：删除"><a href="#5、具体功能：删除" class="headerlink" title="5、具体功能：删除"></a>5、具体功能：删除</h3><h5 id="a-创建处理delete请求方式的表单"><a href="#a-创建处理delete请求方式的表单" class="headerlink" title="a&gt;创建处理delete请求方式的表单"></a>a&gt;创建处理delete请求方式的表单</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 作用：通过超链接控制表单的提交，将post请求转换为delete请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;delete_form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HiddenHttpMethodFilter要求：必须传输_method请求参数，并且值为最终的请求方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="b-删除超链接绑定点击事件"><a href="#b-删除超链接绑定点击事件" class="headerlink" title="b&gt;删除超链接绑定点击事件"></a>b&gt;删除超链接绑定点击事件</h5><p>引入vue.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>删除超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过vue处理点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#dataTable&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//event表示当前事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">deleteEmployee</span>:<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//通过id获取表单标签</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> delete_form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;delete_form&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//将触发事件的超链接的href属性为表单的action属性赋值</span></span></span><br><span class="line"><span class="language-javascript">                delete_form.<span class="property">action</span> = event.<span class="property">target</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//提交表单</span></span></span><br><span class="line"><span class="language-javascript">                delete_form.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//阻止超链接的默认跳转行为</span></span></span><br><span class="line"><span class="language-javascript">                event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="c-控制器方法"><a href="#c-控制器方法" class="headerlink" title="c&gt;控制器方法"></a>c&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteEmployee</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、具体功能：跳转到添加数据页面"><a href="#6、具体功能：跳转到添加数据页面" class="headerlink" title="6、具体功能：跳转到添加数据页面"></a>6、具体功能：跳转到添加数据页面</h3><h5 id="a-配置view-controller-1"><a href="#a-配置view-controller-1" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/toAdd&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;employee_add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="b-创建employee-add-html"><a href="#b-创建employee-add-html" class="headerlink" title="b&gt;创建employee_add.html"></a>b&gt;创建employee_add.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Add Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7、具体功能：执行保存"><a href="#7、具体功能：执行保存" class="headerlink" title="7、具体功能：执行保存"></a>7、具体功能：执行保存</h3><h5 id="a-控制器方法-1"><a href="#a-控制器方法-1" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、具体功能：跳转到更新数据页面"><a href="#8、具体功能：跳转到更新数据页面" class="headerlink" title="8、具体功能：跳转到更新数据页面"></a>8、具体功能：跳转到更新数据页面</h3><h5 id="a-修改超链接"><a href="#a-修改超链接" class="headerlink" title="a&gt;修改超链接"></a>a&gt;修改超链接</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="b-控制器方法"><a href="#b-控制器方法" class="headerlink" title="b&gt;控制器方法"></a>b&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmployeeById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span>&#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeDao.get(id);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employee&quot;</span>, employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c-创建employee-update-html"><a href="#c-创建employee-update-html" class="headerlink" title="c&gt;创建employee_update.html"></a>c&gt;创建employee_update.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Update Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        th:field=&quot;$&#123;employee.gender&#125;&quot;可用于单选框或复选框的回显</span></span><br><span class="line"><span class="comment">        若单选框的value和employee.gender的值一致，则添加checked=&quot;checked&quot;属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;update&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9、具体功能：执行更新"><a href="#9、具体功能：执行更新" class="headerlink" title="9、具体功能：执行更新"></a>9、具体功能：执行更新</h3><h5 id="a-控制器方法-2"><a href="#a-控制器方法-2" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">updateEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="八、HttpMessageConverter"><a href="#八、HttpMessageConverter" class="headerlink" title="八、HttpMessageConverter"></a>八、HttpMessageConverter</h1><p>HttpMessageConverter，报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文</p><p>HttpMessageConverter提供了两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，</p><p>ResponseEntity</p><h3 id="1、-RequestBody"><a href="#1、-RequestBody" class="headerlink" title="1、@RequestBody"></a>1、@RequestBody</h3><p>@RequestBody可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testRequestBody&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestBody&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestBody);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>requestBody:username&#x3D;admin&amp;password&#x3D;123456</p><h3 id="2、RequestEntity"><a href="#2、RequestEntity" class="headerlink" title="2、RequestEntity"></a>2、RequestEntity</h3><p>RequestEntity封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过getHeaders()获取请求头信息，通过getBody()获取请求体信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestEntity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestEntity</span><span class="params">(RequestEntity&lt;String&gt; requestEntity)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestHeader:&quot;</span>+requestEntity.getHeaders());</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestEntity.getBody());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br>requestHeader:[host:”localhost:8080”, connection:”keep-alive”, content-length:”27”, cache-control:”max-age&#x3D;0”, sec-ch-ua:”” Not A;Brand”;v&#x3D;”99”, “Chromium”;v&#x3D;”90”, “Google Chrome”;v&#x3D;”90””, sec-ch-ua-mobile:”?0”, upgrade-insecure-requests:”1”, origin:”<a href="http://localhost:8080/">http://localhost:8080</a>“, user-agent:”Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;90.0.4430.93 Safari&#x2F;537.36”]<br>requestBody:username&#x3D;admin&amp;password&#x3D;123</p><h3 id="3、-ResponseBody"><a href="#3、-ResponseBody" class="headerlink" title="3、@ResponseBody"></a>3、@ResponseBody</h3><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseBody&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：浏览器页面显示success</p><h3 id="4、SpringMVC处理json"><a href="#4、SpringMVC处理json" class="headerlink" title="4、SpringMVC处理json"></a>4、SpringMVC处理json</h3><p>@ResponseBody处理json的步骤：</p><p>a&gt;导入jackson的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b&gt;在SpringMVC的核心配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为Json格式的字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:annotation-driven /&gt;</span><br></pre></td></tr></table></figure><p>c&gt;在处理器方法上使用@ResponseBody注解进行标识</p><p>d&gt;将Java对象直接作为控制器方法的返回值返回，就会自动转换为Json格式的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseUser&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">testResponseUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1001</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器的页面中展示的结果：</p><p>{“id”:1001,”username”:”admin”,”password”:”123456”,”age”:23,”sex”:”男”}</p><h3 id="5、SpringMVC处理ajax"><a href="#5、SpringMVC处理ajax" class="headerlink" title="5、SpringMVC处理ajax"></a>5、SpringMVC处理ajax</h3><p>a&gt;请求超链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testAjax&#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;testAjax&quot;</span>&gt;</span>testAjax<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b&gt;通过vue和axios处理点击事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">testAjax</span>:<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>:event.<span class="property">target</span>.<span class="property">href</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">params</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">username</span>:<span class="string">&quot;admin&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">password</span>:<span class="string">&quot;123456&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(response.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>c&gt;控制器方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testAjax&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAjax</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello,ajax&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、-RestController注解"><a href="#6、-RestController注解" class="headerlink" title="6、@RestController注解"></a>6、@RestController注解</h3><p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p><h3 id="7、ResponseEntity"><a href="#7、ResponseEntity" class="headerlink" title="7、ResponseEntity"></a>7、ResponseEntity</h3><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p><h1 id="九、文件上传和下载"><a href="#九、文件上传和下载" class="headerlink" title="九、文件上传和下载"></a>九、文件上传和下载</h1><h3 id="1、文件下载"><a href="#1、文件下载" class="headerlink" title="1、文件下载"></a>1、文件下载</h3><p>使用ResponseEntity实现下载文件的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;/static/img/1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//创建输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">    <span class="comment">//创建字节数组</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">    <span class="comment">//将流读到字节数组中</span></span><br><span class="line">    is.read(bytes);</span><br><span class="line">    <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//设置响应状态码</span></span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line">    <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">    ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">    <span class="comment">//关闭输入流</span></span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、文件上传"><a href="#2、文件上传" class="headerlink" title="2、文件上传"></a>2、文件上传</h3><p>文件上传要求form表单的请求方式必须为post，并且添加属性enctype&#x3D;”multipart&#x2F;form-data”</p><p>SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</p><p>上传步骤：</p><p>a&gt;添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b&gt;在SpringMVC的配置文件中添加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>c&gt;控制器方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testUp&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testUp</span><span class="params">(MultipartFile photo, HttpSession session)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取上传的文件的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> photo.getOriginalFilename();</span><br><span class="line">    <span class="comment">//处理文件重名问题</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">hzName</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    fileName = UUID.randomUUID().toString() + hzName;</span><br><span class="line">    <span class="comment">//获取服务器中photo目录的路径</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="type">String</span> <span class="variable">photoPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;photo&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(photoPath);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">        file.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">finalPath</span> <span class="operator">=</span> photoPath + File.separator + fileName;</span><br><span class="line">    <span class="comment">//实现上传功能</span></span><br><span class="line">    photo.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(finalPath));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十、拦截器"><a href="#十、拦截器" class="headerlink" title="十、拦截器"></a>十、拦截器</h1><h3 id="1、拦截器的配置"><a href="#1、拦截器的配置" class="headerlink" title="1、拦截器的配置"></a>1、拦截器的配置</h3><p>SpringMVC中的拦截器用于拦截控制器方法的执行</p><p>SpringMVC中的拦截器需要实现HandlerInterceptor</p><p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/testRequestEntity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">以上配置方式可以通过ref或bean标签设置拦截器，</span></span><br><span class="line"><span class="comment">    通过mvc:mapping设置需要拦截的请求，</span></span><br><span class="line"><span class="comment">    通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、拦截器的三个抽象方法"><a href="#2、拦截器的三个抽象方法" class="headerlink" title="2、拦截器的三个抽象方法"></a>2、拦截器的三个抽象方法</h3><p>SpringMVC中的拦截器有三个抽象方法：</p><p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p><p>postHandle：控制器方法执行之后执行postHandle()</p><p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p><h3 id="3、多个拦截器的执行顺序"><a href="#3、多个拦截器的执行顺序" class="headerlink" title="3、多个拦截器的执行顺序"></a>3、多个拦截器的执行顺序</h3><p>a&gt;若每个拦截器的preHandle()都返回true</p><p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p><p>preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行</p><p>b&gt;若某个拦截器的preHandle()返回了false</p><p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterComplation()会执行</p><h1 id="十一、异常处理器"><a href="#十一、异常处理器" class="headerlink" title="十一、异常处理器"></a>十一、异常处理器</h1><h3 id="1、基于配置的异常处理"><a href="#1、基于配置的异常处理" class="headerlink" title="1、基于配置的异常处理"></a>1、基于配置的异常处理</h3><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p><p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver</p><p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        properties的键表示处理器方法执行过程中出现的异常</span></span><br><span class="line"><span class="comment">        properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、基于注解的异常处理"><a href="#2、基于注解的异常处理" class="headerlink" title="2、基于注解的异常处理"></a>2、基于注解的异常处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ControllerAdvice将当前类标识为异常处理的组件</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@ExceptionHandler用于设置所标识方法处理的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="comment">//ex表示当前请求处理中出现的异常对象</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleArithmeticException</span><span class="params">(Exception ex, Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;ex&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十二、注解配置SpringMVC"><a href="#十二、注解配置SpringMVC" class="headerlink" title="十二、注解配置SpringMVC"></a>十二、注解配置SpringMVC</h1><p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p><h3 id="1、创建初始化类，代替web-xml"><a href="#1、创建初始化类，代替web-xml" class="headerlink" title="1、创建初始化类，代替web.xml"></a>1、创建初始化类，代替web.xml</h3><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它来配置Servlet容器。<br>Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebInit</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定spring的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定SpringMVC的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加(注册)过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">encodingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        encodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        encodingFilter.setForceRequestEncoding(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HiddenHttpMethodFilter</span> <span class="variable">hiddenHttpMethodFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HiddenHttpMethodFilter</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、创建SpringConfig配置类，代替spring的配置文件"><a href="#2、创建SpringConfig配置类，代替spring的配置文件" class="headerlink" title="2、创建SpringConfig配置类，代替spring的配置文件"></a>2、创建SpringConfig配置类，代替spring的配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"><span class="comment">//ssm整合之后，spring的配置信息写在此类中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#3、创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="3、创建WebConfig配置类，代替SpringMVC的配置文件"></a>3、创建WebConfig配置类，代替SpringMVC的配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  代替SpringMVC的配置文件:</span></span><br><span class="line"><span class="comment"> *  1、扫描组件  ComponentScan()</span></span><br><span class="line"><span class="comment"> *  2、视图解析器</span></span><br><span class="line"><span class="comment"> *  3、view-controller  </span></span><br><span class="line"><span class="comment"> *  4、default-servlet-handler</span></span><br><span class="line"><span class="comment"> *  5、mvc驱动注册</span></span><br><span class="line"><span class="comment"> *  6、文件上传解析器</span></span><br><span class="line"><span class="comment"> *  7、异常处理</span></span><br><span class="line"><span class="comment"> *  8、拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描组件</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.hang.mvc.controller&quot;)</span> <span class="comment">// 此时是扫描controller</span></span><br><span class="line"><span class="comment">//开启MVC注解驱动</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用默认的servlet处理静态资源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置文件上传解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommonsMultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">FirstInterceptor</span> <span class="variable">firstInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FirstInterceptor</span>();</span><br><span class="line">        registry.addInterceptor(firstInterceptor)</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/**&quot;</span>); <span class="comment">// 拦截所有的请求</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 配置视图控制</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="comment">        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 配置异常映射处理</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) &#123;</span></span><br><span class="line"><span class="comment">        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();</span></span><br><span class="line"><span class="comment">        Properties prop = new Properties();</span></span><br><span class="line"><span class="comment">        prop.setProperty(&quot;java.lang.ArithmeticException&quot;, &quot;error&quot;);</span></span><br><span class="line"><span class="comment">        //设置异常映射</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionMappings(prop);</span></span><br><span class="line"><span class="comment">        //设置共享异常信息的键</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionAttribute(&quot;ex&quot;);</span></span><br><span class="line"><span class="comment">        resolvers.add(exceptionResolver);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ITemplateResolver <span class="title function_">templateResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">webApplicationContext</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        <span class="comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span></span><br><span class="line">        <span class="type">ServletContextTemplateResolver</span> <span class="variable">templateResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextTemplateResolver</span>(</span><br><span class="line">                webApplicationContext.getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SpringTemplateEngine <span class="title function_">templateEngine</span><span class="params">(ITemplateResolver templateResolver)</span> &#123;</span><br><span class="line">        <span class="type">SpringTemplateEngine</span> <span class="variable">templateEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringTemplateEngine</span>();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ViewResolver <span class="title function_">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> &#123;</span><br><span class="line">        <span class="type">ThymeleafViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThymeleafViewResolver</span>();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、测试功能"><a href="#4、测试功能" class="headerlink" title="4、测试功能"></a>4、测试功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十三、SpringMVC执行流程"><a href="#十三、SpringMVC执行流程" class="headerlink" title="十三、SpringMVC执行流程"></a>十三、SpringMVC执行流程</h1><h3 id="1、SpringMVC常用组件"><a href="#1、SpringMVC常用组件" class="headerlink" title="1、SpringMVC常用组件"></a>1、SpringMVC常用组件</h3><ul><li>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p><ul><li>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p><ul><li>Handler：<strong>处理器</strong>，需要工程师开发</li></ul><p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p><ul><li>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p><ul><li>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p><ul><li>View：<strong>视图</strong></li></ul><p>作用：将模型数据通过页面展示给用户</p><h3 id="2、★DispatcherServlet初始化过程"><a href="#2、★DispatcherServlet初始化过程" class="headerlink" title="2、★DispatcherServlet初始化过程"></a>2、★DispatcherServlet初始化过程</h3><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p><img src="/2023/10/06/SpringMVC/img005.png" class title="images"><h5 id="a-初始化WebApplicationContext"><a href="#a-初始化WebApplicationContext" class="headerlink" title="a&gt;初始化WebApplicationContext"></a>a&gt;初始化WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">initWebApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">rootContext</span> <span class="operator">=</span></span><br><span class="line">        WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.webApplicationContext != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// A context instance was injected at construction time -&gt; use it </span></span><br><span class="line">        <span class="comment">// 译:使用它 -&gt; 在构造时注入了上下文实例</span></span><br><span class="line">        wac = <span class="built_in">this</span>.webApplicationContext;</span><br><span class="line">        <span class="keyword">if</span> (wac <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">            <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">cwac</span> <span class="operator">=</span> (ConfigurableWebApplicationContext) wac;</span><br><span class="line">            <span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">                <span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line">                <span class="comment">// 上下文尚未刷新-&gt;提供服务，如</span></span><br><span class="line">                <span class="comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line">                <span class="comment">// 设置父上下文，设置应用程序上下文id，等等</span></span><br><span class="line">                <span class="keyword">if</span> (cwac.getParent() == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// The context instance was injected without an explicit parent -&gt; set</span></span><br><span class="line">                    <span class="comment">// 在没有显式的父容器-&gt;设置的情况下注入上下文实例</span></span><br><span class="line">                    <span class="comment">// the root application context (if any; may be null) as the parent</span></span><br><span class="line">                    <span class="comment">// 根应用程序上下文(如果有的话;可能是空的)作为父容器</span></span><br><span class="line">                    cwac.setParent(rootContext);</span><br><span class="line">                &#125;</span><br><span class="line">                configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance was injected at construction time -&gt; see if one</span></span><br><span class="line">        <span class="comment">// has been registered in the servlet context. If one exists, it is assumed</span></span><br><span class="line">        <span class="comment">// that the parent context (if any) has already been set and that the</span></span><br><span class="line">        <span class="comment">// user has performed any initialization such as setting the context id</span></span><br><span class="line">        wac = findWebApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance is defined for this servlet -&gt; create a local one</span></span><br><span class="line">        <span class="comment">// b&gt;创建WebApplicationContext</span></span><br><span class="line">        wac = createWebApplicationContext(rootContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.refreshEventReceived) &#123;</span><br><span class="line">        <span class="comment">// Either the context is not a ConfigurableApplicationContext with refresh</span></span><br><span class="line">        <span class="comment">// support or the context injected at construction time had already been</span></span><br><span class="line">        <span class="comment">// refreshed -&gt; trigger initial onRefresh manually here.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>.onRefreshMonitor) &#123;</span><br><span class="line">            <span class="comment">// 刷新WebApplicationContext</span></span><br><span class="line">            onRefresh(wac);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.publishContext) &#123;</span><br><span class="line">        <span class="comment">// Publish the context as a servlet context attribute.</span></span><br><span class="line">        <span class="comment">// 将IOC容器在应用域共享</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> getServletContextAttributeName();</span><br><span class="line">        getServletContext().setAttribute(attrName, wac);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="b-创建WebApplicationContext"><a href="#b-创建WebApplicationContext" class="headerlink" title="b&gt;创建WebApplicationContext"></a>b&gt;创建WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">createWebApplicationContext</span><span class="params">(<span class="meta">@Nullable</span> ApplicationContext parent)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; contextClass = getContextClass();</span><br><span class="line">    <span class="keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextException</span>(</span><br><span class="line">            <span class="string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + getServletName() +</span><br><span class="line">            <span class="string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +</span><br><span class="line">            <span class="string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过反射创建 IOC 容器对象</span></span><br><span class="line">    <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span></span><br><span class="line">        (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line"></span><br><span class="line">    wac.setEnvironment(getEnvironment());</span><br><span class="line">    <span class="comment">// 设置父容器 设置spring的容器为SpringMVC的父容器</span></span><br><span class="line">    wac.setParent(parent);</span><br><span class="line">    <span class="type">String</span> <span class="variable">configLocation</span> <span class="operator">=</span> getContextConfigLocation();</span><br><span class="line">    <span class="keyword">if</span> (configLocation != <span class="literal">null</span>) &#123;</span><br><span class="line">        wac.setConfigLocation(configLocation);</span><br><span class="line">    &#125;</span><br><span class="line">    configureAndRefreshWebApplicationContext(wac);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c-DispatcherServlet初始化策略"><a href="#c-DispatcherServlet初始化策略" class="headerlink" title="c&gt;DispatcherServlet初始化策略"></a>c&gt;DispatcherServlet初始化策略</h5><p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化DispatcherServlet的各个组件</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initStrategies</span><span class="params">(ApplicationContext context)</span> &#123;</span><br><span class="line">   initMultipartResolver(context);</span><br><span class="line">   initLocaleResolver(context);</span><br><span class="line">   initThemeResolver(context);</span><br><span class="line">   initHandlerMappings(context);</span><br><span class="line">   initHandlerAdapters(context);</span><br><span class="line">   initHandlerExceptionResolvers(context);</span><br><span class="line">   initRequestToViewNameTranslator(context);</span><br><span class="line">   initViewResolvers(context);</span><br><span class="line">   initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、★DispatcherServlet调用组件处理请求"><a href="#3、★DispatcherServlet调用组件处理请求" class="headerlink" title="3、★DispatcherServlet调用组件处理请求"></a>3、★DispatcherServlet调用组件处理请求</h3><h5 id="a-processRequest"><a href="#a-processRequest" class="headerlink" title="a&gt;processRequest()"></a>a&gt;processRequest()</h5><p>FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了processRequest(request, response)</p><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">    <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">Throwable</span> <span class="variable">failureCause</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">LocaleContext</span> <span class="variable">previousLocaleContext</span> <span class="operator">=</span> LocaleContextHolder.getLocaleContext();</span><br><span class="line">    <span class="type">LocaleContext</span> <span class="variable">localeContext</span> <span class="operator">=</span> buildLocaleContext(request);</span><br><span class="line"></span><br><span class="line">    <span class="type">RequestAttributes</span> <span class="variable">previousAttributes</span> <span class="operator">=</span> RequestContextHolder.getRequestAttributes();</span><br><span class="line">    <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttributes</span> <span class="operator">=</span> buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> <span class="title class_">RequestBindingInterceptor</span>());</span><br><span class="line"></span><br><span class="line">    initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</span></span><br><span class="line">        doService(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ServletException | IOException ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Request processing failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line">        <span class="keyword">if</span> (requestAttributes != <span class="literal">null</span>) &#123;</span><br><span class="line">            requestAttributes.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">        logResult(request, response, failureCause, asyncManager);</span><br><span class="line">        publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="b-doService"><a href="#b-doService" class="headerlink" title="b&gt;doService()"></a>b&gt;doService()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    logRequest(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class="line">    <span class="comment">// to be able to restore the original attributes after the include.</span></span><br><span class="line">    Map&lt;String, Object&gt; attributesSnapshot = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class="line">        attributesSnapshot = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line">        <span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> (String) attrNames.nextElement();</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class="line">                attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make framework objects available to handlers and view objects.</span></span><br><span class="line">    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class="line">    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.localeResolver);</span><br><span class="line">    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.themeResolver);</span><br><span class="line">    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.flashMapManager != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">FlashMap</span> <span class="variable">inputFlashMap</span> <span class="operator">=</span> <span class="built_in">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line">        <span class="keyword">if</span> (inputFlashMap != <span class="literal">null</span>) &#123;</span><br><span class="line">            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">        &#125;</span><br><span class="line">        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> <span class="title class_">FlashMap</span>());</span><br><span class="line">        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="built_in">this</span>.flashMapManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">RequestPath</span> <span class="variable">requestPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.parseRequestPath &amp;&amp; !ServletRequestPathUtils.hasParsedRequestPath(request)) &#123;</span><br><span class="line">        requestPath = ServletRequestPathUtils.parseAndCache(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理请求和响应</span></span><br><span class="line">        doDispatch(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class="line">            <span class="keyword">if</span> (attributesSnapshot != <span class="literal">null</span>) &#123;</span><br><span class="line">                restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestPath != <span class="literal">null</span>) &#123;</span><br><span class="line">            ServletRequestPathUtils.clearParsedRequestPath(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c-doDispatch"><a href="#c-doDispatch" class="headerlink" title="c&gt;doDispatch()"></a>c&gt;doDispatch()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">processedRequest</span> <span class="operator">=</span> request;</span><br><span class="line">    <span class="type">HandlerExecutionChain</span> <span class="variable">mappedHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">multipartRequestParsed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Exception</span> <span class="variable">dispatchException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            processedRequest = checkMultipart(request);</span><br><span class="line">            multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler for the current request.</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            mappedHandler：调用链</span></span><br><span class="line"><span class="comment">                包含handler、interceptorList、interceptorIndex</span></span><br><span class="line"><span class="comment">            handler：浏览器发送的请求所匹配的控制器方法</span></span><br><span class="line"><span class="comment">            interceptorList：处理控制器方法的所有拦截器集合</span></span><br><span class="line"><span class="comment">            interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            mappedHandler = getHandler(processedRequest);</span><br><span class="line">            <span class="keyword">if</span> (mappedHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">                noHandlerFound(processedRequest, response);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">           <span class="comment">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span></span><br><span class="line">            <span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isGet</span> <span class="operator">=</span> <span class="string">&quot;GET&quot;</span>.equals(method);</span><br><span class="line">            <span class="keyword">if</span> (isGet || <span class="string">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用拦截器的preHandle()</span></span><br><span class="line">            <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">            <span class="comment">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span></span><br><span class="line">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            applyDefaultViewName(processedRequest, mv);</span><br><span class="line">            <span class="comment">// 调用拦截器的postHandle()</span></span><br><span class="line">            mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            dispatchException = ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">            <span class="comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class="line">            <span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">            dispatchException = <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 后续处理：处理模型数据和渲染视图</span></span><br><span class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line">                               <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler processing failed&quot;</span>, err));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">            <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">            <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">                cleanupMultipart(processedRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="d-processDispatchResult"><a href="#d-processDispatchResult" class="headerlink" title="d&gt;processDispatchResult()"></a>d&gt;processDispatchResult()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">errorView</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class="line">            mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> (mappedHandler != <span class="literal">null</span> ? mappedHandler.getHandler() : <span class="literal">null</span>);</span><br><span class="line">            mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">            errorView = (mv != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">    <span class="keyword">if</span> (mv != <span class="literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">        <span class="comment">// 处理模型数据和渲染视图</span></span><br><span class="line">        render(mv, request, response);</span><br><span class="line">        <span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">            WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">        <span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Exception (if any) is already handled..</span></span><br><span class="line">        <span class="comment">// 调用拦截器的afterCompletion()</span></span><br><span class="line">        mappedHandler.triggerAfterCompletion(request, response, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、★SpringMVC的执行流程"><a href="#4、★SpringMVC的执行流程" class="headerlink" title="4、★SpringMVC的执行流程"></a>4、★SpringMVC的执行流程</h3><ol><li><p>用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</p></li><li><p>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</p></li></ol><p>a) 不存在</p><p>i. 再判断是否配置了mvc:default-servlet-handler</p><p>ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p><p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误</p><p>b) 存在则执行下面的流程</p><ol start="3"><li><p>根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器 -&gt; handlerChain），最后以HandlerExecutionChain执行链对象的形式返回。</p></li><li><p>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</p></li><li><p>如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向执行】</p></li><li><p>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p></li></ol><p>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p><p>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p><p>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p><p>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p><ol start="7"><li><p>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</p></li><li><p>此时将开始执行拦截器的postHandle(…)方法【逆向】。</p></li><li><p>根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。</p></li><li><p>渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</p></li><li><p>将渲染结果返回给客户端。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2023/10/05/Redis/"/>
      <url>/2023/10/05/Redis/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis的发布和订阅"><a href="#Redis的发布和订阅" class="headerlink" title="Redis的发布和订阅"></a>Redis的发布和订阅</h2><h3 id="什么是发布和订阅"><a href="#什么是发布和订阅" class="headerlink" title="什么是发布和订阅"></a>什么是发布和订阅</h3><p>Redis 发布订阅 (pub&#x2F;sub) 是一种<wavy>消息通信模式</wavy>：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p><p>Redis 客户端可以订阅任意数量的频道</p><h3 id="发布和订阅"><a href="#发布和订阅" class="headerlink" title="发布和订阅"></a>发布和订阅</h3><ol><li>客户端可以订阅频道如下图</li></ol><p>​                               <img src="/2023/10/05/Redis/image-20231021201021063.png" class title="image-20231021201021063"></p><ol start="2"><li>当给这个频道发布消息后，消息就会发送给订阅的客户端</li></ol> <img src="/2023/10/05/Redis/image-20231021201100483.png" class title="image-20231021201100483"><h3 id="发布订阅命令行实现"><a href="#发布订阅命令行实现" class="headerlink" title="发布订阅命令行实现"></a>发布订阅命令行实现</h3><ol><li>打开一个客户端订阅 channel1</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUBSCRIBE channel1</span><br></pre></td></tr></table></figure><p>其中可以在控制台看到如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE channel1</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;channel1&quot;</span><br><span class="line">3) (integer) 1</span><br></pre></td></tr></table></figure><ol start="2"><li>打开另外一个客户端, 给channel1发布消息 hello</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publish channel1 hello</span><br></pre></td></tr></table></figure><p>当前客户端会反馈</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; publish channel1 hello</span><br><span class="line">(integer) 1   # 返回的1是订阅者数量</span><br></pre></td></tr></table></figure><ol start="3"><li>订阅客户端可以看到发送的消息</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE channel1</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;channel1&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;channel1&quot;</span><br><span class="line">3) &quot;hello&quot;  # 刚刚发布的信息</span><br></pre></td></tr></table></figure><blockquote><p> 注：发布的消息没有持久化，如果在订阅的客户端收不到hello，只能收到订阅后发布的消息</p></blockquote><h2 id="Redis的新数据类型"><a href="#Redis的新数据类型" class="headerlink" title="Redis的新数据类型"></a>Redis的新数据类型</h2><h3 id="Bitmaps位图"><a href="#Bitmaps位图" class="headerlink" title="Bitmaps位图"></a>Bitmaps位图</h3><h4 id="setbit"><a href="#setbit" class="headerlink" title="setbit"></a><code>setbit</code></h4><p>setbit<key><offset><value>设置Bitmaps中某个偏移量的值（0或1）</value></offset></key></p><p>*offset:偏移量从0开始</p><p>实例:  每个独立用户是否访问过网站存放在Bitmaps中， 将访问的用户记做1， 没有访问的用户记做0， 用偏移量作为用户的id。</p><p>设置键的第offset个位的值（从0算起） ， 假设现在有6个用户，userid&#x3D;1， 3， 5 的用户对网站进行了访问， 那么当前Bitmaps初始化结果如图</p><table><thead><tr><th align="center">Bitmaps</th><th align="center">0</th><th align="center">1</th><th align="center">0</th><th align="center">1</th><th align="center">0</th><th align="center">1</th></tr></thead><tbody><tr><td align="center">用户</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td></tr></tbody></table><blockquote><p> 注: 很多应用的用户id以一个指定数字（例如10000） 开头， 直接将用户id和Bitmaps的偏移量对应势必会造成一定的浪费， 通常的做法是每次做setbit操作时将用户id减去这个指定数字。</p><p>在第一次初始化Bitmaps时， 假如偏移量非常大， 那么整个初始化过程执行会比较慢， 可能会造成Redis的阻塞。</p></blockquote><h4 id="getbit"><a href="#getbit" class="headerlink" title="getbit"></a><code>getbit</code></h4><p> 获取Bitmaps中某个偏移量的值 : <code>getbit&lt;key&gt;&lt;offset&gt;</code></p><p>例如(假如刚刚的案例为k1): <code>getbit k1 1</code> , 那么则返回的是 1  </p><h4 id="bitcount"><a href="#bitcount" class="headerlink" title="bitcount"></a><code>bitcount</code></h4><p>统计<strong>字符串</strong>被设置为1的bit数。一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行。start 和 end 参数的设置，都可以使用负数值：比如 -1 表示最后一个位，而 -2 表示倒数第二个位，start、end 是指bit组的字节的下标数，二者皆包含.</p><p>统计字符串从start字节到end字节比特值为1的数量 : <code>bitcount&lt;key&gt;[start end] </code></p><p>举例： K1 【01000001 01000000 00000000 00100001】，对应【0，1，2，3】</p><p>bitcount K1 1 2 ： 统计下标1、2字节组中bit&#x3D;1的个数，即01000000 00000000</p><p>–&gt;<code>bitcount K1 1 2</code>　　–&gt; 1</p><p>bitcount K1 1 3 ： 统计下标1、3字节组中bit&#x3D;1的个数，即01000000 00000000 00100001</p><p>–&gt;<code> bitcount K1 1 3</code>　　–&gt; 3</p><p>bitcount K1 0 -2 ： 统计下标0到下标倒数第2，字节组中bit&#x3D;1的个数，即01000001 01000000  00000000</p><p>–&gt; <code>bitcount K1 0 -2</code>　　–&gt; 3</p><blockquote><p>注意：redis的setbit设置或清除的是bit位置，而bitcount计算的是byte位置。</p></blockquote><h4 id="bitop"><a href="#bitop" class="headerlink" title="bitop"></a><code>bitop</code></h4><p><code>bitop and(or/not/xor) &lt;destkey&gt; [key…]</code></p><p>bitop是一个复合操作， 它可以做多个Bitmaps的and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在destkey中。</p><p>实例 2020-11-04 日访问网站的userid&#x3D;1,2,5,9。</p><p>setbit users:20201104 1 1</p><p>setbit users:20201104 2 1</p><p>setbit users:20201104 5 1</p><p>setbit users:20201104 9 1</p><p>2020-11-03 日访问网站的userid&#x3D;0,1,4,9。</p><p>setbit users:20201103 0 1</p><p>setbit users:20201103 1 1</p><p>setbit users:20201103 4 1</p><p>setbit users:20201103 9 1</p><p>计算出两天都访问过网站的用户数量</p><p><code>bitop and users:and:20201104_03  users:20201103 users:20201104</code></p><p>users:and:20201104_03  -&gt;  20201104和20201103的</p><img src="/2023/10/05/Redis/redis-bitop.png" class title="users:and:20201104_03: 解析图"><h4 id="Bitmaps与set对比"><a href="#Bitmaps与set对比" class="headerlink" title="Bitmaps与set对比"></a>Bitmaps与set对比</h4><p>假设网站有1亿用户， 每天独立访问的用户有5千万， 如果每天用集合类型和Bitmaps分别存储活跃用户可以得到表</p><table><thead><tr><th>set和Bitmaps存储一天活跃用户对比</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据  类型</td><td>每个用户id占用空间</td><td>需要存储的用户量</td><td>全部内存量</td></tr><tr><td>集合  类型</td><td>64位</td><td>50000000</td><td>64位*50000000 &#x3D; 400MB</td></tr><tr><td>Bitmaps</td><td>1位</td><td>100000000</td><td>1位*100000000 &#x3D; 12.5MB</td></tr></tbody></table><p>很明显， 这种情况下使用Bitmaps能节省很多的内存空间， 尤其是随着时间推移节省的内存还是非常可观的</p><table><thead><tr><th>set和Bitmaps存储独立用户空间对比</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据类型</td><td>一天</td><td>一个月</td><td>一年</td></tr><tr><td>集合类型</td><td>400MB</td><td>12GB</td><td>144GB</td></tr><tr><td>Bitmaps</td><td>12.5MB</td><td>375MB</td><td>4.5GB</td></tr></tbody></table><p>但Bitmaps并不是万金油， 假如该网站每天的独立访问用户很少， 例如只有10万（大量的僵尸用户） ， 那么两者的对比如下表所示， 很显然， 这时候使用Bitmaps就不太合适了， 因为基本上大部分位都是0。</p><table><thead><tr><th>set和Bitmaps存储一天活跃用户对比（独立用户比较少）</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据类型</td><td>每个userid占用空间</td><td>需要存储的用户量</td><td>全部内存量</td></tr><tr><td>集合类型</td><td>64位</td><td>100000</td><td>64位*100000 &#x3D; 800KB</td></tr><tr><td>Bitmaps</td><td>1位</td><td>100000000</td><td>1位*100000000 &#x3D; 12.5MB</td></tr></tbody></table><h3 id="HyperLogLog统计"><a href="#HyperLogLog统计" class="headerlink" title="HyperLogLog统计"></a>HyperLogLog统计</h3><p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站PV（PageView页面访问量）,可以使用Redis的incr、incrby轻松实现。</p><p>但像UV（UniqueVisitor，独立访客）、独立IP数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。</p><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><p>什么是基数?</p><p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数</p><h4 id="pfadd"><a href="#pfadd" class="headerlink" title="pfadd"></a><code>pfadd</code></h4><p>添加指定元素到 HyperLogLog 中:  <code>pfadd &lt;key&gt;&lt; element&gt; [element ...] </code> </p><p>例如:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pfadd program &quot;redis&quot;   # 往program里面添加redis</span><br><span class="line">pfadd program &quot;kafka&quot;</span><br></pre></td></tr></table></figure><p>将所有元素添加到指定HyperLogLog数据结构中。如果执行命令后HLL估计的近似基数发生变化，则返回1，否则返回0</p><p>在此时例如再往program添加redis 返回的结果是0,因为基数没有发生变化</p><h4 id="pfcount"><a href="#pfcount" class="headerlink" title="pfcount"></a><code>pfcount</code></h4><p>计算HLL的近似基数:  <code>pfcount&lt;key&gt; [key ...] </code> ，可以计算多个HLL，比如用HLL存储每天的UV，计算一周的UV可以使用7天的UV合并计算即可, 示例</p><img src="/2023/10/05/Redis/image-20231021211250381.png" class title="pfcount实例"><h4 id="pfmerge"><a href="#pfmerge" class="headerlink" title="pfmerge"></a><code>pfmerge</code></h4><p>将一个或多个HLL合并后的结果存储在另一个HLL中: <code>pfmerge&lt;destkey&gt;&lt;sourcekey&gt; [sourcekey ...] </code>，比如每月活跃用户可以使用每天的活跃用户来合并计算可得</p><img src="/2023/10/05/Redis/image-20231021211402606.png" class title="pfmerge"><h3 id="Geospatial地理信息"><a href="#Geospatial地理信息" class="headerlink" title="Geospatial地理信息"></a>Geospatial地理信息</h3><p>Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作</p><h4 id="geoadd添加地理位置"><a href="#geoadd添加地理位置" class="headerlink" title="geoadd添加地理位置"></a><code>geoadd</code>添加地理位置</h4><p> 添加地理位置（经度，纬度，名称）:  <code>geoadd&lt;key&gt;&lt; longitude&gt;&lt;latitude&gt;&lt;member&gt; [longitude latitude member...]</code></p><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">geoadd china:city <span class="number">121.47</span> <span class="number">31.23</span> shanghai</span><br><span class="line">geoadd china:city <span class="number">106.50</span> <span class="number">29.53</span> chongqing <span class="number">114.05</span> <span class="number">22.52</span> shenzhen <span class="number">116.38</span> <span class="number">39.90</span> beijing</span><br></pre></td></tr></table></figure><p>两极无法直接添加，一般会下载城市数据，直接通过 Java 程序一次性导入。</p><p>有效的经度从 -180 度到 180 度。有效的纬度从 -85.05112878 度到 85.05112878 度。</p><p>当坐标位置超出指定范围时，该命令将会返回一个错误。</p><p>已经添加的数据，是无法再次往里面添加的。</p><h4 id="geopos地区坐标值"><a href="#geopos地区坐标值" class="headerlink" title="geopos地区坐标值"></a><code>geopos</code>地区坐标值</h4><p>获得指定地区的坐标值:  <code>geopos &lt;key&gt;&lt;member&gt; [member...] </code></p><p>实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geopos china:city shanghai</span><br><span class="line">1) 2) &quot;121.47000163793563843&quot;</span><br><span class="line">   2) &quot;31.22999903975783553&quot;</span><br></pre></td></tr></table></figure><h4 id="geodist直线距离"><a href="#geodist直线距离" class="headerlink" title="geodist直线距离"></a><code>geodist</code>直线距离</h4><p>获取两个位置之间的直线距离<code>geodist&lt;key&gt;&lt;member1&gt;&lt;member2&gt; [m|km|ft|mi ]</code></p><p>实例</p><p>获取两个位置之间的直线距离</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geopos china:city beijin shanghai km</span><br><span class="line">&quot;1087.4816&quot;</span><br></pre></td></tr></table></figure><p>单位：</p><p>m 表示单位为米[默认值]。</p><p>km 表示单位为千米。</p><p>mi 表示单位为英里。</p><p>ft 表示单位为英尺。</p><p>如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位</p><h4 id="georadius找某一半径内的元素"><a href="#georadius找某一半径内的元素" class="headerlink" title="georadius找某一半径内的元素"></a><code>georadius</code>找某一半径内的元素</h4><p>以给定的经纬度为中心，找出某一半径内的元素 <code>georadius&lt;key&gt;&lt; longitude&gt;&lt;latitude&gt;radius m|km|ft|mi</code>经度 纬度 距离 单位</p><p>实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geopos china:city 110 30 1000 km</span><br><span class="line">1) &quot;chongqing&quot;</span><br><span class="line">2) &quot;shengzhen&quot;</span><br></pre></td></tr></table></figure><h2 id="Redis在SpringBoot的配置"><a href="#Redis在SpringBoot的配置" class="headerlink" title="Redis在SpringBoot的配置"></a>Redis在SpringBoot的配置</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><p>SpringBoot2.x</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="RedisConfig设置"><a href="#RedisConfig设置" class="headerlink" title="RedisConfig设置"></a>RedisConfig设置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"><span class="comment">//key序列化方式</span></span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line"><span class="comment">//value序列化</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"><span class="comment">//value hashmap序列化</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line"><span class="comment">//解决查询缓存转换异常的问题</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"><span class="comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        <span class="type">RedisCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redis事务、锁机制、秒杀★"><a href="#Redis事务、锁机制、秒杀★" class="headerlink" title="Redis事务、锁机制、秒杀★"></a>Redis事务、锁机制、秒杀★</h2><p>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>Redis事务的主要作用就是<strong>串联多个命令</strong>防止别的命令插队</p><h3 id="Multi、Exec、discard"><a href="#Multi、Exec、discard" class="headerlink" title="Multi、Exec、discard"></a>Multi、Exec、discard</h3><p>Multi：类似于开启事务 Transational(value&#x3D;true)</p><p>从输入Multi命令开始，输入的命令都会依次进入<strong>命令队列</strong>中，但不会执行，直到输入Exec后，Redis会将之前的命令队列中的命令<strong>依次执行</strong>。</p><p>组队的过程中可以通过discard来放弃组队</p><img src="/2023/10/05/Redis/Redis-queue.png" class title="Redis事务队列图"><p>案例: 当前我有两个命令 设置k1为1,k2为2 ,  控制台如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi    # 进入事务模式</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 1 # 设置k1为1,并且进入队列</span><br><span class="line">QUEUED                     </span><br><span class="line">127.0.0.1:6379&gt; set k2 2 # 设置k2为2,并且进入队列</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec     # 提交队列,依次执行</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br></pre></td></tr></table></figure><p>组队阶段报错，提交失败</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k3 3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k4</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;set&#x27; command</span><br><span class="line">127.0.0.1:6379&gt; set k5 5</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br></pre></td></tr></table></figure><p>组队成功，提交有成功有失败情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 k</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 k</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) OK</span><br><span class="line">2) (error) ERR value is not an integer or out of range</span><br><span class="line">3) OK</span><br></pre></td></tr></table></figure><h3 id="事务的错误处理"><a href="#事务的错误处理" class="headerlink" title="事务的错误处理"></a>事务的错误处理</h3><p><strong>组队中</strong>某个命令出现了报告错误，执行时整个的所有队列<strong>都会被取消</strong>(<strong>组队时是类似于原子性的</strong>)</p><img src="/2023/10/05/Redis/transational-error.png" class title="Redis事务错误处理"><p>如果<strong>执行阶段</strong>某个命令报出了错误，则<strong>只有报错</strong>的命令不会被执行，而其他的命令<strong>都会执行</strong>，不会回滚</p><img src="/2023/10/05/Redis/rollback.png" class><h3 id="事务冲突的问题"><a href="#事务冲突的问题" class="headerlink" title="事务冲突的问题"></a>事务冲突的问题</h3><p>例子:</p><p>在一个账户中,一个请求想给金额减8000</p><p>一个请求想给金额减5000</p><p>一个请求想给金额减1000</p><table><thead><tr><th align="center">开始金额</th><th align="center">逻辑判断</th><th align="center">操作结果</th><th align="center">最后结果</th></tr></thead><tbody><tr><td align="center"></td><td align="center">if 10000&gt;8000 then -8000</td><td align="center">-8000</td><td align="center"></td></tr><tr><td align="center">10000</td><td align="center">if 10000&gt;8000 then -5000</td><td align="center">-5000</td><td align="center">-4000</td></tr><tr><td align="center"></td><td align="center">if 10000&gt;8000 then -1000</td><td align="center">-1000</td><td align="center"></td></tr></tbody></table><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><img src="/2023/10/05/Redis/%E6%82%B2%E8%A7%82%E9%94%81.png" class title="悲观锁"><p><strong>悲观锁(Pessimistic Lock)</strong>, 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。<strong>传统的关系型数据库里边就用到了很多这种锁机制</strong>，比如<strong>行锁</strong>，<strong>表锁</strong>等，<strong>读锁</strong>，<strong>写锁</strong>等，都是在做操作之前先上锁</p><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><img src="/2023/10/05/Redis/%E4%B9%90%E8%A7%82%E9%94%81.png" class title="乐观锁"><p><strong>乐观锁(Optimistic Lock),</strong> 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。<strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong>。Redis就是利用这种check-and-set机制实现事务的。</p><h4 id="WATCH-key-key"><a href="#WATCH-key-key" class="headerlink" title="WATCH key [key . . .]"></a>WATCH key [key . . .]</h4><p>监视key: 在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务<strong>执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</strong>乐观锁版本号控制</p><h4 id="unwatch"><a href="#unwatch" class="headerlink" title="unwatch"></a>unwatch</h4><p>取消 WATCH 命令对所有 key 的监视。</p><p>如果在执行 WATCH 命令之后，EXEC 命令或DISCARD 命令先被执行了的话，那么就不需要再执行UNWATCH 了。</p><p><a href="http://doc.redisfans.com/transaction/exec.html">EXEC — Redis 命令参考 (redisfans.com)</a></p><h3 id="Redis事务三特性"><a href="#Redis事务三特性" class="headerlink" title="Redis事务三特性"></a>Redis事务三特性</h3><h4 id="单独的隔离操作"><a href="#单独的隔离操作" class="headerlink" title="单独的隔离操作"></a>单独的隔离操作</h4><p>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。 </p><h4 id="没有隔离级别的概念"><a href="#没有隔离级别的概念" class="headerlink" title="没有隔离级别的概念"></a>没有隔离级别的概念</h4><p> 队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</p><h4 id="不保证原子性"><a href="#不保证原子性" class="headerlink" title="不保证原子性"></a>不保证原子性</h4><p>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚 </p><h3 id="Redis事务秒杀案例"><a href="#Redis事务秒杀案例" class="headerlink" title="Redis事务秒杀案例"></a>Redis事务秒杀案例</h3><h4 id="解决计数器和人员记录的事务操作"><a href="#解决计数器和人员记录的事务操作" class="headerlink" title="解决计数器和人员记录的事务操作"></a>解决计数器和人员记录的事务操作</h4><p>商品库存: ( 减个数 )</p><table><thead><tr><th>key</th><th>string</th></tr></thead><tbody><tr><td>sk:prodid:qt</td><td>剩余个数</td></tr></tbody></table><p>秒杀成功者清单: ( 加个数, set集合去重 )</p><table><thead><tr><th>key</th><th>set</th></tr></thead><tbody><tr><td></td><td>成功者的user_id</td></tr><tr><td>sk:prod-id:user</td><td>成功者的user_id</td></tr><tr><td></td><td>成功者的user_id</td></tr></tbody></table><p>使用简单的代码模拟秒杀流程代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//秒杀过程 模拟</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">doSecKill</span><span class="params">(String uid,String prodid)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//1 uid和prodid非空判断</span></span><br><span class="line">    <span class="keyword">if</span>(uid == <span class="literal">null</span> || prodid == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2 连接redis</span></span><br><span class="line">    <span class="comment">// Jedis jedis = new Jedis(&quot;192.168.44.168&quot;,6379);</span></span><br><span class="line">    <span class="comment">//====(连接池)====(解决超时问题)</span></span><br><span class="line">    <span class="comment">//通过连接池得到jedis对象</span></span><br><span class="line">    <span class="type">JedisPool</span> <span class="variable">jedisPoolInstance</span> <span class="operator">=</span> JedisPoolUtil.getJedisPoolInstance();</span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPoolInstance.getResource();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3 拼接key</span></span><br><span class="line">    <span class="comment">// 3.1 库存key</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">kcKey</span> <span class="operator">=</span> <span class="string">&quot;sk:&quot;</span>+prodid+<span class="string">&quot;:qt&quot;</span>;</span><br><span class="line">    <span class="comment">// 3.2 秒杀成功用户key</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">userKey</span> <span class="operator">=</span> <span class="string">&quot;sk:&quot;</span>+prodid+<span class="string">&quot;:user&quot;</span>;</span><br><span class="line"><span class="comment">//====(乐观锁)====</span></span><br><span class="line">    <span class="comment">//监视库存 </span></span><br><span class="line">    jedis.watch(kcKey);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4 获取库存，如果库存null，秒杀还没有开始</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">kc</span> <span class="operator">=</span> jedis.get(kcKey);</span><br><span class="line">    <span class="keyword">if</span>(kc == <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;秒杀还没有开始，请等待&quot;</span>);</span><br><span class="line">        jedis.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5 判断用户是否重复秒杀操作</span></span><br><span class="line">    <span class="keyword">if</span>(jedis.sismember(userKey, uid)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已经秒杀成功了，不能重复秒杀&quot;</span>);</span><br><span class="line">        jedis.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6 判断如果商品数量，库存数量小于1，秒杀结束</span></span><br><span class="line">    <span class="keyword">if</span>(Integer.parseInt(kc)&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;秒杀已经结束了&quot;</span>);</span><br><span class="line">        jedis.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7 秒杀过程</span></span><br><span class="line">    <span class="comment">//使用事务</span></span><br><span class="line">    <span class="type">Transaction</span> <span class="variable">multi</span> <span class="operator">=</span> jedis.multi();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组队操作</span></span><br><span class="line">    multi.decr(kcKey);      <span class="comment">// 减少库存</span></span><br><span class="line">    multi.sadd(userKey,uid);<span class="comment">// 加入用户</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行</span></span><br><span class="line">    List&lt;Object&gt; results = multi.exec();</span><br><span class="line">    <span class="keyword">if</span>(results == <span class="literal">null</span> || results.size()==<span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;秒杀失败了....&quot;</span>);</span><br><span class="line">        jedis.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没有添加事务,会超卖</span></span><br><span class="line">    <span class="comment">//7.1 库存-1</span></span><br><span class="line">    <span class="comment">//jedis.decr(kcKey);</span></span><br><span class="line">    <span class="comment">//7.2 把秒杀成功用户添加清单里面</span></span><br><span class="line">    <span class="comment">//jedis.sadd(userKey,uid);</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;秒杀成功了..&quot;</span>);</span><br><span class="line">    jedis.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结: 当前案例代码模拟的秒杀, 先获取秒杀用户key和秒杀商品的key,  使用Redis的Watch监视库存,  判断库存情况,  如果存在库存,  开始秒杀,  在秒杀过程中判断用户是否重复秒杀,  以及判断库存是否不足,  开启事物,  进行组队(队列)操作,  然后执行exec(), 根据结果(List<Object> results)判断结果如何, 流程结束 (上述代码为完整的流程,加了连接池,加了乐观锁)                                                                                                                                                    </Object></p><h4 id="Redis事务秒杀并发模拟"><a href="#Redis事务秒杀并发模拟" class="headerlink" title="Redis事务秒杀并发模拟"></a>Redis事务秒杀并发模拟</h4><p>使用<strong>工具ab模拟</strong>测试 (CentOS6 默认安装   CentOS7需要手动安装) </p><p>联网：yum install httpd-tools</p><p>无网络:（1） 进入cd &#x2F;run&#x2F;media&#x2F;root&#x2F;CentOS 7 x86_64&#x2F;Packages（路径跟centos6不同）</p><p>顺序安装 : </p><p><code>apr-1.4.8-3.el7.x86_64.rpm</code></p><p><code>apr-util-1.5.2-6.el7.x86_64.rpm</code></p><p><code>httpd-tools-2.4.6-67.el7.centos.x86_64.rpm</code></p><p>通过ab测试</p><p>vim postfile 模拟表单提交参数,以&amp;符号结尾;存放当前目录。</p><p>内容：prodid&#x3D;0101&amp;</p><p><code>ab -n 2000 -c 200 -k -p ~/postfile -T application/x-www-form-urlencoded http://127.0.0.1:8081/Seckill/doseckill</code></p><blockquote><p>2000 个 请求中有200个是并发执行</p><p>-n 请求数,    -c 请求中的并发数量,  -p 提交参数,    -t  参数类型</p><p>127.0.0.1:8081: 实际上要加上当前主机的ip地址 ipconfig</p></blockquote><p>还可以通过Apipost等工具进行压测并发请求</p><h5 id="超卖"><a href="#超卖" class="headerlink" title="超卖"></a>超卖</h5><p>Redis中商品数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set sk:0101:qt 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get sk:0101:qt</span><br><span class="line">&quot;-2&quot;   # 在并发的时候库存变成了-2</span><br></pre></td></tr></table></figure><p>在后台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">秒杀成功!</span><br><span class="line">秒杀成功!</span><br><span class="line">秒杀成功!</span><br><span class="line">秒杀成功!</span><br><span class="line">已秒光!</span><br><span class="line">秒杀成功!</span><br><span class="line">已秒光!</span><br><span class="line">已秒光!</span><br><span class="line">已秒光!    </span><br></pre></td></tr></table></figure><h5 id="超卖问题"><a href="#超卖问题" class="headerlink" title="超卖问题"></a>超卖问题</h5><table><thead><tr><th align="center">总库存</th><th align="center">用户请求</th><th align="center">操作</th><th align="center">库存</th></tr></thead><tbody><tr><td align="center"></td><td align="center">A :1.检查是否还有库存 2. 有则-1</td><td align="center">-1</td><td align="center"></td></tr><tr><td align="center">10 (总)</td><td align="center">B: 1.检查是否还有库存 2. 有则-1</td><td align="center">-1</td><td align="center">-N (总)</td></tr><tr><td align="center"></td><td align="center">C: 1.检查是否还有库存 2. 有则-1</td><td align="center">-1</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">…. …</td><td align="center">…</td><td align="center"></td></tr></tbody></table><h5 id="利用乐观锁淘汰用户，解决超卖问题"><a href="#利用乐观锁淘汰用户，解决超卖问题" class="headerlink" title="利用乐观锁淘汰用户，解决超卖问题"></a>利用乐观锁淘汰用户，解决超卖问题</h5><img src="/2023/10/05/Redis/%E4%B9%90%E8%A7%82%E9%94%81%E8%A7%A3%E5%86%B3%E8%B6%85%E5%8D%96%E9%97%AE%E9%A2%98.png" class><p>对库存的key不断监视</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jedis.watch(kcKey); <span class="comment">//★</span></span><br></pre></td></tr></table></figure><p>对秒杀的过程使用事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//★使用事务</span></span><br><span class="line"><span class="type">Transaction</span> <span class="variable">multi</span> <span class="operator">=</span> jedis.multi();</span><br><span class="line"></span><br><span class="line"><span class="comment">//★组队操作</span></span><br><span class="line">multi.decr(kcKey);      <span class="comment">// 减少库存</span></span><br><span class="line">multi.sadd(userKey,uid);<span class="comment">// 加入用户,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line">List&lt;Object&gt; results = multi.exec();</span><br><span class="line"><span class="keyword">if</span>(results == <span class="literal">null</span> || results.size() == <span class="number">0</span>) &#123; <span class="comment">// 结果为空或者有其他的情况-&gt;失败 否则成功</span></span><br><span class="line">    log.info(<span class="string">&quot;秒杀失败了....&quot;</span>);</span><br><span class="line">    jedis.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结: 先Watch监视key,  然后加入事务组队,  最后执行,  判断返回的list集合</p></blockquote><p>走到这里了,  解决了超卖问题(加<strong>乐观锁</strong>),  解决了连接超时问题(<strong>使用JedisPool连接池</strong>),  但是发现还有<strong>库存遗留问题</strong>.  乐观锁造成库存遗留问题</p><h5 id="解决库存遗留问题"><a href="#解决库存遗留问题" class="headerlink" title="解决库存遗留问题"></a>解决库存遗留问题</h5><h6 id="Lua脚本"><a href="#Lua脚本" class="headerlink" title="Lua脚本"></a>Lua脚本</h6><p>Lua 是一个小巧的 <u>脚本语言</u>，Lua脚本可以很容易的被C&#x2F;C++ 代码调用，也可以反过来调用C&#x2F;C++的函数，Lua并没有提供强大的库，一个完整的Lua解释器不过200k，所以Lua不适合作为开发独立应用程序的语言，而是作为嵌入式脚本语言。</p><p>很多应用程序、游戏使用LUA作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。</p><h6 id="LUA脚本在Redis中的优势"><a href="#LUA脚本在Redis中的优势" class="headerlink" title="LUA脚本在Redis中的优势"></a>LUA脚本在Redis中的优势</h6><p>将复杂的或者多步的redis操作，写为一个脚本，一次提交给redis执行，减少反复连接redis的次数。<wavy>提升性能</wavy>。</p><p>LUA脚本是类似redis事务，有一定的<u>原子性</u>，不会被其他命令插队，可以完成一些redis事务性的操作。</p><p>但是注意redis的lua脚本功能，只有在Redis 2.6以上的版本才可以使用。</p><p>利用lua脚本淘汰用户，解决超卖问题。</p><p>redis 2.6版本以后，通过lua脚本解决<strong>争抢问题</strong>，实际上是<strong>redis</strong> <strong>利用其单线程的特性，用任务队列的方式解决多任务并发问题</strong>。</p><img src="/2023/10/05/Redis/lua.png" class title="lua脚本 执行"><p><a href="https://www.w3cschool.cn/lua/">Lua 教程_w3cschool</a></p><h6 id="解决库存依赖问题-lua脚本"><a href="#解决库存依赖问题-lua脚本" class="headerlink" title="解决库存依赖问题,lua脚本"></a>解决库存依赖问题,lua脚本</h6><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> userid=KEYS[<span class="number">1</span>]; <span class="comment">-- 获取用户id</span></span><br><span class="line"><span class="keyword">local</span> prodid=KEYS[<span class="number">2</span>]; <span class="comment">-- 获取商品id</span></span><br><span class="line"><span class="comment">-- key拼接</span></span><br><span class="line"><span class="keyword">local</span> qtkey=<span class="string">&quot;sk:&quot;</span>..prodid..<span class="string">&quot;:qt&quot;</span>;</span><br><span class="line"><span class="keyword">local</span> usersKey=<span class="string">&quot;sk:&quot;</span>..prodid.<span class="string">&quot;:usr&#x27;; </span></span><br><span class="line"><span class="string">-- 判断用户key是否在当前清单中存在</span></span><br><span class="line"><span class="string">local userExists=redis.call(&quot;</span>sismember<span class="string">&quot;,usersKey,userid);</span></span><br><span class="line"><span class="string">-- 用户已经秒杀过了,约定返回2</span></span><br><span class="line"><span class="string">if tonumber(userExists)==1 then </span></span><br><span class="line"><span class="string">  return 2; </span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">local num= redis.call(&quot;</span>get<span class="string">&quot; ,qtkey);</span></span><br><span class="line"><span class="string">-- 秒杀结束</span></span><br><span class="line"><span class="string">if tonumber(num)&lt;=0 then </span></span><br><span class="line"><span class="string">  return 0; </span></span><br><span class="line"><span class="string">-- 否则添加清单,减少库存</span></span><br><span class="line"><span class="string">else </span></span><br><span class="line"><span class="string">  redis.call(&quot;</span>decr<span class="string">&quot;,qtkey);</span></span><br><span class="line"><span class="string">  redis.call(&quot;</span>sadd<span class="string">&quot;,usersKey,userid);</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">-- 秒杀成功</span></span><br><span class="line"><span class="string">return 1;</span></span><br></pre></td></tr></table></figure><p>对于这个脚本如何使用?<psw>我也不知道,不是</psw>,  例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisByScript</span> &#123;</span><br><span class="line"><span class="comment">//  ===Lua脚本===</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">String</span> <span class="variable">secKillScript</span> <span class="operator">=</span><span class="string">&quot;local userid=KEYS[1];\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;local prodid=KEYS[2];\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;local qtkey=&#x27;sk:&#x27;..prodid..\&quot;:qt\&quot;;\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;local usersKey=&#x27;sk:&#x27;..prodid..\&quot;:usr\&quot;;\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;local userExists=redis.call(\&quot;sismember\&quot;,usersKey,userid);\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;if tonumber(userExists)==1 then \r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;   return 2;\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;end\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;local num= redis.call(\&quot;get\&quot; ,qtkey);\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;if tonumber(num)&lt;=0 then \r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;   return 0;\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;else \r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;   redis.call(\&quot;decr\&quot;,qtkey);\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;   redis.call(\&quot;sadd\&quot;,usersKey,userid);\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;end\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;return 1&quot;</span> ;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">static</span> <span class="type">String</span> <span class="variable">secKillScript2</span> <span class="operator">=</span> </span><br><span class="line"><span class="string">&quot;local userExists=redis.call(\&quot;sismember\&quot;,\&quot;&#123;sk&#125;:0101:usr\&quot;,userid);\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot; return 1&quot;</span>;</span><br><span class="line"><span class="comment">// 秒杀流程封装, 结合Lua</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">doSecKill</span><span class="params">(String uid,String prodid)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">JedisPool</span> <span class="variable">jedispool</span> <span class="operator">=</span>  JedisPoolUtil.getJedisPoolInstance();</span><br><span class="line">Jedis jedis=jedispool.getResource();</span><br><span class="line"></span><br><span class="line"> <span class="comment">//String sha1=  .secKillScript;</span></span><br><span class="line">        <span class="comment">// 调用Jedis加载脚本方法,加载刚刚描写的lua脚本</span></span><br><span class="line">String sha1=  jedis.scriptLoad(secKillScript);</span><br><span class="line">Object result= jedis.evalsha(sha1, <span class="number">2</span>, uid,prodid);</span><br><span class="line"></span><br><span class="line">  String reString=String.valueOf(result);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;0&quot;</span>.equals( reString )  ) &#123;</span><br><span class="line">System.err.println(<span class="string">&quot;已抢空！！&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals( reString )  )  &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;抢购成功！！！！&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals( reString )  )  &#123;</span><br><span class="line">System.err.println(<span class="string">&quot;该用户已抢过！！&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.err.println(<span class="string">&quot;抢购异常！！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redis持久化之RDB"><a href="#Redis持久化之RDB" class="headerlink" title="Redis持久化之RDB"></a>Redis持久化之RDB</h2><p><a href="https://redis.io/">Redis</a>官网</p><p>Redis 提供了2个不同形式的持久化方式。</p><p>(1) RDB（Redis DataBase） </p><p>(2) AOF（Append Of File） </p><h3 id="RDB-Redis-DataBase"><a href="#RDB-Redis-DataBase" class="headerlink" title="RDB(Redis DataBase)"></a>RDB(Redis DataBase)</h3><h4 id="是什么"><a href="#是什么" class="headerlink" title="是什么?"></a>是什么?</h4><p>在指定的<wavy>时间间隔</wavy>内将内存中的<strong>数据集</strong><wavy>快照</wavy>写入磁盘， 也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里,  快照记录某一刻的数据</p><h4 id="备份是如何执行的"><a href="#备份是如何执行的" class="headerlink" title="备份是如何执行的?"></a>备份是如何执行的?</h4><p>Redis会单独创建（fork）一个子进程来进行持久化，会<strong>先</strong>将数据写入到 一个<u>临时文件</u>中，待持久化过程都结束了，再用这个<strong>临时文件替换上次持久化好的文件(dump.rdb)<strong>。 整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能 如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。</strong>RDB的缺点是<emp>最后一次持久化后的数据可能丢失</emp></strong> .</p><h4 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h4><ul><li>Fork的作用是复制一个与当前进程<strong>一样的进程</strong>。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并<emp>作为原进程的子进程</emp></li><li><span class="p green">在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，Linux中引入了<u>写时复制技术</u></span></li><li><span class="p green"><u>一般情况父进程和子进程会共用同一段物理内存</u>，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</span></li></ul><h4 id="RDB持久流程"><a href="#RDB持久流程" class="headerlink" title="RDB持久流程"></a>RDB持久流程</h4><img src="/2023/10/05/Redis/RDB%E6%8C%81%E4%B9%85%E5%8C%96%E6%B5%81%E7%A8%8B.png" class><h4 id="dump-rdb文件"><a href="#dump-rdb文件" class="headerlink" title="dump.rdb文件"></a>dump.rdb文件</h4><p>在redis.conf中配置文件名称,  默认为dump.rdb</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RDB files created with checksum disabled have a checksum of zero that will</span></span><br><span class="line"><span class="comment"># tell the loading code to skip the check.</span></span><br><span class="line"><span class="attr">rdbchecksum</span> <span class="string">yes</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># The filename where to dump the DB</span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">dump.rdb     # 此处为修改持久保存的文件名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># The working directory.</span></span><br></pre></td></tr></table></figure><h4 id="配置位置"><a href="#配置位置" class="headerlink" title="配置位置"></a>配置位置</h4><p>rdb文件的保存位置,  也可以修改.  默认为Redis启动时命令行所在的目录下</p><p><code>dir  &quot;/myredis&quot;</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The working directory.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The DB will be written inside this directory, with the filename specified</span></span><br><span class="line"><span class="comment"># above using the &#x27;dbfilename&#x27; configuration directive.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># The Append Only File will also be created inside this directory.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Note that you must specify a directory here, not a file name.</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">./     # 此处为修改文件保存位置路径</span></span><br></pre></td></tr></table></figure><h4 id="如何触发RDB快照；保持策略"><a href="#如何触发RDB快照；保持策略" class="headerlink" title="如何触发RDB快照；保持策略"></a>如何触发RDB快照；保持策略</h4><h5 id="配置文件中默认的快照配置"><a href="#配置文件中默认的快照配置" class="headerlink" title="配置文件中默认的快照配置"></a>配置文件中默认的快照配置</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################ SNAPSHOTTING  ################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Save the DB on disk:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   save &lt;seconds&gt; &lt;changes&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Will save the DB if both the given number of seconds and the given</span></span><br><span class="line"><span class="comment">#   number of write operations against the DB occurred.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   In the example below the behaviour will be to save:</span></span><br><span class="line"><span class="comment">#   after 900 sec (15 min) if at least 1 key changed</span></span><br><span class="line"><span class="comment">#   after 300 sec (5 min) if at least 10 keys changed</span></span><br><span class="line"><span class="comment">#   after 60 sec if at least 10000 keys changed</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   <span class="doctag">Note:</span> you can disable saving completely by commenting out all &quot;save&quot; lines.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   It is also possible to remove all the previously configured save</span></span><br><span class="line"><span class="comment">#   points by adding a save directive` with a single empty string argument</span></span><br><span class="line"><span class="comment">#   like in the following example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   save &quot;&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#如果至少有1个key变化在900秒后保存</span></span><br><span class="line"><span class="attr">save</span> <span class="string">900 1</span></span><br><span class="line"><span class="comment">#如果至少有10个key变化在300秒后保存</span></span><br><span class="line"><span class="attr">save</span> <span class="string">300 10</span></span><br><span class="line"><span class="comment">#如果至少有10000个key变化在60秒后保存</span></span><br><span class="line"><span class="attr">save</span> <span class="string">60 10000</span></span><br></pre></td></tr></table></figure><h5 id="save-VS-bgsave"><a href="#save-VS-bgsave" class="headerlink" title="save VS bgsave"></a>save VS bgsave</h5><p>save ：save时只管保存，其它不管，全部阻塞。手动保存。不建议。</p><p><strong><u>bgsave</u>：<u>Redis会在后台异步进行快照操作，快照同时还可以响应客户端请求。</u></strong></p><p>可以通过lastsave 命令获取最后一次成功执行快照的时间</p><h4 id="flushall命令"><a href="#flushall命令" class="headerlink" title="flushall命令"></a>flushall命令</h4><h3 id="AOF-Append-of-File"><a href="#AOF-Append-of-File" class="headerlink" title="AOF(Append of File)"></a>AOF(Append of File)</h3>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatisPlus</title>
      <link href="/2023/09/25/MyBatisPlus/"/>
      <url>/2023/09/25/MyBatisPlus/</url>
      
        <content type="html"><![CDATA[<p>刮开看看：<psw>此篇文章用于测试博客的第三方是否生效，例如：Qexo</psw></p>]]></content>
      
      
      <categories>
          
          <category> MyBatisPlus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> MyBatisPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决github Connection timed out问题</title>
      <link href="/2023/09/24/Github%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/"/>
      <url>/2023/09/24/Github%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="问题点"><a href="#问题点" class="headerlink" title="问题点"></a>问题点</h2><blockquote><p>ssh: connect to host github.com port 22: Connection timed out</p></blockquote><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>找到git的安装目录，找到<code>/etc/ssh/ssh_config</code>文件</p><p>在文件(<code> ssh_config</code>)末尾处添加 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User git</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure><p>再次进行提交,后续有可能会提示是否继续 我们选择yes即可</p>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring基础部分</title>
      <link href="/2023/09/24/Spring/"/>
      <url>/2023/09/24/Spring/</url>
      
        <content type="html"><![CDATA[<p>Spring总结来说就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架</p><h1 id="Spring基础"><a href="#Spring基础" class="headerlink" title="Spring基础"></a>Spring基础</h1><h2 id="容器：IoC"><a href="#容器：IoC" class="headerlink" title="容器：IoC"></a>容器：IoC</h2><p>IoC 是 Inversion of Control 的简写，译为“控制反转”，它不是一门技术，而是一种设计思想，是一个重要的面向对象编程法则，能够指导我们如何设计出松耦合、更优良的程序。</p><p>Spring 通过 IoC 容器来管理所有 Java 对象的实例化和初始化，控制对象与对象之间的依赖关系。我们将由 IoC 容器管理的 Java 对象称为 Spring Bean，它与使用关键字 new 创建的 Java 对象没有任何区别。</p><p>IoC 容器是 Spring 框架中最重要的核心组件之一，它贯穿了 Spring 从诞生到成长的整个过程。</p><h3 id="IoC容器"><a href="#IoC容器" class="headerlink" title="IoC容器"></a>IoC容器</h3><h4 id="控制反转（IoC）"><a href="#控制反转（IoC）" class="headerlink" title="控制反转（IoC）"></a>控制反转（IoC）</h4><ul><li><p>控制反转是一种思想。</p></li><li><p>控制反转是为了降低程序耦合度，提高程序扩展力。</p></li><li><p>控制反转，反转的是什么？</p></li><li><ul><li>将对象的创建权利交出去，交给第三方容器负责。</li><li>将对象和对象之间关系的维护权交出去，交给第三方容器负责。</li></ul></li><li><p>控制反转这种思想如何实现呢？</p></li><li><ul><li>DI（Dependency Injection）：依赖注入</li></ul></li></ul><h4 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h4><p>DI（Dependency Injection）：依赖注入，依赖注入实现了控制反转的思想。</p><p><strong>依赖注入：</strong></p><ul><li><strong>指Spring创建对象的过程中，将对象依赖属性通过配置进行注入</strong></li></ul><p>依赖注入常见的实现方式包括两种：</p><ul><li>第一种：set注入</li><li>第二种：构造注入</li></ul><p>所以结论是：IOC 就是一种控制反转的思想， 而 DI 是对IoC的一种具体实现。</p><p><strong>Bean管理说的是：Bean对象的创建，以及Bean对象中属性的赋值（或者叫做Bean对象之间关系的维护）。</strong></p><h4 id="IoC容器在Spring的实现"><a href="#IoC容器在Spring的实现" class="headerlink" title="IoC容器在Spring的实现"></a>IoC容器在Spring的实现</h4><p>Spring 的 IoC 容器就是 IoC思想的一个落地的产品实现。IoC容器中管理的组件也叫做 bean。在创建 bean 之前，首先需要创建IoC 容器。Spring 提供了IoC 容器的两种实现方式：</p><p><strong>①BeanFactory</strong></p><p>这是 IoC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用。</p><p><strong>②ApplicationContext</strong></p><p>BeanFactory 的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory。</p><p><strong>③ApplicationContext的主要实现类</strong></p><table><thead><tr><th>类型名</th><th>简介</th></tr></thead><tbody><tr><td>ClassPathXmlApplicationContext</td><td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>FileSystemXmlApplicationContext</td><td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>ConfigurableApplicationContext</td><td>ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、关闭和刷新上下文的能力。</td></tr><tr><td>WebApplicationContext</td><td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。</td></tr></tbody></table><h3 id="基于XML管理Bean"><a href="#基于XML管理Bean" class="headerlink" title="基于XML管理Bean"></a>基于XML管理Bean</h3><h4 id="搭建子模块spring6-ioc-xml"><a href="#搭建子模块spring6-ioc-xml" class="headerlink" title="搭建子模块spring6-ioc-xml"></a>搭建子模块spring6-ioc-xml</h4><p><strong>①搭建模块</strong></p><p>搭建方式如：spring-first</p><p><strong>②引入配置文件</strong></p><p>引入spring-first模块配置文件：beans.xml、log4j2.xml</p><p><strong>③添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--log4j2的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>④引入java类</strong></p><p>引入spring-first模块java及test目录下实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参数构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(HelloWorldTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHelloWorld</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实验一：获取bean"><a href="#实验一：获取bean" class="headerlink" title="实验一：获取bean"></a>实验一：获取bean</h4><h5 id="①方式一：根据id获取"><a href="#①方式一：根据id获取" class="headerlink" title="①方式一：根据id获取"></a>①方式一：根据id获取</h5><p>由于 id 属性指定了 bean 的唯一标识，所以根据 bean 标签的 id 属性可以精确获取到一个组件对象。上个实验中我们使用的就是这种方式。</p><h5 id="②方式二：根据类型获取"><a href="#②方式二：根据类型获取" class="headerlink" title="②方式二：根据类型获取"></a>②方式二：根据类型获取</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHelloWorld1</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    <span class="type">HelloWorld</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(HelloWorld.class);</span><br><span class="line">    bean.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="③方式三：根据id和类型"><a href="#③方式三：根据id和类型" class="headerlink" title="③方式三：根据id和类型"></a>③方式三：根据id和类型</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHelloWorld2</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    <span class="type">HelloWorld</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;helloworld&quot;</span>, HelloWorld.class);</span><br><span class="line">    bean.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="④注意的地方"><a href="#④注意的地方" class="headerlink" title="④注意的地方"></a>④注意的地方</h5><p>当根据类型获取bean时，要求IOC容器中指定类型的bean有且只能有一个</p><p>当IOC容器中一共配置了两个：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloworldOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.bean.HelloWorld&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloworldTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.bean.HelloWorld&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根据类型获取时会抛出异常：</p><blockquote><p>org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type ‘com.hang.spring6.bean.HelloWorld’ available: expected single matching bean but found 2: helloworldOne,helloworldTwo</p></blockquote><h5 id="⑤扩展知识"><a href="#⑤扩展知识" class="headerlink" title="⑤扩展知识"></a>⑤扩展知识</h5><p>如果组件类实现了接口，根据接口类型可以获取 bean 吗？</p><blockquote><p>可以，前提是bean唯一</p></blockquote><p>如果一个接口有多个实现类，这些实现类都配置了 bean，根据接口类型可以获取 bean 吗？</p><blockquote><p>不行，因为bean不唯一</p></blockquote><p><strong>结论</strong></p><p>根据类型来获取bean时，在满足bean唯一性的前提下，其实只是看：『对象 <strong>instanceof</strong> 指定的类型』的返回结果，只要返回的是true就可以认定为和类型匹配，能够获取到。</p><p>java中，instanceof运算符用于判断前面的对象是否是后面的类，或其子类、实现类的实例。如果是返回true，否则返回false。也就是说：用instanceof关键字做判断时， instanceof 操作符的左右操作必须有继承或实现关系</p><h4 id="实验二：依赖注入之setter注入"><a href="#实验二：依赖注入之setter注入" class="headerlink" title="实验二：依赖注入之setter注入"></a>实验二：依赖注入之setter注入</h4><p><strong>①创建学生类Student</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.bean;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoConstructor</span></span><br><span class="line"><span class="meta">@AllConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>②配置bean时为属性赋值</strong></p><p>spring-di.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value属性：指定属性值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;23&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>③测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDIBySet</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-di.xml&quot;</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">studentOne</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;studentOne&quot;</span>, Student.class);</span><br><span class="line">    System.out.println(studentOne);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实验三：依赖注入之构造器注入"><a href="#实验三：依赖注入之构造器注入" class="headerlink" title="实验三：依赖注入之构造器注入"></a>实验三：依赖注入之构造器注入</h4><p><strong>①在Student类中添加有参构造</strong></p><p><strong>②配置bean</strong></p><p>spring-di.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;1002&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;33&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>constructor-arg标签还有两个属性可以进一步描述构造器参数：</p><ul><li>index属性：指定参数所在位置的索引（从0开始）</li><li>name属性：指定参数名</li></ul></blockquote><p><strong>③测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDIByConstructor</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-di.xml&quot;</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">studentOne</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;studentTwo&quot;</span>, Student.class);</span><br><span class="line">    System.out.println(studentOne);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实验四：特殊值处理"><a href="#实验四：特殊值处理" class="headerlink" title="实验四：特殊值处理"></a>实验四：特殊值处理</h4><h5 id="①字面量赋值"><a href="#①字面量赋值" class="headerlink" title="①字面量赋值"></a>①字面量赋值</h5><blockquote><p>什么是字面量？</p><p>int a &#x3D; 10;</p><p>声明一个变量a，初始化为10，此时a就不代表字母a了，而是作为一个变量的名字。当我们引用a的时候，我们实际上拿到的值是10。</p><p>而如果a是带引号的：’a’，那么它现在不是一个变量，它就是代表a这个字母本身，这就是字面量。所以字面量没有引申含义，就是我们看到的这个数据本身。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用value属性给bean的属性赋值时，Spring会把value属性的值看做字面量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="②null值"><a href="#②null值" class="headerlink" title="②null值"></a>②null值</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;null&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上写法，为name所赋的值是字符串null</p></blockquote><h5 id="③xml实体"><a href="#③xml实体" class="headerlink" title="③xml实体"></a>③xml实体</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 小于号在XML文档中用来定义标签的开始，不能随便使用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 解决方案一：使用XML实体来代替 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;expression&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a <span class="symbol">&amp;lt;</span> b&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="④CDATA节"><a href="#④CDATA节" class="headerlink" title="④CDATA节"></a>④CDATA节</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;expression&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 解决方案二：使用CDATA节 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 所以CDATA节中写什么符号都随意 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="实验五：为对象类型属性赋值"><a href="#实验五：为对象类型属性赋值" class="headerlink" title="实验五：为对象类型属性赋值"></a>实验五：为对象类型属性赋值</h4><p><strong>①创建班级类Clazz</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoConstructor</span></span><br><span class="line"><span class="meta">@AllConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Clazz</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer clazzId;</span><br><span class="line">    <span class="keyword">private</span> String clazzName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>②修改Student类</strong></p><p>在Student类中添加Get、Set方法</p><h5 id="方式一：引用外部bean"><a href="#方式一：引用外部bean" class="headerlink" title="方式一：引用外部bean"></a>方式一：引用外部bean</h5><p>配置Clazz类型的bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1111&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;财源滚滚班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为Student中的clazz属性赋值：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>错误演示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">value</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果错把ref属性写成了value属性，会抛出异常： Caused by: java.lang.IllegalStateException: Cannot convert value of type ‘java.lang.String’ to required type ‘com.hang.spring6.bean.Clazz’ for property ‘clazz’: no matching editors or conversion strategy found </p><p>意思是不能把String类型转换成我们要的Clazz类型，说明我们使用value属性时，Spring只把这个属性看做一个普通的字符串，不会认为这是一个bean的id，更不会根据它去找到bean来赋值</p></blockquote><h5 id="方式二：内部bean"><a href="#方式二：内部bean" class="headerlink" title="方式二：内部bean"></a>方式二：内部bean</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在一个bean中再声明一个bean就是内部bean --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzInner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;远大前程班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="方式三：级联属性赋值"><a href="#方式三：级联属性赋值" class="headerlink" title="方式三：级联属性赋值"></a>方式三：级联属性赋值</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3333&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;最强王者班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="实验六：为数组类型属性赋值"><a href="#实验六：为数组类型属性赋值" class="headerlink" title="实验六：为数组类型属性赋值"></a>实验六：为数组类型属性赋值</h4><p><strong>①修改Student类</strong></p><p>在Student类中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] hobbies;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String[] getHobbies() &#123;</span><br><span class="line">    <span class="keyword">return</span> hobbies;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobbies</span><span class="params">(String[] hobbies)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.hobbies = hobbies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>②配置bean</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring.bean6.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="实验七：为集合类型属性赋值"><a href="#实验七：为集合类型属性赋值" class="headerlink" title="实验七：为集合类型属性赋值"></a>实验七：为集合类型属性赋值</h4><h5 id="①为List集合类型属性赋值"><a href="#①为List集合类型属性赋值" class="headerlink" title="①为List集合类型属性赋值"></a>①为List集合类型属性赋值</h5><p>在Clazz类中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">getStudents</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> students;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudents</span><span class="params">(List&lt;Student&gt; students)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.students = students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4444&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Javaee0222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentThree&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>若为Set集合类型属性赋值，只需要将其中的list标签改为set标签即可</p></blockquote><h5 id="②为Map集合类型属性赋值"><a href="#②为Map集合类型属性赋值" class="headerlink" title="②为Map集合类型属性赋值"></a>②为Map集合类型属性赋值</h5><p>创建教师类Teacher：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoConstructor</span></span><br><span class="line"><span class="meta">@AllConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer teacherId;</span><br><span class="line">    <span class="keyword">private</span> String teacherName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Student类中添加以下代码(添加老师集合,一个学生对应多个老师)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, Teacher&gt; teacherMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Teacher&gt; <span class="title function_">getTeacherMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> teacherMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacherMap</span><span class="params">(Map&lt;String, Teacher&gt; teacherMap)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.teacherMap = teacherMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacherOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.bean.Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10010&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;大宝&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacherTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.bean.Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10086&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;二宝&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10086<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="③引用集合类型的bean"><a href="#③引用集合类型的bean" class="headerlink" title="③引用集合类型的bean"></a>③引用集合类型的bean</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--list集合类型的bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentThree&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--map集合类型的bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>10010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>10086<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4444&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Javaee0222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;students&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherMap&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用util:list、util:map标签必须引入相应的命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="实验八：p命名空间"><a href="#实验八：p命名空间" class="headerlink" title="实验八：p命名空间"></a>实验八：p命名空间</h4><p>引入p命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入p命名空间后，可以通过以下方式为bean的各个属性赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentSix&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.bean.Student&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:id</span>=<span class="string">&quot;1006&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;小明&quot;</span> <span class="attr">p:clazz-ref</span>=<span class="string">&quot;clazzOne&quot;</span> <span class="attr">p:teacherMap-ref</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="实验九：引入外部属性文件"><a href="#实验九：引入外部属性文件" class="headerlink" title="实验九：引入外部属性文件"></a>实验九：引入外部属性文件</h4><p><strong>①加入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>②创建外部属性文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">hang</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p><strong>③引入属性文件</strong></p><p>引入context 名称空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入外部属性文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>注意：在使用 <a href="context:property-placeholder">context:property-placeholder</a> 元素加载外包配置文件功能前，首先需要在 XML 配置的一级标签 <beans> 中添加 context 相关的约束。</beans></p><p><strong>④配置bean</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>⑤测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-datasource.xml&quot;</span>);</span><br><span class="line">    <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> ac.getBean(DataSource.class);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实验十：bean的作用域"><a href="#实验十：bean的作用域" class="headerlink" title="实验十：bean的作用域"></a>实验十：bean的作用域</h4><p><strong>①概念</strong></p><p>在Spring中可以通过配置bean标签的scope属性来指定bean的作用域范围，各取值含义参加下表：</p><table><thead><tr><th>取值</th><th>含义</th><th>创建对象的时机</th></tr></thead><tbody><tr><td>singleton（默认）</td><td>在IOC容器中，这个bean的对象始终为单实例</td><td>IOC容器初始化时</td></tr><tr><td>prototype</td><td>这个bean在IOC容器中有多个实例</td><td>获取bean时</td></tr></tbody></table><p>如果是在WebApplicationContext环境下还会有另外几个作用域（但不常用）：</p><table><thead><tr><th>取值</th><th>含义</th></tr></thead><tbody><tr><td>request</td><td>在一个请求范围内有效</td></tr><tr><td>session</td><td>在一个会话范围内有效</td></tr></tbody></table><p><strong>②创建类User</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.bean;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String username, String password, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;/&#x27;</span><span class="string">&#x27; +</span></span><br><span class="line"><span class="string">                &quot;, password=&#x27;</span><span class="string">&quot; + password + &#x27;/&#x27;&#x27; +</span></span><br><span class="line"><span class="string">                &quot;</span>, age=<span class="string">&quot; + age +</span></span><br><span class="line"><span class="string">                &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>③配置bean</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建对象 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.bean.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>④测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBeanScope</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-scope.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> ac.getBean(User.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> ac.getBean(User.class);</span><br><span class="line">    System.out.println(user1==user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实验十一：bean生命周期"><a href="#实验十一：bean生命周期" class="headerlink" title="实验十一：bean生命周期"></a>实验十一：bean生命周期</h4><p><strong>①具体的生命周期过程</strong></p><ul><li><p>bean对象创建（调用无参构造器）</p></li><li><p>给bean对象设置属性</p></li><li><p>bean的后置处理器（初始化之前）</p></li><li><p>bean对象初始化（需在配置bean时指定初始化方法）</p></li><li><p>bean的后置处理器（初始化之后）</p></li><li><p>bean对象就绪可以使用</p></li><li><p>bean对象销毁（需在配置bean时指定销毁方法）</p></li><li><p>IOC容器关闭</p></li></ul><p><strong>②修改类User</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期：1、创建对象&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String username, String password, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期：2、依赖注入&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期：3、初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期：5、销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;/&#x27;</span><span class="string">&#x27; +</span></span><br><span class="line"><span class="string">                &quot;, password=&#x27;</span><span class="string">&quot; + password + &#x27;/&#x27;&#x27; +</span></span><br><span class="line"><span class="string">                &quot;</span>, age=<span class="string">&quot; + age +</span></span><br><span class="line"><span class="string">                &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意其中的initMethod()和destroyMethod()，可以通过配置bean指定为初始化和销毁的方法</p></blockquote><p><strong>③配置bean</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用init-method属性指定初始化方法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用destroy-method属性指定销毁方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.bean.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;23&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>④测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLife</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-lifecycle.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(User.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;生命周期：4、通过IOC容器获取bean并使用&quot;</span>);</span><br><span class="line">    ac.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>⑤bean的后置处理器</strong></p><p>bean的后置处理器会在生命周期的初始化前后添加额外的操作，需要实现BeanPostProcessor接口，且配置到IOC容器中，需要注意的是，bean后置处理器不是单独针对某一个bean生效，而是针对IOC容器中所有bean都会执行</p><p>创建bean的后置处理器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.process;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;☆☆☆&quot;</span> + beanName + <span class="string">&quot; = &quot;</span> + bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;★★★&quot;</span> + beanName + <span class="string">&quot; = &quot;</span> + bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在IOC容器中配置后置处理器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bean的后置处理器要放入IOC容器才能生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanProcessor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.process.MyBeanProcessor&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="实验十二：FactoryBean"><a href="#实验十二：FactoryBean" class="headerlink" title="实验十二：FactoryBean"></a>实验十二：FactoryBean</h4><p><strong>①简介</strong></p><p>FactoryBean是Spring提供的一种整合第三方框架的常用机制。和普通的bean不同，配置一个FactoryBean类型的bean，在获取bean的时候得到的并不是class属性中配置的这个类的对象，而是getObject()方法的返回值。通过这种机制，Spring可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来，只把最简洁的使用界面展示给我们。</p><p>将来我们整合Mybatis时，Spring就是通过FactoryBean机制来帮我们创建SqlSessionFactory对象的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2020 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> org.springframework.beans.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface to be implemented by objects used within a &#123;<span class="doctag">@link</span> BeanFactory&#125; which</span></span><br><span class="line"><span class="comment"> * are themselves factories for individual objects. If a bean implements this</span></span><br><span class="line"><span class="comment"> * interface, it is used as a factory for an object to expose, not directly as a</span></span><br><span class="line"><span class="comment"> * bean instance that will be exposed itself.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;NB: A bean that implements this interface cannot be used as a normal bean.&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * A FactoryBean is defined in a bean style, but the object exposed for bean</span></span><br><span class="line"><span class="comment"> * references (&#123;<span class="doctag">@link</span> #getObject()&#125;) is always the object that it creates.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;FactoryBeans can support singletons and prototypes, and can either create</span></span><br><span class="line"><span class="comment"> * objects lazily on demand or eagerly on startup. The &#123;<span class="doctag">@link</span> SmartFactoryBean&#125;</span></span><br><span class="line"><span class="comment"> * interface allows for exposing more fine-grained behavioral metadata.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This interface is heavily used within the framework itself, for example for</span></span><br><span class="line"><span class="comment"> * the AOP &#123;<span class="doctag">@link</span> org.springframework.aop.framework.ProxyFactoryBean&#125; or the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.jndi.JndiObjectFactoryBean&#125;. It can be used for</span></span><br><span class="line"><span class="comment"> * custom components as well; however, this is only common for infrastructure code.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;&#123;<span class="doctag">@code</span> FactoryBean&#125; is a programmatic contract. Implementations are not</span></span><br><span class="line"><span class="comment"> * supposed to rely on annotation-driven injection or other reflective facilities.&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #getObjectType()&#125; &#123;<span class="doctag">@link</span> #getObject()&#125; invocations may arrive early in the</span></span><br><span class="line"><span class="comment"> * bootstrap process, even ahead of any post-processor setup. If you need access to</span></span><br><span class="line"><span class="comment"> * other beans, implement &#123;<span class="doctag">@link</span> BeanFactoryAware&#125; and obtain them programmatically.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;The container is only responsible for managing the lifecycle of the FactoryBean</span></span><br><span class="line"><span class="comment"> * instance, not the lifecycle of the objects created by the FactoryBean.&lt;/b&gt; Therefore,</span></span><br><span class="line"><span class="comment"> * a destroy method on an exposed bean object (such as &#123;<span class="doctag">@link</span> java.io.Closeable#close()&#125;</span></span><br><span class="line"><span class="comment"> * will &lt;i&gt;not&lt;/i&gt; be called automatically. Instead, a FactoryBean should implement</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> DisposableBean&#125; and delegate any such close call to the underlying object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Finally, FactoryBean objects participate in the containing BeanFactory&#x27;s</span></span><br><span class="line"><span class="comment"> * synchronization of bean creation. There is usually no need for internal</span></span><br><span class="line"><span class="comment"> * synchronization other than for purposes of lazy initialization within the</span></span><br><span class="line"><span class="comment"> * FactoryBean itself (or the like).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rod Johnson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 08.03.2003</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; the bean type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.beans.factory.BeanFactory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.aop.framework.ProxyFactoryBean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.jndi.JndiObjectFactoryBean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FactoryBean</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The name of an attribute that can be</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> org.springframework.core.AttributeAccessor#setAttribute set&#125; on a</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> org.springframework.beans.factory.config.BeanDefinition&#125; so that</span></span><br><span class="line"><span class="comment">     * factory beans can signal their object type when it can&#x27;t be deduced from</span></span><br><span class="line"><span class="comment">     * the factory bean class.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 5.2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">OBJECT_TYPE_ATTRIBUTE</span> <span class="operator">=</span> <span class="string">&quot;factoryBeanObjectType&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return an instance (possibly shared or independent) of the object</span></span><br><span class="line"><span class="comment">     * managed by this factory.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;As with a &#123;<span class="doctag">@link</span> BeanFactory&#125;, this allows support for both the</span></span><br><span class="line"><span class="comment">     * Singleton and Prototype design pattern.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;If this FactoryBean is not fully initialized yet at the time of</span></span><br><span class="line"><span class="comment">     * the call (for example because it is involved in a circular reference),</span></span><br><span class="line"><span class="comment">     * throw a corresponding &#123;<span class="doctag">@link</span> FactoryBeanNotInitializedException&#125;.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;As of Spring 2.0, FactoryBeans are allowed to return &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">     * objects. The factory will consider this as normal value to be used; it</span></span><br><span class="line"><span class="comment">     * will not throw a FactoryBeanNotInitializedException in this case anymore.</span></span><br><span class="line"><span class="comment">     * FactoryBean implementations are encouraged to throw</span></span><br><span class="line"><span class="comment">     * FactoryBeanNotInitializedException themselves now, as appropriate.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an instance of the bean (can be &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception in case of creation errors</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> FactoryBeanNotInitializedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    T <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return the type of object that this FactoryBean creates,</span></span><br><span class="line"><span class="comment">     * or &#123;<span class="doctag">@code</span> null&#125; if not known in advance.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This allows one to check for specific types of beans without</span></span><br><span class="line"><span class="comment">     * instantiating objects, for example on autowiring.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;In the case of implementations that are creating a singleton object,</span></span><br><span class="line"><span class="comment">     * this method should try to avoid singleton creation as far as possible;</span></span><br><span class="line"><span class="comment">     * it should rather estimate the type in advance.</span></span><br><span class="line"><span class="comment">     * For prototypes, returning a meaningful type here is advisable too.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method can be called &lt;i&gt;before&lt;/i&gt; this FactoryBean has</span></span><br><span class="line"><span class="comment">     * been fully initialized. It must not rely on state created during</span></span><br><span class="line"><span class="comment">     * initialization; of course, it can still use such state if available.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; Autowiring will simply ignore FactoryBeans that return</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> null&#125; here. Therefore it is highly recommended to implement</span></span><br><span class="line"><span class="comment">     * this method properly, using the current state of the FactoryBean.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the type of object that this FactoryBean creates,</span></span><br><span class="line"><span class="comment">     * or &#123;<span class="doctag">@code</span> null&#125; if not known at the time of the call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> ListableBeanFactory#getBeansOfType</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    Class&lt;?&gt; getObjectType();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Is the object managed by this factory a singleton? That is,</span></span><br><span class="line"><span class="comment">     * will &#123;<span class="doctag">@link</span> #getObject()&#125; always return the same object</span></span><br><span class="line"><span class="comment">     * (a reference that can be cached)?</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; If a FactoryBean indicates to hold a singleton object,</span></span><br><span class="line"><span class="comment">     * the object returned from &#123;<span class="doctag">@code</span> getObject()&#125; might get cached</span></span><br><span class="line"><span class="comment">     * by the owning BeanFactory. Hence, do not return &#123;<span class="doctag">@code</span> true&#125;</span></span><br><span class="line"><span class="comment">     * unless the FactoryBean always exposes the same reference.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The singleton status of the FactoryBean itself will generally</span></span><br><span class="line"><span class="comment">     * be provided by the owning BeanFactory; usually, it has to be</span></span><br><span class="line"><span class="comment">     * defined as singleton there.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; This method returning &#123;<span class="doctag">@code</span> false&#125; does not</span></span><br><span class="line"><span class="comment">     * necessarily indicate that returned objects are independent instances.</span></span><br><span class="line"><span class="comment">     * An implementation of the extended &#123;<span class="doctag">@link</span> SmartFactoryBean&#125; interface</span></span><br><span class="line"><span class="comment">     * may explicitly indicate independent instances through its</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> SmartFactoryBean#isPrototype()&#125; method. Plain &#123;<span class="doctag">@link</span> FactoryBean&#125;</span></span><br><span class="line"><span class="comment">     * implementations which do not implement this extended interface are</span></span><br><span class="line"><span class="comment">     * simply assumed to always return independent instances if the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> isSingleton()&#125; implementation returns &#123;<span class="doctag">@code</span> false&#125;.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The default implementation returns &#123;<span class="doctag">@code</span> true&#125;, since a</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> FactoryBean&#125; typically manages a singleton instance.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> whether the exposed object is a singleton</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #getObject()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> SmartFactoryBean#isPrototype()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>②创建类UserFactoryBean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.bean;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> User.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>③配置bean</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.bean.UserFactoryBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>④测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUserFactoryBean</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//获取IOC容器</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-factorybean.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) ac.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实验十三：基于xml自动装配"><a href="#实验十三：基于xml自动装配" class="headerlink" title="实验十三：基于xml自动装配"></a>实验十三：基于xml自动装配</h4><blockquote><p>自动装配：</p><p>根据指定的策略，在IOC容器中匹配某一个bean，自动为指定的bean中所依赖的类类型或接口类型属性赋值</p></blockquote><p><strong>①场景模拟</strong></p><p>创建类UserController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.autowire.controller</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>&#123;</span><br><span class="line">        userService.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建接口UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.autowire.service</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建类UserServiceImpl实现接口UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.autowire.service.impl</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建接口UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.autowire.dao</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建类UserDaoImpl实现接口UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.autowire.dao.impl</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>②配置bean</strong></p><blockquote><p>使用bean标签的autowire属性设置自动装配效果</p><p>自动装配方式：byType</p><p>byType：根据类型匹配IOC容器中的某个兼容类型的bean，为属性自动赋值</p><p>若在IOC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即值为默认值null</p><p>若在IOC中，有多个兼容类型的bean能够为属性赋值，则抛出异常NoUniqueBeanDefinitionException</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.autowire.controller.UserController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.autowire.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.autowire.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>自动装配方式：byName</p><p>byName：将自动装配的属性的属性名，作为bean的id在IOC容器中匹配相对应的bean进行赋值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.autowire.controller.UserController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.autowire.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.autowire.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.autowire.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hang.spring6.autowire.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>③测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAutoWireByXML</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;autowire-xml.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserController</span> <span class="variable">userController</span> <span class="operator">=</span> ac.getBean(UserController.class);</span><br><span class="line">    userController.saveUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于注解管理Bean（☆）"><a href="#基于注解管理Bean（☆）" class="headerlink" title="基于注解管理Bean（☆）"></a>基于注解管理Bean（☆）</h3><p>从 Java 5 开始，Java 增加了对注解（Annotation）的支持，它是代码中的一种特殊标记，可以在编译、类加载和运行时被读取，执行相应的处理。开发人员可以通过注解在不改变原有代码和逻辑的情况下，在源代码中嵌入补充信息。</p><p>Spring 从 2.5 版本开始提供了对注解技术的全面支持，我们可以使用注解来实现自动装配，简化 Spring 的 XML 配置。</p><p>Spring 通过注解实现自动装配的步骤如下：</p><ol><li>引入依赖</li><li>开启组件扫描</li><li>使用注解定义 Bean</li><li>依赖注入</li></ol><h4 id="搭建子模块spring6-ioc-annotation"><a href="#搭建子模块spring6-ioc-annotation" class="headerlink" title="搭建子模块spring6-ioc-annotation"></a>搭建子模块spring6-ioc-annotation</h4><p><strong>①搭建模块</strong></p><p>搭建方式如：spring6-ioc-xml</p><p><strong>②引入配置文件</strong></p><p>引入spring-ioc-xml模块日志log4j2.xml</p><p><strong>③添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--log4j2的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="开启组件扫描"><a href="#开启组件扫描" class="headerlink" title="开启组件扫描"></a>开启组件扫描</h4><p>Spring 默认不使用注解装配 Bean，因此我们需要在 Spring 的 XML 配置中，通过 <a href="context:component-scan">context:component-scan</a> 元素开启 Spring Beans的自动扫描功能。开启此功能后，Spring 会自动从扫描指定的包（base-package 属性设置）及其子包下的所有类，如果类上使用了 @Component 注解，就将该类装配到容器中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启组件扫描功能--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.hang.spring6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：在使用 <a href="context:component-scan">context:component-scan</a> 元素开启自动扫描功能前，首先需要在 XML 配置的一级标签 <beans> 中添加 context 相关的约束。</beans></p><p><strong>情况一：最基本的扫描方式</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.hang.spring6&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>情况二：指定要排除的组件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.hang.spring6&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- context:exclude-filter标签：指定排除规则 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> type：设置排除或包含的依据</span></span><br><span class="line"><span class="comment">type=&quot;annotation&quot;，根据注解排除，expression中设置要排除的注解的全类名</span></span><br><span class="line"><span class="comment">type=&quot;assignable&quot;，根据类型排除，expression中设置要排除的类型的全类名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;context:exclude-filter type=&quot;assignable&quot; expression=&quot;com.hang.spring6.controller.UserController&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>情况三：仅扫描指定组件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.hang&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- use-default-filters属性：取值false表示关闭默认扫描规则 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此时必须设置use-default-filters=&quot;false&quot;，因为默认规则即扫描指定包下所有类 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> type：设置排除或包含的依据</span></span><br><span class="line"><span class="comment">type=&quot;annotation&quot;，根据注解排除，expression中设置要排除的注解的全类名</span></span><br><span class="line"><span class="comment">type=&quot;assignable&quot;，根据类型排除，expression中设置要排除的类型的全类名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;context:include-filter type=&quot;assignable&quot; expression=&quot;com.hang.spring6.controller.UserController&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用注解定义-Bean"><a href="#使用注解定义-Bean" class="headerlink" title="使用注解定义 Bean"></a>使用注解定义 Bean</h4><p>Spring 提供了以下多个注解，这些注解可以直接标注在 Java 类上，将它们定义成 Spring Bean。</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>该注解用于描述 Spring 中的 Bean，它是一个泛化的概念，仅仅表示容器中的一个组件（Bean），并且可以作用在应用的任何层次，例如 Service 层、Dao 层等。  使用时只需将该注解标注在相应类上即可。</td></tr><tr><td>@Repository</td><td>该注解用于将数据访问层（Dao 层）的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr><tr><td>@Service</td><td>该注解通常作用在业务层（Service 层），用于将业务层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr><tr><td>@Controller</td><td>该注解通常作用在控制层（如SpringMVC 的 Controller），用于将控制层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr></tbody></table><h4 id="实验一：-Autowired注入"><a href="#实验一：-Autowired注入" class="headerlink" title="实验一：@Autowired注入"></a>实验一：@Autowired注入</h4><p>单独使用@Autowired注解，<strong>默认根据类型装配</strong>。【默认是byType】</p><p>查看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.beans.factory.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码中有两处需要注意：</p><ul><li><p>第一处：该注解可以标注在哪里？</p></li><li><ul><li>构造方法上</li><li>方法上</li><li>形参上</li><li>属性上</li><li>注解上</li></ul></li><li><p>第二处：该注解有一个required属性，默认值是true，表示在注入的时候要求被注入的Bean必须是存在的，如果不存在则报错。如果required属性设置为false，表示注入的Bean存在或者不存在都没关系，存在的话就注入，不存在的话，也不报错。</p></li></ul><h5 id="①场景一：属性注入"><a href="#①场景一：属性注入" class="headerlink" title="①场景一：属性注入"></a>①场景一：属性注入</h5><p>创建UserDao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建UserDaoImpl实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dao层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建UserService接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建UserServiceImpl实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建UserController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.out();</span><br><span class="line">        System.out.println(<span class="string">&quot;Controller层执行结束。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试一</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.controller.UserController;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(UserTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAnnotation</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserController</span> <span class="variable">userController</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userController&quot;</span>, UserController.class);</span><br><span class="line">        userController.out();</span><br><span class="line">        logger.info(<span class="string">&quot;执行成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上构造方法和setter方法都没有提供，经过测试，仍然可以注入成功。</p><h5 id="②场景二：set注入"><a href="#②场景二：set注入" class="headerlink" title="②场景二：set注入"></a>②场景二：set注入</h5><p>修改UserServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改UserController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.out();</span><br><span class="line">        System.out.println(<span class="string">&quot;Controller层执行结束。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：成功调用</p><h5 id="③场景三：构造方法注入"><a href="#③场景三：构造方法注入" class="headerlink" title="③场景三：构造方法注入"></a>③场景三：构造方法注入</h5><p>修改UserServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改UserController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserController</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.out();</span><br><span class="line">        System.out.println(<span class="string">&quot;Controller层执行结束。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：成功调用</p><h5 id="④场景四：形参上注入"><a href="#④场景四：形参上注入" class="headerlink" title="④场景四：形参上注入"></a>④场景四：形参上注入</h5><p>修改UserServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(<span class="meta">@Autowired</span> UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改UserController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserController</span><span class="params">(<span class="meta">@Autowired</span> UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.out();</span><br><span class="line">        System.out.println(<span class="string">&quot;Controller层执行结束。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：成功调用</p><h5 id="⑤场景五：只有一个构造函数，无注解"><a href="#⑤场景五：只有一个构造函数，无注解" class="headerlink" title="⑤场景五：只有一个构造函数，无注解"></a>⑤场景五：只有一个构造函数，无注解</h5><p>修改UserServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试通过</p><p><strong>当有参数的构造方法只有一个时，@Autowired注解可以省略。</strong></p><p>说明：有多个构造方法时呢？大家可以测试（再添加一个无参构造函数），测试报错</p><h5 id="⑥场景六：-Autowired注解和-Qualifier注解联合"><a href="#⑥场景六：-Autowired注解和-Qualifier注解联合" class="headerlink" title="⑥场景六：@Autowired注解和@Qualifier注解联合"></a>⑥场景六：@Autowired注解和@Qualifier注解联合</h5><p>添加dao层实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoRedisImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Redis Dao层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：测试异常</p><p>错误信息中说：不能装配，UserDao这个Bean的数量等于2</p><p>怎么解决这个问题呢？<strong>当然要byName，根据名称进行装配了。</strong></p><p>修改UserServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDaoImpl&quot;)</span> <span class="comment">// 指定bean的名字</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li>@Autowired注解可以出现在：属性上、构造方法上、构造方法的参数上、setter方法上。</li><li>当带参数的构造方法只有一个，@Autowired注解可以省略。（）</li><li>@Autowired注解默认根据类型注入。如果要根据名称注入的话，需要配合@Qualifier注解一起使用。</li></ul><h4 id="实验二：-Resource注入"><a href="#实验二：-Resource注入" class="headerlink" title="实验二：@Resource注入"></a>实验二：@Resource注入</h4><p>@Resource注解也可以完成属性注入。那它和@Autowired注解有什么区别？</p><ul><li>@Resource注解是JDK扩展包中的，也就是说属于JDK的一部分。所以该注解是标准注解，更加具有通用性。(JSR-250标准中制定的注解类型。JSR是Java规范提案。)</li><li>@Autowired注解是Spring框架自己的。</li><li><strong>@Resource注解默认根据名称装配byName，未指定name时，使用属性名作为name。通过name找不到的话会自动启动通过类型byType装配。</strong></li><li><strong>@Autowired注解默认根据类型装配byType，如果想根据名称装配，需要配合@Qualifier注解一起用。</strong></li><li>@Resource注解用在属性上、setter方法上。</li><li>@Autowired注解用在属性上、setter方法上、构造方法上、构造方法参数上。</li></ul><p>@Resource注解属于JDK扩展包，所以不在JDK当中，需要额外引入以下依赖：【<strong>如果是JDK8的话不需要额外引入依赖。高于JDK11或低于JDK8需要引入以下依赖。</strong>】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jakarta.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Repeatable;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.FIELD, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Repeatable(Resources.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Resource &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">lookup</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; type() <span class="keyword">default</span> Object.class;</span><br><span class="line"></span><br><span class="line">    Resource.AuthenticationType <span class="title function_">authenticationType</span><span class="params">()</span> <span class="keyword">default</span> Resource.AuthenticationType.CONTAINER;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">shareable</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">mappedName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">description</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> <span class="title class_">AuthenticationType</span> &#123;</span><br><span class="line">        CONTAINER,</span><br><span class="line">        APPLICATION;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">AuthenticationType</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="①场景一：根据name注入"><a href="#①场景一：根据name注入" class="headerlink" title="①场景一：根据name注入"></a>①场景一：根据name注入</h5><p>修改UserDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository(&quot;myUserDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dao层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改UserServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;myUserDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao myUserDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        myUserDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试通过</p><h5 id="②场景二：name未知注入"><a href="#②场景二：name未知注入" class="headerlink" title="②场景二：name未知注入"></a>②场景二：name未知注入</h5><p>修改UserDaoImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository(&quot;myUserDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dao层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改UserServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDao myUserDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        myUserDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试通过</p><p>当@Resource注解使用时没有指定name的时候，还是根据name进行查找，这个name是属性名。</p><h5 id="③场景三-其他情况"><a href="#③场景三-其他情况" class="headerlink" title="③场景三 其他情况"></a>③场景三 其他情况</h5><p>修改UserServiceImpl类，userDao1属性名不存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao1.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试异常</p><p>根据异常信息得知：显然当通过name找不到的时候，自然会启动byType进行注入，以上的错误是因为UserDao接口下有两个实现类导致的。所以根据类型注入就会报错。</p><p>@Resource的set注入可以自行测试</p><p><strong>总结：</strong></p><p>@Resource注解：默认byName注入，没有指定name时把属性名当做name，根据name找不到时，才会byType注入。byType注入时，某种类型的Bean只能有一个</p><h4 id="3-3-6、Spring全注解开发"><a href="#3-3-6、Spring全注解开发" class="headerlink" title="3.3.6、Spring全注解开发"></a>3.3.6、Spring全注解开发</h4><p>全注解开发就是不再使用spring配置文件了，写一个配置类来代替配置文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@ComponentScan(&#123;&quot;com.hang.spring6.controller&quot;, &quot;com.hang.spring6.service&quot;,&quot;com.hang.spring6.dao&quot;&#125;)</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.hang.spring6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Spring6Config</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAllAnnotation</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Spring6Config.class);</span><br><span class="line">    <span class="type">UserController</span> <span class="variable">userController</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userController&quot;</span>, UserController.class);</span><br><span class="line">    userController.out();</span><br><span class="line">    logger.info(<span class="string">&quot;执行成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原理-手写IoC"><a href="#原理-手写IoC" class="headerlink" title="原理-手写IoC"></a>原理-手写IoC</h2><p>我们都知道，Spring框架的IOC是基于Java反射机制实现的，下面我们先回顾一下java反射。</p><h3 id="回顾Java反射"><a href="#回顾Java反射" class="headerlink" title="回顾Java反射"></a>回顾Java反射</h3><p><code>Java</code>反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为<code>Java</code>语言的反射机制。简单来说，反射机制指的是程序在运行时能够获取自身的信息。</p><p>要想解剖一个类，必须先要<strong>获取到该类的Class对象</strong>。而剖析一个类或用反射解决具体的问题就是使用相关API<strong>（1）java.lang.Class（2）java.lang.reflect</strong>，所以，<strong>Class对象是反射的根源</strong>。</p><p><strong>自定义类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参数构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参数构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String name, <span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;私有方法-run.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get和set方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;/&#x27;</span><span class="string">&#x27; +</span></span><br><span class="line"><span class="string">                &quot;, age=&quot; + age +</span></span><br><span class="line"><span class="string">                &quot;, color=&#x27;</span><span class="string">&quot; + color + &#x27;/&#x27;&#x27; +</span></span><br><span class="line"><span class="string">                &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>编写测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCar</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、获取Class对象多种方式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1 类名.class</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz1</span> <span class="operator">=</span> Car.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 对象.getClass()</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>().getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 Class.forName(&quot;全路径&quot;)</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.hang.reflect.Car&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化</span></span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car)clazz3.getConstructor().newInstance();</span><br><span class="line">        System.out.println(car);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、获取构造方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Car.class;</span><br><span class="line">        <span class="comment">//获取所有构造</span></span><br><span class="line">        <span class="comment">// getConstructors()获取所有public的构造方法</span></span><br><span class="line"><span class="comment">//        Constructor[] constructors = clazz.getConstructors();</span></span><br><span class="line">        <span class="comment">// getDeclaredConstructors()获取所有的构造方法public  private</span></span><br><span class="line">        Constructor[] constructors = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor c:constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;方法名称：&quot;</span>+c.getName()+<span class="string">&quot; 参数个数：&quot;</span>+c.getParameterCount());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定有参数构造创建对象</span></span><br><span class="line">        <span class="comment">//1 构造public</span></span><br><span class="line"><span class="comment">//        Constructor c1 = clazz.getConstructor(String.class, int.class, String.class);</span></span><br><span class="line"><span class="comment">//        Car car1 = (Car)c1.newInstance(&quot;夏利&quot;, 10, &quot;红色&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(car1);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2 构造private</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">c2</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class, <span class="type">int</span>.class, String.class);</span><br><span class="line">        c2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car2</span> <span class="operator">=</span> (Car)c2.newInstance(<span class="string">&quot;捷达&quot;</span>, <span class="number">15</span>, <span class="string">&quot;白色&quot;</span>);</span><br><span class="line">        System.out.println(car2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、获取属性</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Car.class;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car)clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">        <span class="comment">//获取所有public属性</span></span><br><span class="line">        <span class="comment">//Field[] fields = clazz.getFields();</span></span><br><span class="line">        <span class="comment">//获取所有属性（包含私有属性）</span></span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field:fields) &#123;</span><br><span class="line">            <span class="keyword">if</span>(field.getName().equals(<span class="string">&quot;name&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">//设置允许访问</span></span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                field.set(car,<span class="string">&quot;五菱宏光&quot;</span>);</span><br><span class="line">                System.out.println(car);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、获取方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;奔驰&quot;</span>,<span class="number">10</span>,<span class="string">&quot;黑色&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> car.getClass();</span><br><span class="line">        <span class="comment">//1 public方法</span></span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m1:methods) &#123;</span><br><span class="line">            <span class="comment">//System.out.println(m1.getName());</span></span><br><span class="line">            <span class="comment">//执行方法 toString</span></span><br><span class="line">            <span class="keyword">if</span>(m1.getName().equals(<span class="string">&quot;toString&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">invoke</span> <span class="operator">=</span> (String)m1.invoke(car);</span><br><span class="line">                <span class="comment">//System.out.println(&quot;toString执行了：&quot;+invoke);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 private方法</span></span><br><span class="line">        Method[] methodsAll = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m:methodsAll) &#123;</span><br><span class="line">            <span class="comment">//执行方法 run</span></span><br><span class="line">            <span class="keyword">if</span>(m.getName().equals(<span class="string">&quot;run&quot;</span>)) &#123;</span><br><span class="line">                m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                m.invoke(car);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现Spring的IoC"><a href="#实现Spring的IoC" class="headerlink" title="实现Spring的IoC"></a>实现Spring的IoC</h3><p>我们知道，IoC（控制反转）和DI（依赖注入）是Spring里面核心的东西，那么，我们如何自己手写出这样的代码呢？下面我们就一步一步写出Spring框架最核心的部分。</p><p><strong>①搭建子模块</strong></p><p>搭建模块：guigu-spring，搭建方式如其他spring子模块</p><p><strong>②准备测试需要的bean</strong></p><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建UserDao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.test.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建UserDaoImpl实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.test.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dao层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建UserService接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.test.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建UserServiceImpl实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring.test.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring.core.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> com.hang.spring.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    private UserDao userDao;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//userDao.print();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>③定义注解</strong></p><p>我们通过注解的形式加载bean与实现依赖注入</p><p>bean注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring.core.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Bean &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依赖注入注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring.core.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Di &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：上面两个注解可以随意取名</p><p><strong>④定义bean容器接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">getBean</span><span class="params">(Class clazz)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>⑤编写注解bean容器接口实现</strong></p><p>AnnotationApplicationContext基于注解扫描bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationApplicationContext</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储bean的容器</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Class, Object&gt; beanFactory = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(Class clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory.get(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据包扫描加载bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basePackage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AnnotationApplicationContext</span><span class="params">(String basePackage)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>⑥编写扫描bean逻辑</strong></p><p>我们通过构造方法传入包的base路径，扫描被@Bean注解的java对象，完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring.core.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationApplicationContext</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储bean的容器</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Class, Object&gt; beanFactory = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String rootPath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(Class clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory.get(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据包扫描加载bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basePackage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AnnotationApplicationContext</span><span class="params">(String basePackage)</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">packageDirName</span> <span class="operator">=</span> basePackage.replaceAll(<span class="string">&quot;//.&quot;</span>, <span class="string">&quot;////&quot;</span>);</span><br><span class="line">            Enumeration&lt;URL&gt; dirs =Thread.currentThread().getContextClassLoader().getResources(packageDirName);</span><br><span class="line">            <span class="keyword">while</span> (dirs.hasMoreElements()) &#123;</span><br><span class="line">                <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> dirs.nextElement();</span><br><span class="line">                <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> URLDecoder.decode(url.getFile(),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                rootPath = filePath.substring(<span class="number">0</span>, filePath.length()-packageDirName.length());</span><br><span class="line">                loadBean(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">loadBean</span><span class="params">(File fileParent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fileParent.isDirectory()) &#123;</span><br><span class="line">            File[] childrenFiles = fileParent.listFiles();</span><br><span class="line">            <span class="keyword">if</span>(childrenFiles == <span class="literal">null</span> || childrenFiles.length == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (File child : childrenFiles) &#123;</span><br><span class="line">                <span class="keyword">if</span> (child.isDirectory()) &#123;</span><br><span class="line">                    <span class="comment">//如果是个文件夹就继续调用该方法,使用了递归</span></span><br><span class="line">                    loadBean(child);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//通过文件路径转变成全类名,第一步把绝对路径部分去掉</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">pathWithClass</span> <span class="operator">=</span> child.getAbsolutePath().substring(rootPath.length() - <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//选中class文件</span></span><br><span class="line">                    <span class="keyword">if</span> (pathWithClass.contains(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">                        <span class="comment">//    com.xinzhi.dao.UserDao</span></span><br><span class="line">                        <span class="comment">//去掉.class后缀，并且把 / 替换成 .</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">fullName</span> <span class="operator">=</span> pathWithClass.replaceAll(<span class="string">&quot;////&quot;</span>, <span class="string">&quot;.&quot;</span>).replace(<span class="string">&quot;.class&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Class&lt;?&gt; aClass = Class.forName(fullName);</span><br><span class="line">                            <span class="comment">//把非接口的类实例化放在map中</span></span><br><span class="line">                            <span class="keyword">if</span>(!aClass.isInterface())&#123;</span><br><span class="line">                                <span class="type">Bean</span> <span class="variable">annotation</span> <span class="operator">=</span> aClass.getAnnotation(Bean.class);</span><br><span class="line">                                <span class="keyword">if</span>(annotation != <span class="literal">null</span>)&#123;</span><br><span class="line">                                    <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">                                    <span class="comment">//判断一下有没有接口</span></span><br><span class="line">                                    <span class="keyword">if</span>(aClass.getInterfaces().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                        <span class="comment">//如果有接口把接口的class当成key，实例对象当成value</span></span><br><span class="line">                                        System.out.println(<span class="string">&quot;正在加载【&quot;</span>+ aClass.getInterfaces()[<span class="number">0</span>] +<span class="string">&quot;】,实例对象是：&quot;</span> + instance.getClass().getName());</span><br><span class="line">                                        beanFactory.put(aClass.getInterfaces()[<span class="number">0</span>], instance);</span><br><span class="line">                                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                        <span class="comment">//如果有接口把自己的class当成key，实例对象当成value</span></span><br><span class="line">                                        System.out.println(<span class="string">&quot;正在加载【&quot;</span>+ aClass.getName() +<span class="string">&quot;】,实例对象是：&quot;</span> + instance.getClass().getName());</span><br><span class="line">                                        beanFactory.put(aClass, instance);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (ClassNotFoundException | IllegalAccessException | InstantiationException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>⑦java类标识Bean注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> </span><br></pre></td></tr></table></figure><p><strong>⑧测试Bean加载</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring.core.AnnotationApplicationContext;</span><br><span class="line"><span class="keyword">import</span> com.hang.spring.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> com.hang.spring.test.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringIocTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIoc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationApplicationContext</span>(<span class="string">&quot;com.hang.spring.test&quot;</span>);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService)applicationContext.getBean(UserService.class);</span><br><span class="line">        userService.out();</span><br><span class="line">        System.out.println(<span class="string">&quot;run success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台打印测试</p><p><strong>⑨依赖注入</strong></p><p>只要userDao.print();调用成功，说明就注入成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring.test.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring.core.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> com.hang.spring.core.annotation.Di;</span><br><span class="line"><span class="keyword">import</span> com.hang.spring.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.hang.spring.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Di</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行第八步：报错了，说明当前userDao是个空对象</p><p><strong>⑩依赖注入实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hang.spring.core.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> com.hang.spring.core.annotation.Di;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationApplicationContext</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储bean的容器</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Class, Object&gt; beanFactory = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String rootPath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(Class clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory.get(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据包扫描加载bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basePackage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AnnotationApplicationContext</span><span class="params">(String basePackage)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">packageDirName</span> <span class="operator">=</span> basePackage.replaceAll(<span class="string">&quot;//.&quot;</span>, <span class="string">&quot;////&quot;</span>);</span><br><span class="line">            Enumeration&lt;URL&gt; dirs =Thread.currentThread().getContextClassLoader().getResources(packageDirName);</span><br><span class="line">            <span class="keyword">while</span> (dirs.hasMoreElements()) &#123;</span><br><span class="line">                <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> dirs.nextElement();</span><br><span class="line">                <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> URLDecoder.decode(url.getFile(),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                rootPath = filePath.substring(<span class="number">0</span>, filePath.length()-packageDirName.length());</span><br><span class="line">                loadBean(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//依赖注入</span></span><br><span class="line">        loadDi();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">loadBean</span><span class="params">(File fileParent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fileParent.isDirectory()) &#123;</span><br><span class="line">            File[] childrenFiles = fileParent.listFiles();</span><br><span class="line">            <span class="keyword">if</span>(childrenFiles == <span class="literal">null</span> || childrenFiles.length == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (File child : childrenFiles) &#123;</span><br><span class="line">                <span class="keyword">if</span> (child.isDirectory()) &#123;</span><br><span class="line">                    <span class="comment">//如果是个文件夹就继续调用该方法,使用了递归</span></span><br><span class="line">                    loadBean(child);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//通过文件路径转变成全类名,第一步把绝对路径部分去掉</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">pathWithClass</span> <span class="operator">=</span> child.getAbsolutePath().substring(rootPath.length() - <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//选中class文件</span></span><br><span class="line">                    <span class="keyword">if</span> (pathWithClass.contains(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">                        <span class="comment">//    com.xinzhi.dao.UserDao</span></span><br><span class="line">                        <span class="comment">//去掉.class后缀，并且把 / 替换成 .</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">fullName</span> <span class="operator">=</span> pathWithClass.replaceAll(<span class="string">&quot;////&quot;</span>, <span class="string">&quot;.&quot;</span>).replace(<span class="string">&quot;.class&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Class&lt;?&gt; aClass = Class.forName(fullName);</span><br><span class="line">                            <span class="comment">//把非接口的类实例化放在map中</span></span><br><span class="line">                            <span class="keyword">if</span>(!aClass.isInterface())&#123;</span><br><span class="line">                                <span class="type">Bean</span> <span class="variable">annotation</span> <span class="operator">=</span> aClass.getAnnotation(Bean.class);</span><br><span class="line">                                <span class="keyword">if</span>(annotation != <span class="literal">null</span>)&#123;</span><br><span class="line">                                    <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">                                    <span class="comment">//判断一下有没有接口</span></span><br><span class="line">                                    <span class="keyword">if</span>(aClass.getInterfaces().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                        <span class="comment">//如果有接口把接口的class当成key，实例对象当成value</span></span><br><span class="line">                                        System.out.println(<span class="string">&quot;正在加载【&quot;</span>+ aClass.getInterfaces()[<span class="number">0</span>] +<span class="string">&quot;】,实例对象是：&quot;</span> + instance.getClass().getName());</span><br><span class="line">                                        beanFactory.put(aClass.getInterfaces()[<span class="number">0</span>], instance);</span><br><span class="line">                                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                        <span class="comment">//如果有接口把自己的class当成key，实例对象当成value</span></span><br><span class="line">                                        System.out.println(<span class="string">&quot;正在加载【&quot;</span>+ aClass.getName() +<span class="string">&quot;】,实例对象是：&quot;</span> + instance.getClass().getName());</span><br><span class="line">                                        beanFactory.put(aClass, instance);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (ClassNotFoundException | IllegalAccessException | InstantiationException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadDi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Class,Object&gt; entry : beanFactory.entrySet())&#123;</span><br><span class="line">            <span class="comment">//就是咱们放在容器的对象</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            Class&lt;?&gt; aClass = obj.getClass();</span><br><span class="line">            Field[] declaredFields = aClass.getDeclaredFields();</span><br><span class="line">            <span class="keyword">for</span> (Field field : declaredFields)&#123;</span><br><span class="line">                <span class="type">Di</span> <span class="variable">annotation</span> <span class="operator">=</span> field.getAnnotation(Di.class);</span><br><span class="line">                <span class="keyword">if</span>( annotation != <span class="literal">null</span> )&#123;</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;正在给【&quot;</span>+obj.getClass().getName()+<span class="string">&quot;】属性【&quot;</span> + field.getName() + <span class="string">&quot;】注入值【&quot;</span>+ beanFactory.get(field.getType()).getClass().getName() +<span class="string">&quot;】&quot;</span>);</span><br><span class="line">                        field.set(obj,beanFactory.get(field.getType()));</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行第八步：执行成功，依赖注入成功</p><h2 id="面向切面：AOP"><a href="#面向切面：AOP" class="headerlink" title="面向切面：AOP"></a>面向切面：AOP</h2><h3 id="场景模拟"><a href="#场景模拟" class="headerlink" title="场景模拟"></a>场景模拟</h3><p><strong>搭建子模块：spring6-aop</strong></p><h4 id="声明接口"><a href="#声明接口" class="headerlink" title="声明接口"></a>声明接口</h4><p>声明计算器接口Calculator，包含加减乘除的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建实现类"><a href="#创建实现类" class="headerlink" title="创建实现类"></a>创建实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建带日志功能的实现类"><a href="#创建带日志功能的实现类" class="headerlink" title="创建带日志功能的实现类"></a>创建带日志功能的实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorLogImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 方法结束了，结果是：&quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] sub 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] sub 方法结束了，结果是：&quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] mul 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] mul 方法结束了，结果是：&quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] div 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] div 方法结束了，结果是：&quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h4><p><strong>①现有代码缺陷</strong></p><p>针对带日志功能的实现类，我们发现有如下缺陷：</p><ul><li>对核心业务功能有干扰，导致程序员在开发核心业务功能时分散了精力</li><li>附加功能分散在各个业务功能方法中，不利于统一维护</li></ul><p><strong>②解决思路</strong></p><p>解决这两个问题，核心就是：解耦。我们需要把附加功能从业务功能代码中抽取出来。</p><p><strong>③困难</strong></p><p>解决问题的困难：要抽取的代码在方法内部，靠以前把子类中的重复代码抽取到父类的方式没法解决。所以需要引入新的技术。</p><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><strong>①介绍</strong></p><p>二十三种设计模式中的一种，属于结构型模式。它的作用就是通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类<strong>间接</strong>调用。让不属于目标方法核心逻辑的代码从目标方法中剥离出来——<strong>解耦</strong>。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起也有利于统一维护。</p><img src="/2023/09/24/Spring/img016.png" class title="images"><p>使用代理后：</p><img src="/2023/09/24/Spring/img017.png" class title="images"><p><strong>②生活中的代理</strong></p><ul><li>广告商找大明星拍广告需要经过经纪人</li><li>合作伙伴找大老板谈合作要约见面时间需要经过秘书</li><li>房产中介是买卖双方的代理</li></ul><p><strong>③相关术语</strong></p><ul><li>代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。</li><li>目标：被代理“套用”了非核心逻辑代码的类、对象、方法。</li></ul><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>创建静态代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorStaticProxy</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将被代理的目标对象声明为成员变量</span></span><br><span class="line">    <span class="keyword">private</span> Calculator target;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CalculatorStaticProxy</span><span class="params">(Calculator target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 附加功能由代理类中的代理方法来实现</span></span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 通过目标对象来实现核心业务逻辑</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">addResult</span> <span class="operator">=</span> target.add(i, j);</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 方法结束了，结果是：&quot;</span> + addResult);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> addResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>静态代理确实实现了解耦，但是由于代码都写死了，完全不具备任何的灵活性。就拿日志功能来说，将来其他地方也需要附加日志，那还得再声明更多个静态代理类，那就产生了大量重复的代码，日志功能还是分散的，没有统一管理。</p><p>提出进一步的需求：将日志功能集中到一个代理类中，将来有任何日志需求，都通过这一个代理类来实现。这就需要使用动态代理技术了。</p></blockquote><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>生产代理对象的工厂类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * newProxyInstance()：创建一个代理实例</span></span><br><span class="line"><span class="comment">         * 其中有三个参数：</span></span><br><span class="line"><span class="comment">         * 1、classLoader：加载动态生成的代理类的类加载器</span></span><br><span class="line"><span class="comment">         * 2、interfaces：目标对象实现的所有接口的class对象所组成的数组</span></span><br><span class="line"><span class="comment">         * 3、invocationHandler：设置代理对象实现目标对象方法的过程，即代理类中如何重写接口中的抽象方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * proxy：代理对象</span></span><br><span class="line"><span class="comment">                 * method：代理对象需要实现的方法，即其中需要重写的方法</span></span><br><span class="line"><span class="comment">                 * args：method所对应方法的参数</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，参数：&quot;</span>+ Arrays.toString(args));</span><br><span class="line">                    result = method.invoke(target, args);</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，结果：&quot;</span>+ result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，异常：&quot;</span>+e.getMessage());</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，方法执行完毕&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDynamicProxy</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(<span class="keyword">new</span> <span class="title class_">CalculatorLogImpl</span>());</span><br><span class="line">    <span class="type">Calculator</span> <span class="variable">proxy</span> <span class="operator">=</span> (Calculator) factory.getProxy();</span><br><span class="line">    proxy.div(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//proxy.div(1,1);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AOP概念及相关术语"><a href="#AOP概念及相关术语" class="headerlink" title="AOP概念及相关术语"></a>AOP概念及相关术语</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现，在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><h4 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h4><h5 id="①横切关注点"><a href="#①横切关注点" class="headerlink" title="①横切关注点"></a>①横切关注点</h5><p>分散在每个各个模块中解决同一样的问题，如用户验证、日志管理、事务处理、数据缓存都属于横切关注点。</p><p>从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强。</p><p>这个概念不是语法层面的，而是根据附加功能的逻辑上的需要：有十个附加功能，就有十个横切关注点。</p><img src="/2023/09/24/Spring/img019.png" class title="images"><h5 id="②通知（增强）"><a href="#②通知（增强）" class="headerlink" title="②通知（增强）"></a>②通知（增强）</h5><p><strong>增强，通俗说，就是你想要增强的功能，比如 安全，事务，日志等。</strong></p><p>每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法就叫通知方法。</p><ul><li>前置通知：在被代理的目标方法<strong>前</strong>执行</li><li>返回通知：在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）</li><li>异常通知：在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）</li><li>后置通知：在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）</li><li>环绕通知：使用try…catch…finally结构围绕<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所有位置</li></ul><img src="/2023/09/24/Spring/img020.png" class title="images"><h5 id="③切面"><a href="#③切面" class="headerlink" title="③切面"></a>③切面</h5><p>封装通知方法的类。</p><img src="/2023/09/24/Spring/img021.png" class title="images"><h5 id="④目标"><a href="#④目标" class="headerlink" title="④目标"></a>④目标</h5><p>被代理的目标对象。</p><h5 id="⑤代理"><a href="#⑤代理" class="headerlink" title="⑤代理"></a>⑤代理</h5><p>向目标对象应用通知之后创建的代理对象。</p><h5 id="⑥连接点"><a href="#⑥连接点" class="headerlink" title="⑥连接点"></a>⑥连接点</h5><p>这也是一个纯逻辑概念，不是语法定义的。</p><p>把方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行的顺序看成y轴，x轴和y轴的交叉点就是连接点。<strong>通俗说，就是spring允许你使用通知的地方</strong></p><img src="/2023/09/24/Spring/img022.png" class title="images"><h5 id="⑦切入点"><a href="#⑦切入点" class="headerlink" title="⑦切入点"></a>⑦切入点</h5><p>定位连接点的方式。</p><p>每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说）。</p><p>如果把连接点看作数据库中的记录，那么切入点就是查询记录的 SQL 语句。</p><p><strong>Spring 的 AOP 技术可以通过切入点定位到特定的连接点。通俗说，要实际去增强的方法</strong></p><p>切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件。</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li><p>简化代码：把方法中固定位置的重复的代码<strong>抽取</strong>出来，让被抽取的方法更专注于自己的核心功能，提高内聚性。</p></li><li><p>代码增强：把特定的功能封装到切面类中，看哪里有需要，就往上套，被<strong>套用</strong>了切面逻辑的方法就被切面给增强了。</p></li></ul><h3 id="基于注解的AOP"><a href="#基于注解的AOP" class="headerlink" title="基于注解的AOP"></a>基于注解的AOP</h3><h4 id="技术说明"><a href="#技术说明" class="headerlink" title="技术说明"></a>技术说明</h4><img src="/2023/09/24/Spring/img023.png" class title="images"><img src="/2023/09/24/Spring/image-20221216132844066.png" class title="image-20221216132844066"><ul><li>动态代理分为JDK动态代理和cglib动态代理</li><li>当目标类有接口的情况使用JDK动态代理和cglib动态代理，没有接口时只能使用cglib动态代理</li><li>JDK动态代理动态生成的代理类会在com.sun.proxy包下，类名为$proxy1，和目标类实现相同的接口</li><li>cglib动态代理动态生成的代理类会和目标在在相同的包下，会继承目标类</li><li>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因为这个技术要求<strong>代理对象和目标对象实现同样的接口</strong>（兄弟两个拜把子模式）。</li><li>cglib：通过<strong>继承被代理的目标类</strong>（认干爹模式）实现代理，所以不需要目标类实现接口。</li><li>AspectJ：是AOP思想的一种实现。本质上是静态代理，<strong>将代理逻辑“织入”被代理的目标类编译得到的字节码文件</strong>，所以最终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。</li></ul><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p><strong>①添加依赖</strong></p><p>在IOC所需依赖基础上再加入下面依赖即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring aop依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring aspects依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--log4j2的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>②准备被代理的目标资源</strong></p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建切面类并配置"><a href="#创建切面类并配置" class="headerlink" title="创建切面类并配置"></a>创建切面类并配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Aspect表示这个类是一个切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="comment">// @Component注解保证这个切面类能够放入IOC容器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before(&quot;execution(public int com.hang.aop.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">        System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.hang.aop.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Logger--&gt;后置通知，方法名：&quot;</span>+methodName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(* com.hang.aop.annotation.CalculatorImpl.*(..))&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningMethod</span><span class="params">(JoinPoint joinPoint, Object result)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Logger--&gt;返回通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，结果：&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(* com.hang.aop.annotation.CalculatorImpl.*(..))&quot;, throwing = &quot;ex&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingMethod</span><span class="params">(JoinPoint joinPoint, Throwable ex)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Logger--&gt;异常通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，异常：&quot;</span>+ex);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.hang.aop.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">aroundMethod</span><span class="params">(ProceedingJoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行之前&quot;</span>);</span><br><span class="line">            <span class="comment">//目标对象（连接点）方法的执行</span></span><br><span class="line">            result = joinPoint.proceed();</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法返回值之后&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法出现异常时&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行完毕&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Spring的配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        基于注解的AOP的实现：</span></span><br><span class="line"><span class="comment">        1、将目标对象和切面交给IOC容器管理（注解+扫描）</span></span><br><span class="line"><span class="comment">        2、开启AspectJ的自动代理，为目标对象自动生成代理</span></span><br><span class="line"><span class="comment">        3、将切面类通过注解@Aspect标识</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.hang.aop.annotation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(CalculatorTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> ac.getBean( Calculator.class);</span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> calculator.add(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;执行成功:&quot;</span>+add);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><h4 id="各种通知"><a href="#各种通知" class="headerlink" title="各种通知"></a>各种通知</h4><ul><li>前置通知：使用@Before注解标识，在被代理的目标方法<strong>前</strong>执行</li><li>返回通知：使用@AfterReturning注解标识，在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）</li><li>异常通知：使用@AfterThrowing注解标识，在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）</li><li>后置通知：使用@After注解标识，在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）</li><li>环绕通知：使用@Around注解标识，使用try…catch…finally结构围绕<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所有位置</li></ul><h4 id="切入点表达式语法"><a href="#切入点表达式语法" class="headerlink" title="切入点表达式语法"></a>切入点表达式语法</h4><p><strong>①作用</strong></p><img src="/2023/09/24/Spring/img024.png" class title="images"><p><strong>②语法细节</strong></p><ul><li><p>用*号代替“权限修饰符”和“返回值”部分表示“权限修饰符”和“返回值”不限</p></li><li><p>在包名的部分，一个“*”号只能代表包的层次结构中的一层，表示这一层是任意的。</p><ul><li>例如：*.Hello匹配com.Hello，不匹配com.hang.Hello</li></ul></li><li><p>在包名的部分，使用“*..”表示包名任意、包的层次深度任意</p></li><li><p>在类名的部分，类名部分整体用*号代替，表示类名任意</p></li><li><p>在类名的部分，可以使用*号代替类名的一部分</p><ul><li>例如：*Service匹配所有名称以Service结尾的类或接口</li></ul></li><li><p>在方法名部分，可以使用*号表示方法名任意</p></li><li><p>在方法名部分，可以使用*号代替方法名的一部分</p><ul><li>例如：*Operation匹配所有方法名以Operation结尾的方法</li></ul></li><li><p>在方法参数列表部分，使用(..)表示参数列表任意</p></li><li><p>在方法参数列表部分，使用(int,..)表示参数列表以一个int类型的参数开头</p></li><li><p>在方法参数列表部分，基本数据类型和对应的包装类型是不一样的</p><ul><li>切入点表达式中使用 int 和实际方法中 Integer 是不匹配的</li></ul></li><li><p>在方法返回值部分，如果想要明确指定一个返回值类型，那么必须同时写明权限修饰符</p><ul><li>例如：execution(public int <em>..<em>Service.</em>(.., int))正确<br>例如：execution(</em> int *..<em>Service.</em>(.., int))错误</li></ul></li></ul><img src="/2023/09/24/Spring/img025.png" class title="images"><h4 id="重用切入点表达式"><a href="#重用切入点表达式" class="headerlink" title="重用切入点表达式"></a>重用切入点表达式</h4><p><strong>①声明</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.hang.aop.annotation.*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>②在同一个切面中使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>③在不同切面中使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;com.hang.aop.CommonPointCut.pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取通知的相关信息"><a href="#获取通知的相关信息" class="headerlink" title="获取通知的相关信息"></a>获取通知的相关信息</h4><p><strong>①获取连接点信息</strong></p><p>获取连接点信息可以在通知方法的参数位置设置JoinPoint类型的形参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;execution(public int com.hang.aop.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="comment">//获取连接点的签名信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="comment">//获取目标方法到的实参信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>②获取目标方法的返回值</strong></p><p>@AfterReturning中的属性returning，用来将通知方法的某个形参，接收目标方法的返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(value = &quot;execution(* com.hang.aop.annotation.CalculatorImpl.*(..))&quot;, returning = &quot;result&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningMethod</span><span class="params">(JoinPoint joinPoint, Object result)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;返回通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，结果：&quot;</span>+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>③获取目标方法的异常</strong></p><p>@AfterThrowing中的属性throwing，用来将通知方法的某个形参，接收目标方法的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;execution(* com.hang.aop.annotation.CalculatorImpl.*(..))&quot;, throwing = &quot;ex&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingMethod</span><span class="params">(JoinPoint joinPoint, Throwable ex)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;异常通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，异常：&quot;</span>+ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;execution(* com.hang.aop.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">aroundMethod</span><span class="params">(ProceedingJoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行之前&quot;</span>);</span><br><span class="line">        <span class="comment">//目标方法的执行，目标方法的返回值一定要返回给外界调用者</span></span><br><span class="line">        result = joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法返回值之后&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法出现异常时&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="切面的优先级"><a href="#切面的优先级" class="headerlink" title="切面的优先级"></a>切面的优先级</h4><p>相同目标方法上同时存在多个切面时，切面的优先级控制切面的<strong>内外嵌套</strong>顺序。</p><ul><li>优先级高的切面：外面</li><li>优先级低的切面：里面</li></ul><p>使用@Order注解可以控制切面的优先级：</p><ul><li>@Order(较小的数)：优先级高</li><li>@Order(较大的数)：优先级低</li></ul><img src="/2023/09/24/Spring/img026.png" class title="images"><h3 id="基于XML的AOP"><a href="#基于XML的AOP" class="headerlink" title="基于XML的AOP"></a>基于XML的AOP</h3><h4 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h4><p>参考基于注解的AOP环境</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.hang.aop.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;loggerAspect&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointCut&quot;</span> </span></span><br><span class="line"><span class="tag">                   <span class="attr">expression</span>=<span class="string">&quot;execution(* com.hang.aop.xml.CalculatorImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;afterMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturningMethod&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;afterThrowingMethod&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;ex&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;aroundMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="单元测试：JUnit"><a href="#单元测试：JUnit" class="headerlink" title="单元测试：JUnit"></a>单元测试：JUnit</h2><p>在之前的测试方法中，几乎都能看到以下的两行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;xxx.xml&quot;</span>);</span><br><span class="line"><span class="type">Xxxx</span> <span class="variable">xxx</span> <span class="operator">=</span> context.getBean(Xxxx.class);</span><br></pre></td></tr></table></figure><p>这两行代码的作用是创建Spring容器，最终获取到对象，但是每次测试都需要重复编写。针对上述问题，我们需要的是程序能自动帮我们创建容器。我们都知道JUnit无法知晓我们是否使用了 Spring 框架，更不用说帮我们创建 Spring 容器了。Spring提供了一个运行器，可以读取配置文件（或注解）来创建容器。我们只需要告诉它配置文件位置就可以了。这样一来，我们通过Spring整合JUnit可以使程序创建spring容器了</p><h3 id="整合JUnit5"><a href="#整合JUnit5" class="headerlink" title="整合JUnit5"></a>整合JUnit5</h3><h4 id="搭建子模块"><a href="#搭建子模块" class="headerlink" title="搭建子模块"></a>搭建子模块</h4><p>搭建spring-junit模块</p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring对junit的支持相关依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--log4j2的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h4><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.hang.spring6.bean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>copy日志文件：log4j2.xml</p><h4 id="添加java类"><a href="#添加java类" class="headerlink" title="添加java类"></a>添加java类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run user&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.hang.spring6.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.ExtendWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit.jupiter.SpringExtension;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">//两种方式均可</span></span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="comment">//@ExtendWith(SpringExtension.class)</span></span><br><span class="line"><span class="comment">//@ContextConfiguration(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJUnit5Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUser</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整合JUnit4"><a href="#整合JUnit4" class="headerlink" title="整合JUnit4"></a>整合JUnit4</h3><p>JUnit4在公司也会经常用到，在此也学习一下</p><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.hang.spring6.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJUnit4Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUser</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</p><h4 id="准备工作-2"><a href="#准备工作-2" class="headerlink" title="准备工作"></a>准备工作</h4><p><strong>①搭建子模块</strong></p><p>搭建子模块：spring-jdbc-tx</p><p><strong>②加入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring jdbc  Spring 持久化层支持jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>③创建jdbc.properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p><strong>④配置Spring的配置文件</strong></p><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 JdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 装配数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>⑤准备数据库与测试表</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE `spring`;</span><br><span class="line"></span><br><span class="line">use `spring`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `spring` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(<span class="number">20</span>) DEFAULT NULL COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  `sex` varchar(<span class="number">2</span>) DEFAULT NULL COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="title function_">KEY</span> <span class="params">(`id`)</span></span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br></pre></td></tr></table></figure><h4 id="实现CURD"><a href="#实现CURD" class="headerlink" title="实现CURD"></a>实现CURD</h4><h5 id="①装配-JdbcTemplate"><a href="#①装配-JdbcTemplate" class="headerlink" title="①装配 JdbcTemplate"></a>①装配 JdbcTemplate</h5><p><strong>创建测试类，整合JUnit，注入JdbcTemplate</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTemplateTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="②测试增删改功能"><a href="#②测试增删改功能" class="headerlink" title="②测试增删改功能"></a>②测试增删改功能</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//测试增删改功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//添加功能</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_emp values(null,?,?,?)&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//修改功能</span></span><br><span class="line"><span class="comment">//String sql = &quot;update t_emp set name=? where id=?&quot;;</span></span><br><span class="line">    <span class="comment">//int result = jdbcTemplate.update(sql, &quot;张三hang&quot;, 1);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除功能</span></span><br><span class="line"><span class="comment">//String sql = &quot;delete from t_emp where id=?&quot;;</span></span><br><span class="line"><span class="comment">//int result = jdbcTemplate.update(sql, 1);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="③查询数据返回对象"><a href="#③查询数据返回对象" class="headerlink" title="③查询数据返回对象"></a>③查询数据返回对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成get和set方法</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Emp&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;/&#x27;</span><span class="string">&#x27; +</span></span><br><span class="line"><span class="string">                &quot;, age=&quot; + age +</span></span><br><span class="line"><span class="string">                &quot;, sex=&#x27;</span><span class="string">&quot; + sex + &#x27;/&#x27;&#x27; +</span></span><br><span class="line"><span class="string">                &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询：返回对象</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectObject</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//写法一</span></span><br><span class="line"><span class="comment">//        String sql = &quot;select * from t_emp where id=?&quot;;</span></span><br><span class="line"><span class="comment">//        Emp empResult = jdbcTemplate.queryForObject(sql,</span></span><br><span class="line"><span class="comment">//                (rs, rowNum) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//                    Emp emp = new Emp();</span></span><br><span class="line"><span class="comment">//                    emp.setId(rs.getInt(&quot;id&quot;));</span></span><br><span class="line"><span class="comment">//                    emp.setName(rs.getString(&quot;name&quot;));</span></span><br><span class="line"><span class="comment">//                    emp.setAge(rs.getInt(&quot;age&quot;));</span></span><br><span class="line"><span class="comment">//                    emp.setSex(rs.getString(&quot;sex&quot;));</span></span><br><span class="line"><span class="comment">//                    return emp;</span></span><br><span class="line"><span class="comment">//                &#125;, 1);</span></span><br><span class="line"><span class="comment">//        System.out.println(empResult);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//写法二</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_emp where id=?&quot;</span>;</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql,</span><br><span class="line">                  <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class),<span class="number">1</span>);</span><br><span class="line">    System.out.println(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="④查询数据返回list集合"><a href="#④查询数据返回list集合" class="headerlink" title="④查询数据返回list集合"></a>④查询数据返回list集合</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//查询多条数据为一个list集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_emp&quot;</span>;</span><br><span class="line">    List&lt;Emp&gt; list = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class));</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="⑤查询返回单个的值"><a href="#⑤查询返回单个的值" class="headerlink" title="⑤查询返回单个的值"></a>⑤查询返回单个的值</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//查询单行单列的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(id) from t_emp&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明式事务概念"><a href="#声明式事务概念" class="headerlink" title="声明式事务概念"></a>声明式事务概念</h3><h4 id="声明式事务基本概念"><a href="#声明式事务基本概念" class="headerlink" title="声明式事务基本概念"></a>声明式事务基本概念</h4><h5 id="①什么是事务"><a href="#①什么是事务" class="headerlink" title="①什么是事务"></a>①什么是事务</h5><p>数据库事务( transaction)是访问并可能操作各种数据项的一个数据库操作序列，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。事务由事务开始与事务结束之间执行的全部数据库操作组成。</p><h5 id="②事务的特性"><a href="#②事务的特性" class="headerlink" title="②事务的特性"></a>②事务的特性</h5><p><strong>A：原子性(Atomicity)</strong></p><p>一个事务(transaction)中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p><p><strong>C：一致性(Consistency)</strong></p><p>事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。</p><p>如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态。</p><p>如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。</p><p><strong>I：隔离性(Isolation)</strong></p><p>指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。</p><p><strong>D：持久性(Durability)</strong></p><p>指的是只要事务成功结束，它对数据库所做的更新就必须保存下来。即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。</p><h4 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h4><p>事务功能的相关操作全部通过自己编写代码来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ...;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开启事务：关闭事务的自动提交</span></span><br><span class="line">    conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 核心操作</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    conn.commit();</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 回滚事务</span></span><br><span class="line">    conn.rollBack();</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放数据库连接</span></span><br><span class="line">    conn.close();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编程式的实现方式存在缺陷：</p><ul><li>细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己来完成，比较繁琐。</li><li>代码复用性不高：如果没有有效抽取出来，每次实现功能都需要自己编写代码，代码就没有得到复用。</li></ul><h4 id="7-2-3、声明式事务"><a href="#7-2-3、声明式事务" class="headerlink" title="7.2.3、声明式事务"></a>7.2.3、声明式事务</h4><p>既然事务控制的代码有规律可循，代码的结构基本是确定的，所以框架就可以将固定模式的代码抽取出来，进行相关的封装。</p><p>封装起来后，我们只需要在配置文件中进行简单的配置即可完成操作。</p><ul><li>好处1：提高开发效率</li><li>好处2：消除了冗余的代码</li><li>好处3：框架会综合考虑相关领域中在实际开发环境下有可能遇到的各种问题，进行了健壮性、性能等各个方面的优化</li></ul><p>所以，我们可以总结下面两个概念：</p><ul><li><strong>编程式</strong>：<strong>自己写代码</strong>实现功能</li><li><strong>声明式</strong>：通过<strong>配置</strong>让<strong>框架</strong>实现功能</li></ul><h3 id="基于注解的声明式事务"><a href="#基于注解的声明式事务" class="headerlink" title="基于注解的声明式事务"></a>基于注解的声明式事务</h3><h4 id="准备工作-3"><a href="#准备工作-3" class="headerlink" title="准备工作"></a>准备工作</h4><p><strong>①添加配置</strong></p><p>在beans.xml添加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.hang.spring6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>②创建表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_book` (</span><br><span class="line">  `book_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `book_name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;图书名称&#x27;</span>,</span><br><span class="line">  `price` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;价格&#x27;</span>,</span><br><span class="line">  `stock` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;库存（无符号）&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`book_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_book`(`book_id`,`book_name`,`price`,`stock`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;斗破苍穹&#x27;</span>,<span class="number">80</span>,<span class="number">100</span>),(<span class="number">2</span>,<span class="string">&#x27;斗罗大陆&#x27;</span>,<span class="number">50</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_user` (</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `balance` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;余额（无符号）&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`user_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_user`(`user_id`,`username`,`balance`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure><p><strong>③创建组件</strong></p><p>创建BookController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span>&#123;</span><br><span class="line">        bookService.buyBook(bookId, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建接口BookService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.service;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建实现类BookServiceImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.service.impl;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">        <span class="comment">//查询图书的价格</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">        <span class="comment">//更新图书的库存</span></span><br><span class="line">        bookDao.updateStock(bookId);</span><br><span class="line">        <span class="comment">//更新用户的余额</span></span><br><span class="line">        bookDao.updateBalance(userId, price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建接口BookDao：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.dao;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    Integer <span class="title function_">getPriceByBookId</span><span class="params">(Integer bookId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateStock</span><span class="params">(Integer bookId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateBalance</span><span class="params">(Integer userId, Integer price)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建实现类BookDaoImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.dao.impl;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getPriceByBookId</span><span class="params">(Integer bookId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select price from t_book where book_id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, Integer.class, bookId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateStock</span><span class="params">(Integer bookId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_book set stock = stock - 1 where book_id = ?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, bookId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBalance</span><span class="params">(Integer userId, Integer price)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_user set balance = balance - ? where user_id = ?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, price, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试无事务情况"><a href="#测试无事务情况" class="headerlink" title="测试无事务情况"></a>测试无事务情况</h4><p><strong>①创建测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxByAnnotationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookController bookController;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBuyBook</span><span class="params">()</span>&#123;</span><br><span class="line">        bookController.buyBook(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>②模拟场景</strong></p><p>用户购买图书，先查询图书的价格，再更新图书的库存和用户的余额</p><p>假设用户id为1的用户，购买id为1的图书</p><p>用户余额为50，而图书价格为80</p><p>购买图书之后，用户的余额为-30，数据库中余额字段设置了无符号，因此无法将-30插入到余额字段</p><p>此时执行sql语句会抛出SQLException</p><p><strong>③观察结果</strong></p><p>因为没有添加事务，图书的库存更新了，但是用户的余额没有更新</p><p>显然这样的结果是错误的，购买图书是一个完整的功能，更新库存和更新余额要么都成功要么都失败</p><h4 id="加入事务"><a href="#加入事务" class="headerlink" title="加入事务"></a>加入事务</h4><h5 id="①添加事务配置"><a href="#①添加事务配置" class="headerlink" title="①添加事务配置"></a>①添加事务配置</h5><p>在spring配置文件中引入tx命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Spring的配置文件中添加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    开启事务的注解驱动</span></span><br><span class="line"><span class="comment">    通过注解@Transactional所标识的方法或标识的类中所有的方法，都会被事务管理器管理事务</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就是这个默认值，则可以省略这个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h5 id="②添加事务注解"><a href="#②添加事务注解" class="headerlink" title="②添加事务注解"></a>②添加事务注解</h5><p>因为service层表示业务逻辑层，一个方法表示一个完成的功能，因此处理事务一般在service层处理</p><p><strong>在BookServiceImpl的buybook()添加注解@Transactional</strong></p><h5 id="③观察结果"><a href="#③观察结果" class="headerlink" title="③观察结果"></a>③观察结果</h5><p>由于使用了Spring的声明式事务，更新库存和更新余额都没有执行</p><h4 id="Transactional注解标识的位置"><a href="#Transactional注解标识的位置" class="headerlink" title="@Transactional注解标识的位置"></a>@Transactional注解标识的位置</h4><p>@Transactional标识在方法上，则只会影响该方法</p><p>@Transactional标识的类上，则会影响类中所有的方法</p><h4 id="事务属性：只读"><a href="#事务属性：只读" class="headerlink" title="事务属性：只读"></a>事务属性：只读</h4><p><strong>①介绍</strong></p><p>对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作不涉及写操作。这样数据库就能够针对查询操作来进行优化。</p><p><strong>②使用方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">    <span class="comment">//查询图书的价格</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">    <span class="comment">//更新图书的库存</span></span><br><span class="line">    bookDao.updateStock(bookId);</span><br><span class="line">    <span class="comment">//更新用户的余额</span></span><br><span class="line">    bookDao.updateBalance(userId, price);</span><br><span class="line">    <span class="comment">//System.out.println(1/0);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>③注意</strong></p><p>对增删改操作设置只读会抛出下面异常：</p><p>Caused by: java.sql.SQLException: Connection is read-only. Queries leading to data modification are not allowed</p><h4 id="事务属性：超时"><a href="#事务属性：超时" class="headerlink" title="事务属性：超时"></a>事务属性：超时</h4><p><strong>①介绍</strong></p><p>事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间占用资源，大概率是因为程序运行出现了问题（可能是Java程序或MySQL数据库或网络连接等等）。此时这个很可能出问题的程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行。</p><p>概括来说就是一句话：超时回滚，释放资源。</p><p><strong>②使用方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//超时时间单位秒</span></span><br><span class="line"><span class="meta">@Transactional(timeout = 3)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询图书的价格</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">    <span class="comment">//更新图书的库存</span></span><br><span class="line">    bookDao.updateStock(bookId);</span><br><span class="line">    <span class="comment">//更新用户的余额</span></span><br><span class="line">    bookDao.updateBalance(userId, price);</span><br><span class="line">    <span class="comment">//System.out.println(1/0);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>③观察结果</strong></p><p>执行过程中抛出异常：</p><p>org.springframework.transaction.<strong>TransactionTimedOutException</strong>: Transaction timed out: deadline was Fri Jun 04 16:25:39 CST 2022</p><h4 id="事务属性：回滚策略"><a href="#事务属性：回滚策略" class="headerlink" title="事务属性：回滚策略"></a>事务属性：回滚策略</h4><p><strong>①介绍</strong></p><p>声明式事务默认只针对运行时异常回滚，编译时异常不回滚。</p><p>可以通过@Transactional中相关属性设置回滚策略</p><ul><li><p>rollbackFor属性：需要设置一个Class类型的对象</p></li><li><p>rollbackForClassName属性：需要设置一个字符串类型的全类名</p></li><li><p>noRollbackFor属性：需要设置一个Class类型的对象</p></li><li><p>rollbackFor属性：需要设置一个字符串类型的全类名</p></li></ul><p><strong>②使用方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(noRollbackFor = ArithmeticException.class)</span></span><br><span class="line"><span class="comment">//@Transactional(noRollbackForClassName = &quot;java.lang.ArithmeticException&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">    <span class="comment">//查询图书的价格</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">    <span class="comment">//更新图书的库存</span></span><br><span class="line">    bookDao.updateStock(bookId);</span><br><span class="line">    <span class="comment">//更新用户的余额</span></span><br><span class="line">    bookDao.updateBalance(userId, price);</span><br><span class="line">    System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>③观察结果</strong></p><p>虽然购买图书功能中出现了数学运算异常（ArithmeticException），但是我们设置的回滚策略是，当出现ArithmeticException不发生回滚，因此购买图书的操作正常执行</p><h4 id="事务属性：隔离级别"><a href="#事务属性：隔离级别" class="headerlink" title="事务属性：隔离级别"></a>事务属性：隔离级别</h4><p><strong>①介绍</strong></p><p>数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。一个事务与其他事务隔离的程度称为隔离级别。SQL标准中规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。</p><p>隔离级别一共有四种：</p><ul><li><p>读未提交：READ UNCOMMITTED</p><p>允许Transaction01读取Transaction02未提交的修改。</p></li><li><p>读已提交：READ COMMITTED、</p><p>要求Transaction01只能读取Transaction02已提交的修改。</p></li><li><p>可重复读：REPEATABLE READ</p><p>确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新。</p></li><li><p>串行化：SERIALIZABLE</p><p>确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。</p></li></ul><p>各个隔离级别解决并发问题的能力见下表：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>有</td><td>有</td><td>有</td></tr><tr><td>READ COMMITTED</td><td>无</td><td>有</td><td>有</td></tr><tr><td>REPEATABLE READ</td><td>无</td><td>无</td><td>有</td></tr><tr><td>SERIALIZABLE</td><td>无</td><td>无</td><td>无</td></tr></tbody></table><p>各种数据库产品对事务隔离级别的支持程度：</p><table><thead><tr><th>隔离级别</th><th>Oracle</th><th>MySQL</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>×</td><td>√</td></tr><tr><td>READ COMMITTED</td><td>√(默认)</td><td>√</td></tr><tr><td>REPEATABLE READ</td><td>×</td><td>√(默认)</td></tr><tr><td>SERIALIZABLE</td><td>√</td><td>√</td></tr></tbody></table><p><strong>②使用方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(isolation = Isolation.DEFAULT)</span><span class="comment">//使用数据库默认的隔离级别</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_UNCOMMITTED)</span><span class="comment">//读未提交</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED)</span><span class="comment">//读已提交</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.REPEATABLE_READ)</span><span class="comment">//可重复读</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.SERIALIZABLE)</span><span class="comment">//串行化</span></span><br></pre></td></tr></table></figure><h4 id="事务属性：传播行为"><a href="#事务属性：传播行为" class="headerlink" title="事务属性：传播行为"></a>事务属性：传播行为</h4><p><strong>①介绍</strong></p><p>什么是事务的传播行为？</p><p>在service类中有a()方法和b()方法，a()方法上有事务，b()方法上也有事务，当a()方法执行过程中调用了b()方法，事务是如何传递的？合并到一个事务里？还是开启一个新的事务？这就是事务传播行为。</p><p>一共有七种传播行为：</p><ul><li>REQUIRED：支持当前事务，如果不存在就新建一个(默认)<strong>【没有就新建，有就加入】</strong></li><li>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行<strong>【有就加入，没有就不管了】</strong></li><li>MANDATORY：必须运行在一个事务中，如果当前没有事务正在发生，将抛出一个异常<strong>【有就加入，没有就抛异常】</strong></li><li>REQUIRES_NEW：开启一个新的事务，如果一个事务已经存在，则将这个存在的事务挂起<strong>【不管有没有，直接开启一个新事务，开启的新事务和之前的事务不存在嵌套关系，之前事务被挂起】</strong></li><li>NOT_SUPPORTED：以非事务方式运行，如果有事务存在，挂起当前事务<strong>【不支持事务，存在就挂起】</strong></li><li>NEVER：以非事务方式运行，如果有事务存在，抛出异常<strong>【不支持事务，存在就抛异常】</strong></li><li>NESTED：如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中。被嵌套的事务可以独立于外层事务进行提交或回滚。如果外层事务不存在，行为就像REQUIRED一样。<strong>【有事务的话，就在这个事务里再嵌套一个完全独立的事务，嵌套的事务可以独立的提交和回滚。没有事务就和REQUIRED一样。】</strong></li></ul><p><strong>②测试</strong></p><p>创建接口CheckoutService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CheckoutService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(Integer[] bookIds, Integer userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建实现类CheckoutServiceImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckoutServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CheckoutService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="comment">//一次购买多本图书</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(Integer[] bookIds, Integer userId)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Integer bookId : bookIds) &#123;</span><br><span class="line">            bookService.buyBook(bookId, userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在BookController中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CheckoutService checkoutService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(Integer[] bookIds, Integer userId)</span>&#123;</span><br><span class="line">    checkoutService.checkout(bookIds, userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在数据库中将用户的余额修改为100元</p><p><strong>③观察结果</strong></p><p>可以通过@Transactional中的propagation属性设置事务传播行为</p><p>修改BookServiceImpl中buyBook()上，注解@Transactional的propagation属性</p><p>@Transactional(propagation &#x3D; Propagation.REQUIRED)，默认情况，表示如果当前线程上有已经开启的事务可用，那么就在这个事务中运行。经过观察，购买图书的方法buyBook()在checkout()中被调用，checkout()上有事务注解，因此在此事务中执行。所购买的两本图书的价格为80和50，而用户的余额为100，因此在购买第二本图书时余额不足失败，导致整个checkout()回滚，即只要有一本书买不了，就都买不了</p><p>@Transactional(propagation &#x3D; Propagation.REQUIRES_NEW)，表示不管当前线程上是否有已经开启的事务，都要开启新事务。同样的场景，每次购买图书都是在buyBook()的事务中执行，因此第一本图书购买成功，事务结束，第二本图书购买失败，只在第二次的buyBook()中回滚，购买第一本图书不受影响，即能买几本就买几本。</p><h4 id="全注解配置事务"><a href="#全注解配置事务" class="headerlink" title="全注解配置事务"></a>全注解配置事务</h4><p><strong>①添加配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hang.spring6.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.hang.spring6&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&amp;useSSL=false&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;jdbcTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">dataSourceTransactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        dataSourceTransactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> dataSourceTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>②测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.hang.spring6.config.SpringConfig;</span><br><span class="line"><span class="keyword">import</span> com.hang.spring6.controller.BookController;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxByAllAnnotationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTxAllAnnotation</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookController</span> <span class="variable">accountService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;bookController&quot;</span>, BookController.class);</span><br><span class="line">        accountService.buyBook(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于XML的声明式事务"><a href="#基于XML的声明式事务" class="headerlink" title="基于XML的声明式事务"></a>基于XML的声明式事务</h3><h4 id="场景模拟-1"><a href="#场景模拟-1" class="headerlink" title="场景模拟"></a>场景模拟</h4><p>参考基于注解的声明式事务</p><h4 id="修改Spring配置文件"><a href="#修改Spring配置文件" class="headerlink" title="修改Spring配置文件"></a>修改Spring配置文件</h4><p>将Spring配置文件中去掉tx:annotation-driven 标签，并添加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务通知和切入点表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.hang.spring.tx.xml.service.impl.*.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- tx:advice标签：配置事务通知 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id属性：给事务通知标签设置唯一标识，便于引用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- transaction-manager属性：关联事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tx:method标签：配置具体的事务方法 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- name属性：指定方法名，可以使用星号代表多个字符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- read-only属性：设置只读属性 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rollback-for属性：设置回滚的异常 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- no-rollback-for属性：设置不回滚的异常 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- isolation属性：设置事务的隔离级别 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- timeout属性：设置事务的超时属性 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- propagation属性：设置事务的传播行为 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;save*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：基于xml实现的声明式事务，必须引入aspectJ的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo引入本地图片</title>
      <link href="/2023/09/23/Hexo%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/"/>
      <url>/2023/09/23/Hexo%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><p>第一步：修改项目根目录下的<code>_config.yml</code>文件参数<code>post_asset_folder</code>值为<code>true</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开始使用本地静态资源</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>第二步：安装插件<code>hexo-asset-image</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在项目根目录下执行</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">https://github.com/xcodebuild/hexo-asset-image.git</span> <span class="string">--save</span></span><br></pre></td></tr></table></figure><p>完成上述配置后，在使用命令<code>hexo new post</code>新建文章时，将会在<code>source/_posts</code>目录下创建一个与文章同名的目录。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">new</span> <span class="string">post</span> <span class="string">&quot;测试文章&quot;</span></span><br></pre></td></tr></table></figure><p>复制</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|____scaffolds</span></span><br><span class="line"><span class="string">|____source</span></span><br><span class="line"><span class="string">|</span> <span class="string">|_____posts</span></span><br><span class="line"><span class="string">|</span> <span class="string">|</span> <span class="string">|____测试文章.md</span></span><br><span class="line"><span class="string">|</span> <span class="string">|</span> <span class="string">|____测试文章</span> <span class="comment"># 与文章同名的目录，用于保存在文章中引入的本地图片资源</span></span><br><span class="line"><span class="string">|____themes</span></span><br></pre></td></tr></table></figure><p>复制</p><p>如上，新建“测试文章.md”时，将会在<code>_posts</code>目录下创建同名文件夹“测试文章”，在“测试文章.md”文件中需要引入的图片文件只要放在目录“测试文章”下即可。 图片引用方式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引用图片的时候一定要带上目录名称作为路径</span></span><br><span class="line"><span class="type">![</span><span class="string">本地图片](测试文章/本地图片.jpg)</span></span><br></pre></td></tr></table></figure><p>复制</p><p>使用该方式引用的图片既可以在本地预览，正式发布之后也能正常显示。</p><h2 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h2><p>显然，在hexo中引入图片的方式稍微有点繁琐，即：必须在<code>_post</code>目录下新建一个与文章同名的目录，然后将需要引用的图片文件都放在该目录中。 还好使用插件<code>hexo-asset-image</code>能够帮助我们自动创建图片目录（每次都会自动创建，如果在文章中不需要引用图片资源，可以手动将该目录删除）。</p><p>那么，为什么需要将文章引用的图片放置在与文章同名的目录呢？ 原因是：在执行<code>hexo g</code>命令的时候会将文章转换为一个<code>index.html</code>文件，该文件路径为<code>public/年/月/日/文章名称/index.html</code>，同时也会将文章中引用的图片文件拷贝到与<code>index.html</code>文件相同的目录中。 另外，转换后的<code>index.html</code>文件保存路径中有一个<code>年/月/日</code>，这是在项目配置文件<code>_config.yml</code>的<code>permalink</code>参数中配置的，默认值为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br></pre></td></tr></table></figure><p>————————————————<br>本文转载博主「编程随笔」文章:<br>原文链接：<a href="https://cloud.tencent.com/developer/article/2202579">在Hexo中引入本地图片的实现-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo魔改 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
